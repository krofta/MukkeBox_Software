
MukkeBox_STM32F030C6.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005dd0  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000b8  08005e90  08005e90  00015e90  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005f48  08005f48  00020010  2**0
                  CONTENTS
  4 .ARM          00000000  08005f48  08005f48  00020010  2**0
                  CONTENTS
  5 .preinit_array 00000000  08005f48  08005f48  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005f48  08005f48  00015f48  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005f4c  08005f4c  00015f4c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  08005f50  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002b0  20000010  08005f60  00020010  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  200002c0  08005f60  000202c0  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000e397  00000000  00000000  00020038  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000021a5  00000000  00000000  0002e3cf  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000fa0  00000000  00000000  00030578  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000e78  00000000  00000000  00031518  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0000d5d9  00000000  00000000  00032390  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000c70c  00000000  00000000  0003f969  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0004bed0  00000000  00000000  0004c075  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00097f45  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003a68  00000000  00000000  00097fc0  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000010 	.word	0x20000010
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08005e78 	.word	0x08005e78

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000014 	.word	0x20000014
 8000104:	08005e78 	.word	0x08005e78

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	; 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f8f0 	bl	80003f0 <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			; (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__divsi3>:
 800021c:	4603      	mov	r3, r0
 800021e:	430b      	orrs	r3, r1
 8000220:	d47f      	bmi.n	8000322 <__divsi3+0x106>
 8000222:	2200      	movs	r2, #0
 8000224:	0843      	lsrs	r3, r0, #1
 8000226:	428b      	cmp	r3, r1
 8000228:	d374      	bcc.n	8000314 <__divsi3+0xf8>
 800022a:	0903      	lsrs	r3, r0, #4
 800022c:	428b      	cmp	r3, r1
 800022e:	d35f      	bcc.n	80002f0 <__divsi3+0xd4>
 8000230:	0a03      	lsrs	r3, r0, #8
 8000232:	428b      	cmp	r3, r1
 8000234:	d344      	bcc.n	80002c0 <__divsi3+0xa4>
 8000236:	0b03      	lsrs	r3, r0, #12
 8000238:	428b      	cmp	r3, r1
 800023a:	d328      	bcc.n	800028e <__divsi3+0x72>
 800023c:	0c03      	lsrs	r3, r0, #16
 800023e:	428b      	cmp	r3, r1
 8000240:	d30d      	bcc.n	800025e <__divsi3+0x42>
 8000242:	22ff      	movs	r2, #255	; 0xff
 8000244:	0209      	lsls	r1, r1, #8
 8000246:	ba12      	rev	r2, r2
 8000248:	0c03      	lsrs	r3, r0, #16
 800024a:	428b      	cmp	r3, r1
 800024c:	d302      	bcc.n	8000254 <__divsi3+0x38>
 800024e:	1212      	asrs	r2, r2, #8
 8000250:	0209      	lsls	r1, r1, #8
 8000252:	d065      	beq.n	8000320 <__divsi3+0x104>
 8000254:	0b03      	lsrs	r3, r0, #12
 8000256:	428b      	cmp	r3, r1
 8000258:	d319      	bcc.n	800028e <__divsi3+0x72>
 800025a:	e000      	b.n	800025e <__divsi3+0x42>
 800025c:	0a09      	lsrs	r1, r1, #8
 800025e:	0bc3      	lsrs	r3, r0, #15
 8000260:	428b      	cmp	r3, r1
 8000262:	d301      	bcc.n	8000268 <__divsi3+0x4c>
 8000264:	03cb      	lsls	r3, r1, #15
 8000266:	1ac0      	subs	r0, r0, r3
 8000268:	4152      	adcs	r2, r2
 800026a:	0b83      	lsrs	r3, r0, #14
 800026c:	428b      	cmp	r3, r1
 800026e:	d301      	bcc.n	8000274 <__divsi3+0x58>
 8000270:	038b      	lsls	r3, r1, #14
 8000272:	1ac0      	subs	r0, r0, r3
 8000274:	4152      	adcs	r2, r2
 8000276:	0b43      	lsrs	r3, r0, #13
 8000278:	428b      	cmp	r3, r1
 800027a:	d301      	bcc.n	8000280 <__divsi3+0x64>
 800027c:	034b      	lsls	r3, r1, #13
 800027e:	1ac0      	subs	r0, r0, r3
 8000280:	4152      	adcs	r2, r2
 8000282:	0b03      	lsrs	r3, r0, #12
 8000284:	428b      	cmp	r3, r1
 8000286:	d301      	bcc.n	800028c <__divsi3+0x70>
 8000288:	030b      	lsls	r3, r1, #12
 800028a:	1ac0      	subs	r0, r0, r3
 800028c:	4152      	adcs	r2, r2
 800028e:	0ac3      	lsrs	r3, r0, #11
 8000290:	428b      	cmp	r3, r1
 8000292:	d301      	bcc.n	8000298 <__divsi3+0x7c>
 8000294:	02cb      	lsls	r3, r1, #11
 8000296:	1ac0      	subs	r0, r0, r3
 8000298:	4152      	adcs	r2, r2
 800029a:	0a83      	lsrs	r3, r0, #10
 800029c:	428b      	cmp	r3, r1
 800029e:	d301      	bcc.n	80002a4 <__divsi3+0x88>
 80002a0:	028b      	lsls	r3, r1, #10
 80002a2:	1ac0      	subs	r0, r0, r3
 80002a4:	4152      	adcs	r2, r2
 80002a6:	0a43      	lsrs	r3, r0, #9
 80002a8:	428b      	cmp	r3, r1
 80002aa:	d301      	bcc.n	80002b0 <__divsi3+0x94>
 80002ac:	024b      	lsls	r3, r1, #9
 80002ae:	1ac0      	subs	r0, r0, r3
 80002b0:	4152      	adcs	r2, r2
 80002b2:	0a03      	lsrs	r3, r0, #8
 80002b4:	428b      	cmp	r3, r1
 80002b6:	d301      	bcc.n	80002bc <__divsi3+0xa0>
 80002b8:	020b      	lsls	r3, r1, #8
 80002ba:	1ac0      	subs	r0, r0, r3
 80002bc:	4152      	adcs	r2, r2
 80002be:	d2cd      	bcs.n	800025c <__divsi3+0x40>
 80002c0:	09c3      	lsrs	r3, r0, #7
 80002c2:	428b      	cmp	r3, r1
 80002c4:	d301      	bcc.n	80002ca <__divsi3+0xae>
 80002c6:	01cb      	lsls	r3, r1, #7
 80002c8:	1ac0      	subs	r0, r0, r3
 80002ca:	4152      	adcs	r2, r2
 80002cc:	0983      	lsrs	r3, r0, #6
 80002ce:	428b      	cmp	r3, r1
 80002d0:	d301      	bcc.n	80002d6 <__divsi3+0xba>
 80002d2:	018b      	lsls	r3, r1, #6
 80002d4:	1ac0      	subs	r0, r0, r3
 80002d6:	4152      	adcs	r2, r2
 80002d8:	0943      	lsrs	r3, r0, #5
 80002da:	428b      	cmp	r3, r1
 80002dc:	d301      	bcc.n	80002e2 <__divsi3+0xc6>
 80002de:	014b      	lsls	r3, r1, #5
 80002e0:	1ac0      	subs	r0, r0, r3
 80002e2:	4152      	adcs	r2, r2
 80002e4:	0903      	lsrs	r3, r0, #4
 80002e6:	428b      	cmp	r3, r1
 80002e8:	d301      	bcc.n	80002ee <__divsi3+0xd2>
 80002ea:	010b      	lsls	r3, r1, #4
 80002ec:	1ac0      	subs	r0, r0, r3
 80002ee:	4152      	adcs	r2, r2
 80002f0:	08c3      	lsrs	r3, r0, #3
 80002f2:	428b      	cmp	r3, r1
 80002f4:	d301      	bcc.n	80002fa <__divsi3+0xde>
 80002f6:	00cb      	lsls	r3, r1, #3
 80002f8:	1ac0      	subs	r0, r0, r3
 80002fa:	4152      	adcs	r2, r2
 80002fc:	0883      	lsrs	r3, r0, #2
 80002fe:	428b      	cmp	r3, r1
 8000300:	d301      	bcc.n	8000306 <__divsi3+0xea>
 8000302:	008b      	lsls	r3, r1, #2
 8000304:	1ac0      	subs	r0, r0, r3
 8000306:	4152      	adcs	r2, r2
 8000308:	0843      	lsrs	r3, r0, #1
 800030a:	428b      	cmp	r3, r1
 800030c:	d301      	bcc.n	8000312 <__divsi3+0xf6>
 800030e:	004b      	lsls	r3, r1, #1
 8000310:	1ac0      	subs	r0, r0, r3
 8000312:	4152      	adcs	r2, r2
 8000314:	1a41      	subs	r1, r0, r1
 8000316:	d200      	bcs.n	800031a <__divsi3+0xfe>
 8000318:	4601      	mov	r1, r0
 800031a:	4152      	adcs	r2, r2
 800031c:	4610      	mov	r0, r2
 800031e:	4770      	bx	lr
 8000320:	e05d      	b.n	80003de <__divsi3+0x1c2>
 8000322:	0fca      	lsrs	r2, r1, #31
 8000324:	d000      	beq.n	8000328 <__divsi3+0x10c>
 8000326:	4249      	negs	r1, r1
 8000328:	1003      	asrs	r3, r0, #32
 800032a:	d300      	bcc.n	800032e <__divsi3+0x112>
 800032c:	4240      	negs	r0, r0
 800032e:	4053      	eors	r3, r2
 8000330:	2200      	movs	r2, #0
 8000332:	469c      	mov	ip, r3
 8000334:	0903      	lsrs	r3, r0, #4
 8000336:	428b      	cmp	r3, r1
 8000338:	d32d      	bcc.n	8000396 <__divsi3+0x17a>
 800033a:	0a03      	lsrs	r3, r0, #8
 800033c:	428b      	cmp	r3, r1
 800033e:	d312      	bcc.n	8000366 <__divsi3+0x14a>
 8000340:	22fc      	movs	r2, #252	; 0xfc
 8000342:	0189      	lsls	r1, r1, #6
 8000344:	ba12      	rev	r2, r2
 8000346:	0a03      	lsrs	r3, r0, #8
 8000348:	428b      	cmp	r3, r1
 800034a:	d30c      	bcc.n	8000366 <__divsi3+0x14a>
 800034c:	0189      	lsls	r1, r1, #6
 800034e:	1192      	asrs	r2, r2, #6
 8000350:	428b      	cmp	r3, r1
 8000352:	d308      	bcc.n	8000366 <__divsi3+0x14a>
 8000354:	0189      	lsls	r1, r1, #6
 8000356:	1192      	asrs	r2, r2, #6
 8000358:	428b      	cmp	r3, r1
 800035a:	d304      	bcc.n	8000366 <__divsi3+0x14a>
 800035c:	0189      	lsls	r1, r1, #6
 800035e:	d03a      	beq.n	80003d6 <__divsi3+0x1ba>
 8000360:	1192      	asrs	r2, r2, #6
 8000362:	e000      	b.n	8000366 <__divsi3+0x14a>
 8000364:	0989      	lsrs	r1, r1, #6
 8000366:	09c3      	lsrs	r3, r0, #7
 8000368:	428b      	cmp	r3, r1
 800036a:	d301      	bcc.n	8000370 <__divsi3+0x154>
 800036c:	01cb      	lsls	r3, r1, #7
 800036e:	1ac0      	subs	r0, r0, r3
 8000370:	4152      	adcs	r2, r2
 8000372:	0983      	lsrs	r3, r0, #6
 8000374:	428b      	cmp	r3, r1
 8000376:	d301      	bcc.n	800037c <__divsi3+0x160>
 8000378:	018b      	lsls	r3, r1, #6
 800037a:	1ac0      	subs	r0, r0, r3
 800037c:	4152      	adcs	r2, r2
 800037e:	0943      	lsrs	r3, r0, #5
 8000380:	428b      	cmp	r3, r1
 8000382:	d301      	bcc.n	8000388 <__divsi3+0x16c>
 8000384:	014b      	lsls	r3, r1, #5
 8000386:	1ac0      	subs	r0, r0, r3
 8000388:	4152      	adcs	r2, r2
 800038a:	0903      	lsrs	r3, r0, #4
 800038c:	428b      	cmp	r3, r1
 800038e:	d301      	bcc.n	8000394 <__divsi3+0x178>
 8000390:	010b      	lsls	r3, r1, #4
 8000392:	1ac0      	subs	r0, r0, r3
 8000394:	4152      	adcs	r2, r2
 8000396:	08c3      	lsrs	r3, r0, #3
 8000398:	428b      	cmp	r3, r1
 800039a:	d301      	bcc.n	80003a0 <__divsi3+0x184>
 800039c:	00cb      	lsls	r3, r1, #3
 800039e:	1ac0      	subs	r0, r0, r3
 80003a0:	4152      	adcs	r2, r2
 80003a2:	0883      	lsrs	r3, r0, #2
 80003a4:	428b      	cmp	r3, r1
 80003a6:	d301      	bcc.n	80003ac <__divsi3+0x190>
 80003a8:	008b      	lsls	r3, r1, #2
 80003aa:	1ac0      	subs	r0, r0, r3
 80003ac:	4152      	adcs	r2, r2
 80003ae:	d2d9      	bcs.n	8000364 <__divsi3+0x148>
 80003b0:	0843      	lsrs	r3, r0, #1
 80003b2:	428b      	cmp	r3, r1
 80003b4:	d301      	bcc.n	80003ba <__divsi3+0x19e>
 80003b6:	004b      	lsls	r3, r1, #1
 80003b8:	1ac0      	subs	r0, r0, r3
 80003ba:	4152      	adcs	r2, r2
 80003bc:	1a41      	subs	r1, r0, r1
 80003be:	d200      	bcs.n	80003c2 <__divsi3+0x1a6>
 80003c0:	4601      	mov	r1, r0
 80003c2:	4663      	mov	r3, ip
 80003c4:	4152      	adcs	r2, r2
 80003c6:	105b      	asrs	r3, r3, #1
 80003c8:	4610      	mov	r0, r2
 80003ca:	d301      	bcc.n	80003d0 <__divsi3+0x1b4>
 80003cc:	4240      	negs	r0, r0
 80003ce:	2b00      	cmp	r3, #0
 80003d0:	d500      	bpl.n	80003d4 <__divsi3+0x1b8>
 80003d2:	4249      	negs	r1, r1
 80003d4:	4770      	bx	lr
 80003d6:	4663      	mov	r3, ip
 80003d8:	105b      	asrs	r3, r3, #1
 80003da:	d300      	bcc.n	80003de <__divsi3+0x1c2>
 80003dc:	4240      	negs	r0, r0
 80003de:	b501      	push	{r0, lr}
 80003e0:	2000      	movs	r0, #0
 80003e2:	f000 f805 	bl	80003f0 <__aeabi_idiv0>
 80003e6:	bd02      	pop	{r1, pc}

080003e8 <__aeabi_idivmod>:
 80003e8:	2900      	cmp	r1, #0
 80003ea:	d0f8      	beq.n	80003de <__divsi3+0x1c2>
 80003ec:	e716      	b.n	800021c <__divsi3>
 80003ee:	4770      	bx	lr

080003f0 <__aeabi_idiv0>:
 80003f0:	4770      	bx	lr
 80003f2:	46c0      	nop			; (mov r8, r8)

080003f4 <__aeabi_cdrcmple>:
 80003f4:	4684      	mov	ip, r0
 80003f6:	1c10      	adds	r0, r2, #0
 80003f8:	4662      	mov	r2, ip
 80003fa:	468c      	mov	ip, r1
 80003fc:	1c19      	adds	r1, r3, #0
 80003fe:	4663      	mov	r3, ip
 8000400:	e000      	b.n	8000404 <__aeabi_cdcmpeq>
 8000402:	46c0      	nop			; (mov r8, r8)

08000404 <__aeabi_cdcmpeq>:
 8000404:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8000406:	f000 fef1 	bl	80011ec <__ledf2>
 800040a:	2800      	cmp	r0, #0
 800040c:	d401      	bmi.n	8000412 <__aeabi_cdcmpeq+0xe>
 800040e:	2100      	movs	r1, #0
 8000410:	42c8      	cmn	r0, r1
 8000412:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

08000414 <__aeabi_dcmpeq>:
 8000414:	b510      	push	{r4, lr}
 8000416:	f000 fe49 	bl	80010ac <__eqdf2>
 800041a:	4240      	negs	r0, r0
 800041c:	3001      	adds	r0, #1
 800041e:	bd10      	pop	{r4, pc}

08000420 <__aeabi_dcmplt>:
 8000420:	b510      	push	{r4, lr}
 8000422:	f000 fee3 	bl	80011ec <__ledf2>
 8000426:	2800      	cmp	r0, #0
 8000428:	db01      	blt.n	800042e <__aeabi_dcmplt+0xe>
 800042a:	2000      	movs	r0, #0
 800042c:	bd10      	pop	{r4, pc}
 800042e:	2001      	movs	r0, #1
 8000430:	bd10      	pop	{r4, pc}
 8000432:	46c0      	nop			; (mov r8, r8)

08000434 <__aeabi_dcmple>:
 8000434:	b510      	push	{r4, lr}
 8000436:	f000 fed9 	bl	80011ec <__ledf2>
 800043a:	2800      	cmp	r0, #0
 800043c:	dd01      	ble.n	8000442 <__aeabi_dcmple+0xe>
 800043e:	2000      	movs	r0, #0
 8000440:	bd10      	pop	{r4, pc}
 8000442:	2001      	movs	r0, #1
 8000444:	bd10      	pop	{r4, pc}
 8000446:	46c0      	nop			; (mov r8, r8)

08000448 <__aeabi_dcmpgt>:
 8000448:	b510      	push	{r4, lr}
 800044a:	f000 fe6b 	bl	8001124 <__gedf2>
 800044e:	2800      	cmp	r0, #0
 8000450:	dc01      	bgt.n	8000456 <__aeabi_dcmpgt+0xe>
 8000452:	2000      	movs	r0, #0
 8000454:	bd10      	pop	{r4, pc}
 8000456:	2001      	movs	r0, #1
 8000458:	bd10      	pop	{r4, pc}
 800045a:	46c0      	nop			; (mov r8, r8)

0800045c <__aeabi_dcmpge>:
 800045c:	b510      	push	{r4, lr}
 800045e:	f000 fe61 	bl	8001124 <__gedf2>
 8000462:	2800      	cmp	r0, #0
 8000464:	da01      	bge.n	800046a <__aeabi_dcmpge+0xe>
 8000466:	2000      	movs	r0, #0
 8000468:	bd10      	pop	{r4, pc}
 800046a:	2001      	movs	r0, #1
 800046c:	bd10      	pop	{r4, pc}
 800046e:	46c0      	nop			; (mov r8, r8)

08000470 <__aeabi_dadd>:
 8000470:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000472:	464f      	mov	r7, r9
 8000474:	4646      	mov	r6, r8
 8000476:	46d6      	mov	lr, sl
 8000478:	000c      	movs	r4, r1
 800047a:	0309      	lsls	r1, r1, #12
 800047c:	b5c0      	push	{r6, r7, lr}
 800047e:	0a49      	lsrs	r1, r1, #9
 8000480:	0f47      	lsrs	r7, r0, #29
 8000482:	005e      	lsls	r6, r3, #1
 8000484:	4339      	orrs	r1, r7
 8000486:	031f      	lsls	r7, r3, #12
 8000488:	0fdb      	lsrs	r3, r3, #31
 800048a:	469c      	mov	ip, r3
 800048c:	0065      	lsls	r5, r4, #1
 800048e:	0a7b      	lsrs	r3, r7, #9
 8000490:	0f57      	lsrs	r7, r2, #29
 8000492:	431f      	orrs	r7, r3
 8000494:	0d6d      	lsrs	r5, r5, #21
 8000496:	0fe4      	lsrs	r4, r4, #31
 8000498:	0d76      	lsrs	r6, r6, #21
 800049a:	46a1      	mov	r9, r4
 800049c:	00c0      	lsls	r0, r0, #3
 800049e:	46b8      	mov	r8, r7
 80004a0:	00d2      	lsls	r2, r2, #3
 80004a2:	1bab      	subs	r3, r5, r6
 80004a4:	4564      	cmp	r4, ip
 80004a6:	d07b      	beq.n	80005a0 <__aeabi_dadd+0x130>
 80004a8:	2b00      	cmp	r3, #0
 80004aa:	dd5f      	ble.n	800056c <__aeabi_dadd+0xfc>
 80004ac:	2e00      	cmp	r6, #0
 80004ae:	d000      	beq.n	80004b2 <__aeabi_dadd+0x42>
 80004b0:	e0a4      	b.n	80005fc <__aeabi_dadd+0x18c>
 80004b2:	003e      	movs	r6, r7
 80004b4:	4316      	orrs	r6, r2
 80004b6:	d100      	bne.n	80004ba <__aeabi_dadd+0x4a>
 80004b8:	e112      	b.n	80006e0 <__aeabi_dadd+0x270>
 80004ba:	1e5e      	subs	r6, r3, #1
 80004bc:	2e00      	cmp	r6, #0
 80004be:	d000      	beq.n	80004c2 <__aeabi_dadd+0x52>
 80004c0:	e19e      	b.n	8000800 <__aeabi_dadd+0x390>
 80004c2:	1a87      	subs	r7, r0, r2
 80004c4:	4643      	mov	r3, r8
 80004c6:	42b8      	cmp	r0, r7
 80004c8:	4180      	sbcs	r0, r0
 80004ca:	2501      	movs	r5, #1
 80004cc:	1ac9      	subs	r1, r1, r3
 80004ce:	4240      	negs	r0, r0
 80004d0:	1a09      	subs	r1, r1, r0
 80004d2:	020b      	lsls	r3, r1, #8
 80004d4:	d400      	bmi.n	80004d8 <__aeabi_dadd+0x68>
 80004d6:	e131      	b.n	800073c <__aeabi_dadd+0x2cc>
 80004d8:	0249      	lsls	r1, r1, #9
 80004da:	0a4e      	lsrs	r6, r1, #9
 80004dc:	2e00      	cmp	r6, #0
 80004de:	d100      	bne.n	80004e2 <__aeabi_dadd+0x72>
 80004e0:	e16e      	b.n	80007c0 <__aeabi_dadd+0x350>
 80004e2:	0030      	movs	r0, r6
 80004e4:	f001 fcde 	bl	8001ea4 <__clzsi2>
 80004e8:	0003      	movs	r3, r0
 80004ea:	3b08      	subs	r3, #8
 80004ec:	2b1f      	cmp	r3, #31
 80004ee:	dd00      	ble.n	80004f2 <__aeabi_dadd+0x82>
 80004f0:	e161      	b.n	80007b6 <__aeabi_dadd+0x346>
 80004f2:	2220      	movs	r2, #32
 80004f4:	0039      	movs	r1, r7
 80004f6:	1ad2      	subs	r2, r2, r3
 80004f8:	409e      	lsls	r6, r3
 80004fa:	40d1      	lsrs	r1, r2
 80004fc:	409f      	lsls	r7, r3
 80004fe:	430e      	orrs	r6, r1
 8000500:	429d      	cmp	r5, r3
 8000502:	dd00      	ble.n	8000506 <__aeabi_dadd+0x96>
 8000504:	e151      	b.n	80007aa <__aeabi_dadd+0x33a>
 8000506:	1b5d      	subs	r5, r3, r5
 8000508:	1c6b      	adds	r3, r5, #1
 800050a:	2b1f      	cmp	r3, #31
 800050c:	dd00      	ble.n	8000510 <__aeabi_dadd+0xa0>
 800050e:	e17c      	b.n	800080a <__aeabi_dadd+0x39a>
 8000510:	2120      	movs	r1, #32
 8000512:	1ac9      	subs	r1, r1, r3
 8000514:	003d      	movs	r5, r7
 8000516:	0030      	movs	r0, r6
 8000518:	408f      	lsls	r7, r1
 800051a:	4088      	lsls	r0, r1
 800051c:	40dd      	lsrs	r5, r3
 800051e:	1e79      	subs	r1, r7, #1
 8000520:	418f      	sbcs	r7, r1
 8000522:	0031      	movs	r1, r6
 8000524:	2207      	movs	r2, #7
 8000526:	4328      	orrs	r0, r5
 8000528:	40d9      	lsrs	r1, r3
 800052a:	2500      	movs	r5, #0
 800052c:	4307      	orrs	r7, r0
 800052e:	403a      	ands	r2, r7
 8000530:	2a00      	cmp	r2, #0
 8000532:	d009      	beq.n	8000548 <__aeabi_dadd+0xd8>
 8000534:	230f      	movs	r3, #15
 8000536:	403b      	ands	r3, r7
 8000538:	2b04      	cmp	r3, #4
 800053a:	d005      	beq.n	8000548 <__aeabi_dadd+0xd8>
 800053c:	1d3b      	adds	r3, r7, #4
 800053e:	42bb      	cmp	r3, r7
 8000540:	41bf      	sbcs	r7, r7
 8000542:	427f      	negs	r7, r7
 8000544:	19c9      	adds	r1, r1, r7
 8000546:	001f      	movs	r7, r3
 8000548:	020b      	lsls	r3, r1, #8
 800054a:	d400      	bmi.n	800054e <__aeabi_dadd+0xde>
 800054c:	e226      	b.n	800099c <__aeabi_dadd+0x52c>
 800054e:	1c6a      	adds	r2, r5, #1
 8000550:	4bc6      	ldr	r3, [pc, #792]	; (800086c <__aeabi_dadd+0x3fc>)
 8000552:	0555      	lsls	r5, r2, #21
 8000554:	0d6d      	lsrs	r5, r5, #21
 8000556:	429a      	cmp	r2, r3
 8000558:	d100      	bne.n	800055c <__aeabi_dadd+0xec>
 800055a:	e106      	b.n	800076a <__aeabi_dadd+0x2fa>
 800055c:	4ac4      	ldr	r2, [pc, #784]	; (8000870 <__aeabi_dadd+0x400>)
 800055e:	08ff      	lsrs	r7, r7, #3
 8000560:	400a      	ands	r2, r1
 8000562:	0753      	lsls	r3, r2, #29
 8000564:	0252      	lsls	r2, r2, #9
 8000566:	433b      	orrs	r3, r7
 8000568:	0b12      	lsrs	r2, r2, #12
 800056a:	e08e      	b.n	800068a <__aeabi_dadd+0x21a>
 800056c:	2b00      	cmp	r3, #0
 800056e:	d000      	beq.n	8000572 <__aeabi_dadd+0x102>
 8000570:	e0b8      	b.n	80006e4 <__aeabi_dadd+0x274>
 8000572:	1c6b      	adds	r3, r5, #1
 8000574:	055b      	lsls	r3, r3, #21
 8000576:	0d5b      	lsrs	r3, r3, #21
 8000578:	2b01      	cmp	r3, #1
 800057a:	dc00      	bgt.n	800057e <__aeabi_dadd+0x10e>
 800057c:	e130      	b.n	80007e0 <__aeabi_dadd+0x370>
 800057e:	1a87      	subs	r7, r0, r2
 8000580:	4643      	mov	r3, r8
 8000582:	42b8      	cmp	r0, r7
 8000584:	41b6      	sbcs	r6, r6
 8000586:	1acb      	subs	r3, r1, r3
 8000588:	4276      	negs	r6, r6
 800058a:	1b9e      	subs	r6, r3, r6
 800058c:	0233      	lsls	r3, r6, #8
 800058e:	d500      	bpl.n	8000592 <__aeabi_dadd+0x122>
 8000590:	e14c      	b.n	800082c <__aeabi_dadd+0x3bc>
 8000592:	003b      	movs	r3, r7
 8000594:	4333      	orrs	r3, r6
 8000596:	d1a1      	bne.n	80004dc <__aeabi_dadd+0x6c>
 8000598:	2200      	movs	r2, #0
 800059a:	2400      	movs	r4, #0
 800059c:	2500      	movs	r5, #0
 800059e:	e070      	b.n	8000682 <__aeabi_dadd+0x212>
 80005a0:	2b00      	cmp	r3, #0
 80005a2:	dc00      	bgt.n	80005a6 <__aeabi_dadd+0x136>
 80005a4:	e0e5      	b.n	8000772 <__aeabi_dadd+0x302>
 80005a6:	2e00      	cmp	r6, #0
 80005a8:	d100      	bne.n	80005ac <__aeabi_dadd+0x13c>
 80005aa:	e083      	b.n	80006b4 <__aeabi_dadd+0x244>
 80005ac:	4eaf      	ldr	r6, [pc, #700]	; (800086c <__aeabi_dadd+0x3fc>)
 80005ae:	42b5      	cmp	r5, r6
 80005b0:	d060      	beq.n	8000674 <__aeabi_dadd+0x204>
 80005b2:	2680      	movs	r6, #128	; 0x80
 80005b4:	0436      	lsls	r6, r6, #16
 80005b6:	4337      	orrs	r7, r6
 80005b8:	46b8      	mov	r8, r7
 80005ba:	2b38      	cmp	r3, #56	; 0x38
 80005bc:	dc00      	bgt.n	80005c0 <__aeabi_dadd+0x150>
 80005be:	e13e      	b.n	800083e <__aeabi_dadd+0x3ce>
 80005c0:	4643      	mov	r3, r8
 80005c2:	4313      	orrs	r3, r2
 80005c4:	001f      	movs	r7, r3
 80005c6:	1e7a      	subs	r2, r7, #1
 80005c8:	4197      	sbcs	r7, r2
 80005ca:	183f      	adds	r7, r7, r0
 80005cc:	4287      	cmp	r7, r0
 80005ce:	4180      	sbcs	r0, r0
 80005d0:	4240      	negs	r0, r0
 80005d2:	1809      	adds	r1, r1, r0
 80005d4:	020b      	lsls	r3, r1, #8
 80005d6:	d400      	bmi.n	80005da <__aeabi_dadd+0x16a>
 80005d8:	e0b0      	b.n	800073c <__aeabi_dadd+0x2cc>
 80005da:	4ba4      	ldr	r3, [pc, #656]	; (800086c <__aeabi_dadd+0x3fc>)
 80005dc:	3501      	adds	r5, #1
 80005de:	429d      	cmp	r5, r3
 80005e0:	d100      	bne.n	80005e4 <__aeabi_dadd+0x174>
 80005e2:	e0c3      	b.n	800076c <__aeabi_dadd+0x2fc>
 80005e4:	4aa2      	ldr	r2, [pc, #648]	; (8000870 <__aeabi_dadd+0x400>)
 80005e6:	087b      	lsrs	r3, r7, #1
 80005e8:	400a      	ands	r2, r1
 80005ea:	2101      	movs	r1, #1
 80005ec:	400f      	ands	r7, r1
 80005ee:	431f      	orrs	r7, r3
 80005f0:	0851      	lsrs	r1, r2, #1
 80005f2:	07d3      	lsls	r3, r2, #31
 80005f4:	2207      	movs	r2, #7
 80005f6:	431f      	orrs	r7, r3
 80005f8:	403a      	ands	r2, r7
 80005fa:	e799      	b.n	8000530 <__aeabi_dadd+0xc0>
 80005fc:	4e9b      	ldr	r6, [pc, #620]	; (800086c <__aeabi_dadd+0x3fc>)
 80005fe:	42b5      	cmp	r5, r6
 8000600:	d038      	beq.n	8000674 <__aeabi_dadd+0x204>
 8000602:	2680      	movs	r6, #128	; 0x80
 8000604:	0436      	lsls	r6, r6, #16
 8000606:	4337      	orrs	r7, r6
 8000608:	46b8      	mov	r8, r7
 800060a:	2b38      	cmp	r3, #56	; 0x38
 800060c:	dd00      	ble.n	8000610 <__aeabi_dadd+0x1a0>
 800060e:	e0dc      	b.n	80007ca <__aeabi_dadd+0x35a>
 8000610:	2b1f      	cmp	r3, #31
 8000612:	dc00      	bgt.n	8000616 <__aeabi_dadd+0x1a6>
 8000614:	e130      	b.n	8000878 <__aeabi_dadd+0x408>
 8000616:	001e      	movs	r6, r3
 8000618:	4647      	mov	r7, r8
 800061a:	3e20      	subs	r6, #32
 800061c:	40f7      	lsrs	r7, r6
 800061e:	46bc      	mov	ip, r7
 8000620:	2b20      	cmp	r3, #32
 8000622:	d004      	beq.n	800062e <__aeabi_dadd+0x1be>
 8000624:	2640      	movs	r6, #64	; 0x40
 8000626:	1af3      	subs	r3, r6, r3
 8000628:	4646      	mov	r6, r8
 800062a:	409e      	lsls	r6, r3
 800062c:	4332      	orrs	r2, r6
 800062e:	0017      	movs	r7, r2
 8000630:	4663      	mov	r3, ip
 8000632:	1e7a      	subs	r2, r7, #1
 8000634:	4197      	sbcs	r7, r2
 8000636:	431f      	orrs	r7, r3
 8000638:	e0cc      	b.n	80007d4 <__aeabi_dadd+0x364>
 800063a:	2b00      	cmp	r3, #0
 800063c:	d100      	bne.n	8000640 <__aeabi_dadd+0x1d0>
 800063e:	e204      	b.n	8000a4a <__aeabi_dadd+0x5da>
 8000640:	4643      	mov	r3, r8
 8000642:	4313      	orrs	r3, r2
 8000644:	d100      	bne.n	8000648 <__aeabi_dadd+0x1d8>
 8000646:	e159      	b.n	80008fc <__aeabi_dadd+0x48c>
 8000648:	074b      	lsls	r3, r1, #29
 800064a:	08c0      	lsrs	r0, r0, #3
 800064c:	4318      	orrs	r0, r3
 800064e:	2380      	movs	r3, #128	; 0x80
 8000650:	08c9      	lsrs	r1, r1, #3
 8000652:	031b      	lsls	r3, r3, #12
 8000654:	4219      	tst	r1, r3
 8000656:	d008      	beq.n	800066a <__aeabi_dadd+0x1fa>
 8000658:	4645      	mov	r5, r8
 800065a:	08ed      	lsrs	r5, r5, #3
 800065c:	421d      	tst	r5, r3
 800065e:	d104      	bne.n	800066a <__aeabi_dadd+0x1fa>
 8000660:	4643      	mov	r3, r8
 8000662:	08d0      	lsrs	r0, r2, #3
 8000664:	0759      	lsls	r1, r3, #29
 8000666:	4308      	orrs	r0, r1
 8000668:	0029      	movs	r1, r5
 800066a:	0f42      	lsrs	r2, r0, #29
 800066c:	00c9      	lsls	r1, r1, #3
 800066e:	4d7f      	ldr	r5, [pc, #508]	; (800086c <__aeabi_dadd+0x3fc>)
 8000670:	4311      	orrs	r1, r2
 8000672:	00c0      	lsls	r0, r0, #3
 8000674:	074b      	lsls	r3, r1, #29
 8000676:	08ca      	lsrs	r2, r1, #3
 8000678:	497c      	ldr	r1, [pc, #496]	; (800086c <__aeabi_dadd+0x3fc>)
 800067a:	08c0      	lsrs	r0, r0, #3
 800067c:	4303      	orrs	r3, r0
 800067e:	428d      	cmp	r5, r1
 8000680:	d068      	beq.n	8000754 <__aeabi_dadd+0x2e4>
 8000682:	0312      	lsls	r2, r2, #12
 8000684:	056d      	lsls	r5, r5, #21
 8000686:	0b12      	lsrs	r2, r2, #12
 8000688:	0d6d      	lsrs	r5, r5, #21
 800068a:	2100      	movs	r1, #0
 800068c:	0312      	lsls	r2, r2, #12
 800068e:	0018      	movs	r0, r3
 8000690:	0b13      	lsrs	r3, r2, #12
 8000692:	0d0a      	lsrs	r2, r1, #20
 8000694:	0512      	lsls	r2, r2, #20
 8000696:	431a      	orrs	r2, r3
 8000698:	4b76      	ldr	r3, [pc, #472]	; (8000874 <__aeabi_dadd+0x404>)
 800069a:	052d      	lsls	r5, r5, #20
 800069c:	4013      	ands	r3, r2
 800069e:	432b      	orrs	r3, r5
 80006a0:	005b      	lsls	r3, r3, #1
 80006a2:	07e4      	lsls	r4, r4, #31
 80006a4:	085b      	lsrs	r3, r3, #1
 80006a6:	4323      	orrs	r3, r4
 80006a8:	0019      	movs	r1, r3
 80006aa:	bc1c      	pop	{r2, r3, r4}
 80006ac:	4690      	mov	r8, r2
 80006ae:	4699      	mov	r9, r3
 80006b0:	46a2      	mov	sl, r4
 80006b2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80006b4:	003e      	movs	r6, r7
 80006b6:	4316      	orrs	r6, r2
 80006b8:	d012      	beq.n	80006e0 <__aeabi_dadd+0x270>
 80006ba:	1e5e      	subs	r6, r3, #1
 80006bc:	2e00      	cmp	r6, #0
 80006be:	d000      	beq.n	80006c2 <__aeabi_dadd+0x252>
 80006c0:	e100      	b.n	80008c4 <__aeabi_dadd+0x454>
 80006c2:	1887      	adds	r7, r0, r2
 80006c4:	4287      	cmp	r7, r0
 80006c6:	4180      	sbcs	r0, r0
 80006c8:	4441      	add	r1, r8
 80006ca:	4240      	negs	r0, r0
 80006cc:	1809      	adds	r1, r1, r0
 80006ce:	2501      	movs	r5, #1
 80006d0:	020b      	lsls	r3, r1, #8
 80006d2:	d533      	bpl.n	800073c <__aeabi_dadd+0x2cc>
 80006d4:	2502      	movs	r5, #2
 80006d6:	e785      	b.n	80005e4 <__aeabi_dadd+0x174>
 80006d8:	4664      	mov	r4, ip
 80006da:	0033      	movs	r3, r6
 80006dc:	4641      	mov	r1, r8
 80006de:	0010      	movs	r0, r2
 80006e0:	001d      	movs	r5, r3
 80006e2:	e7c7      	b.n	8000674 <__aeabi_dadd+0x204>
 80006e4:	2d00      	cmp	r5, #0
 80006e6:	d000      	beq.n	80006ea <__aeabi_dadd+0x27a>
 80006e8:	e0da      	b.n	80008a0 <__aeabi_dadd+0x430>
 80006ea:	000c      	movs	r4, r1
 80006ec:	4304      	orrs	r4, r0
 80006ee:	d0f3      	beq.n	80006d8 <__aeabi_dadd+0x268>
 80006f0:	1c5c      	adds	r4, r3, #1
 80006f2:	d100      	bne.n	80006f6 <__aeabi_dadd+0x286>
 80006f4:	e19f      	b.n	8000a36 <__aeabi_dadd+0x5c6>
 80006f6:	4c5d      	ldr	r4, [pc, #372]	; (800086c <__aeabi_dadd+0x3fc>)
 80006f8:	42a6      	cmp	r6, r4
 80006fa:	d100      	bne.n	80006fe <__aeabi_dadd+0x28e>
 80006fc:	e12f      	b.n	800095e <__aeabi_dadd+0x4ee>
 80006fe:	43db      	mvns	r3, r3
 8000700:	2b38      	cmp	r3, #56	; 0x38
 8000702:	dd00      	ble.n	8000706 <__aeabi_dadd+0x296>
 8000704:	e166      	b.n	80009d4 <__aeabi_dadd+0x564>
 8000706:	2b1f      	cmp	r3, #31
 8000708:	dd00      	ble.n	800070c <__aeabi_dadd+0x29c>
 800070a:	e183      	b.n	8000a14 <__aeabi_dadd+0x5a4>
 800070c:	2420      	movs	r4, #32
 800070e:	0005      	movs	r5, r0
 8000710:	1ae4      	subs	r4, r4, r3
 8000712:	000f      	movs	r7, r1
 8000714:	40dd      	lsrs	r5, r3
 8000716:	40d9      	lsrs	r1, r3
 8000718:	40a0      	lsls	r0, r4
 800071a:	4643      	mov	r3, r8
 800071c:	40a7      	lsls	r7, r4
 800071e:	1a5b      	subs	r3, r3, r1
 8000720:	1e44      	subs	r4, r0, #1
 8000722:	41a0      	sbcs	r0, r4
 8000724:	4698      	mov	r8, r3
 8000726:	432f      	orrs	r7, r5
 8000728:	4338      	orrs	r0, r7
 800072a:	1a17      	subs	r7, r2, r0
 800072c:	42ba      	cmp	r2, r7
 800072e:	4192      	sbcs	r2, r2
 8000730:	4643      	mov	r3, r8
 8000732:	4252      	negs	r2, r2
 8000734:	1a99      	subs	r1, r3, r2
 8000736:	4664      	mov	r4, ip
 8000738:	0035      	movs	r5, r6
 800073a:	e6ca      	b.n	80004d2 <__aeabi_dadd+0x62>
 800073c:	2207      	movs	r2, #7
 800073e:	403a      	ands	r2, r7
 8000740:	2a00      	cmp	r2, #0
 8000742:	d000      	beq.n	8000746 <__aeabi_dadd+0x2d6>
 8000744:	e6f6      	b.n	8000534 <__aeabi_dadd+0xc4>
 8000746:	074b      	lsls	r3, r1, #29
 8000748:	08ca      	lsrs	r2, r1, #3
 800074a:	4948      	ldr	r1, [pc, #288]	; (800086c <__aeabi_dadd+0x3fc>)
 800074c:	08ff      	lsrs	r7, r7, #3
 800074e:	433b      	orrs	r3, r7
 8000750:	428d      	cmp	r5, r1
 8000752:	d196      	bne.n	8000682 <__aeabi_dadd+0x212>
 8000754:	0019      	movs	r1, r3
 8000756:	4311      	orrs	r1, r2
 8000758:	d100      	bne.n	800075c <__aeabi_dadd+0x2ec>
 800075a:	e19e      	b.n	8000a9a <__aeabi_dadd+0x62a>
 800075c:	2180      	movs	r1, #128	; 0x80
 800075e:	0309      	lsls	r1, r1, #12
 8000760:	430a      	orrs	r2, r1
 8000762:	0312      	lsls	r2, r2, #12
 8000764:	0b12      	lsrs	r2, r2, #12
 8000766:	4d41      	ldr	r5, [pc, #260]	; (800086c <__aeabi_dadd+0x3fc>)
 8000768:	e78f      	b.n	800068a <__aeabi_dadd+0x21a>
 800076a:	0015      	movs	r5, r2
 800076c:	2200      	movs	r2, #0
 800076e:	2300      	movs	r3, #0
 8000770:	e78b      	b.n	800068a <__aeabi_dadd+0x21a>
 8000772:	2b00      	cmp	r3, #0
 8000774:	d000      	beq.n	8000778 <__aeabi_dadd+0x308>
 8000776:	e0c7      	b.n	8000908 <__aeabi_dadd+0x498>
 8000778:	1c6b      	adds	r3, r5, #1
 800077a:	055f      	lsls	r7, r3, #21
 800077c:	0d7f      	lsrs	r7, r7, #21
 800077e:	2f01      	cmp	r7, #1
 8000780:	dc00      	bgt.n	8000784 <__aeabi_dadd+0x314>
 8000782:	e0f1      	b.n	8000968 <__aeabi_dadd+0x4f8>
 8000784:	4d39      	ldr	r5, [pc, #228]	; (800086c <__aeabi_dadd+0x3fc>)
 8000786:	42ab      	cmp	r3, r5
 8000788:	d100      	bne.n	800078c <__aeabi_dadd+0x31c>
 800078a:	e0b9      	b.n	8000900 <__aeabi_dadd+0x490>
 800078c:	1885      	adds	r5, r0, r2
 800078e:	000a      	movs	r2, r1
 8000790:	4285      	cmp	r5, r0
 8000792:	4189      	sbcs	r1, r1
 8000794:	4442      	add	r2, r8
 8000796:	4249      	negs	r1, r1
 8000798:	1851      	adds	r1, r2, r1
 800079a:	2207      	movs	r2, #7
 800079c:	07cf      	lsls	r7, r1, #31
 800079e:	086d      	lsrs	r5, r5, #1
 80007a0:	432f      	orrs	r7, r5
 80007a2:	0849      	lsrs	r1, r1, #1
 80007a4:	403a      	ands	r2, r7
 80007a6:	001d      	movs	r5, r3
 80007a8:	e6c2      	b.n	8000530 <__aeabi_dadd+0xc0>
 80007aa:	2207      	movs	r2, #7
 80007ac:	4930      	ldr	r1, [pc, #192]	; (8000870 <__aeabi_dadd+0x400>)
 80007ae:	1aed      	subs	r5, r5, r3
 80007b0:	4031      	ands	r1, r6
 80007b2:	403a      	ands	r2, r7
 80007b4:	e6bc      	b.n	8000530 <__aeabi_dadd+0xc0>
 80007b6:	003e      	movs	r6, r7
 80007b8:	3828      	subs	r0, #40	; 0x28
 80007ba:	4086      	lsls	r6, r0
 80007bc:	2700      	movs	r7, #0
 80007be:	e69f      	b.n	8000500 <__aeabi_dadd+0x90>
 80007c0:	0038      	movs	r0, r7
 80007c2:	f001 fb6f 	bl	8001ea4 <__clzsi2>
 80007c6:	3020      	adds	r0, #32
 80007c8:	e68e      	b.n	80004e8 <__aeabi_dadd+0x78>
 80007ca:	4643      	mov	r3, r8
 80007cc:	4313      	orrs	r3, r2
 80007ce:	001f      	movs	r7, r3
 80007d0:	1e7a      	subs	r2, r7, #1
 80007d2:	4197      	sbcs	r7, r2
 80007d4:	1bc7      	subs	r7, r0, r7
 80007d6:	42b8      	cmp	r0, r7
 80007d8:	4180      	sbcs	r0, r0
 80007da:	4240      	negs	r0, r0
 80007dc:	1a09      	subs	r1, r1, r0
 80007de:	e678      	b.n	80004d2 <__aeabi_dadd+0x62>
 80007e0:	000e      	movs	r6, r1
 80007e2:	003b      	movs	r3, r7
 80007e4:	4306      	orrs	r6, r0
 80007e6:	4313      	orrs	r3, r2
 80007e8:	2d00      	cmp	r5, #0
 80007ea:	d161      	bne.n	80008b0 <__aeabi_dadd+0x440>
 80007ec:	2e00      	cmp	r6, #0
 80007ee:	d000      	beq.n	80007f2 <__aeabi_dadd+0x382>
 80007f0:	e0f4      	b.n	80009dc <__aeabi_dadd+0x56c>
 80007f2:	2b00      	cmp	r3, #0
 80007f4:	d100      	bne.n	80007f8 <__aeabi_dadd+0x388>
 80007f6:	e11b      	b.n	8000a30 <__aeabi_dadd+0x5c0>
 80007f8:	4664      	mov	r4, ip
 80007fa:	0039      	movs	r1, r7
 80007fc:	0010      	movs	r0, r2
 80007fe:	e739      	b.n	8000674 <__aeabi_dadd+0x204>
 8000800:	4f1a      	ldr	r7, [pc, #104]	; (800086c <__aeabi_dadd+0x3fc>)
 8000802:	42bb      	cmp	r3, r7
 8000804:	d07a      	beq.n	80008fc <__aeabi_dadd+0x48c>
 8000806:	0033      	movs	r3, r6
 8000808:	e6ff      	b.n	800060a <__aeabi_dadd+0x19a>
 800080a:	0030      	movs	r0, r6
 800080c:	3d1f      	subs	r5, #31
 800080e:	40e8      	lsrs	r0, r5
 8000810:	2b20      	cmp	r3, #32
 8000812:	d003      	beq.n	800081c <__aeabi_dadd+0x3ac>
 8000814:	2140      	movs	r1, #64	; 0x40
 8000816:	1acb      	subs	r3, r1, r3
 8000818:	409e      	lsls	r6, r3
 800081a:	4337      	orrs	r7, r6
 800081c:	1e7b      	subs	r3, r7, #1
 800081e:	419f      	sbcs	r7, r3
 8000820:	2207      	movs	r2, #7
 8000822:	4307      	orrs	r7, r0
 8000824:	403a      	ands	r2, r7
 8000826:	2100      	movs	r1, #0
 8000828:	2500      	movs	r5, #0
 800082a:	e789      	b.n	8000740 <__aeabi_dadd+0x2d0>
 800082c:	1a17      	subs	r7, r2, r0
 800082e:	4643      	mov	r3, r8
 8000830:	42ba      	cmp	r2, r7
 8000832:	41b6      	sbcs	r6, r6
 8000834:	1a59      	subs	r1, r3, r1
 8000836:	4276      	negs	r6, r6
 8000838:	1b8e      	subs	r6, r1, r6
 800083a:	4664      	mov	r4, ip
 800083c:	e64e      	b.n	80004dc <__aeabi_dadd+0x6c>
 800083e:	2b1f      	cmp	r3, #31
 8000840:	dd00      	ble.n	8000844 <__aeabi_dadd+0x3d4>
 8000842:	e0ad      	b.n	80009a0 <__aeabi_dadd+0x530>
 8000844:	2620      	movs	r6, #32
 8000846:	4647      	mov	r7, r8
 8000848:	1af6      	subs	r6, r6, r3
 800084a:	40b7      	lsls	r7, r6
 800084c:	46b9      	mov	r9, r7
 800084e:	0017      	movs	r7, r2
 8000850:	46b2      	mov	sl, r6
 8000852:	40df      	lsrs	r7, r3
 8000854:	464e      	mov	r6, r9
 8000856:	433e      	orrs	r6, r7
 8000858:	0037      	movs	r7, r6
 800085a:	4656      	mov	r6, sl
 800085c:	40b2      	lsls	r2, r6
 800085e:	1e56      	subs	r6, r2, #1
 8000860:	41b2      	sbcs	r2, r6
 8000862:	4317      	orrs	r7, r2
 8000864:	4642      	mov	r2, r8
 8000866:	40da      	lsrs	r2, r3
 8000868:	1889      	adds	r1, r1, r2
 800086a:	e6ae      	b.n	80005ca <__aeabi_dadd+0x15a>
 800086c:	000007ff 	.word	0x000007ff
 8000870:	ff7fffff 	.word	0xff7fffff
 8000874:	800fffff 	.word	0x800fffff
 8000878:	2620      	movs	r6, #32
 800087a:	4647      	mov	r7, r8
 800087c:	1af6      	subs	r6, r6, r3
 800087e:	40b7      	lsls	r7, r6
 8000880:	46b9      	mov	r9, r7
 8000882:	0017      	movs	r7, r2
 8000884:	46b2      	mov	sl, r6
 8000886:	40df      	lsrs	r7, r3
 8000888:	464e      	mov	r6, r9
 800088a:	433e      	orrs	r6, r7
 800088c:	0037      	movs	r7, r6
 800088e:	4656      	mov	r6, sl
 8000890:	40b2      	lsls	r2, r6
 8000892:	1e56      	subs	r6, r2, #1
 8000894:	41b2      	sbcs	r2, r6
 8000896:	4317      	orrs	r7, r2
 8000898:	4642      	mov	r2, r8
 800089a:	40da      	lsrs	r2, r3
 800089c:	1a89      	subs	r1, r1, r2
 800089e:	e799      	b.n	80007d4 <__aeabi_dadd+0x364>
 80008a0:	4c7f      	ldr	r4, [pc, #508]	; (8000aa0 <__aeabi_dadd+0x630>)
 80008a2:	42a6      	cmp	r6, r4
 80008a4:	d05b      	beq.n	800095e <__aeabi_dadd+0x4ee>
 80008a6:	2480      	movs	r4, #128	; 0x80
 80008a8:	0424      	lsls	r4, r4, #16
 80008aa:	425b      	negs	r3, r3
 80008ac:	4321      	orrs	r1, r4
 80008ae:	e727      	b.n	8000700 <__aeabi_dadd+0x290>
 80008b0:	2e00      	cmp	r6, #0
 80008b2:	d10c      	bne.n	80008ce <__aeabi_dadd+0x45e>
 80008b4:	2b00      	cmp	r3, #0
 80008b6:	d100      	bne.n	80008ba <__aeabi_dadd+0x44a>
 80008b8:	e0cb      	b.n	8000a52 <__aeabi_dadd+0x5e2>
 80008ba:	4664      	mov	r4, ip
 80008bc:	0039      	movs	r1, r7
 80008be:	0010      	movs	r0, r2
 80008c0:	4d77      	ldr	r5, [pc, #476]	; (8000aa0 <__aeabi_dadd+0x630>)
 80008c2:	e6d7      	b.n	8000674 <__aeabi_dadd+0x204>
 80008c4:	4f76      	ldr	r7, [pc, #472]	; (8000aa0 <__aeabi_dadd+0x630>)
 80008c6:	42bb      	cmp	r3, r7
 80008c8:	d018      	beq.n	80008fc <__aeabi_dadd+0x48c>
 80008ca:	0033      	movs	r3, r6
 80008cc:	e675      	b.n	80005ba <__aeabi_dadd+0x14a>
 80008ce:	2b00      	cmp	r3, #0
 80008d0:	d014      	beq.n	80008fc <__aeabi_dadd+0x48c>
 80008d2:	074b      	lsls	r3, r1, #29
 80008d4:	08c0      	lsrs	r0, r0, #3
 80008d6:	4318      	orrs	r0, r3
 80008d8:	2380      	movs	r3, #128	; 0x80
 80008da:	08c9      	lsrs	r1, r1, #3
 80008dc:	031b      	lsls	r3, r3, #12
 80008de:	4219      	tst	r1, r3
 80008e0:	d007      	beq.n	80008f2 <__aeabi_dadd+0x482>
 80008e2:	08fc      	lsrs	r4, r7, #3
 80008e4:	421c      	tst	r4, r3
 80008e6:	d104      	bne.n	80008f2 <__aeabi_dadd+0x482>
 80008e8:	0779      	lsls	r1, r7, #29
 80008ea:	08d0      	lsrs	r0, r2, #3
 80008ec:	4308      	orrs	r0, r1
 80008ee:	46e1      	mov	r9, ip
 80008f0:	0021      	movs	r1, r4
 80008f2:	464c      	mov	r4, r9
 80008f4:	0f42      	lsrs	r2, r0, #29
 80008f6:	00c9      	lsls	r1, r1, #3
 80008f8:	4311      	orrs	r1, r2
 80008fa:	00c0      	lsls	r0, r0, #3
 80008fc:	4d68      	ldr	r5, [pc, #416]	; (8000aa0 <__aeabi_dadd+0x630>)
 80008fe:	e6b9      	b.n	8000674 <__aeabi_dadd+0x204>
 8000900:	001d      	movs	r5, r3
 8000902:	2200      	movs	r2, #0
 8000904:	2300      	movs	r3, #0
 8000906:	e6c0      	b.n	800068a <__aeabi_dadd+0x21a>
 8000908:	2d00      	cmp	r5, #0
 800090a:	d15b      	bne.n	80009c4 <__aeabi_dadd+0x554>
 800090c:	000d      	movs	r5, r1
 800090e:	4305      	orrs	r5, r0
 8000910:	d100      	bne.n	8000914 <__aeabi_dadd+0x4a4>
 8000912:	e6e2      	b.n	80006da <__aeabi_dadd+0x26a>
 8000914:	1c5d      	adds	r5, r3, #1
 8000916:	d100      	bne.n	800091a <__aeabi_dadd+0x4aa>
 8000918:	e0b0      	b.n	8000a7c <__aeabi_dadd+0x60c>
 800091a:	4d61      	ldr	r5, [pc, #388]	; (8000aa0 <__aeabi_dadd+0x630>)
 800091c:	42ae      	cmp	r6, r5
 800091e:	d01f      	beq.n	8000960 <__aeabi_dadd+0x4f0>
 8000920:	43db      	mvns	r3, r3
 8000922:	2b38      	cmp	r3, #56	; 0x38
 8000924:	dc71      	bgt.n	8000a0a <__aeabi_dadd+0x59a>
 8000926:	2b1f      	cmp	r3, #31
 8000928:	dd00      	ble.n	800092c <__aeabi_dadd+0x4bc>
 800092a:	e096      	b.n	8000a5a <__aeabi_dadd+0x5ea>
 800092c:	2520      	movs	r5, #32
 800092e:	000f      	movs	r7, r1
 8000930:	1aed      	subs	r5, r5, r3
 8000932:	40af      	lsls	r7, r5
 8000934:	46b9      	mov	r9, r7
 8000936:	0007      	movs	r7, r0
 8000938:	46aa      	mov	sl, r5
 800093a:	40df      	lsrs	r7, r3
 800093c:	464d      	mov	r5, r9
 800093e:	433d      	orrs	r5, r7
 8000940:	002f      	movs	r7, r5
 8000942:	4655      	mov	r5, sl
 8000944:	40a8      	lsls	r0, r5
 8000946:	40d9      	lsrs	r1, r3
 8000948:	1e45      	subs	r5, r0, #1
 800094a:	41a8      	sbcs	r0, r5
 800094c:	4488      	add	r8, r1
 800094e:	4307      	orrs	r7, r0
 8000950:	18bf      	adds	r7, r7, r2
 8000952:	4297      	cmp	r7, r2
 8000954:	4192      	sbcs	r2, r2
 8000956:	4251      	negs	r1, r2
 8000958:	4441      	add	r1, r8
 800095a:	0035      	movs	r5, r6
 800095c:	e63a      	b.n	80005d4 <__aeabi_dadd+0x164>
 800095e:	4664      	mov	r4, ip
 8000960:	0035      	movs	r5, r6
 8000962:	4641      	mov	r1, r8
 8000964:	0010      	movs	r0, r2
 8000966:	e685      	b.n	8000674 <__aeabi_dadd+0x204>
 8000968:	000b      	movs	r3, r1
 800096a:	4303      	orrs	r3, r0
 800096c:	2d00      	cmp	r5, #0
 800096e:	d000      	beq.n	8000972 <__aeabi_dadd+0x502>
 8000970:	e663      	b.n	800063a <__aeabi_dadd+0x1ca>
 8000972:	2b00      	cmp	r3, #0
 8000974:	d0f5      	beq.n	8000962 <__aeabi_dadd+0x4f2>
 8000976:	4643      	mov	r3, r8
 8000978:	4313      	orrs	r3, r2
 800097a:	d100      	bne.n	800097e <__aeabi_dadd+0x50e>
 800097c:	e67a      	b.n	8000674 <__aeabi_dadd+0x204>
 800097e:	1887      	adds	r7, r0, r2
 8000980:	4287      	cmp	r7, r0
 8000982:	4180      	sbcs	r0, r0
 8000984:	2207      	movs	r2, #7
 8000986:	4441      	add	r1, r8
 8000988:	4240      	negs	r0, r0
 800098a:	1809      	adds	r1, r1, r0
 800098c:	403a      	ands	r2, r7
 800098e:	020b      	lsls	r3, r1, #8
 8000990:	d400      	bmi.n	8000994 <__aeabi_dadd+0x524>
 8000992:	e6d5      	b.n	8000740 <__aeabi_dadd+0x2d0>
 8000994:	4b43      	ldr	r3, [pc, #268]	; (8000aa4 <__aeabi_dadd+0x634>)
 8000996:	3501      	adds	r5, #1
 8000998:	4019      	ands	r1, r3
 800099a:	e5c9      	b.n	8000530 <__aeabi_dadd+0xc0>
 800099c:	0038      	movs	r0, r7
 800099e:	e669      	b.n	8000674 <__aeabi_dadd+0x204>
 80009a0:	001e      	movs	r6, r3
 80009a2:	4647      	mov	r7, r8
 80009a4:	3e20      	subs	r6, #32
 80009a6:	40f7      	lsrs	r7, r6
 80009a8:	46bc      	mov	ip, r7
 80009aa:	2b20      	cmp	r3, #32
 80009ac:	d004      	beq.n	80009b8 <__aeabi_dadd+0x548>
 80009ae:	2640      	movs	r6, #64	; 0x40
 80009b0:	1af3      	subs	r3, r6, r3
 80009b2:	4646      	mov	r6, r8
 80009b4:	409e      	lsls	r6, r3
 80009b6:	4332      	orrs	r2, r6
 80009b8:	0017      	movs	r7, r2
 80009ba:	4663      	mov	r3, ip
 80009bc:	1e7a      	subs	r2, r7, #1
 80009be:	4197      	sbcs	r7, r2
 80009c0:	431f      	orrs	r7, r3
 80009c2:	e602      	b.n	80005ca <__aeabi_dadd+0x15a>
 80009c4:	4d36      	ldr	r5, [pc, #216]	; (8000aa0 <__aeabi_dadd+0x630>)
 80009c6:	42ae      	cmp	r6, r5
 80009c8:	d0ca      	beq.n	8000960 <__aeabi_dadd+0x4f0>
 80009ca:	2580      	movs	r5, #128	; 0x80
 80009cc:	042d      	lsls	r5, r5, #16
 80009ce:	425b      	negs	r3, r3
 80009d0:	4329      	orrs	r1, r5
 80009d2:	e7a6      	b.n	8000922 <__aeabi_dadd+0x4b2>
 80009d4:	4308      	orrs	r0, r1
 80009d6:	1e41      	subs	r1, r0, #1
 80009d8:	4188      	sbcs	r0, r1
 80009da:	e6a6      	b.n	800072a <__aeabi_dadd+0x2ba>
 80009dc:	2b00      	cmp	r3, #0
 80009de:	d100      	bne.n	80009e2 <__aeabi_dadd+0x572>
 80009e0:	e648      	b.n	8000674 <__aeabi_dadd+0x204>
 80009e2:	1a87      	subs	r7, r0, r2
 80009e4:	4643      	mov	r3, r8
 80009e6:	42b8      	cmp	r0, r7
 80009e8:	41b6      	sbcs	r6, r6
 80009ea:	1acb      	subs	r3, r1, r3
 80009ec:	4276      	negs	r6, r6
 80009ee:	1b9e      	subs	r6, r3, r6
 80009f0:	0233      	lsls	r3, r6, #8
 80009f2:	d54b      	bpl.n	8000a8c <__aeabi_dadd+0x61c>
 80009f4:	1a17      	subs	r7, r2, r0
 80009f6:	4643      	mov	r3, r8
 80009f8:	42ba      	cmp	r2, r7
 80009fa:	4192      	sbcs	r2, r2
 80009fc:	1a59      	subs	r1, r3, r1
 80009fe:	4252      	negs	r2, r2
 8000a00:	1a89      	subs	r1, r1, r2
 8000a02:	2207      	movs	r2, #7
 8000a04:	4664      	mov	r4, ip
 8000a06:	403a      	ands	r2, r7
 8000a08:	e592      	b.n	8000530 <__aeabi_dadd+0xc0>
 8000a0a:	4301      	orrs	r1, r0
 8000a0c:	000f      	movs	r7, r1
 8000a0e:	1e79      	subs	r1, r7, #1
 8000a10:	418f      	sbcs	r7, r1
 8000a12:	e79d      	b.n	8000950 <__aeabi_dadd+0x4e0>
 8000a14:	001c      	movs	r4, r3
 8000a16:	000f      	movs	r7, r1
 8000a18:	3c20      	subs	r4, #32
 8000a1a:	40e7      	lsrs	r7, r4
 8000a1c:	2b20      	cmp	r3, #32
 8000a1e:	d003      	beq.n	8000a28 <__aeabi_dadd+0x5b8>
 8000a20:	2440      	movs	r4, #64	; 0x40
 8000a22:	1ae3      	subs	r3, r4, r3
 8000a24:	4099      	lsls	r1, r3
 8000a26:	4308      	orrs	r0, r1
 8000a28:	1e41      	subs	r1, r0, #1
 8000a2a:	4188      	sbcs	r0, r1
 8000a2c:	4338      	orrs	r0, r7
 8000a2e:	e67c      	b.n	800072a <__aeabi_dadd+0x2ba>
 8000a30:	2200      	movs	r2, #0
 8000a32:	2400      	movs	r4, #0
 8000a34:	e625      	b.n	8000682 <__aeabi_dadd+0x212>
 8000a36:	1a17      	subs	r7, r2, r0
 8000a38:	4643      	mov	r3, r8
 8000a3a:	42ba      	cmp	r2, r7
 8000a3c:	4192      	sbcs	r2, r2
 8000a3e:	1a59      	subs	r1, r3, r1
 8000a40:	4252      	negs	r2, r2
 8000a42:	1a89      	subs	r1, r1, r2
 8000a44:	4664      	mov	r4, ip
 8000a46:	0035      	movs	r5, r6
 8000a48:	e543      	b.n	80004d2 <__aeabi_dadd+0x62>
 8000a4a:	4641      	mov	r1, r8
 8000a4c:	0010      	movs	r0, r2
 8000a4e:	4d14      	ldr	r5, [pc, #80]	; (8000aa0 <__aeabi_dadd+0x630>)
 8000a50:	e610      	b.n	8000674 <__aeabi_dadd+0x204>
 8000a52:	2280      	movs	r2, #128	; 0x80
 8000a54:	2400      	movs	r4, #0
 8000a56:	0312      	lsls	r2, r2, #12
 8000a58:	e680      	b.n	800075c <__aeabi_dadd+0x2ec>
 8000a5a:	001d      	movs	r5, r3
 8000a5c:	000f      	movs	r7, r1
 8000a5e:	3d20      	subs	r5, #32
 8000a60:	40ef      	lsrs	r7, r5
 8000a62:	46bc      	mov	ip, r7
 8000a64:	2b20      	cmp	r3, #32
 8000a66:	d003      	beq.n	8000a70 <__aeabi_dadd+0x600>
 8000a68:	2540      	movs	r5, #64	; 0x40
 8000a6a:	1aeb      	subs	r3, r5, r3
 8000a6c:	4099      	lsls	r1, r3
 8000a6e:	4308      	orrs	r0, r1
 8000a70:	0007      	movs	r7, r0
 8000a72:	4663      	mov	r3, ip
 8000a74:	1e78      	subs	r0, r7, #1
 8000a76:	4187      	sbcs	r7, r0
 8000a78:	431f      	orrs	r7, r3
 8000a7a:	e769      	b.n	8000950 <__aeabi_dadd+0x4e0>
 8000a7c:	1887      	adds	r7, r0, r2
 8000a7e:	4297      	cmp	r7, r2
 8000a80:	419b      	sbcs	r3, r3
 8000a82:	4441      	add	r1, r8
 8000a84:	425b      	negs	r3, r3
 8000a86:	18c9      	adds	r1, r1, r3
 8000a88:	0035      	movs	r5, r6
 8000a8a:	e5a3      	b.n	80005d4 <__aeabi_dadd+0x164>
 8000a8c:	003b      	movs	r3, r7
 8000a8e:	4333      	orrs	r3, r6
 8000a90:	d0ce      	beq.n	8000a30 <__aeabi_dadd+0x5c0>
 8000a92:	2207      	movs	r2, #7
 8000a94:	0031      	movs	r1, r6
 8000a96:	403a      	ands	r2, r7
 8000a98:	e652      	b.n	8000740 <__aeabi_dadd+0x2d0>
 8000a9a:	2300      	movs	r3, #0
 8000a9c:	001a      	movs	r2, r3
 8000a9e:	e5f4      	b.n	800068a <__aeabi_dadd+0x21a>
 8000aa0:	000007ff 	.word	0x000007ff
 8000aa4:	ff7fffff 	.word	0xff7fffff

08000aa8 <__aeabi_ddiv>:
 8000aa8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000aaa:	4657      	mov	r7, sl
 8000aac:	46de      	mov	lr, fp
 8000aae:	464e      	mov	r6, r9
 8000ab0:	4645      	mov	r5, r8
 8000ab2:	b5e0      	push	{r5, r6, r7, lr}
 8000ab4:	4683      	mov	fp, r0
 8000ab6:	0007      	movs	r7, r0
 8000ab8:	030e      	lsls	r6, r1, #12
 8000aba:	0048      	lsls	r0, r1, #1
 8000abc:	b085      	sub	sp, #20
 8000abe:	4692      	mov	sl, r2
 8000ac0:	001c      	movs	r4, r3
 8000ac2:	0b36      	lsrs	r6, r6, #12
 8000ac4:	0d40      	lsrs	r0, r0, #21
 8000ac6:	0fcd      	lsrs	r5, r1, #31
 8000ac8:	2800      	cmp	r0, #0
 8000aca:	d100      	bne.n	8000ace <__aeabi_ddiv+0x26>
 8000acc:	e09d      	b.n	8000c0a <__aeabi_ddiv+0x162>
 8000ace:	4b95      	ldr	r3, [pc, #596]	; (8000d24 <__aeabi_ddiv+0x27c>)
 8000ad0:	4298      	cmp	r0, r3
 8000ad2:	d039      	beq.n	8000b48 <__aeabi_ddiv+0xa0>
 8000ad4:	2380      	movs	r3, #128	; 0x80
 8000ad6:	00f6      	lsls	r6, r6, #3
 8000ad8:	041b      	lsls	r3, r3, #16
 8000ada:	431e      	orrs	r6, r3
 8000adc:	4a92      	ldr	r2, [pc, #584]	; (8000d28 <__aeabi_ddiv+0x280>)
 8000ade:	0f7b      	lsrs	r3, r7, #29
 8000ae0:	4333      	orrs	r3, r6
 8000ae2:	4699      	mov	r9, r3
 8000ae4:	4694      	mov	ip, r2
 8000ae6:	0003      	movs	r3, r0
 8000ae8:	4463      	add	r3, ip
 8000aea:	9300      	str	r3, [sp, #0]
 8000aec:	2300      	movs	r3, #0
 8000aee:	2600      	movs	r6, #0
 8000af0:	00ff      	lsls	r7, r7, #3
 8000af2:	9302      	str	r3, [sp, #8]
 8000af4:	0323      	lsls	r3, r4, #12
 8000af6:	0b1b      	lsrs	r3, r3, #12
 8000af8:	4698      	mov	r8, r3
 8000afa:	0063      	lsls	r3, r4, #1
 8000afc:	0fe4      	lsrs	r4, r4, #31
 8000afe:	4652      	mov	r2, sl
 8000b00:	0d5b      	lsrs	r3, r3, #21
 8000b02:	9401      	str	r4, [sp, #4]
 8000b04:	d100      	bne.n	8000b08 <__aeabi_ddiv+0x60>
 8000b06:	e0b3      	b.n	8000c70 <__aeabi_ddiv+0x1c8>
 8000b08:	4986      	ldr	r1, [pc, #536]	; (8000d24 <__aeabi_ddiv+0x27c>)
 8000b0a:	428b      	cmp	r3, r1
 8000b0c:	d100      	bne.n	8000b10 <__aeabi_ddiv+0x68>
 8000b0e:	e09e      	b.n	8000c4e <__aeabi_ddiv+0x1a6>
 8000b10:	4642      	mov	r2, r8
 8000b12:	00d1      	lsls	r1, r2, #3
 8000b14:	2280      	movs	r2, #128	; 0x80
 8000b16:	0412      	lsls	r2, r2, #16
 8000b18:	430a      	orrs	r2, r1
 8000b1a:	4651      	mov	r1, sl
 8000b1c:	0f49      	lsrs	r1, r1, #29
 8000b1e:	4311      	orrs	r1, r2
 8000b20:	468b      	mov	fp, r1
 8000b22:	4981      	ldr	r1, [pc, #516]	; (8000d28 <__aeabi_ddiv+0x280>)
 8000b24:	4652      	mov	r2, sl
 8000b26:	468c      	mov	ip, r1
 8000b28:	9900      	ldr	r1, [sp, #0]
 8000b2a:	4463      	add	r3, ip
 8000b2c:	1acb      	subs	r3, r1, r3
 8000b2e:	2100      	movs	r1, #0
 8000b30:	00d2      	lsls	r2, r2, #3
 8000b32:	9300      	str	r3, [sp, #0]
 8000b34:	002b      	movs	r3, r5
 8000b36:	4063      	eors	r3, r4
 8000b38:	469a      	mov	sl, r3
 8000b3a:	2e0f      	cmp	r6, #15
 8000b3c:	d900      	bls.n	8000b40 <__aeabi_ddiv+0x98>
 8000b3e:	e105      	b.n	8000d4c <__aeabi_ddiv+0x2a4>
 8000b40:	4b7a      	ldr	r3, [pc, #488]	; (8000d2c <__aeabi_ddiv+0x284>)
 8000b42:	00b6      	lsls	r6, r6, #2
 8000b44:	599b      	ldr	r3, [r3, r6]
 8000b46:	469f      	mov	pc, r3
 8000b48:	465b      	mov	r3, fp
 8000b4a:	4333      	orrs	r3, r6
 8000b4c:	4699      	mov	r9, r3
 8000b4e:	d000      	beq.n	8000b52 <__aeabi_ddiv+0xaa>
 8000b50:	e0b8      	b.n	8000cc4 <__aeabi_ddiv+0x21c>
 8000b52:	2302      	movs	r3, #2
 8000b54:	2608      	movs	r6, #8
 8000b56:	2700      	movs	r7, #0
 8000b58:	9000      	str	r0, [sp, #0]
 8000b5a:	9302      	str	r3, [sp, #8]
 8000b5c:	e7ca      	b.n	8000af4 <__aeabi_ddiv+0x4c>
 8000b5e:	46cb      	mov	fp, r9
 8000b60:	003a      	movs	r2, r7
 8000b62:	9902      	ldr	r1, [sp, #8]
 8000b64:	9501      	str	r5, [sp, #4]
 8000b66:	9b01      	ldr	r3, [sp, #4]
 8000b68:	469a      	mov	sl, r3
 8000b6a:	2902      	cmp	r1, #2
 8000b6c:	d027      	beq.n	8000bbe <__aeabi_ddiv+0x116>
 8000b6e:	2903      	cmp	r1, #3
 8000b70:	d100      	bne.n	8000b74 <__aeabi_ddiv+0xcc>
 8000b72:	e280      	b.n	8001076 <__aeabi_ddiv+0x5ce>
 8000b74:	2901      	cmp	r1, #1
 8000b76:	d044      	beq.n	8000c02 <__aeabi_ddiv+0x15a>
 8000b78:	496d      	ldr	r1, [pc, #436]	; (8000d30 <__aeabi_ddiv+0x288>)
 8000b7a:	9b00      	ldr	r3, [sp, #0]
 8000b7c:	468c      	mov	ip, r1
 8000b7e:	4463      	add	r3, ip
 8000b80:	001c      	movs	r4, r3
 8000b82:	2c00      	cmp	r4, #0
 8000b84:	dd38      	ble.n	8000bf8 <__aeabi_ddiv+0x150>
 8000b86:	0753      	lsls	r3, r2, #29
 8000b88:	d000      	beq.n	8000b8c <__aeabi_ddiv+0xe4>
 8000b8a:	e213      	b.n	8000fb4 <__aeabi_ddiv+0x50c>
 8000b8c:	08d2      	lsrs	r2, r2, #3
 8000b8e:	465b      	mov	r3, fp
 8000b90:	01db      	lsls	r3, r3, #7
 8000b92:	d509      	bpl.n	8000ba8 <__aeabi_ddiv+0x100>
 8000b94:	4659      	mov	r1, fp
 8000b96:	4b67      	ldr	r3, [pc, #412]	; (8000d34 <__aeabi_ddiv+0x28c>)
 8000b98:	4019      	ands	r1, r3
 8000b9a:	468b      	mov	fp, r1
 8000b9c:	2180      	movs	r1, #128	; 0x80
 8000b9e:	00c9      	lsls	r1, r1, #3
 8000ba0:	468c      	mov	ip, r1
 8000ba2:	9b00      	ldr	r3, [sp, #0]
 8000ba4:	4463      	add	r3, ip
 8000ba6:	001c      	movs	r4, r3
 8000ba8:	4b63      	ldr	r3, [pc, #396]	; (8000d38 <__aeabi_ddiv+0x290>)
 8000baa:	429c      	cmp	r4, r3
 8000bac:	dc07      	bgt.n	8000bbe <__aeabi_ddiv+0x116>
 8000bae:	465b      	mov	r3, fp
 8000bb0:	0564      	lsls	r4, r4, #21
 8000bb2:	075f      	lsls	r7, r3, #29
 8000bb4:	025b      	lsls	r3, r3, #9
 8000bb6:	4317      	orrs	r7, r2
 8000bb8:	0b1b      	lsrs	r3, r3, #12
 8000bba:	0d62      	lsrs	r2, r4, #21
 8000bbc:	e002      	b.n	8000bc4 <__aeabi_ddiv+0x11c>
 8000bbe:	2300      	movs	r3, #0
 8000bc0:	2700      	movs	r7, #0
 8000bc2:	4a58      	ldr	r2, [pc, #352]	; (8000d24 <__aeabi_ddiv+0x27c>)
 8000bc4:	2100      	movs	r1, #0
 8000bc6:	031b      	lsls	r3, r3, #12
 8000bc8:	0b1c      	lsrs	r4, r3, #12
 8000bca:	0d0b      	lsrs	r3, r1, #20
 8000bcc:	051b      	lsls	r3, r3, #20
 8000bce:	4323      	orrs	r3, r4
 8000bd0:	0514      	lsls	r4, r2, #20
 8000bd2:	4a5a      	ldr	r2, [pc, #360]	; (8000d3c <__aeabi_ddiv+0x294>)
 8000bd4:	0038      	movs	r0, r7
 8000bd6:	4013      	ands	r3, r2
 8000bd8:	431c      	orrs	r4, r3
 8000bda:	4653      	mov	r3, sl
 8000bdc:	0064      	lsls	r4, r4, #1
 8000bde:	07db      	lsls	r3, r3, #31
 8000be0:	0864      	lsrs	r4, r4, #1
 8000be2:	431c      	orrs	r4, r3
 8000be4:	0021      	movs	r1, r4
 8000be6:	b005      	add	sp, #20
 8000be8:	bc3c      	pop	{r2, r3, r4, r5}
 8000bea:	4690      	mov	r8, r2
 8000bec:	4699      	mov	r9, r3
 8000bee:	46a2      	mov	sl, r4
 8000bf0:	46ab      	mov	fp, r5
 8000bf2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000bf4:	2201      	movs	r2, #1
 8000bf6:	4252      	negs	r2, r2
 8000bf8:	2301      	movs	r3, #1
 8000bfa:	1b1b      	subs	r3, r3, r4
 8000bfc:	2b38      	cmp	r3, #56	; 0x38
 8000bfe:	dc00      	bgt.n	8000c02 <__aeabi_ddiv+0x15a>
 8000c00:	e1ad      	b.n	8000f5e <__aeabi_ddiv+0x4b6>
 8000c02:	2200      	movs	r2, #0
 8000c04:	2300      	movs	r3, #0
 8000c06:	2700      	movs	r7, #0
 8000c08:	e7dc      	b.n	8000bc4 <__aeabi_ddiv+0x11c>
 8000c0a:	465b      	mov	r3, fp
 8000c0c:	4333      	orrs	r3, r6
 8000c0e:	4699      	mov	r9, r3
 8000c10:	d05e      	beq.n	8000cd0 <__aeabi_ddiv+0x228>
 8000c12:	2e00      	cmp	r6, #0
 8000c14:	d100      	bne.n	8000c18 <__aeabi_ddiv+0x170>
 8000c16:	e18a      	b.n	8000f2e <__aeabi_ddiv+0x486>
 8000c18:	0030      	movs	r0, r6
 8000c1a:	f001 f943 	bl	8001ea4 <__clzsi2>
 8000c1e:	0003      	movs	r3, r0
 8000c20:	3b0b      	subs	r3, #11
 8000c22:	2b1c      	cmp	r3, #28
 8000c24:	dd00      	ble.n	8000c28 <__aeabi_ddiv+0x180>
 8000c26:	e17b      	b.n	8000f20 <__aeabi_ddiv+0x478>
 8000c28:	221d      	movs	r2, #29
 8000c2a:	1ad3      	subs	r3, r2, r3
 8000c2c:	465a      	mov	r2, fp
 8000c2e:	0001      	movs	r1, r0
 8000c30:	40da      	lsrs	r2, r3
 8000c32:	3908      	subs	r1, #8
 8000c34:	408e      	lsls	r6, r1
 8000c36:	0013      	movs	r3, r2
 8000c38:	465f      	mov	r7, fp
 8000c3a:	4333      	orrs	r3, r6
 8000c3c:	4699      	mov	r9, r3
 8000c3e:	408f      	lsls	r7, r1
 8000c40:	4b3f      	ldr	r3, [pc, #252]	; (8000d40 <__aeabi_ddiv+0x298>)
 8000c42:	2600      	movs	r6, #0
 8000c44:	1a1b      	subs	r3, r3, r0
 8000c46:	9300      	str	r3, [sp, #0]
 8000c48:	2300      	movs	r3, #0
 8000c4a:	9302      	str	r3, [sp, #8]
 8000c4c:	e752      	b.n	8000af4 <__aeabi_ddiv+0x4c>
 8000c4e:	4641      	mov	r1, r8
 8000c50:	4653      	mov	r3, sl
 8000c52:	430b      	orrs	r3, r1
 8000c54:	493b      	ldr	r1, [pc, #236]	; (8000d44 <__aeabi_ddiv+0x29c>)
 8000c56:	469b      	mov	fp, r3
 8000c58:	468c      	mov	ip, r1
 8000c5a:	9b00      	ldr	r3, [sp, #0]
 8000c5c:	4463      	add	r3, ip
 8000c5e:	9300      	str	r3, [sp, #0]
 8000c60:	465b      	mov	r3, fp
 8000c62:	2b00      	cmp	r3, #0
 8000c64:	d13b      	bne.n	8000cde <__aeabi_ddiv+0x236>
 8000c66:	2302      	movs	r3, #2
 8000c68:	2200      	movs	r2, #0
 8000c6a:	431e      	orrs	r6, r3
 8000c6c:	2102      	movs	r1, #2
 8000c6e:	e761      	b.n	8000b34 <__aeabi_ddiv+0x8c>
 8000c70:	4643      	mov	r3, r8
 8000c72:	4313      	orrs	r3, r2
 8000c74:	469b      	mov	fp, r3
 8000c76:	d037      	beq.n	8000ce8 <__aeabi_ddiv+0x240>
 8000c78:	4643      	mov	r3, r8
 8000c7a:	2b00      	cmp	r3, #0
 8000c7c:	d100      	bne.n	8000c80 <__aeabi_ddiv+0x1d8>
 8000c7e:	e162      	b.n	8000f46 <__aeabi_ddiv+0x49e>
 8000c80:	4640      	mov	r0, r8
 8000c82:	f001 f90f 	bl	8001ea4 <__clzsi2>
 8000c86:	0003      	movs	r3, r0
 8000c88:	3b0b      	subs	r3, #11
 8000c8a:	2b1c      	cmp	r3, #28
 8000c8c:	dd00      	ble.n	8000c90 <__aeabi_ddiv+0x1e8>
 8000c8e:	e153      	b.n	8000f38 <__aeabi_ddiv+0x490>
 8000c90:	0002      	movs	r2, r0
 8000c92:	4641      	mov	r1, r8
 8000c94:	3a08      	subs	r2, #8
 8000c96:	4091      	lsls	r1, r2
 8000c98:	4688      	mov	r8, r1
 8000c9a:	211d      	movs	r1, #29
 8000c9c:	1acb      	subs	r3, r1, r3
 8000c9e:	4651      	mov	r1, sl
 8000ca0:	40d9      	lsrs	r1, r3
 8000ca2:	000b      	movs	r3, r1
 8000ca4:	4641      	mov	r1, r8
 8000ca6:	430b      	orrs	r3, r1
 8000ca8:	469b      	mov	fp, r3
 8000caa:	4653      	mov	r3, sl
 8000cac:	4093      	lsls	r3, r2
 8000cae:	001a      	movs	r2, r3
 8000cb0:	9b00      	ldr	r3, [sp, #0]
 8000cb2:	4925      	ldr	r1, [pc, #148]	; (8000d48 <__aeabi_ddiv+0x2a0>)
 8000cb4:	469c      	mov	ip, r3
 8000cb6:	4460      	add	r0, ip
 8000cb8:	0003      	movs	r3, r0
 8000cba:	468c      	mov	ip, r1
 8000cbc:	4463      	add	r3, ip
 8000cbe:	9300      	str	r3, [sp, #0]
 8000cc0:	2100      	movs	r1, #0
 8000cc2:	e737      	b.n	8000b34 <__aeabi_ddiv+0x8c>
 8000cc4:	2303      	movs	r3, #3
 8000cc6:	46b1      	mov	r9, r6
 8000cc8:	9000      	str	r0, [sp, #0]
 8000cca:	260c      	movs	r6, #12
 8000ccc:	9302      	str	r3, [sp, #8]
 8000cce:	e711      	b.n	8000af4 <__aeabi_ddiv+0x4c>
 8000cd0:	2300      	movs	r3, #0
 8000cd2:	9300      	str	r3, [sp, #0]
 8000cd4:	3301      	adds	r3, #1
 8000cd6:	2604      	movs	r6, #4
 8000cd8:	2700      	movs	r7, #0
 8000cda:	9302      	str	r3, [sp, #8]
 8000cdc:	e70a      	b.n	8000af4 <__aeabi_ddiv+0x4c>
 8000cde:	2303      	movs	r3, #3
 8000ce0:	46c3      	mov	fp, r8
 8000ce2:	431e      	orrs	r6, r3
 8000ce4:	2103      	movs	r1, #3
 8000ce6:	e725      	b.n	8000b34 <__aeabi_ddiv+0x8c>
 8000ce8:	3301      	adds	r3, #1
 8000cea:	431e      	orrs	r6, r3
 8000cec:	2200      	movs	r2, #0
 8000cee:	2101      	movs	r1, #1
 8000cf0:	e720      	b.n	8000b34 <__aeabi_ddiv+0x8c>
 8000cf2:	2300      	movs	r3, #0
 8000cf4:	469a      	mov	sl, r3
 8000cf6:	2380      	movs	r3, #128	; 0x80
 8000cf8:	2700      	movs	r7, #0
 8000cfa:	031b      	lsls	r3, r3, #12
 8000cfc:	4a09      	ldr	r2, [pc, #36]	; (8000d24 <__aeabi_ddiv+0x27c>)
 8000cfe:	e761      	b.n	8000bc4 <__aeabi_ddiv+0x11c>
 8000d00:	2380      	movs	r3, #128	; 0x80
 8000d02:	4649      	mov	r1, r9
 8000d04:	031b      	lsls	r3, r3, #12
 8000d06:	4219      	tst	r1, r3
 8000d08:	d100      	bne.n	8000d0c <__aeabi_ddiv+0x264>
 8000d0a:	e0e2      	b.n	8000ed2 <__aeabi_ddiv+0x42a>
 8000d0c:	4659      	mov	r1, fp
 8000d0e:	4219      	tst	r1, r3
 8000d10:	d000      	beq.n	8000d14 <__aeabi_ddiv+0x26c>
 8000d12:	e0de      	b.n	8000ed2 <__aeabi_ddiv+0x42a>
 8000d14:	430b      	orrs	r3, r1
 8000d16:	031b      	lsls	r3, r3, #12
 8000d18:	0017      	movs	r7, r2
 8000d1a:	0b1b      	lsrs	r3, r3, #12
 8000d1c:	46a2      	mov	sl, r4
 8000d1e:	4a01      	ldr	r2, [pc, #4]	; (8000d24 <__aeabi_ddiv+0x27c>)
 8000d20:	e750      	b.n	8000bc4 <__aeabi_ddiv+0x11c>
 8000d22:	46c0      	nop			; (mov r8, r8)
 8000d24:	000007ff 	.word	0x000007ff
 8000d28:	fffffc01 	.word	0xfffffc01
 8000d2c:	08005eb0 	.word	0x08005eb0
 8000d30:	000003ff 	.word	0x000003ff
 8000d34:	feffffff 	.word	0xfeffffff
 8000d38:	000007fe 	.word	0x000007fe
 8000d3c:	800fffff 	.word	0x800fffff
 8000d40:	fffffc0d 	.word	0xfffffc0d
 8000d44:	fffff801 	.word	0xfffff801
 8000d48:	000003f3 	.word	0x000003f3
 8000d4c:	45d9      	cmp	r9, fp
 8000d4e:	d900      	bls.n	8000d52 <__aeabi_ddiv+0x2aa>
 8000d50:	e0cb      	b.n	8000eea <__aeabi_ddiv+0x442>
 8000d52:	d100      	bne.n	8000d56 <__aeabi_ddiv+0x2ae>
 8000d54:	e0c6      	b.n	8000ee4 <__aeabi_ddiv+0x43c>
 8000d56:	003c      	movs	r4, r7
 8000d58:	4648      	mov	r0, r9
 8000d5a:	2700      	movs	r7, #0
 8000d5c:	9b00      	ldr	r3, [sp, #0]
 8000d5e:	3b01      	subs	r3, #1
 8000d60:	9300      	str	r3, [sp, #0]
 8000d62:	465b      	mov	r3, fp
 8000d64:	0e16      	lsrs	r6, r2, #24
 8000d66:	021b      	lsls	r3, r3, #8
 8000d68:	431e      	orrs	r6, r3
 8000d6a:	0213      	lsls	r3, r2, #8
 8000d6c:	4698      	mov	r8, r3
 8000d6e:	0433      	lsls	r3, r6, #16
 8000d70:	0c1b      	lsrs	r3, r3, #16
 8000d72:	4699      	mov	r9, r3
 8000d74:	0c31      	lsrs	r1, r6, #16
 8000d76:	9101      	str	r1, [sp, #4]
 8000d78:	f7ff fa4c 	bl	8000214 <__aeabi_uidivmod>
 8000d7c:	464a      	mov	r2, r9
 8000d7e:	4342      	muls	r2, r0
 8000d80:	040b      	lsls	r3, r1, #16
 8000d82:	0c21      	lsrs	r1, r4, #16
 8000d84:	0005      	movs	r5, r0
 8000d86:	4319      	orrs	r1, r3
 8000d88:	428a      	cmp	r2, r1
 8000d8a:	d907      	bls.n	8000d9c <__aeabi_ddiv+0x2f4>
 8000d8c:	1989      	adds	r1, r1, r6
 8000d8e:	3d01      	subs	r5, #1
 8000d90:	428e      	cmp	r6, r1
 8000d92:	d803      	bhi.n	8000d9c <__aeabi_ddiv+0x2f4>
 8000d94:	428a      	cmp	r2, r1
 8000d96:	d901      	bls.n	8000d9c <__aeabi_ddiv+0x2f4>
 8000d98:	1e85      	subs	r5, r0, #2
 8000d9a:	1989      	adds	r1, r1, r6
 8000d9c:	1a88      	subs	r0, r1, r2
 8000d9e:	9901      	ldr	r1, [sp, #4]
 8000da0:	f7ff fa38 	bl	8000214 <__aeabi_uidivmod>
 8000da4:	0409      	lsls	r1, r1, #16
 8000da6:	468c      	mov	ip, r1
 8000da8:	464a      	mov	r2, r9
 8000daa:	0421      	lsls	r1, r4, #16
 8000dac:	4664      	mov	r4, ip
 8000dae:	4342      	muls	r2, r0
 8000db0:	0c09      	lsrs	r1, r1, #16
 8000db2:	0003      	movs	r3, r0
 8000db4:	4321      	orrs	r1, r4
 8000db6:	428a      	cmp	r2, r1
 8000db8:	d904      	bls.n	8000dc4 <__aeabi_ddiv+0x31c>
 8000dba:	1989      	adds	r1, r1, r6
 8000dbc:	3b01      	subs	r3, #1
 8000dbe:	428e      	cmp	r6, r1
 8000dc0:	d800      	bhi.n	8000dc4 <__aeabi_ddiv+0x31c>
 8000dc2:	e0f1      	b.n	8000fa8 <__aeabi_ddiv+0x500>
 8000dc4:	042d      	lsls	r5, r5, #16
 8000dc6:	431d      	orrs	r5, r3
 8000dc8:	46ab      	mov	fp, r5
 8000dca:	4643      	mov	r3, r8
 8000dcc:	1a89      	subs	r1, r1, r2
 8000dce:	4642      	mov	r2, r8
 8000dd0:	0c28      	lsrs	r0, r5, #16
 8000dd2:	0412      	lsls	r2, r2, #16
 8000dd4:	0c1d      	lsrs	r5, r3, #16
 8000dd6:	465b      	mov	r3, fp
 8000dd8:	0c14      	lsrs	r4, r2, #16
 8000dda:	0022      	movs	r2, r4
 8000ddc:	041b      	lsls	r3, r3, #16
 8000dde:	0c1b      	lsrs	r3, r3, #16
 8000de0:	435a      	muls	r2, r3
 8000de2:	9403      	str	r4, [sp, #12]
 8000de4:	436b      	muls	r3, r5
 8000de6:	4344      	muls	r4, r0
 8000de8:	9502      	str	r5, [sp, #8]
 8000dea:	4368      	muls	r0, r5
 8000dec:	191b      	adds	r3, r3, r4
 8000dee:	0c15      	lsrs	r5, r2, #16
 8000df0:	18eb      	adds	r3, r5, r3
 8000df2:	429c      	cmp	r4, r3
 8000df4:	d903      	bls.n	8000dfe <__aeabi_ddiv+0x356>
 8000df6:	2480      	movs	r4, #128	; 0x80
 8000df8:	0264      	lsls	r4, r4, #9
 8000dfa:	46a4      	mov	ip, r4
 8000dfc:	4460      	add	r0, ip
 8000dfe:	0c1c      	lsrs	r4, r3, #16
 8000e00:	0415      	lsls	r5, r2, #16
 8000e02:	041b      	lsls	r3, r3, #16
 8000e04:	0c2d      	lsrs	r5, r5, #16
 8000e06:	1820      	adds	r0, r4, r0
 8000e08:	195d      	adds	r5, r3, r5
 8000e0a:	4281      	cmp	r1, r0
 8000e0c:	d377      	bcc.n	8000efe <__aeabi_ddiv+0x456>
 8000e0e:	d073      	beq.n	8000ef8 <__aeabi_ddiv+0x450>
 8000e10:	1a0c      	subs	r4, r1, r0
 8000e12:	4aa2      	ldr	r2, [pc, #648]	; (800109c <__aeabi_ddiv+0x5f4>)
 8000e14:	1b7d      	subs	r5, r7, r5
 8000e16:	42af      	cmp	r7, r5
 8000e18:	41bf      	sbcs	r7, r7
 8000e1a:	4694      	mov	ip, r2
 8000e1c:	9b00      	ldr	r3, [sp, #0]
 8000e1e:	427f      	negs	r7, r7
 8000e20:	4463      	add	r3, ip
 8000e22:	1be0      	subs	r0, r4, r7
 8000e24:	001c      	movs	r4, r3
 8000e26:	4286      	cmp	r6, r0
 8000e28:	d100      	bne.n	8000e2c <__aeabi_ddiv+0x384>
 8000e2a:	e0db      	b.n	8000fe4 <__aeabi_ddiv+0x53c>
 8000e2c:	9901      	ldr	r1, [sp, #4]
 8000e2e:	f7ff f9f1 	bl	8000214 <__aeabi_uidivmod>
 8000e32:	464a      	mov	r2, r9
 8000e34:	4342      	muls	r2, r0
 8000e36:	040b      	lsls	r3, r1, #16
 8000e38:	0c29      	lsrs	r1, r5, #16
 8000e3a:	0007      	movs	r7, r0
 8000e3c:	4319      	orrs	r1, r3
 8000e3e:	428a      	cmp	r2, r1
 8000e40:	d907      	bls.n	8000e52 <__aeabi_ddiv+0x3aa>
 8000e42:	1989      	adds	r1, r1, r6
 8000e44:	3f01      	subs	r7, #1
 8000e46:	428e      	cmp	r6, r1
 8000e48:	d803      	bhi.n	8000e52 <__aeabi_ddiv+0x3aa>
 8000e4a:	428a      	cmp	r2, r1
 8000e4c:	d901      	bls.n	8000e52 <__aeabi_ddiv+0x3aa>
 8000e4e:	1e87      	subs	r7, r0, #2
 8000e50:	1989      	adds	r1, r1, r6
 8000e52:	1a88      	subs	r0, r1, r2
 8000e54:	9901      	ldr	r1, [sp, #4]
 8000e56:	f7ff f9dd 	bl	8000214 <__aeabi_uidivmod>
 8000e5a:	0409      	lsls	r1, r1, #16
 8000e5c:	464a      	mov	r2, r9
 8000e5e:	4689      	mov	r9, r1
 8000e60:	0429      	lsls	r1, r5, #16
 8000e62:	464d      	mov	r5, r9
 8000e64:	4342      	muls	r2, r0
 8000e66:	0c09      	lsrs	r1, r1, #16
 8000e68:	0003      	movs	r3, r0
 8000e6a:	4329      	orrs	r1, r5
 8000e6c:	428a      	cmp	r2, r1
 8000e6e:	d907      	bls.n	8000e80 <__aeabi_ddiv+0x3d8>
 8000e70:	1989      	adds	r1, r1, r6
 8000e72:	3b01      	subs	r3, #1
 8000e74:	428e      	cmp	r6, r1
 8000e76:	d803      	bhi.n	8000e80 <__aeabi_ddiv+0x3d8>
 8000e78:	428a      	cmp	r2, r1
 8000e7a:	d901      	bls.n	8000e80 <__aeabi_ddiv+0x3d8>
 8000e7c:	1e83      	subs	r3, r0, #2
 8000e7e:	1989      	adds	r1, r1, r6
 8000e80:	043f      	lsls	r7, r7, #16
 8000e82:	1a89      	subs	r1, r1, r2
 8000e84:	003a      	movs	r2, r7
 8000e86:	9f03      	ldr	r7, [sp, #12]
 8000e88:	431a      	orrs	r2, r3
 8000e8a:	0038      	movs	r0, r7
 8000e8c:	0413      	lsls	r3, r2, #16
 8000e8e:	0c1b      	lsrs	r3, r3, #16
 8000e90:	4358      	muls	r0, r3
 8000e92:	4681      	mov	r9, r0
 8000e94:	9802      	ldr	r0, [sp, #8]
 8000e96:	0c15      	lsrs	r5, r2, #16
 8000e98:	436f      	muls	r7, r5
 8000e9a:	4343      	muls	r3, r0
 8000e9c:	4345      	muls	r5, r0
 8000e9e:	4648      	mov	r0, r9
 8000ea0:	0c00      	lsrs	r0, r0, #16
 8000ea2:	4684      	mov	ip, r0
 8000ea4:	19db      	adds	r3, r3, r7
 8000ea6:	4463      	add	r3, ip
 8000ea8:	429f      	cmp	r7, r3
 8000eaa:	d903      	bls.n	8000eb4 <__aeabi_ddiv+0x40c>
 8000eac:	2080      	movs	r0, #128	; 0x80
 8000eae:	0240      	lsls	r0, r0, #9
 8000eb0:	4684      	mov	ip, r0
 8000eb2:	4465      	add	r5, ip
 8000eb4:	4648      	mov	r0, r9
 8000eb6:	0c1f      	lsrs	r7, r3, #16
 8000eb8:	0400      	lsls	r0, r0, #16
 8000eba:	041b      	lsls	r3, r3, #16
 8000ebc:	0c00      	lsrs	r0, r0, #16
 8000ebe:	197d      	adds	r5, r7, r5
 8000ec0:	1818      	adds	r0, r3, r0
 8000ec2:	42a9      	cmp	r1, r5
 8000ec4:	d200      	bcs.n	8000ec8 <__aeabi_ddiv+0x420>
 8000ec6:	e084      	b.n	8000fd2 <__aeabi_ddiv+0x52a>
 8000ec8:	d100      	bne.n	8000ecc <__aeabi_ddiv+0x424>
 8000eca:	e07f      	b.n	8000fcc <__aeabi_ddiv+0x524>
 8000ecc:	2301      	movs	r3, #1
 8000ece:	431a      	orrs	r2, r3
 8000ed0:	e657      	b.n	8000b82 <__aeabi_ddiv+0xda>
 8000ed2:	2380      	movs	r3, #128	; 0x80
 8000ed4:	464a      	mov	r2, r9
 8000ed6:	031b      	lsls	r3, r3, #12
 8000ed8:	4313      	orrs	r3, r2
 8000eda:	031b      	lsls	r3, r3, #12
 8000edc:	0b1b      	lsrs	r3, r3, #12
 8000ede:	46aa      	mov	sl, r5
 8000ee0:	4a6f      	ldr	r2, [pc, #444]	; (80010a0 <__aeabi_ddiv+0x5f8>)
 8000ee2:	e66f      	b.n	8000bc4 <__aeabi_ddiv+0x11c>
 8000ee4:	42ba      	cmp	r2, r7
 8000ee6:	d900      	bls.n	8000eea <__aeabi_ddiv+0x442>
 8000ee8:	e735      	b.n	8000d56 <__aeabi_ddiv+0x2ae>
 8000eea:	464b      	mov	r3, r9
 8000eec:	07dc      	lsls	r4, r3, #31
 8000eee:	0858      	lsrs	r0, r3, #1
 8000ef0:	087b      	lsrs	r3, r7, #1
 8000ef2:	431c      	orrs	r4, r3
 8000ef4:	07ff      	lsls	r7, r7, #31
 8000ef6:	e734      	b.n	8000d62 <__aeabi_ddiv+0x2ba>
 8000ef8:	2400      	movs	r4, #0
 8000efa:	42af      	cmp	r7, r5
 8000efc:	d289      	bcs.n	8000e12 <__aeabi_ddiv+0x36a>
 8000efe:	4447      	add	r7, r8
 8000f00:	4547      	cmp	r7, r8
 8000f02:	41a4      	sbcs	r4, r4
 8000f04:	465b      	mov	r3, fp
 8000f06:	4264      	negs	r4, r4
 8000f08:	19a4      	adds	r4, r4, r6
 8000f0a:	1864      	adds	r4, r4, r1
 8000f0c:	3b01      	subs	r3, #1
 8000f0e:	42a6      	cmp	r6, r4
 8000f10:	d21e      	bcs.n	8000f50 <__aeabi_ddiv+0x4a8>
 8000f12:	42a0      	cmp	r0, r4
 8000f14:	d86d      	bhi.n	8000ff2 <__aeabi_ddiv+0x54a>
 8000f16:	d100      	bne.n	8000f1a <__aeabi_ddiv+0x472>
 8000f18:	e0b6      	b.n	8001088 <__aeabi_ddiv+0x5e0>
 8000f1a:	1a24      	subs	r4, r4, r0
 8000f1c:	469b      	mov	fp, r3
 8000f1e:	e778      	b.n	8000e12 <__aeabi_ddiv+0x36a>
 8000f20:	0003      	movs	r3, r0
 8000f22:	465a      	mov	r2, fp
 8000f24:	3b28      	subs	r3, #40	; 0x28
 8000f26:	409a      	lsls	r2, r3
 8000f28:	2700      	movs	r7, #0
 8000f2a:	4691      	mov	r9, r2
 8000f2c:	e688      	b.n	8000c40 <__aeabi_ddiv+0x198>
 8000f2e:	4658      	mov	r0, fp
 8000f30:	f000 ffb8 	bl	8001ea4 <__clzsi2>
 8000f34:	3020      	adds	r0, #32
 8000f36:	e672      	b.n	8000c1e <__aeabi_ddiv+0x176>
 8000f38:	0003      	movs	r3, r0
 8000f3a:	4652      	mov	r2, sl
 8000f3c:	3b28      	subs	r3, #40	; 0x28
 8000f3e:	409a      	lsls	r2, r3
 8000f40:	4693      	mov	fp, r2
 8000f42:	2200      	movs	r2, #0
 8000f44:	e6b4      	b.n	8000cb0 <__aeabi_ddiv+0x208>
 8000f46:	4650      	mov	r0, sl
 8000f48:	f000 ffac 	bl	8001ea4 <__clzsi2>
 8000f4c:	3020      	adds	r0, #32
 8000f4e:	e69a      	b.n	8000c86 <__aeabi_ddiv+0x1de>
 8000f50:	42a6      	cmp	r6, r4
 8000f52:	d1e2      	bne.n	8000f1a <__aeabi_ddiv+0x472>
 8000f54:	45b8      	cmp	r8, r7
 8000f56:	d9dc      	bls.n	8000f12 <__aeabi_ddiv+0x46a>
 8000f58:	1a34      	subs	r4, r6, r0
 8000f5a:	469b      	mov	fp, r3
 8000f5c:	e759      	b.n	8000e12 <__aeabi_ddiv+0x36a>
 8000f5e:	2b1f      	cmp	r3, #31
 8000f60:	dc65      	bgt.n	800102e <__aeabi_ddiv+0x586>
 8000f62:	4c50      	ldr	r4, [pc, #320]	; (80010a4 <__aeabi_ddiv+0x5fc>)
 8000f64:	9900      	ldr	r1, [sp, #0]
 8000f66:	46a4      	mov	ip, r4
 8000f68:	465c      	mov	r4, fp
 8000f6a:	4461      	add	r1, ip
 8000f6c:	0008      	movs	r0, r1
 8000f6e:	408c      	lsls	r4, r1
 8000f70:	0011      	movs	r1, r2
 8000f72:	4082      	lsls	r2, r0
 8000f74:	40d9      	lsrs	r1, r3
 8000f76:	1e50      	subs	r0, r2, #1
 8000f78:	4182      	sbcs	r2, r0
 8000f7a:	430c      	orrs	r4, r1
 8000f7c:	4314      	orrs	r4, r2
 8000f7e:	465a      	mov	r2, fp
 8000f80:	40da      	lsrs	r2, r3
 8000f82:	0013      	movs	r3, r2
 8000f84:	0762      	lsls	r2, r4, #29
 8000f86:	d009      	beq.n	8000f9c <__aeabi_ddiv+0x4f4>
 8000f88:	220f      	movs	r2, #15
 8000f8a:	4022      	ands	r2, r4
 8000f8c:	2a04      	cmp	r2, #4
 8000f8e:	d005      	beq.n	8000f9c <__aeabi_ddiv+0x4f4>
 8000f90:	0022      	movs	r2, r4
 8000f92:	1d14      	adds	r4, r2, #4
 8000f94:	4294      	cmp	r4, r2
 8000f96:	4189      	sbcs	r1, r1
 8000f98:	4249      	negs	r1, r1
 8000f9a:	185b      	adds	r3, r3, r1
 8000f9c:	021a      	lsls	r2, r3, #8
 8000f9e:	d562      	bpl.n	8001066 <__aeabi_ddiv+0x5be>
 8000fa0:	2201      	movs	r2, #1
 8000fa2:	2300      	movs	r3, #0
 8000fa4:	2700      	movs	r7, #0
 8000fa6:	e60d      	b.n	8000bc4 <__aeabi_ddiv+0x11c>
 8000fa8:	428a      	cmp	r2, r1
 8000faa:	d800      	bhi.n	8000fae <__aeabi_ddiv+0x506>
 8000fac:	e70a      	b.n	8000dc4 <__aeabi_ddiv+0x31c>
 8000fae:	1e83      	subs	r3, r0, #2
 8000fb0:	1989      	adds	r1, r1, r6
 8000fb2:	e707      	b.n	8000dc4 <__aeabi_ddiv+0x31c>
 8000fb4:	230f      	movs	r3, #15
 8000fb6:	4013      	ands	r3, r2
 8000fb8:	2b04      	cmp	r3, #4
 8000fba:	d100      	bne.n	8000fbe <__aeabi_ddiv+0x516>
 8000fbc:	e5e6      	b.n	8000b8c <__aeabi_ddiv+0xe4>
 8000fbe:	1d17      	adds	r7, r2, #4
 8000fc0:	4297      	cmp	r7, r2
 8000fc2:	4192      	sbcs	r2, r2
 8000fc4:	4253      	negs	r3, r2
 8000fc6:	449b      	add	fp, r3
 8000fc8:	08fa      	lsrs	r2, r7, #3
 8000fca:	e5e0      	b.n	8000b8e <__aeabi_ddiv+0xe6>
 8000fcc:	2800      	cmp	r0, #0
 8000fce:	d100      	bne.n	8000fd2 <__aeabi_ddiv+0x52a>
 8000fd0:	e5d7      	b.n	8000b82 <__aeabi_ddiv+0xda>
 8000fd2:	1871      	adds	r1, r6, r1
 8000fd4:	1e53      	subs	r3, r2, #1
 8000fd6:	42b1      	cmp	r1, r6
 8000fd8:	d327      	bcc.n	800102a <__aeabi_ddiv+0x582>
 8000fda:	42a9      	cmp	r1, r5
 8000fdc:	d315      	bcc.n	800100a <__aeabi_ddiv+0x562>
 8000fde:	d058      	beq.n	8001092 <__aeabi_ddiv+0x5ea>
 8000fe0:	001a      	movs	r2, r3
 8000fe2:	e773      	b.n	8000ecc <__aeabi_ddiv+0x424>
 8000fe4:	2b00      	cmp	r3, #0
 8000fe6:	dc00      	bgt.n	8000fea <__aeabi_ddiv+0x542>
 8000fe8:	e604      	b.n	8000bf4 <__aeabi_ddiv+0x14c>
 8000fea:	2301      	movs	r3, #1
 8000fec:	2200      	movs	r2, #0
 8000fee:	449b      	add	fp, r3
 8000ff0:	e5cd      	b.n	8000b8e <__aeabi_ddiv+0xe6>
 8000ff2:	2302      	movs	r3, #2
 8000ff4:	4447      	add	r7, r8
 8000ff6:	4547      	cmp	r7, r8
 8000ff8:	4189      	sbcs	r1, r1
 8000ffa:	425b      	negs	r3, r3
 8000ffc:	469c      	mov	ip, r3
 8000ffe:	4249      	negs	r1, r1
 8001000:	1989      	adds	r1, r1, r6
 8001002:	190c      	adds	r4, r1, r4
 8001004:	44e3      	add	fp, ip
 8001006:	1a24      	subs	r4, r4, r0
 8001008:	e703      	b.n	8000e12 <__aeabi_ddiv+0x36a>
 800100a:	4643      	mov	r3, r8
 800100c:	005f      	lsls	r7, r3, #1
 800100e:	4547      	cmp	r7, r8
 8001010:	419b      	sbcs	r3, r3
 8001012:	46b8      	mov	r8, r7
 8001014:	425b      	negs	r3, r3
 8001016:	199e      	adds	r6, r3, r6
 8001018:	3a02      	subs	r2, #2
 800101a:	1989      	adds	r1, r1, r6
 800101c:	42a9      	cmp	r1, r5
 800101e:	d000      	beq.n	8001022 <__aeabi_ddiv+0x57a>
 8001020:	e754      	b.n	8000ecc <__aeabi_ddiv+0x424>
 8001022:	4540      	cmp	r0, r8
 8001024:	d000      	beq.n	8001028 <__aeabi_ddiv+0x580>
 8001026:	e751      	b.n	8000ecc <__aeabi_ddiv+0x424>
 8001028:	e5ab      	b.n	8000b82 <__aeabi_ddiv+0xda>
 800102a:	001a      	movs	r2, r3
 800102c:	e7f6      	b.n	800101c <__aeabi_ddiv+0x574>
 800102e:	211f      	movs	r1, #31
 8001030:	465f      	mov	r7, fp
 8001032:	4249      	negs	r1, r1
 8001034:	1b0c      	subs	r4, r1, r4
 8001036:	40e7      	lsrs	r7, r4
 8001038:	2b20      	cmp	r3, #32
 800103a:	d007      	beq.n	800104c <__aeabi_ddiv+0x5a4>
 800103c:	491a      	ldr	r1, [pc, #104]	; (80010a8 <__aeabi_ddiv+0x600>)
 800103e:	9b00      	ldr	r3, [sp, #0]
 8001040:	468c      	mov	ip, r1
 8001042:	4463      	add	r3, ip
 8001044:	0018      	movs	r0, r3
 8001046:	465b      	mov	r3, fp
 8001048:	4083      	lsls	r3, r0
 800104a:	431a      	orrs	r2, r3
 800104c:	1e50      	subs	r0, r2, #1
 800104e:	4182      	sbcs	r2, r0
 8001050:	433a      	orrs	r2, r7
 8001052:	2707      	movs	r7, #7
 8001054:	2300      	movs	r3, #0
 8001056:	4017      	ands	r7, r2
 8001058:	d009      	beq.n	800106e <__aeabi_ddiv+0x5c6>
 800105a:	210f      	movs	r1, #15
 800105c:	2300      	movs	r3, #0
 800105e:	4011      	ands	r1, r2
 8001060:	0014      	movs	r4, r2
 8001062:	2904      	cmp	r1, #4
 8001064:	d195      	bne.n	8000f92 <__aeabi_ddiv+0x4ea>
 8001066:	0022      	movs	r2, r4
 8001068:	075f      	lsls	r7, r3, #29
 800106a:	025b      	lsls	r3, r3, #9
 800106c:	0b1b      	lsrs	r3, r3, #12
 800106e:	08d2      	lsrs	r2, r2, #3
 8001070:	4317      	orrs	r7, r2
 8001072:	2200      	movs	r2, #0
 8001074:	e5a6      	b.n	8000bc4 <__aeabi_ddiv+0x11c>
 8001076:	2380      	movs	r3, #128	; 0x80
 8001078:	4659      	mov	r1, fp
 800107a:	031b      	lsls	r3, r3, #12
 800107c:	430b      	orrs	r3, r1
 800107e:	031b      	lsls	r3, r3, #12
 8001080:	0017      	movs	r7, r2
 8001082:	0b1b      	lsrs	r3, r3, #12
 8001084:	4a06      	ldr	r2, [pc, #24]	; (80010a0 <__aeabi_ddiv+0x5f8>)
 8001086:	e59d      	b.n	8000bc4 <__aeabi_ddiv+0x11c>
 8001088:	42bd      	cmp	r5, r7
 800108a:	d8b2      	bhi.n	8000ff2 <__aeabi_ddiv+0x54a>
 800108c:	469b      	mov	fp, r3
 800108e:	2400      	movs	r4, #0
 8001090:	e6bf      	b.n	8000e12 <__aeabi_ddiv+0x36a>
 8001092:	4580      	cmp	r8, r0
 8001094:	d3b9      	bcc.n	800100a <__aeabi_ddiv+0x562>
 8001096:	001a      	movs	r2, r3
 8001098:	e7c3      	b.n	8001022 <__aeabi_ddiv+0x57a>
 800109a:	46c0      	nop			; (mov r8, r8)
 800109c:	000003ff 	.word	0x000003ff
 80010a0:	000007ff 	.word	0x000007ff
 80010a4:	0000041e 	.word	0x0000041e
 80010a8:	0000043e 	.word	0x0000043e

080010ac <__eqdf2>:
 80010ac:	b5f0      	push	{r4, r5, r6, r7, lr}
 80010ae:	464f      	mov	r7, r9
 80010b0:	4646      	mov	r6, r8
 80010b2:	46d6      	mov	lr, sl
 80010b4:	4684      	mov	ip, r0
 80010b6:	b5c0      	push	{r6, r7, lr}
 80010b8:	4680      	mov	r8, r0
 80010ba:	4e19      	ldr	r6, [pc, #100]	; (8001120 <__eqdf2+0x74>)
 80010bc:	0318      	lsls	r0, r3, #12
 80010be:	030f      	lsls	r7, r1, #12
 80010c0:	004d      	lsls	r5, r1, #1
 80010c2:	0b00      	lsrs	r0, r0, #12
 80010c4:	005c      	lsls	r4, r3, #1
 80010c6:	4682      	mov	sl, r0
 80010c8:	0b3f      	lsrs	r7, r7, #12
 80010ca:	0d6d      	lsrs	r5, r5, #21
 80010cc:	0fc9      	lsrs	r1, r1, #31
 80010ce:	4691      	mov	r9, r2
 80010d0:	0d64      	lsrs	r4, r4, #21
 80010d2:	0fdb      	lsrs	r3, r3, #31
 80010d4:	2001      	movs	r0, #1
 80010d6:	42b5      	cmp	r5, r6
 80010d8:	d00a      	beq.n	80010f0 <__eqdf2+0x44>
 80010da:	42b4      	cmp	r4, r6
 80010dc:	d003      	beq.n	80010e6 <__eqdf2+0x3a>
 80010de:	42a5      	cmp	r5, r4
 80010e0:	d101      	bne.n	80010e6 <__eqdf2+0x3a>
 80010e2:	4557      	cmp	r7, sl
 80010e4:	d00c      	beq.n	8001100 <__eqdf2+0x54>
 80010e6:	bc1c      	pop	{r2, r3, r4}
 80010e8:	4690      	mov	r8, r2
 80010ea:	4699      	mov	r9, r3
 80010ec:	46a2      	mov	sl, r4
 80010ee:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80010f0:	4666      	mov	r6, ip
 80010f2:	433e      	orrs	r6, r7
 80010f4:	d1f7      	bne.n	80010e6 <__eqdf2+0x3a>
 80010f6:	42ac      	cmp	r4, r5
 80010f8:	d1f5      	bne.n	80010e6 <__eqdf2+0x3a>
 80010fa:	4654      	mov	r4, sl
 80010fc:	4314      	orrs	r4, r2
 80010fe:	d1f2      	bne.n	80010e6 <__eqdf2+0x3a>
 8001100:	2001      	movs	r0, #1
 8001102:	45c8      	cmp	r8, r9
 8001104:	d1ef      	bne.n	80010e6 <__eqdf2+0x3a>
 8001106:	4299      	cmp	r1, r3
 8001108:	d007      	beq.n	800111a <__eqdf2+0x6e>
 800110a:	2d00      	cmp	r5, #0
 800110c:	d1eb      	bne.n	80010e6 <__eqdf2+0x3a>
 800110e:	4663      	mov	r3, ip
 8001110:	431f      	orrs	r7, r3
 8001112:	0038      	movs	r0, r7
 8001114:	1e47      	subs	r7, r0, #1
 8001116:	41b8      	sbcs	r0, r7
 8001118:	e7e5      	b.n	80010e6 <__eqdf2+0x3a>
 800111a:	2000      	movs	r0, #0
 800111c:	e7e3      	b.n	80010e6 <__eqdf2+0x3a>
 800111e:	46c0      	nop			; (mov r8, r8)
 8001120:	000007ff 	.word	0x000007ff

08001124 <__gedf2>:
 8001124:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001126:	464f      	mov	r7, r9
 8001128:	4646      	mov	r6, r8
 800112a:	46d6      	mov	lr, sl
 800112c:	004d      	lsls	r5, r1, #1
 800112e:	b5c0      	push	{r6, r7, lr}
 8001130:	030e      	lsls	r6, r1, #12
 8001132:	0fc9      	lsrs	r1, r1, #31
 8001134:	468a      	mov	sl, r1
 8001136:	492c      	ldr	r1, [pc, #176]	; (80011e8 <__gedf2+0xc4>)
 8001138:	031f      	lsls	r7, r3, #12
 800113a:	005c      	lsls	r4, r3, #1
 800113c:	4680      	mov	r8, r0
 800113e:	0b36      	lsrs	r6, r6, #12
 8001140:	0d6d      	lsrs	r5, r5, #21
 8001142:	4691      	mov	r9, r2
 8001144:	0b3f      	lsrs	r7, r7, #12
 8001146:	0d64      	lsrs	r4, r4, #21
 8001148:	0fdb      	lsrs	r3, r3, #31
 800114a:	428d      	cmp	r5, r1
 800114c:	d01e      	beq.n	800118c <__gedf2+0x68>
 800114e:	428c      	cmp	r4, r1
 8001150:	d016      	beq.n	8001180 <__gedf2+0x5c>
 8001152:	2d00      	cmp	r5, #0
 8001154:	d11e      	bne.n	8001194 <__gedf2+0x70>
 8001156:	4330      	orrs	r0, r6
 8001158:	4684      	mov	ip, r0
 800115a:	2c00      	cmp	r4, #0
 800115c:	d101      	bne.n	8001162 <__gedf2+0x3e>
 800115e:	433a      	orrs	r2, r7
 8001160:	d023      	beq.n	80011aa <__gedf2+0x86>
 8001162:	4662      	mov	r2, ip
 8001164:	2a00      	cmp	r2, #0
 8001166:	d01a      	beq.n	800119e <__gedf2+0x7a>
 8001168:	459a      	cmp	sl, r3
 800116a:	d029      	beq.n	80011c0 <__gedf2+0x9c>
 800116c:	4651      	mov	r1, sl
 800116e:	2002      	movs	r0, #2
 8001170:	3901      	subs	r1, #1
 8001172:	4008      	ands	r0, r1
 8001174:	3801      	subs	r0, #1
 8001176:	bc1c      	pop	{r2, r3, r4}
 8001178:	4690      	mov	r8, r2
 800117a:	4699      	mov	r9, r3
 800117c:	46a2      	mov	sl, r4
 800117e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001180:	0039      	movs	r1, r7
 8001182:	4311      	orrs	r1, r2
 8001184:	d0e5      	beq.n	8001152 <__gedf2+0x2e>
 8001186:	2002      	movs	r0, #2
 8001188:	4240      	negs	r0, r0
 800118a:	e7f4      	b.n	8001176 <__gedf2+0x52>
 800118c:	4330      	orrs	r0, r6
 800118e:	d1fa      	bne.n	8001186 <__gedf2+0x62>
 8001190:	42ac      	cmp	r4, r5
 8001192:	d00f      	beq.n	80011b4 <__gedf2+0x90>
 8001194:	2c00      	cmp	r4, #0
 8001196:	d10f      	bne.n	80011b8 <__gedf2+0x94>
 8001198:	433a      	orrs	r2, r7
 800119a:	d0e7      	beq.n	800116c <__gedf2+0x48>
 800119c:	e00c      	b.n	80011b8 <__gedf2+0x94>
 800119e:	2201      	movs	r2, #1
 80011a0:	3b01      	subs	r3, #1
 80011a2:	4393      	bics	r3, r2
 80011a4:	0018      	movs	r0, r3
 80011a6:	3001      	adds	r0, #1
 80011a8:	e7e5      	b.n	8001176 <__gedf2+0x52>
 80011aa:	4663      	mov	r3, ip
 80011ac:	2000      	movs	r0, #0
 80011ae:	2b00      	cmp	r3, #0
 80011b0:	d0e1      	beq.n	8001176 <__gedf2+0x52>
 80011b2:	e7db      	b.n	800116c <__gedf2+0x48>
 80011b4:	433a      	orrs	r2, r7
 80011b6:	d1e6      	bne.n	8001186 <__gedf2+0x62>
 80011b8:	459a      	cmp	sl, r3
 80011ba:	d1d7      	bne.n	800116c <__gedf2+0x48>
 80011bc:	42a5      	cmp	r5, r4
 80011be:	dcd5      	bgt.n	800116c <__gedf2+0x48>
 80011c0:	42a5      	cmp	r5, r4
 80011c2:	db05      	blt.n	80011d0 <__gedf2+0xac>
 80011c4:	42be      	cmp	r6, r7
 80011c6:	d8d1      	bhi.n	800116c <__gedf2+0x48>
 80011c8:	d008      	beq.n	80011dc <__gedf2+0xb8>
 80011ca:	2000      	movs	r0, #0
 80011cc:	42be      	cmp	r6, r7
 80011ce:	d2d2      	bcs.n	8001176 <__gedf2+0x52>
 80011d0:	4650      	mov	r0, sl
 80011d2:	2301      	movs	r3, #1
 80011d4:	3801      	subs	r0, #1
 80011d6:	4398      	bics	r0, r3
 80011d8:	3001      	adds	r0, #1
 80011da:	e7cc      	b.n	8001176 <__gedf2+0x52>
 80011dc:	45c8      	cmp	r8, r9
 80011de:	d8c5      	bhi.n	800116c <__gedf2+0x48>
 80011e0:	2000      	movs	r0, #0
 80011e2:	45c8      	cmp	r8, r9
 80011e4:	d3f4      	bcc.n	80011d0 <__gedf2+0xac>
 80011e6:	e7c6      	b.n	8001176 <__gedf2+0x52>
 80011e8:	000007ff 	.word	0x000007ff

080011ec <__ledf2>:
 80011ec:	b5f0      	push	{r4, r5, r6, r7, lr}
 80011ee:	464f      	mov	r7, r9
 80011f0:	4646      	mov	r6, r8
 80011f2:	46d6      	mov	lr, sl
 80011f4:	004d      	lsls	r5, r1, #1
 80011f6:	b5c0      	push	{r6, r7, lr}
 80011f8:	030e      	lsls	r6, r1, #12
 80011fa:	0fc9      	lsrs	r1, r1, #31
 80011fc:	468a      	mov	sl, r1
 80011fe:	492e      	ldr	r1, [pc, #184]	; (80012b8 <__ledf2+0xcc>)
 8001200:	031f      	lsls	r7, r3, #12
 8001202:	005c      	lsls	r4, r3, #1
 8001204:	4680      	mov	r8, r0
 8001206:	0b36      	lsrs	r6, r6, #12
 8001208:	0d6d      	lsrs	r5, r5, #21
 800120a:	4691      	mov	r9, r2
 800120c:	0b3f      	lsrs	r7, r7, #12
 800120e:	0d64      	lsrs	r4, r4, #21
 8001210:	0fdb      	lsrs	r3, r3, #31
 8001212:	428d      	cmp	r5, r1
 8001214:	d018      	beq.n	8001248 <__ledf2+0x5c>
 8001216:	428c      	cmp	r4, r1
 8001218:	d011      	beq.n	800123e <__ledf2+0x52>
 800121a:	2d00      	cmp	r5, #0
 800121c:	d118      	bne.n	8001250 <__ledf2+0x64>
 800121e:	4330      	orrs	r0, r6
 8001220:	4684      	mov	ip, r0
 8001222:	2c00      	cmp	r4, #0
 8001224:	d11e      	bne.n	8001264 <__ledf2+0x78>
 8001226:	433a      	orrs	r2, r7
 8001228:	d11c      	bne.n	8001264 <__ledf2+0x78>
 800122a:	4663      	mov	r3, ip
 800122c:	2000      	movs	r0, #0
 800122e:	2b00      	cmp	r3, #0
 8001230:	d030      	beq.n	8001294 <__ledf2+0xa8>
 8001232:	4651      	mov	r1, sl
 8001234:	2002      	movs	r0, #2
 8001236:	3901      	subs	r1, #1
 8001238:	4008      	ands	r0, r1
 800123a:	3801      	subs	r0, #1
 800123c:	e02a      	b.n	8001294 <__ledf2+0xa8>
 800123e:	0039      	movs	r1, r7
 8001240:	4311      	orrs	r1, r2
 8001242:	d0ea      	beq.n	800121a <__ledf2+0x2e>
 8001244:	2002      	movs	r0, #2
 8001246:	e025      	b.n	8001294 <__ledf2+0xa8>
 8001248:	4330      	orrs	r0, r6
 800124a:	d1fb      	bne.n	8001244 <__ledf2+0x58>
 800124c:	42ac      	cmp	r4, r5
 800124e:	d026      	beq.n	800129e <__ledf2+0xb2>
 8001250:	2c00      	cmp	r4, #0
 8001252:	d126      	bne.n	80012a2 <__ledf2+0xb6>
 8001254:	433a      	orrs	r2, r7
 8001256:	d124      	bne.n	80012a2 <__ledf2+0xb6>
 8001258:	4651      	mov	r1, sl
 800125a:	2002      	movs	r0, #2
 800125c:	3901      	subs	r1, #1
 800125e:	4008      	ands	r0, r1
 8001260:	3801      	subs	r0, #1
 8001262:	e017      	b.n	8001294 <__ledf2+0xa8>
 8001264:	4662      	mov	r2, ip
 8001266:	2a00      	cmp	r2, #0
 8001268:	d00f      	beq.n	800128a <__ledf2+0x9e>
 800126a:	459a      	cmp	sl, r3
 800126c:	d1e1      	bne.n	8001232 <__ledf2+0x46>
 800126e:	42a5      	cmp	r5, r4
 8001270:	db05      	blt.n	800127e <__ledf2+0x92>
 8001272:	42be      	cmp	r6, r7
 8001274:	d8dd      	bhi.n	8001232 <__ledf2+0x46>
 8001276:	d019      	beq.n	80012ac <__ledf2+0xc0>
 8001278:	2000      	movs	r0, #0
 800127a:	42be      	cmp	r6, r7
 800127c:	d20a      	bcs.n	8001294 <__ledf2+0xa8>
 800127e:	4650      	mov	r0, sl
 8001280:	2301      	movs	r3, #1
 8001282:	3801      	subs	r0, #1
 8001284:	4398      	bics	r0, r3
 8001286:	3001      	adds	r0, #1
 8001288:	e004      	b.n	8001294 <__ledf2+0xa8>
 800128a:	2201      	movs	r2, #1
 800128c:	3b01      	subs	r3, #1
 800128e:	4393      	bics	r3, r2
 8001290:	0018      	movs	r0, r3
 8001292:	3001      	adds	r0, #1
 8001294:	bc1c      	pop	{r2, r3, r4}
 8001296:	4690      	mov	r8, r2
 8001298:	4699      	mov	r9, r3
 800129a:	46a2      	mov	sl, r4
 800129c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800129e:	433a      	orrs	r2, r7
 80012a0:	d1d0      	bne.n	8001244 <__ledf2+0x58>
 80012a2:	459a      	cmp	sl, r3
 80012a4:	d1c5      	bne.n	8001232 <__ledf2+0x46>
 80012a6:	42a5      	cmp	r5, r4
 80012a8:	dcc3      	bgt.n	8001232 <__ledf2+0x46>
 80012aa:	e7e0      	b.n	800126e <__ledf2+0x82>
 80012ac:	45c8      	cmp	r8, r9
 80012ae:	d8c0      	bhi.n	8001232 <__ledf2+0x46>
 80012b0:	2000      	movs	r0, #0
 80012b2:	45c8      	cmp	r8, r9
 80012b4:	d3e3      	bcc.n	800127e <__ledf2+0x92>
 80012b6:	e7ed      	b.n	8001294 <__ledf2+0xa8>
 80012b8:	000007ff 	.word	0x000007ff

080012bc <__aeabi_dmul>:
 80012bc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80012be:	4657      	mov	r7, sl
 80012c0:	46de      	mov	lr, fp
 80012c2:	464e      	mov	r6, r9
 80012c4:	4645      	mov	r5, r8
 80012c6:	b5e0      	push	{r5, r6, r7, lr}
 80012c8:	4683      	mov	fp, r0
 80012ca:	0006      	movs	r6, r0
 80012cc:	030f      	lsls	r7, r1, #12
 80012ce:	0048      	lsls	r0, r1, #1
 80012d0:	b087      	sub	sp, #28
 80012d2:	4692      	mov	sl, r2
 80012d4:	001d      	movs	r5, r3
 80012d6:	0b3f      	lsrs	r7, r7, #12
 80012d8:	0d40      	lsrs	r0, r0, #21
 80012da:	0fcc      	lsrs	r4, r1, #31
 80012dc:	2800      	cmp	r0, #0
 80012de:	d100      	bne.n	80012e2 <__aeabi_dmul+0x26>
 80012e0:	e06f      	b.n	80013c2 <__aeabi_dmul+0x106>
 80012e2:	4bde      	ldr	r3, [pc, #888]	; (800165c <__aeabi_dmul+0x3a0>)
 80012e4:	4298      	cmp	r0, r3
 80012e6:	d038      	beq.n	800135a <__aeabi_dmul+0x9e>
 80012e8:	2380      	movs	r3, #128	; 0x80
 80012ea:	00ff      	lsls	r7, r7, #3
 80012ec:	041b      	lsls	r3, r3, #16
 80012ee:	431f      	orrs	r7, r3
 80012f0:	0f73      	lsrs	r3, r6, #29
 80012f2:	433b      	orrs	r3, r7
 80012f4:	9301      	str	r3, [sp, #4]
 80012f6:	4bda      	ldr	r3, [pc, #872]	; (8001660 <__aeabi_dmul+0x3a4>)
 80012f8:	2700      	movs	r7, #0
 80012fa:	4699      	mov	r9, r3
 80012fc:	2300      	movs	r3, #0
 80012fe:	469b      	mov	fp, r3
 8001300:	00f6      	lsls	r6, r6, #3
 8001302:	4481      	add	r9, r0
 8001304:	032b      	lsls	r3, r5, #12
 8001306:	0069      	lsls	r1, r5, #1
 8001308:	0b1b      	lsrs	r3, r3, #12
 800130a:	4652      	mov	r2, sl
 800130c:	4698      	mov	r8, r3
 800130e:	0d49      	lsrs	r1, r1, #21
 8001310:	0fed      	lsrs	r5, r5, #31
 8001312:	2900      	cmp	r1, #0
 8001314:	d100      	bne.n	8001318 <__aeabi_dmul+0x5c>
 8001316:	e085      	b.n	8001424 <__aeabi_dmul+0x168>
 8001318:	4bd0      	ldr	r3, [pc, #832]	; (800165c <__aeabi_dmul+0x3a0>)
 800131a:	4299      	cmp	r1, r3
 800131c:	d100      	bne.n	8001320 <__aeabi_dmul+0x64>
 800131e:	e073      	b.n	8001408 <__aeabi_dmul+0x14c>
 8001320:	4643      	mov	r3, r8
 8001322:	00da      	lsls	r2, r3, #3
 8001324:	2380      	movs	r3, #128	; 0x80
 8001326:	041b      	lsls	r3, r3, #16
 8001328:	4313      	orrs	r3, r2
 800132a:	4652      	mov	r2, sl
 800132c:	48cc      	ldr	r0, [pc, #816]	; (8001660 <__aeabi_dmul+0x3a4>)
 800132e:	0f52      	lsrs	r2, r2, #29
 8001330:	4684      	mov	ip, r0
 8001332:	4313      	orrs	r3, r2
 8001334:	4652      	mov	r2, sl
 8001336:	2000      	movs	r0, #0
 8001338:	4461      	add	r1, ip
 800133a:	00d2      	lsls	r2, r2, #3
 800133c:	4489      	add	r9, r1
 800133e:	0021      	movs	r1, r4
 8001340:	4069      	eors	r1, r5
 8001342:	9100      	str	r1, [sp, #0]
 8001344:	468c      	mov	ip, r1
 8001346:	2101      	movs	r1, #1
 8001348:	4449      	add	r1, r9
 800134a:	468a      	mov	sl, r1
 800134c:	2f0f      	cmp	r7, #15
 800134e:	d900      	bls.n	8001352 <__aeabi_dmul+0x96>
 8001350:	e090      	b.n	8001474 <__aeabi_dmul+0x1b8>
 8001352:	49c4      	ldr	r1, [pc, #784]	; (8001664 <__aeabi_dmul+0x3a8>)
 8001354:	00bf      	lsls	r7, r7, #2
 8001356:	59cf      	ldr	r7, [r1, r7]
 8001358:	46bf      	mov	pc, r7
 800135a:	465b      	mov	r3, fp
 800135c:	433b      	orrs	r3, r7
 800135e:	9301      	str	r3, [sp, #4]
 8001360:	d000      	beq.n	8001364 <__aeabi_dmul+0xa8>
 8001362:	e16a      	b.n	800163a <__aeabi_dmul+0x37e>
 8001364:	2302      	movs	r3, #2
 8001366:	2708      	movs	r7, #8
 8001368:	2600      	movs	r6, #0
 800136a:	4681      	mov	r9, r0
 800136c:	469b      	mov	fp, r3
 800136e:	e7c9      	b.n	8001304 <__aeabi_dmul+0x48>
 8001370:	0032      	movs	r2, r6
 8001372:	4658      	mov	r0, fp
 8001374:	9b01      	ldr	r3, [sp, #4]
 8001376:	4661      	mov	r1, ip
 8001378:	9100      	str	r1, [sp, #0]
 800137a:	2802      	cmp	r0, #2
 800137c:	d100      	bne.n	8001380 <__aeabi_dmul+0xc4>
 800137e:	e075      	b.n	800146c <__aeabi_dmul+0x1b0>
 8001380:	2803      	cmp	r0, #3
 8001382:	d100      	bne.n	8001386 <__aeabi_dmul+0xca>
 8001384:	e1fe      	b.n	8001784 <__aeabi_dmul+0x4c8>
 8001386:	2801      	cmp	r0, #1
 8001388:	d000      	beq.n	800138c <__aeabi_dmul+0xd0>
 800138a:	e12c      	b.n	80015e6 <__aeabi_dmul+0x32a>
 800138c:	2300      	movs	r3, #0
 800138e:	2700      	movs	r7, #0
 8001390:	2600      	movs	r6, #0
 8001392:	2500      	movs	r5, #0
 8001394:	033f      	lsls	r7, r7, #12
 8001396:	0d2a      	lsrs	r2, r5, #20
 8001398:	0b3f      	lsrs	r7, r7, #12
 800139a:	48b3      	ldr	r0, [pc, #716]	; (8001668 <__aeabi_dmul+0x3ac>)
 800139c:	0512      	lsls	r2, r2, #20
 800139e:	433a      	orrs	r2, r7
 80013a0:	4002      	ands	r2, r0
 80013a2:	051b      	lsls	r3, r3, #20
 80013a4:	4313      	orrs	r3, r2
 80013a6:	9a00      	ldr	r2, [sp, #0]
 80013a8:	005b      	lsls	r3, r3, #1
 80013aa:	07d1      	lsls	r1, r2, #31
 80013ac:	085b      	lsrs	r3, r3, #1
 80013ae:	430b      	orrs	r3, r1
 80013b0:	0030      	movs	r0, r6
 80013b2:	0019      	movs	r1, r3
 80013b4:	b007      	add	sp, #28
 80013b6:	bc3c      	pop	{r2, r3, r4, r5}
 80013b8:	4690      	mov	r8, r2
 80013ba:	4699      	mov	r9, r3
 80013bc:	46a2      	mov	sl, r4
 80013be:	46ab      	mov	fp, r5
 80013c0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80013c2:	465b      	mov	r3, fp
 80013c4:	433b      	orrs	r3, r7
 80013c6:	9301      	str	r3, [sp, #4]
 80013c8:	d100      	bne.n	80013cc <__aeabi_dmul+0x110>
 80013ca:	e12f      	b.n	800162c <__aeabi_dmul+0x370>
 80013cc:	2f00      	cmp	r7, #0
 80013ce:	d100      	bne.n	80013d2 <__aeabi_dmul+0x116>
 80013d0:	e1a5      	b.n	800171e <__aeabi_dmul+0x462>
 80013d2:	0038      	movs	r0, r7
 80013d4:	f000 fd66 	bl	8001ea4 <__clzsi2>
 80013d8:	0003      	movs	r3, r0
 80013da:	3b0b      	subs	r3, #11
 80013dc:	2b1c      	cmp	r3, #28
 80013de:	dd00      	ble.n	80013e2 <__aeabi_dmul+0x126>
 80013e0:	e196      	b.n	8001710 <__aeabi_dmul+0x454>
 80013e2:	221d      	movs	r2, #29
 80013e4:	1ad3      	subs	r3, r2, r3
 80013e6:	465a      	mov	r2, fp
 80013e8:	0001      	movs	r1, r0
 80013ea:	40da      	lsrs	r2, r3
 80013ec:	465e      	mov	r6, fp
 80013ee:	3908      	subs	r1, #8
 80013f0:	408f      	lsls	r7, r1
 80013f2:	0013      	movs	r3, r2
 80013f4:	408e      	lsls	r6, r1
 80013f6:	433b      	orrs	r3, r7
 80013f8:	9301      	str	r3, [sp, #4]
 80013fa:	4b9c      	ldr	r3, [pc, #624]	; (800166c <__aeabi_dmul+0x3b0>)
 80013fc:	2700      	movs	r7, #0
 80013fe:	1a1b      	subs	r3, r3, r0
 8001400:	4699      	mov	r9, r3
 8001402:	2300      	movs	r3, #0
 8001404:	469b      	mov	fp, r3
 8001406:	e77d      	b.n	8001304 <__aeabi_dmul+0x48>
 8001408:	4641      	mov	r1, r8
 800140a:	4653      	mov	r3, sl
 800140c:	430b      	orrs	r3, r1
 800140e:	4993      	ldr	r1, [pc, #588]	; (800165c <__aeabi_dmul+0x3a0>)
 8001410:	468c      	mov	ip, r1
 8001412:	44e1      	add	r9, ip
 8001414:	2b00      	cmp	r3, #0
 8001416:	d000      	beq.n	800141a <__aeabi_dmul+0x15e>
 8001418:	e11a      	b.n	8001650 <__aeabi_dmul+0x394>
 800141a:	2202      	movs	r2, #2
 800141c:	2002      	movs	r0, #2
 800141e:	4317      	orrs	r7, r2
 8001420:	2200      	movs	r2, #0
 8001422:	e78c      	b.n	800133e <__aeabi_dmul+0x82>
 8001424:	4313      	orrs	r3, r2
 8001426:	d100      	bne.n	800142a <__aeabi_dmul+0x16e>
 8001428:	e10d      	b.n	8001646 <__aeabi_dmul+0x38a>
 800142a:	4643      	mov	r3, r8
 800142c:	2b00      	cmp	r3, #0
 800142e:	d100      	bne.n	8001432 <__aeabi_dmul+0x176>
 8001430:	e181      	b.n	8001736 <__aeabi_dmul+0x47a>
 8001432:	4640      	mov	r0, r8
 8001434:	f000 fd36 	bl	8001ea4 <__clzsi2>
 8001438:	0002      	movs	r2, r0
 800143a:	3a0b      	subs	r2, #11
 800143c:	2a1c      	cmp	r2, #28
 800143e:	dd00      	ble.n	8001442 <__aeabi_dmul+0x186>
 8001440:	e172      	b.n	8001728 <__aeabi_dmul+0x46c>
 8001442:	0001      	movs	r1, r0
 8001444:	4643      	mov	r3, r8
 8001446:	3908      	subs	r1, #8
 8001448:	408b      	lsls	r3, r1
 800144a:	4698      	mov	r8, r3
 800144c:	231d      	movs	r3, #29
 800144e:	1a9a      	subs	r2, r3, r2
 8001450:	4653      	mov	r3, sl
 8001452:	40d3      	lsrs	r3, r2
 8001454:	001a      	movs	r2, r3
 8001456:	4643      	mov	r3, r8
 8001458:	4313      	orrs	r3, r2
 800145a:	4652      	mov	r2, sl
 800145c:	408a      	lsls	r2, r1
 800145e:	4649      	mov	r1, r9
 8001460:	1a08      	subs	r0, r1, r0
 8001462:	4982      	ldr	r1, [pc, #520]	; (800166c <__aeabi_dmul+0x3b0>)
 8001464:	4689      	mov	r9, r1
 8001466:	4481      	add	r9, r0
 8001468:	2000      	movs	r0, #0
 800146a:	e768      	b.n	800133e <__aeabi_dmul+0x82>
 800146c:	4b7b      	ldr	r3, [pc, #492]	; (800165c <__aeabi_dmul+0x3a0>)
 800146e:	2700      	movs	r7, #0
 8001470:	2600      	movs	r6, #0
 8001472:	e78e      	b.n	8001392 <__aeabi_dmul+0xd6>
 8001474:	0c14      	lsrs	r4, r2, #16
 8001476:	0412      	lsls	r2, r2, #16
 8001478:	0c12      	lsrs	r2, r2, #16
 800147a:	0011      	movs	r1, r2
 800147c:	0c37      	lsrs	r7, r6, #16
 800147e:	0436      	lsls	r6, r6, #16
 8001480:	0c35      	lsrs	r5, r6, #16
 8001482:	4379      	muls	r1, r7
 8001484:	0028      	movs	r0, r5
 8001486:	468c      	mov	ip, r1
 8001488:	002e      	movs	r6, r5
 800148a:	4360      	muls	r0, r4
 800148c:	4460      	add	r0, ip
 800148e:	4683      	mov	fp, r0
 8001490:	4356      	muls	r6, r2
 8001492:	0021      	movs	r1, r4
 8001494:	0c30      	lsrs	r0, r6, #16
 8001496:	4680      	mov	r8, r0
 8001498:	4658      	mov	r0, fp
 800149a:	4379      	muls	r1, r7
 800149c:	4440      	add	r0, r8
 800149e:	9102      	str	r1, [sp, #8]
 80014a0:	4584      	cmp	ip, r0
 80014a2:	d906      	bls.n	80014b2 <__aeabi_dmul+0x1f6>
 80014a4:	4688      	mov	r8, r1
 80014a6:	2180      	movs	r1, #128	; 0x80
 80014a8:	0249      	lsls	r1, r1, #9
 80014aa:	468c      	mov	ip, r1
 80014ac:	44e0      	add	r8, ip
 80014ae:	4641      	mov	r1, r8
 80014b0:	9102      	str	r1, [sp, #8]
 80014b2:	0436      	lsls	r6, r6, #16
 80014b4:	0c01      	lsrs	r1, r0, #16
 80014b6:	0c36      	lsrs	r6, r6, #16
 80014b8:	0400      	lsls	r0, r0, #16
 80014ba:	468b      	mov	fp, r1
 80014bc:	1981      	adds	r1, r0, r6
 80014be:	0c1e      	lsrs	r6, r3, #16
 80014c0:	041b      	lsls	r3, r3, #16
 80014c2:	0c1b      	lsrs	r3, r3, #16
 80014c4:	9103      	str	r1, [sp, #12]
 80014c6:	0019      	movs	r1, r3
 80014c8:	4379      	muls	r1, r7
 80014ca:	468c      	mov	ip, r1
 80014cc:	0028      	movs	r0, r5
 80014ce:	4375      	muls	r5, r6
 80014d0:	4465      	add	r5, ip
 80014d2:	46a8      	mov	r8, r5
 80014d4:	4358      	muls	r0, r3
 80014d6:	0c05      	lsrs	r5, r0, #16
 80014d8:	4445      	add	r5, r8
 80014da:	4377      	muls	r7, r6
 80014dc:	42a9      	cmp	r1, r5
 80014de:	d903      	bls.n	80014e8 <__aeabi_dmul+0x22c>
 80014e0:	2180      	movs	r1, #128	; 0x80
 80014e2:	0249      	lsls	r1, r1, #9
 80014e4:	468c      	mov	ip, r1
 80014e6:	4467      	add	r7, ip
 80014e8:	0c29      	lsrs	r1, r5, #16
 80014ea:	468c      	mov	ip, r1
 80014ec:	0039      	movs	r1, r7
 80014ee:	0400      	lsls	r0, r0, #16
 80014f0:	0c00      	lsrs	r0, r0, #16
 80014f2:	042d      	lsls	r5, r5, #16
 80014f4:	182d      	adds	r5, r5, r0
 80014f6:	4461      	add	r1, ip
 80014f8:	44ab      	add	fp, r5
 80014fa:	9105      	str	r1, [sp, #20]
 80014fc:	4659      	mov	r1, fp
 80014fe:	9104      	str	r1, [sp, #16]
 8001500:	9901      	ldr	r1, [sp, #4]
 8001502:	040f      	lsls	r7, r1, #16
 8001504:	0c3f      	lsrs	r7, r7, #16
 8001506:	0c08      	lsrs	r0, r1, #16
 8001508:	0039      	movs	r1, r7
 800150a:	4351      	muls	r1, r2
 800150c:	4342      	muls	r2, r0
 800150e:	4690      	mov	r8, r2
 8001510:	0002      	movs	r2, r0
 8001512:	468c      	mov	ip, r1
 8001514:	0c09      	lsrs	r1, r1, #16
 8001516:	468b      	mov	fp, r1
 8001518:	4362      	muls	r2, r4
 800151a:	437c      	muls	r4, r7
 800151c:	4444      	add	r4, r8
 800151e:	445c      	add	r4, fp
 8001520:	45a0      	cmp	r8, r4
 8001522:	d903      	bls.n	800152c <__aeabi_dmul+0x270>
 8001524:	2180      	movs	r1, #128	; 0x80
 8001526:	0249      	lsls	r1, r1, #9
 8001528:	4688      	mov	r8, r1
 800152a:	4442      	add	r2, r8
 800152c:	0c21      	lsrs	r1, r4, #16
 800152e:	4688      	mov	r8, r1
 8001530:	4661      	mov	r1, ip
 8001532:	0409      	lsls	r1, r1, #16
 8001534:	0c09      	lsrs	r1, r1, #16
 8001536:	468c      	mov	ip, r1
 8001538:	0039      	movs	r1, r7
 800153a:	4359      	muls	r1, r3
 800153c:	4343      	muls	r3, r0
 800153e:	4370      	muls	r0, r6
 8001540:	437e      	muls	r6, r7
 8001542:	0c0f      	lsrs	r7, r1, #16
 8001544:	18f6      	adds	r6, r6, r3
 8001546:	0424      	lsls	r4, r4, #16
 8001548:	19be      	adds	r6, r7, r6
 800154a:	4464      	add	r4, ip
 800154c:	4442      	add	r2, r8
 800154e:	468c      	mov	ip, r1
 8001550:	42b3      	cmp	r3, r6
 8001552:	d903      	bls.n	800155c <__aeabi_dmul+0x2a0>
 8001554:	2380      	movs	r3, #128	; 0x80
 8001556:	025b      	lsls	r3, r3, #9
 8001558:	4698      	mov	r8, r3
 800155a:	4440      	add	r0, r8
 800155c:	9b02      	ldr	r3, [sp, #8]
 800155e:	4661      	mov	r1, ip
 8001560:	4698      	mov	r8, r3
 8001562:	9b04      	ldr	r3, [sp, #16]
 8001564:	0437      	lsls	r7, r6, #16
 8001566:	4443      	add	r3, r8
 8001568:	469b      	mov	fp, r3
 800156a:	45ab      	cmp	fp, r5
 800156c:	41ad      	sbcs	r5, r5
 800156e:	426b      	negs	r3, r5
 8001570:	040d      	lsls	r5, r1, #16
 8001572:	9905      	ldr	r1, [sp, #20]
 8001574:	0c2d      	lsrs	r5, r5, #16
 8001576:	468c      	mov	ip, r1
 8001578:	197f      	adds	r7, r7, r5
 800157a:	4467      	add	r7, ip
 800157c:	18fd      	adds	r5, r7, r3
 800157e:	46a8      	mov	r8, r5
 8001580:	465d      	mov	r5, fp
 8001582:	192d      	adds	r5, r5, r4
 8001584:	42a5      	cmp	r5, r4
 8001586:	41a4      	sbcs	r4, r4
 8001588:	4693      	mov	fp, r2
 800158a:	4264      	negs	r4, r4
 800158c:	46a4      	mov	ip, r4
 800158e:	44c3      	add	fp, r8
 8001590:	44dc      	add	ip, fp
 8001592:	428f      	cmp	r7, r1
 8001594:	41bf      	sbcs	r7, r7
 8001596:	4598      	cmp	r8, r3
 8001598:	419b      	sbcs	r3, r3
 800159a:	4593      	cmp	fp, r2
 800159c:	4192      	sbcs	r2, r2
 800159e:	45a4      	cmp	ip, r4
 80015a0:	41a4      	sbcs	r4, r4
 80015a2:	425b      	negs	r3, r3
 80015a4:	427f      	negs	r7, r7
 80015a6:	431f      	orrs	r7, r3
 80015a8:	0c36      	lsrs	r6, r6, #16
 80015aa:	4252      	negs	r2, r2
 80015ac:	4264      	negs	r4, r4
 80015ae:	19bf      	adds	r7, r7, r6
 80015b0:	4322      	orrs	r2, r4
 80015b2:	18bf      	adds	r7, r7, r2
 80015b4:	4662      	mov	r2, ip
 80015b6:	1838      	adds	r0, r7, r0
 80015b8:	0243      	lsls	r3, r0, #9
 80015ba:	0dd2      	lsrs	r2, r2, #23
 80015bc:	9903      	ldr	r1, [sp, #12]
 80015be:	4313      	orrs	r3, r2
 80015c0:	026a      	lsls	r2, r5, #9
 80015c2:	430a      	orrs	r2, r1
 80015c4:	1e50      	subs	r0, r2, #1
 80015c6:	4182      	sbcs	r2, r0
 80015c8:	4661      	mov	r1, ip
 80015ca:	0ded      	lsrs	r5, r5, #23
 80015cc:	432a      	orrs	r2, r5
 80015ce:	024e      	lsls	r6, r1, #9
 80015d0:	4332      	orrs	r2, r6
 80015d2:	01d9      	lsls	r1, r3, #7
 80015d4:	d400      	bmi.n	80015d8 <__aeabi_dmul+0x31c>
 80015d6:	e0b3      	b.n	8001740 <__aeabi_dmul+0x484>
 80015d8:	2601      	movs	r6, #1
 80015da:	0850      	lsrs	r0, r2, #1
 80015dc:	4032      	ands	r2, r6
 80015de:	4302      	orrs	r2, r0
 80015e0:	07de      	lsls	r6, r3, #31
 80015e2:	4332      	orrs	r2, r6
 80015e4:	085b      	lsrs	r3, r3, #1
 80015e6:	4c22      	ldr	r4, [pc, #136]	; (8001670 <__aeabi_dmul+0x3b4>)
 80015e8:	4454      	add	r4, sl
 80015ea:	2c00      	cmp	r4, #0
 80015ec:	dd62      	ble.n	80016b4 <__aeabi_dmul+0x3f8>
 80015ee:	0751      	lsls	r1, r2, #29
 80015f0:	d009      	beq.n	8001606 <__aeabi_dmul+0x34a>
 80015f2:	200f      	movs	r0, #15
 80015f4:	4010      	ands	r0, r2
 80015f6:	2804      	cmp	r0, #4
 80015f8:	d005      	beq.n	8001606 <__aeabi_dmul+0x34a>
 80015fa:	1d10      	adds	r0, r2, #4
 80015fc:	4290      	cmp	r0, r2
 80015fe:	4192      	sbcs	r2, r2
 8001600:	4252      	negs	r2, r2
 8001602:	189b      	adds	r3, r3, r2
 8001604:	0002      	movs	r2, r0
 8001606:	01d9      	lsls	r1, r3, #7
 8001608:	d504      	bpl.n	8001614 <__aeabi_dmul+0x358>
 800160a:	2480      	movs	r4, #128	; 0x80
 800160c:	4819      	ldr	r0, [pc, #100]	; (8001674 <__aeabi_dmul+0x3b8>)
 800160e:	00e4      	lsls	r4, r4, #3
 8001610:	4003      	ands	r3, r0
 8001612:	4454      	add	r4, sl
 8001614:	4818      	ldr	r0, [pc, #96]	; (8001678 <__aeabi_dmul+0x3bc>)
 8001616:	4284      	cmp	r4, r0
 8001618:	dd00      	ble.n	800161c <__aeabi_dmul+0x360>
 800161a:	e727      	b.n	800146c <__aeabi_dmul+0x1b0>
 800161c:	075e      	lsls	r6, r3, #29
 800161e:	025b      	lsls	r3, r3, #9
 8001620:	08d2      	lsrs	r2, r2, #3
 8001622:	0b1f      	lsrs	r7, r3, #12
 8001624:	0563      	lsls	r3, r4, #21
 8001626:	4316      	orrs	r6, r2
 8001628:	0d5b      	lsrs	r3, r3, #21
 800162a:	e6b2      	b.n	8001392 <__aeabi_dmul+0xd6>
 800162c:	2300      	movs	r3, #0
 800162e:	4699      	mov	r9, r3
 8001630:	3301      	adds	r3, #1
 8001632:	2704      	movs	r7, #4
 8001634:	2600      	movs	r6, #0
 8001636:	469b      	mov	fp, r3
 8001638:	e664      	b.n	8001304 <__aeabi_dmul+0x48>
 800163a:	2303      	movs	r3, #3
 800163c:	9701      	str	r7, [sp, #4]
 800163e:	4681      	mov	r9, r0
 8001640:	270c      	movs	r7, #12
 8001642:	469b      	mov	fp, r3
 8001644:	e65e      	b.n	8001304 <__aeabi_dmul+0x48>
 8001646:	2201      	movs	r2, #1
 8001648:	2001      	movs	r0, #1
 800164a:	4317      	orrs	r7, r2
 800164c:	2200      	movs	r2, #0
 800164e:	e676      	b.n	800133e <__aeabi_dmul+0x82>
 8001650:	2303      	movs	r3, #3
 8001652:	2003      	movs	r0, #3
 8001654:	431f      	orrs	r7, r3
 8001656:	4643      	mov	r3, r8
 8001658:	e671      	b.n	800133e <__aeabi_dmul+0x82>
 800165a:	46c0      	nop			; (mov r8, r8)
 800165c:	000007ff 	.word	0x000007ff
 8001660:	fffffc01 	.word	0xfffffc01
 8001664:	08005ef0 	.word	0x08005ef0
 8001668:	800fffff 	.word	0x800fffff
 800166c:	fffffc0d 	.word	0xfffffc0d
 8001670:	000003ff 	.word	0x000003ff
 8001674:	feffffff 	.word	0xfeffffff
 8001678:	000007fe 	.word	0x000007fe
 800167c:	2300      	movs	r3, #0
 800167e:	2780      	movs	r7, #128	; 0x80
 8001680:	9300      	str	r3, [sp, #0]
 8001682:	033f      	lsls	r7, r7, #12
 8001684:	2600      	movs	r6, #0
 8001686:	4b43      	ldr	r3, [pc, #268]	; (8001794 <__aeabi_dmul+0x4d8>)
 8001688:	e683      	b.n	8001392 <__aeabi_dmul+0xd6>
 800168a:	9b01      	ldr	r3, [sp, #4]
 800168c:	0032      	movs	r2, r6
 800168e:	46a4      	mov	ip, r4
 8001690:	4658      	mov	r0, fp
 8001692:	e670      	b.n	8001376 <__aeabi_dmul+0xba>
 8001694:	46ac      	mov	ip, r5
 8001696:	e66e      	b.n	8001376 <__aeabi_dmul+0xba>
 8001698:	2780      	movs	r7, #128	; 0x80
 800169a:	9901      	ldr	r1, [sp, #4]
 800169c:	033f      	lsls	r7, r7, #12
 800169e:	4239      	tst	r1, r7
 80016a0:	d02d      	beq.n	80016fe <__aeabi_dmul+0x442>
 80016a2:	423b      	tst	r3, r7
 80016a4:	d12b      	bne.n	80016fe <__aeabi_dmul+0x442>
 80016a6:	431f      	orrs	r7, r3
 80016a8:	033f      	lsls	r7, r7, #12
 80016aa:	0b3f      	lsrs	r7, r7, #12
 80016ac:	9500      	str	r5, [sp, #0]
 80016ae:	0016      	movs	r6, r2
 80016b0:	4b38      	ldr	r3, [pc, #224]	; (8001794 <__aeabi_dmul+0x4d8>)
 80016b2:	e66e      	b.n	8001392 <__aeabi_dmul+0xd6>
 80016b4:	2501      	movs	r5, #1
 80016b6:	1b2d      	subs	r5, r5, r4
 80016b8:	2d38      	cmp	r5, #56	; 0x38
 80016ba:	dd00      	ble.n	80016be <__aeabi_dmul+0x402>
 80016bc:	e666      	b.n	800138c <__aeabi_dmul+0xd0>
 80016be:	2d1f      	cmp	r5, #31
 80016c0:	dc40      	bgt.n	8001744 <__aeabi_dmul+0x488>
 80016c2:	4835      	ldr	r0, [pc, #212]	; (8001798 <__aeabi_dmul+0x4dc>)
 80016c4:	001c      	movs	r4, r3
 80016c6:	4450      	add	r0, sl
 80016c8:	0016      	movs	r6, r2
 80016ca:	4082      	lsls	r2, r0
 80016cc:	4084      	lsls	r4, r0
 80016ce:	40ee      	lsrs	r6, r5
 80016d0:	1e50      	subs	r0, r2, #1
 80016d2:	4182      	sbcs	r2, r0
 80016d4:	4334      	orrs	r4, r6
 80016d6:	4314      	orrs	r4, r2
 80016d8:	40eb      	lsrs	r3, r5
 80016da:	0762      	lsls	r2, r4, #29
 80016dc:	d009      	beq.n	80016f2 <__aeabi_dmul+0x436>
 80016de:	220f      	movs	r2, #15
 80016e0:	4022      	ands	r2, r4
 80016e2:	2a04      	cmp	r2, #4
 80016e4:	d005      	beq.n	80016f2 <__aeabi_dmul+0x436>
 80016e6:	0022      	movs	r2, r4
 80016e8:	1d14      	adds	r4, r2, #4
 80016ea:	4294      	cmp	r4, r2
 80016ec:	4180      	sbcs	r0, r0
 80016ee:	4240      	negs	r0, r0
 80016f0:	181b      	adds	r3, r3, r0
 80016f2:	021a      	lsls	r2, r3, #8
 80016f4:	d53e      	bpl.n	8001774 <__aeabi_dmul+0x4b8>
 80016f6:	2301      	movs	r3, #1
 80016f8:	2700      	movs	r7, #0
 80016fa:	2600      	movs	r6, #0
 80016fc:	e649      	b.n	8001392 <__aeabi_dmul+0xd6>
 80016fe:	2780      	movs	r7, #128	; 0x80
 8001700:	9b01      	ldr	r3, [sp, #4]
 8001702:	033f      	lsls	r7, r7, #12
 8001704:	431f      	orrs	r7, r3
 8001706:	033f      	lsls	r7, r7, #12
 8001708:	0b3f      	lsrs	r7, r7, #12
 800170a:	9400      	str	r4, [sp, #0]
 800170c:	4b21      	ldr	r3, [pc, #132]	; (8001794 <__aeabi_dmul+0x4d8>)
 800170e:	e640      	b.n	8001392 <__aeabi_dmul+0xd6>
 8001710:	0003      	movs	r3, r0
 8001712:	465a      	mov	r2, fp
 8001714:	3b28      	subs	r3, #40	; 0x28
 8001716:	409a      	lsls	r2, r3
 8001718:	2600      	movs	r6, #0
 800171a:	9201      	str	r2, [sp, #4]
 800171c:	e66d      	b.n	80013fa <__aeabi_dmul+0x13e>
 800171e:	4658      	mov	r0, fp
 8001720:	f000 fbc0 	bl	8001ea4 <__clzsi2>
 8001724:	3020      	adds	r0, #32
 8001726:	e657      	b.n	80013d8 <__aeabi_dmul+0x11c>
 8001728:	0003      	movs	r3, r0
 800172a:	4652      	mov	r2, sl
 800172c:	3b28      	subs	r3, #40	; 0x28
 800172e:	409a      	lsls	r2, r3
 8001730:	0013      	movs	r3, r2
 8001732:	2200      	movs	r2, #0
 8001734:	e693      	b.n	800145e <__aeabi_dmul+0x1a2>
 8001736:	4650      	mov	r0, sl
 8001738:	f000 fbb4 	bl	8001ea4 <__clzsi2>
 800173c:	3020      	adds	r0, #32
 800173e:	e67b      	b.n	8001438 <__aeabi_dmul+0x17c>
 8001740:	46ca      	mov	sl, r9
 8001742:	e750      	b.n	80015e6 <__aeabi_dmul+0x32a>
 8001744:	201f      	movs	r0, #31
 8001746:	001e      	movs	r6, r3
 8001748:	4240      	negs	r0, r0
 800174a:	1b04      	subs	r4, r0, r4
 800174c:	40e6      	lsrs	r6, r4
 800174e:	2d20      	cmp	r5, #32
 8001750:	d003      	beq.n	800175a <__aeabi_dmul+0x49e>
 8001752:	4c12      	ldr	r4, [pc, #72]	; (800179c <__aeabi_dmul+0x4e0>)
 8001754:	4454      	add	r4, sl
 8001756:	40a3      	lsls	r3, r4
 8001758:	431a      	orrs	r2, r3
 800175a:	1e50      	subs	r0, r2, #1
 800175c:	4182      	sbcs	r2, r0
 800175e:	4332      	orrs	r2, r6
 8001760:	2607      	movs	r6, #7
 8001762:	2700      	movs	r7, #0
 8001764:	4016      	ands	r6, r2
 8001766:	d009      	beq.n	800177c <__aeabi_dmul+0x4c0>
 8001768:	200f      	movs	r0, #15
 800176a:	2300      	movs	r3, #0
 800176c:	4010      	ands	r0, r2
 800176e:	0014      	movs	r4, r2
 8001770:	2804      	cmp	r0, #4
 8001772:	d1b9      	bne.n	80016e8 <__aeabi_dmul+0x42c>
 8001774:	0022      	movs	r2, r4
 8001776:	075e      	lsls	r6, r3, #29
 8001778:	025b      	lsls	r3, r3, #9
 800177a:	0b1f      	lsrs	r7, r3, #12
 800177c:	08d2      	lsrs	r2, r2, #3
 800177e:	4316      	orrs	r6, r2
 8001780:	2300      	movs	r3, #0
 8001782:	e606      	b.n	8001392 <__aeabi_dmul+0xd6>
 8001784:	2780      	movs	r7, #128	; 0x80
 8001786:	033f      	lsls	r7, r7, #12
 8001788:	431f      	orrs	r7, r3
 800178a:	033f      	lsls	r7, r7, #12
 800178c:	0b3f      	lsrs	r7, r7, #12
 800178e:	0016      	movs	r6, r2
 8001790:	4b00      	ldr	r3, [pc, #0]	; (8001794 <__aeabi_dmul+0x4d8>)
 8001792:	e5fe      	b.n	8001392 <__aeabi_dmul+0xd6>
 8001794:	000007ff 	.word	0x000007ff
 8001798:	0000041e 	.word	0x0000041e
 800179c:	0000043e 	.word	0x0000043e

080017a0 <__aeabi_dsub>:
 80017a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80017a2:	4657      	mov	r7, sl
 80017a4:	464e      	mov	r6, r9
 80017a6:	4645      	mov	r5, r8
 80017a8:	46de      	mov	lr, fp
 80017aa:	000c      	movs	r4, r1
 80017ac:	0309      	lsls	r1, r1, #12
 80017ae:	b5e0      	push	{r5, r6, r7, lr}
 80017b0:	0a49      	lsrs	r1, r1, #9
 80017b2:	0f46      	lsrs	r6, r0, #29
 80017b4:	005f      	lsls	r7, r3, #1
 80017b6:	4331      	orrs	r1, r6
 80017b8:	031e      	lsls	r6, r3, #12
 80017ba:	0fdb      	lsrs	r3, r3, #31
 80017bc:	0a76      	lsrs	r6, r6, #9
 80017be:	469b      	mov	fp, r3
 80017c0:	0f53      	lsrs	r3, r2, #29
 80017c2:	4333      	orrs	r3, r6
 80017c4:	4ec8      	ldr	r6, [pc, #800]	; (8001ae8 <__aeabi_dsub+0x348>)
 80017c6:	0065      	lsls	r5, r4, #1
 80017c8:	00c0      	lsls	r0, r0, #3
 80017ca:	0fe4      	lsrs	r4, r4, #31
 80017cc:	00d2      	lsls	r2, r2, #3
 80017ce:	0d6d      	lsrs	r5, r5, #21
 80017d0:	46a2      	mov	sl, r4
 80017d2:	4681      	mov	r9, r0
 80017d4:	0d7f      	lsrs	r7, r7, #21
 80017d6:	469c      	mov	ip, r3
 80017d8:	4690      	mov	r8, r2
 80017da:	42b7      	cmp	r7, r6
 80017dc:	d100      	bne.n	80017e0 <__aeabi_dsub+0x40>
 80017de:	e0b9      	b.n	8001954 <__aeabi_dsub+0x1b4>
 80017e0:	465b      	mov	r3, fp
 80017e2:	2601      	movs	r6, #1
 80017e4:	4073      	eors	r3, r6
 80017e6:	469b      	mov	fp, r3
 80017e8:	1bee      	subs	r6, r5, r7
 80017ea:	45a3      	cmp	fp, r4
 80017ec:	d100      	bne.n	80017f0 <__aeabi_dsub+0x50>
 80017ee:	e083      	b.n	80018f8 <__aeabi_dsub+0x158>
 80017f0:	2e00      	cmp	r6, #0
 80017f2:	dd63      	ble.n	80018bc <__aeabi_dsub+0x11c>
 80017f4:	2f00      	cmp	r7, #0
 80017f6:	d000      	beq.n	80017fa <__aeabi_dsub+0x5a>
 80017f8:	e0b1      	b.n	800195e <__aeabi_dsub+0x1be>
 80017fa:	4663      	mov	r3, ip
 80017fc:	4313      	orrs	r3, r2
 80017fe:	d100      	bne.n	8001802 <__aeabi_dsub+0x62>
 8001800:	e123      	b.n	8001a4a <__aeabi_dsub+0x2aa>
 8001802:	1e73      	subs	r3, r6, #1
 8001804:	2b00      	cmp	r3, #0
 8001806:	d000      	beq.n	800180a <__aeabi_dsub+0x6a>
 8001808:	e1ba      	b.n	8001b80 <__aeabi_dsub+0x3e0>
 800180a:	1a86      	subs	r6, r0, r2
 800180c:	4663      	mov	r3, ip
 800180e:	42b0      	cmp	r0, r6
 8001810:	4180      	sbcs	r0, r0
 8001812:	2501      	movs	r5, #1
 8001814:	1ac9      	subs	r1, r1, r3
 8001816:	4240      	negs	r0, r0
 8001818:	1a09      	subs	r1, r1, r0
 800181a:	020b      	lsls	r3, r1, #8
 800181c:	d400      	bmi.n	8001820 <__aeabi_dsub+0x80>
 800181e:	e147      	b.n	8001ab0 <__aeabi_dsub+0x310>
 8001820:	0249      	lsls	r1, r1, #9
 8001822:	0a4b      	lsrs	r3, r1, #9
 8001824:	4698      	mov	r8, r3
 8001826:	4643      	mov	r3, r8
 8001828:	2b00      	cmp	r3, #0
 800182a:	d100      	bne.n	800182e <__aeabi_dsub+0x8e>
 800182c:	e189      	b.n	8001b42 <__aeabi_dsub+0x3a2>
 800182e:	4640      	mov	r0, r8
 8001830:	f000 fb38 	bl	8001ea4 <__clzsi2>
 8001834:	0003      	movs	r3, r0
 8001836:	3b08      	subs	r3, #8
 8001838:	2b1f      	cmp	r3, #31
 800183a:	dd00      	ble.n	800183e <__aeabi_dsub+0x9e>
 800183c:	e17c      	b.n	8001b38 <__aeabi_dsub+0x398>
 800183e:	2220      	movs	r2, #32
 8001840:	0030      	movs	r0, r6
 8001842:	1ad2      	subs	r2, r2, r3
 8001844:	4641      	mov	r1, r8
 8001846:	40d0      	lsrs	r0, r2
 8001848:	4099      	lsls	r1, r3
 800184a:	0002      	movs	r2, r0
 800184c:	409e      	lsls	r6, r3
 800184e:	430a      	orrs	r2, r1
 8001850:	429d      	cmp	r5, r3
 8001852:	dd00      	ble.n	8001856 <__aeabi_dsub+0xb6>
 8001854:	e16a      	b.n	8001b2c <__aeabi_dsub+0x38c>
 8001856:	1b5d      	subs	r5, r3, r5
 8001858:	1c6b      	adds	r3, r5, #1
 800185a:	2b1f      	cmp	r3, #31
 800185c:	dd00      	ble.n	8001860 <__aeabi_dsub+0xc0>
 800185e:	e194      	b.n	8001b8a <__aeabi_dsub+0x3ea>
 8001860:	2120      	movs	r1, #32
 8001862:	0010      	movs	r0, r2
 8001864:	0035      	movs	r5, r6
 8001866:	1ac9      	subs	r1, r1, r3
 8001868:	408e      	lsls	r6, r1
 800186a:	40da      	lsrs	r2, r3
 800186c:	4088      	lsls	r0, r1
 800186e:	40dd      	lsrs	r5, r3
 8001870:	1e71      	subs	r1, r6, #1
 8001872:	418e      	sbcs	r6, r1
 8001874:	0011      	movs	r1, r2
 8001876:	2207      	movs	r2, #7
 8001878:	4328      	orrs	r0, r5
 800187a:	2500      	movs	r5, #0
 800187c:	4306      	orrs	r6, r0
 800187e:	4032      	ands	r2, r6
 8001880:	2a00      	cmp	r2, #0
 8001882:	d009      	beq.n	8001898 <__aeabi_dsub+0xf8>
 8001884:	230f      	movs	r3, #15
 8001886:	4033      	ands	r3, r6
 8001888:	2b04      	cmp	r3, #4
 800188a:	d005      	beq.n	8001898 <__aeabi_dsub+0xf8>
 800188c:	1d33      	adds	r3, r6, #4
 800188e:	42b3      	cmp	r3, r6
 8001890:	41b6      	sbcs	r6, r6
 8001892:	4276      	negs	r6, r6
 8001894:	1989      	adds	r1, r1, r6
 8001896:	001e      	movs	r6, r3
 8001898:	020b      	lsls	r3, r1, #8
 800189a:	d400      	bmi.n	800189e <__aeabi_dsub+0xfe>
 800189c:	e23d      	b.n	8001d1a <__aeabi_dsub+0x57a>
 800189e:	1c6a      	adds	r2, r5, #1
 80018a0:	4b91      	ldr	r3, [pc, #580]	; (8001ae8 <__aeabi_dsub+0x348>)
 80018a2:	0555      	lsls	r5, r2, #21
 80018a4:	0d6d      	lsrs	r5, r5, #21
 80018a6:	429a      	cmp	r2, r3
 80018a8:	d100      	bne.n	80018ac <__aeabi_dsub+0x10c>
 80018aa:	e119      	b.n	8001ae0 <__aeabi_dsub+0x340>
 80018ac:	4a8f      	ldr	r2, [pc, #572]	; (8001aec <__aeabi_dsub+0x34c>)
 80018ae:	08f6      	lsrs	r6, r6, #3
 80018b0:	400a      	ands	r2, r1
 80018b2:	0757      	lsls	r7, r2, #29
 80018b4:	0252      	lsls	r2, r2, #9
 80018b6:	4337      	orrs	r7, r6
 80018b8:	0b12      	lsrs	r2, r2, #12
 80018ba:	e09b      	b.n	80019f4 <__aeabi_dsub+0x254>
 80018bc:	2e00      	cmp	r6, #0
 80018be:	d000      	beq.n	80018c2 <__aeabi_dsub+0x122>
 80018c0:	e0c5      	b.n	8001a4e <__aeabi_dsub+0x2ae>
 80018c2:	1c6e      	adds	r6, r5, #1
 80018c4:	0576      	lsls	r6, r6, #21
 80018c6:	0d76      	lsrs	r6, r6, #21
 80018c8:	2e01      	cmp	r6, #1
 80018ca:	dc00      	bgt.n	80018ce <__aeabi_dsub+0x12e>
 80018cc:	e148      	b.n	8001b60 <__aeabi_dsub+0x3c0>
 80018ce:	4667      	mov	r7, ip
 80018d0:	1a86      	subs	r6, r0, r2
 80018d2:	1bcb      	subs	r3, r1, r7
 80018d4:	42b0      	cmp	r0, r6
 80018d6:	41bf      	sbcs	r7, r7
 80018d8:	427f      	negs	r7, r7
 80018da:	46b8      	mov	r8, r7
 80018dc:	001f      	movs	r7, r3
 80018de:	4643      	mov	r3, r8
 80018e0:	1aff      	subs	r7, r7, r3
 80018e2:	003b      	movs	r3, r7
 80018e4:	46b8      	mov	r8, r7
 80018e6:	021b      	lsls	r3, r3, #8
 80018e8:	d500      	bpl.n	80018ec <__aeabi_dsub+0x14c>
 80018ea:	e15f      	b.n	8001bac <__aeabi_dsub+0x40c>
 80018ec:	4337      	orrs	r7, r6
 80018ee:	d19a      	bne.n	8001826 <__aeabi_dsub+0x86>
 80018f0:	2200      	movs	r2, #0
 80018f2:	2400      	movs	r4, #0
 80018f4:	2500      	movs	r5, #0
 80018f6:	e079      	b.n	80019ec <__aeabi_dsub+0x24c>
 80018f8:	2e00      	cmp	r6, #0
 80018fa:	dc00      	bgt.n	80018fe <__aeabi_dsub+0x15e>
 80018fc:	e0fa      	b.n	8001af4 <__aeabi_dsub+0x354>
 80018fe:	2f00      	cmp	r7, #0
 8001900:	d100      	bne.n	8001904 <__aeabi_dsub+0x164>
 8001902:	e08d      	b.n	8001a20 <__aeabi_dsub+0x280>
 8001904:	4b78      	ldr	r3, [pc, #480]	; (8001ae8 <__aeabi_dsub+0x348>)
 8001906:	429d      	cmp	r5, r3
 8001908:	d067      	beq.n	80019da <__aeabi_dsub+0x23a>
 800190a:	2380      	movs	r3, #128	; 0x80
 800190c:	4667      	mov	r7, ip
 800190e:	041b      	lsls	r3, r3, #16
 8001910:	431f      	orrs	r7, r3
 8001912:	46bc      	mov	ip, r7
 8001914:	2e38      	cmp	r6, #56	; 0x38
 8001916:	dc00      	bgt.n	800191a <__aeabi_dsub+0x17a>
 8001918:	e152      	b.n	8001bc0 <__aeabi_dsub+0x420>
 800191a:	4663      	mov	r3, ip
 800191c:	4313      	orrs	r3, r2
 800191e:	1e5a      	subs	r2, r3, #1
 8001920:	4193      	sbcs	r3, r2
 8001922:	181e      	adds	r6, r3, r0
 8001924:	4286      	cmp	r6, r0
 8001926:	4180      	sbcs	r0, r0
 8001928:	4240      	negs	r0, r0
 800192a:	1809      	adds	r1, r1, r0
 800192c:	020b      	lsls	r3, r1, #8
 800192e:	d400      	bmi.n	8001932 <__aeabi_dsub+0x192>
 8001930:	e0be      	b.n	8001ab0 <__aeabi_dsub+0x310>
 8001932:	4b6d      	ldr	r3, [pc, #436]	; (8001ae8 <__aeabi_dsub+0x348>)
 8001934:	3501      	adds	r5, #1
 8001936:	429d      	cmp	r5, r3
 8001938:	d100      	bne.n	800193c <__aeabi_dsub+0x19c>
 800193a:	e0d2      	b.n	8001ae2 <__aeabi_dsub+0x342>
 800193c:	4a6b      	ldr	r2, [pc, #428]	; (8001aec <__aeabi_dsub+0x34c>)
 800193e:	0873      	lsrs	r3, r6, #1
 8001940:	400a      	ands	r2, r1
 8001942:	2101      	movs	r1, #1
 8001944:	400e      	ands	r6, r1
 8001946:	431e      	orrs	r6, r3
 8001948:	0851      	lsrs	r1, r2, #1
 800194a:	07d3      	lsls	r3, r2, #31
 800194c:	2207      	movs	r2, #7
 800194e:	431e      	orrs	r6, r3
 8001950:	4032      	ands	r2, r6
 8001952:	e795      	b.n	8001880 <__aeabi_dsub+0xe0>
 8001954:	001e      	movs	r6, r3
 8001956:	4316      	orrs	r6, r2
 8001958:	d000      	beq.n	800195c <__aeabi_dsub+0x1bc>
 800195a:	e745      	b.n	80017e8 <__aeabi_dsub+0x48>
 800195c:	e740      	b.n	80017e0 <__aeabi_dsub+0x40>
 800195e:	4b62      	ldr	r3, [pc, #392]	; (8001ae8 <__aeabi_dsub+0x348>)
 8001960:	429d      	cmp	r5, r3
 8001962:	d03a      	beq.n	80019da <__aeabi_dsub+0x23a>
 8001964:	2380      	movs	r3, #128	; 0x80
 8001966:	4667      	mov	r7, ip
 8001968:	041b      	lsls	r3, r3, #16
 800196a:	431f      	orrs	r7, r3
 800196c:	46bc      	mov	ip, r7
 800196e:	2e38      	cmp	r6, #56	; 0x38
 8001970:	dd00      	ble.n	8001974 <__aeabi_dsub+0x1d4>
 8001972:	e0eb      	b.n	8001b4c <__aeabi_dsub+0x3ac>
 8001974:	2e1f      	cmp	r6, #31
 8001976:	dc00      	bgt.n	800197a <__aeabi_dsub+0x1da>
 8001978:	e13a      	b.n	8001bf0 <__aeabi_dsub+0x450>
 800197a:	0033      	movs	r3, r6
 800197c:	4667      	mov	r7, ip
 800197e:	3b20      	subs	r3, #32
 8001980:	40df      	lsrs	r7, r3
 8001982:	003b      	movs	r3, r7
 8001984:	2e20      	cmp	r6, #32
 8001986:	d005      	beq.n	8001994 <__aeabi_dsub+0x1f4>
 8001988:	2740      	movs	r7, #64	; 0x40
 800198a:	1bbf      	subs	r7, r7, r6
 800198c:	4666      	mov	r6, ip
 800198e:	40be      	lsls	r6, r7
 8001990:	4332      	orrs	r2, r6
 8001992:	4690      	mov	r8, r2
 8001994:	4646      	mov	r6, r8
 8001996:	1e72      	subs	r2, r6, #1
 8001998:	4196      	sbcs	r6, r2
 800199a:	4333      	orrs	r3, r6
 800199c:	e0da      	b.n	8001b54 <__aeabi_dsub+0x3b4>
 800199e:	2b00      	cmp	r3, #0
 80019a0:	d100      	bne.n	80019a4 <__aeabi_dsub+0x204>
 80019a2:	e214      	b.n	8001dce <__aeabi_dsub+0x62e>
 80019a4:	4663      	mov	r3, ip
 80019a6:	4313      	orrs	r3, r2
 80019a8:	d100      	bne.n	80019ac <__aeabi_dsub+0x20c>
 80019aa:	e168      	b.n	8001c7e <__aeabi_dsub+0x4de>
 80019ac:	2380      	movs	r3, #128	; 0x80
 80019ae:	074e      	lsls	r6, r1, #29
 80019b0:	08c0      	lsrs	r0, r0, #3
 80019b2:	08c9      	lsrs	r1, r1, #3
 80019b4:	031b      	lsls	r3, r3, #12
 80019b6:	4306      	orrs	r6, r0
 80019b8:	4219      	tst	r1, r3
 80019ba:	d008      	beq.n	80019ce <__aeabi_dsub+0x22e>
 80019bc:	4660      	mov	r0, ip
 80019be:	08c0      	lsrs	r0, r0, #3
 80019c0:	4218      	tst	r0, r3
 80019c2:	d104      	bne.n	80019ce <__aeabi_dsub+0x22e>
 80019c4:	4663      	mov	r3, ip
 80019c6:	0001      	movs	r1, r0
 80019c8:	08d2      	lsrs	r2, r2, #3
 80019ca:	075e      	lsls	r6, r3, #29
 80019cc:	4316      	orrs	r6, r2
 80019ce:	00f3      	lsls	r3, r6, #3
 80019d0:	4699      	mov	r9, r3
 80019d2:	00c9      	lsls	r1, r1, #3
 80019d4:	0f72      	lsrs	r2, r6, #29
 80019d6:	4d44      	ldr	r5, [pc, #272]	; (8001ae8 <__aeabi_dsub+0x348>)
 80019d8:	4311      	orrs	r1, r2
 80019da:	464b      	mov	r3, r9
 80019dc:	08de      	lsrs	r6, r3, #3
 80019de:	4b42      	ldr	r3, [pc, #264]	; (8001ae8 <__aeabi_dsub+0x348>)
 80019e0:	074f      	lsls	r7, r1, #29
 80019e2:	4337      	orrs	r7, r6
 80019e4:	08ca      	lsrs	r2, r1, #3
 80019e6:	429d      	cmp	r5, r3
 80019e8:	d100      	bne.n	80019ec <__aeabi_dsub+0x24c>
 80019ea:	e06e      	b.n	8001aca <__aeabi_dsub+0x32a>
 80019ec:	0312      	lsls	r2, r2, #12
 80019ee:	056d      	lsls	r5, r5, #21
 80019f0:	0b12      	lsrs	r2, r2, #12
 80019f2:	0d6d      	lsrs	r5, r5, #21
 80019f4:	2100      	movs	r1, #0
 80019f6:	0312      	lsls	r2, r2, #12
 80019f8:	0b13      	lsrs	r3, r2, #12
 80019fa:	0d0a      	lsrs	r2, r1, #20
 80019fc:	0512      	lsls	r2, r2, #20
 80019fe:	431a      	orrs	r2, r3
 8001a00:	4b3b      	ldr	r3, [pc, #236]	; (8001af0 <__aeabi_dsub+0x350>)
 8001a02:	052d      	lsls	r5, r5, #20
 8001a04:	4013      	ands	r3, r2
 8001a06:	432b      	orrs	r3, r5
 8001a08:	005b      	lsls	r3, r3, #1
 8001a0a:	07e4      	lsls	r4, r4, #31
 8001a0c:	085b      	lsrs	r3, r3, #1
 8001a0e:	4323      	orrs	r3, r4
 8001a10:	0038      	movs	r0, r7
 8001a12:	0019      	movs	r1, r3
 8001a14:	bc3c      	pop	{r2, r3, r4, r5}
 8001a16:	4690      	mov	r8, r2
 8001a18:	4699      	mov	r9, r3
 8001a1a:	46a2      	mov	sl, r4
 8001a1c:	46ab      	mov	fp, r5
 8001a1e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001a20:	4663      	mov	r3, ip
 8001a22:	4313      	orrs	r3, r2
 8001a24:	d011      	beq.n	8001a4a <__aeabi_dsub+0x2aa>
 8001a26:	1e73      	subs	r3, r6, #1
 8001a28:	2b00      	cmp	r3, #0
 8001a2a:	d000      	beq.n	8001a2e <__aeabi_dsub+0x28e>
 8001a2c:	e107      	b.n	8001c3e <__aeabi_dsub+0x49e>
 8001a2e:	1886      	adds	r6, r0, r2
 8001a30:	4286      	cmp	r6, r0
 8001a32:	4180      	sbcs	r0, r0
 8001a34:	4461      	add	r1, ip
 8001a36:	4240      	negs	r0, r0
 8001a38:	1809      	adds	r1, r1, r0
 8001a3a:	2501      	movs	r5, #1
 8001a3c:	020b      	lsls	r3, r1, #8
 8001a3e:	d537      	bpl.n	8001ab0 <__aeabi_dsub+0x310>
 8001a40:	2502      	movs	r5, #2
 8001a42:	e77b      	b.n	800193c <__aeabi_dsub+0x19c>
 8001a44:	003e      	movs	r6, r7
 8001a46:	4661      	mov	r1, ip
 8001a48:	4691      	mov	r9, r2
 8001a4a:	0035      	movs	r5, r6
 8001a4c:	e7c5      	b.n	80019da <__aeabi_dsub+0x23a>
 8001a4e:	465c      	mov	r4, fp
 8001a50:	2d00      	cmp	r5, #0
 8001a52:	d000      	beq.n	8001a56 <__aeabi_dsub+0x2b6>
 8001a54:	e0e1      	b.n	8001c1a <__aeabi_dsub+0x47a>
 8001a56:	000b      	movs	r3, r1
 8001a58:	4303      	orrs	r3, r0
 8001a5a:	d0f3      	beq.n	8001a44 <__aeabi_dsub+0x2a4>
 8001a5c:	1c73      	adds	r3, r6, #1
 8001a5e:	d100      	bne.n	8001a62 <__aeabi_dsub+0x2c2>
 8001a60:	e1ac      	b.n	8001dbc <__aeabi_dsub+0x61c>
 8001a62:	4b21      	ldr	r3, [pc, #132]	; (8001ae8 <__aeabi_dsub+0x348>)
 8001a64:	429f      	cmp	r7, r3
 8001a66:	d100      	bne.n	8001a6a <__aeabi_dsub+0x2ca>
 8001a68:	e13a      	b.n	8001ce0 <__aeabi_dsub+0x540>
 8001a6a:	43f3      	mvns	r3, r6
 8001a6c:	2b38      	cmp	r3, #56	; 0x38
 8001a6e:	dd00      	ble.n	8001a72 <__aeabi_dsub+0x2d2>
 8001a70:	e16f      	b.n	8001d52 <__aeabi_dsub+0x5b2>
 8001a72:	2b1f      	cmp	r3, #31
 8001a74:	dd00      	ble.n	8001a78 <__aeabi_dsub+0x2d8>
 8001a76:	e18c      	b.n	8001d92 <__aeabi_dsub+0x5f2>
 8001a78:	2520      	movs	r5, #32
 8001a7a:	000e      	movs	r6, r1
 8001a7c:	1aed      	subs	r5, r5, r3
 8001a7e:	40ae      	lsls	r6, r5
 8001a80:	46b0      	mov	r8, r6
 8001a82:	0006      	movs	r6, r0
 8001a84:	46aa      	mov	sl, r5
 8001a86:	40de      	lsrs	r6, r3
 8001a88:	4645      	mov	r5, r8
 8001a8a:	4335      	orrs	r5, r6
 8001a8c:	002e      	movs	r6, r5
 8001a8e:	4655      	mov	r5, sl
 8001a90:	40d9      	lsrs	r1, r3
 8001a92:	40a8      	lsls	r0, r5
 8001a94:	4663      	mov	r3, ip
 8001a96:	1e45      	subs	r5, r0, #1
 8001a98:	41a8      	sbcs	r0, r5
 8001a9a:	1a5b      	subs	r3, r3, r1
 8001a9c:	469c      	mov	ip, r3
 8001a9e:	4330      	orrs	r0, r6
 8001aa0:	1a16      	subs	r6, r2, r0
 8001aa2:	42b2      	cmp	r2, r6
 8001aa4:	4192      	sbcs	r2, r2
 8001aa6:	4663      	mov	r3, ip
 8001aa8:	4252      	negs	r2, r2
 8001aaa:	1a99      	subs	r1, r3, r2
 8001aac:	003d      	movs	r5, r7
 8001aae:	e6b4      	b.n	800181a <__aeabi_dsub+0x7a>
 8001ab0:	2207      	movs	r2, #7
 8001ab2:	4032      	ands	r2, r6
 8001ab4:	2a00      	cmp	r2, #0
 8001ab6:	d000      	beq.n	8001aba <__aeabi_dsub+0x31a>
 8001ab8:	e6e4      	b.n	8001884 <__aeabi_dsub+0xe4>
 8001aba:	4b0b      	ldr	r3, [pc, #44]	; (8001ae8 <__aeabi_dsub+0x348>)
 8001abc:	08f6      	lsrs	r6, r6, #3
 8001abe:	074f      	lsls	r7, r1, #29
 8001ac0:	4337      	orrs	r7, r6
 8001ac2:	08ca      	lsrs	r2, r1, #3
 8001ac4:	429d      	cmp	r5, r3
 8001ac6:	d000      	beq.n	8001aca <__aeabi_dsub+0x32a>
 8001ac8:	e790      	b.n	80019ec <__aeabi_dsub+0x24c>
 8001aca:	003b      	movs	r3, r7
 8001acc:	4313      	orrs	r3, r2
 8001ace:	d100      	bne.n	8001ad2 <__aeabi_dsub+0x332>
 8001ad0:	e1a6      	b.n	8001e20 <__aeabi_dsub+0x680>
 8001ad2:	2380      	movs	r3, #128	; 0x80
 8001ad4:	031b      	lsls	r3, r3, #12
 8001ad6:	431a      	orrs	r2, r3
 8001ad8:	0312      	lsls	r2, r2, #12
 8001ada:	0b12      	lsrs	r2, r2, #12
 8001adc:	4d02      	ldr	r5, [pc, #8]	; (8001ae8 <__aeabi_dsub+0x348>)
 8001ade:	e789      	b.n	80019f4 <__aeabi_dsub+0x254>
 8001ae0:	0015      	movs	r5, r2
 8001ae2:	2200      	movs	r2, #0
 8001ae4:	2700      	movs	r7, #0
 8001ae6:	e785      	b.n	80019f4 <__aeabi_dsub+0x254>
 8001ae8:	000007ff 	.word	0x000007ff
 8001aec:	ff7fffff 	.word	0xff7fffff
 8001af0:	800fffff 	.word	0x800fffff
 8001af4:	2e00      	cmp	r6, #0
 8001af6:	d000      	beq.n	8001afa <__aeabi_dsub+0x35a>
 8001af8:	e0c7      	b.n	8001c8a <__aeabi_dsub+0x4ea>
 8001afa:	1c6b      	adds	r3, r5, #1
 8001afc:	055e      	lsls	r6, r3, #21
 8001afe:	0d76      	lsrs	r6, r6, #21
 8001b00:	2e01      	cmp	r6, #1
 8001b02:	dc00      	bgt.n	8001b06 <__aeabi_dsub+0x366>
 8001b04:	e0f0      	b.n	8001ce8 <__aeabi_dsub+0x548>
 8001b06:	4dc8      	ldr	r5, [pc, #800]	; (8001e28 <__aeabi_dsub+0x688>)
 8001b08:	42ab      	cmp	r3, r5
 8001b0a:	d100      	bne.n	8001b0e <__aeabi_dsub+0x36e>
 8001b0c:	e0b9      	b.n	8001c82 <__aeabi_dsub+0x4e2>
 8001b0e:	1885      	adds	r5, r0, r2
 8001b10:	000a      	movs	r2, r1
 8001b12:	4285      	cmp	r5, r0
 8001b14:	4189      	sbcs	r1, r1
 8001b16:	4462      	add	r2, ip
 8001b18:	4249      	negs	r1, r1
 8001b1a:	1851      	adds	r1, r2, r1
 8001b1c:	2207      	movs	r2, #7
 8001b1e:	07ce      	lsls	r6, r1, #31
 8001b20:	086d      	lsrs	r5, r5, #1
 8001b22:	432e      	orrs	r6, r5
 8001b24:	0849      	lsrs	r1, r1, #1
 8001b26:	4032      	ands	r2, r6
 8001b28:	001d      	movs	r5, r3
 8001b2a:	e6a9      	b.n	8001880 <__aeabi_dsub+0xe0>
 8001b2c:	49bf      	ldr	r1, [pc, #764]	; (8001e2c <__aeabi_dsub+0x68c>)
 8001b2e:	1aed      	subs	r5, r5, r3
 8001b30:	4011      	ands	r1, r2
 8001b32:	2207      	movs	r2, #7
 8001b34:	4032      	ands	r2, r6
 8001b36:	e6a3      	b.n	8001880 <__aeabi_dsub+0xe0>
 8001b38:	0032      	movs	r2, r6
 8001b3a:	3828      	subs	r0, #40	; 0x28
 8001b3c:	4082      	lsls	r2, r0
 8001b3e:	2600      	movs	r6, #0
 8001b40:	e686      	b.n	8001850 <__aeabi_dsub+0xb0>
 8001b42:	0030      	movs	r0, r6
 8001b44:	f000 f9ae 	bl	8001ea4 <__clzsi2>
 8001b48:	3020      	adds	r0, #32
 8001b4a:	e673      	b.n	8001834 <__aeabi_dsub+0x94>
 8001b4c:	4663      	mov	r3, ip
 8001b4e:	4313      	orrs	r3, r2
 8001b50:	1e5a      	subs	r2, r3, #1
 8001b52:	4193      	sbcs	r3, r2
 8001b54:	1ac6      	subs	r6, r0, r3
 8001b56:	42b0      	cmp	r0, r6
 8001b58:	4180      	sbcs	r0, r0
 8001b5a:	4240      	negs	r0, r0
 8001b5c:	1a09      	subs	r1, r1, r0
 8001b5e:	e65c      	b.n	800181a <__aeabi_dsub+0x7a>
 8001b60:	000e      	movs	r6, r1
 8001b62:	4667      	mov	r7, ip
 8001b64:	4306      	orrs	r6, r0
 8001b66:	4317      	orrs	r7, r2
 8001b68:	2d00      	cmp	r5, #0
 8001b6a:	d15e      	bne.n	8001c2a <__aeabi_dsub+0x48a>
 8001b6c:	2e00      	cmp	r6, #0
 8001b6e:	d000      	beq.n	8001b72 <__aeabi_dsub+0x3d2>
 8001b70:	e0f3      	b.n	8001d5a <__aeabi_dsub+0x5ba>
 8001b72:	2f00      	cmp	r7, #0
 8001b74:	d100      	bne.n	8001b78 <__aeabi_dsub+0x3d8>
 8001b76:	e11e      	b.n	8001db6 <__aeabi_dsub+0x616>
 8001b78:	465c      	mov	r4, fp
 8001b7a:	4661      	mov	r1, ip
 8001b7c:	4691      	mov	r9, r2
 8001b7e:	e72c      	b.n	80019da <__aeabi_dsub+0x23a>
 8001b80:	4fa9      	ldr	r7, [pc, #676]	; (8001e28 <__aeabi_dsub+0x688>)
 8001b82:	42be      	cmp	r6, r7
 8001b84:	d07b      	beq.n	8001c7e <__aeabi_dsub+0x4de>
 8001b86:	001e      	movs	r6, r3
 8001b88:	e6f1      	b.n	800196e <__aeabi_dsub+0x1ce>
 8001b8a:	0010      	movs	r0, r2
 8001b8c:	3d1f      	subs	r5, #31
 8001b8e:	40e8      	lsrs	r0, r5
 8001b90:	2b20      	cmp	r3, #32
 8001b92:	d003      	beq.n	8001b9c <__aeabi_dsub+0x3fc>
 8001b94:	2140      	movs	r1, #64	; 0x40
 8001b96:	1acb      	subs	r3, r1, r3
 8001b98:	409a      	lsls	r2, r3
 8001b9a:	4316      	orrs	r6, r2
 8001b9c:	1e73      	subs	r3, r6, #1
 8001b9e:	419e      	sbcs	r6, r3
 8001ba0:	2207      	movs	r2, #7
 8001ba2:	4306      	orrs	r6, r0
 8001ba4:	4032      	ands	r2, r6
 8001ba6:	2100      	movs	r1, #0
 8001ba8:	2500      	movs	r5, #0
 8001baa:	e783      	b.n	8001ab4 <__aeabi_dsub+0x314>
 8001bac:	1a16      	subs	r6, r2, r0
 8001bae:	4663      	mov	r3, ip
 8001bb0:	42b2      	cmp	r2, r6
 8001bb2:	4180      	sbcs	r0, r0
 8001bb4:	1a59      	subs	r1, r3, r1
 8001bb6:	4240      	negs	r0, r0
 8001bb8:	1a0b      	subs	r3, r1, r0
 8001bba:	4698      	mov	r8, r3
 8001bbc:	465c      	mov	r4, fp
 8001bbe:	e632      	b.n	8001826 <__aeabi_dsub+0x86>
 8001bc0:	2e1f      	cmp	r6, #31
 8001bc2:	dd00      	ble.n	8001bc6 <__aeabi_dsub+0x426>
 8001bc4:	e0ab      	b.n	8001d1e <__aeabi_dsub+0x57e>
 8001bc6:	2720      	movs	r7, #32
 8001bc8:	1bbb      	subs	r3, r7, r6
 8001bca:	469a      	mov	sl, r3
 8001bcc:	4663      	mov	r3, ip
 8001bce:	4657      	mov	r7, sl
 8001bd0:	40bb      	lsls	r3, r7
 8001bd2:	4699      	mov	r9, r3
 8001bd4:	0013      	movs	r3, r2
 8001bd6:	464f      	mov	r7, r9
 8001bd8:	40f3      	lsrs	r3, r6
 8001bda:	431f      	orrs	r7, r3
 8001bdc:	003b      	movs	r3, r7
 8001bde:	4657      	mov	r7, sl
 8001be0:	40ba      	lsls	r2, r7
 8001be2:	1e57      	subs	r7, r2, #1
 8001be4:	41ba      	sbcs	r2, r7
 8001be6:	4313      	orrs	r3, r2
 8001be8:	4662      	mov	r2, ip
 8001bea:	40f2      	lsrs	r2, r6
 8001bec:	1889      	adds	r1, r1, r2
 8001bee:	e698      	b.n	8001922 <__aeabi_dsub+0x182>
 8001bf0:	2720      	movs	r7, #32
 8001bf2:	1bbb      	subs	r3, r7, r6
 8001bf4:	469a      	mov	sl, r3
 8001bf6:	4663      	mov	r3, ip
 8001bf8:	4657      	mov	r7, sl
 8001bfa:	40bb      	lsls	r3, r7
 8001bfc:	4699      	mov	r9, r3
 8001bfe:	0013      	movs	r3, r2
 8001c00:	464f      	mov	r7, r9
 8001c02:	40f3      	lsrs	r3, r6
 8001c04:	431f      	orrs	r7, r3
 8001c06:	003b      	movs	r3, r7
 8001c08:	4657      	mov	r7, sl
 8001c0a:	40ba      	lsls	r2, r7
 8001c0c:	1e57      	subs	r7, r2, #1
 8001c0e:	41ba      	sbcs	r2, r7
 8001c10:	4313      	orrs	r3, r2
 8001c12:	4662      	mov	r2, ip
 8001c14:	40f2      	lsrs	r2, r6
 8001c16:	1a89      	subs	r1, r1, r2
 8001c18:	e79c      	b.n	8001b54 <__aeabi_dsub+0x3b4>
 8001c1a:	4b83      	ldr	r3, [pc, #524]	; (8001e28 <__aeabi_dsub+0x688>)
 8001c1c:	429f      	cmp	r7, r3
 8001c1e:	d05f      	beq.n	8001ce0 <__aeabi_dsub+0x540>
 8001c20:	2580      	movs	r5, #128	; 0x80
 8001c22:	042d      	lsls	r5, r5, #16
 8001c24:	4273      	negs	r3, r6
 8001c26:	4329      	orrs	r1, r5
 8001c28:	e720      	b.n	8001a6c <__aeabi_dsub+0x2cc>
 8001c2a:	2e00      	cmp	r6, #0
 8001c2c:	d10c      	bne.n	8001c48 <__aeabi_dsub+0x4a8>
 8001c2e:	2f00      	cmp	r7, #0
 8001c30:	d100      	bne.n	8001c34 <__aeabi_dsub+0x494>
 8001c32:	e0d0      	b.n	8001dd6 <__aeabi_dsub+0x636>
 8001c34:	465c      	mov	r4, fp
 8001c36:	4661      	mov	r1, ip
 8001c38:	4691      	mov	r9, r2
 8001c3a:	4d7b      	ldr	r5, [pc, #492]	; (8001e28 <__aeabi_dsub+0x688>)
 8001c3c:	e6cd      	b.n	80019da <__aeabi_dsub+0x23a>
 8001c3e:	4f7a      	ldr	r7, [pc, #488]	; (8001e28 <__aeabi_dsub+0x688>)
 8001c40:	42be      	cmp	r6, r7
 8001c42:	d01c      	beq.n	8001c7e <__aeabi_dsub+0x4de>
 8001c44:	001e      	movs	r6, r3
 8001c46:	e665      	b.n	8001914 <__aeabi_dsub+0x174>
 8001c48:	2f00      	cmp	r7, #0
 8001c4a:	d018      	beq.n	8001c7e <__aeabi_dsub+0x4de>
 8001c4c:	08c0      	lsrs	r0, r0, #3
 8001c4e:	074e      	lsls	r6, r1, #29
 8001c50:	4306      	orrs	r6, r0
 8001c52:	2080      	movs	r0, #128	; 0x80
 8001c54:	08c9      	lsrs	r1, r1, #3
 8001c56:	0300      	lsls	r0, r0, #12
 8001c58:	4201      	tst	r1, r0
 8001c5a:	d008      	beq.n	8001c6e <__aeabi_dsub+0x4ce>
 8001c5c:	4663      	mov	r3, ip
 8001c5e:	08dc      	lsrs	r4, r3, #3
 8001c60:	4204      	tst	r4, r0
 8001c62:	d104      	bne.n	8001c6e <__aeabi_dsub+0x4ce>
 8001c64:	0021      	movs	r1, r4
 8001c66:	46da      	mov	sl, fp
 8001c68:	08d2      	lsrs	r2, r2, #3
 8001c6a:	075e      	lsls	r6, r3, #29
 8001c6c:	4316      	orrs	r6, r2
 8001c6e:	00f3      	lsls	r3, r6, #3
 8001c70:	4699      	mov	r9, r3
 8001c72:	2401      	movs	r4, #1
 8001c74:	4653      	mov	r3, sl
 8001c76:	00c9      	lsls	r1, r1, #3
 8001c78:	0f72      	lsrs	r2, r6, #29
 8001c7a:	4311      	orrs	r1, r2
 8001c7c:	401c      	ands	r4, r3
 8001c7e:	4d6a      	ldr	r5, [pc, #424]	; (8001e28 <__aeabi_dsub+0x688>)
 8001c80:	e6ab      	b.n	80019da <__aeabi_dsub+0x23a>
 8001c82:	001d      	movs	r5, r3
 8001c84:	2200      	movs	r2, #0
 8001c86:	2700      	movs	r7, #0
 8001c88:	e6b4      	b.n	80019f4 <__aeabi_dsub+0x254>
 8001c8a:	2d00      	cmp	r5, #0
 8001c8c:	d159      	bne.n	8001d42 <__aeabi_dsub+0x5a2>
 8001c8e:	000b      	movs	r3, r1
 8001c90:	4303      	orrs	r3, r0
 8001c92:	d100      	bne.n	8001c96 <__aeabi_dsub+0x4f6>
 8001c94:	e6d6      	b.n	8001a44 <__aeabi_dsub+0x2a4>
 8001c96:	1c73      	adds	r3, r6, #1
 8001c98:	d100      	bne.n	8001c9c <__aeabi_dsub+0x4fc>
 8001c9a:	e0b2      	b.n	8001e02 <__aeabi_dsub+0x662>
 8001c9c:	4b62      	ldr	r3, [pc, #392]	; (8001e28 <__aeabi_dsub+0x688>)
 8001c9e:	429f      	cmp	r7, r3
 8001ca0:	d01e      	beq.n	8001ce0 <__aeabi_dsub+0x540>
 8001ca2:	43f3      	mvns	r3, r6
 8001ca4:	2b38      	cmp	r3, #56	; 0x38
 8001ca6:	dc6f      	bgt.n	8001d88 <__aeabi_dsub+0x5e8>
 8001ca8:	2b1f      	cmp	r3, #31
 8001caa:	dd00      	ble.n	8001cae <__aeabi_dsub+0x50e>
 8001cac:	e097      	b.n	8001dde <__aeabi_dsub+0x63e>
 8001cae:	2520      	movs	r5, #32
 8001cb0:	000e      	movs	r6, r1
 8001cb2:	1aed      	subs	r5, r5, r3
 8001cb4:	40ae      	lsls	r6, r5
 8001cb6:	46b0      	mov	r8, r6
 8001cb8:	0006      	movs	r6, r0
 8001cba:	46aa      	mov	sl, r5
 8001cbc:	40de      	lsrs	r6, r3
 8001cbe:	4645      	mov	r5, r8
 8001cc0:	4335      	orrs	r5, r6
 8001cc2:	002e      	movs	r6, r5
 8001cc4:	4655      	mov	r5, sl
 8001cc6:	40a8      	lsls	r0, r5
 8001cc8:	40d9      	lsrs	r1, r3
 8001cca:	1e45      	subs	r5, r0, #1
 8001ccc:	41a8      	sbcs	r0, r5
 8001cce:	448c      	add	ip, r1
 8001cd0:	4306      	orrs	r6, r0
 8001cd2:	18b6      	adds	r6, r6, r2
 8001cd4:	4296      	cmp	r6, r2
 8001cd6:	4192      	sbcs	r2, r2
 8001cd8:	4251      	negs	r1, r2
 8001cda:	4461      	add	r1, ip
 8001cdc:	003d      	movs	r5, r7
 8001cde:	e625      	b.n	800192c <__aeabi_dsub+0x18c>
 8001ce0:	003d      	movs	r5, r7
 8001ce2:	4661      	mov	r1, ip
 8001ce4:	4691      	mov	r9, r2
 8001ce6:	e678      	b.n	80019da <__aeabi_dsub+0x23a>
 8001ce8:	000b      	movs	r3, r1
 8001cea:	4303      	orrs	r3, r0
 8001cec:	2d00      	cmp	r5, #0
 8001cee:	d000      	beq.n	8001cf2 <__aeabi_dsub+0x552>
 8001cf0:	e655      	b.n	800199e <__aeabi_dsub+0x1fe>
 8001cf2:	2b00      	cmp	r3, #0
 8001cf4:	d0f5      	beq.n	8001ce2 <__aeabi_dsub+0x542>
 8001cf6:	4663      	mov	r3, ip
 8001cf8:	4313      	orrs	r3, r2
 8001cfa:	d100      	bne.n	8001cfe <__aeabi_dsub+0x55e>
 8001cfc:	e66d      	b.n	80019da <__aeabi_dsub+0x23a>
 8001cfe:	1886      	adds	r6, r0, r2
 8001d00:	4286      	cmp	r6, r0
 8001d02:	4180      	sbcs	r0, r0
 8001d04:	4461      	add	r1, ip
 8001d06:	4240      	negs	r0, r0
 8001d08:	1809      	adds	r1, r1, r0
 8001d0a:	2200      	movs	r2, #0
 8001d0c:	020b      	lsls	r3, r1, #8
 8001d0e:	d400      	bmi.n	8001d12 <__aeabi_dsub+0x572>
 8001d10:	e6d0      	b.n	8001ab4 <__aeabi_dsub+0x314>
 8001d12:	4b46      	ldr	r3, [pc, #280]	; (8001e2c <__aeabi_dsub+0x68c>)
 8001d14:	3501      	adds	r5, #1
 8001d16:	4019      	ands	r1, r3
 8001d18:	e5b2      	b.n	8001880 <__aeabi_dsub+0xe0>
 8001d1a:	46b1      	mov	r9, r6
 8001d1c:	e65d      	b.n	80019da <__aeabi_dsub+0x23a>
 8001d1e:	0033      	movs	r3, r6
 8001d20:	4667      	mov	r7, ip
 8001d22:	3b20      	subs	r3, #32
 8001d24:	40df      	lsrs	r7, r3
 8001d26:	003b      	movs	r3, r7
 8001d28:	2e20      	cmp	r6, #32
 8001d2a:	d005      	beq.n	8001d38 <__aeabi_dsub+0x598>
 8001d2c:	2740      	movs	r7, #64	; 0x40
 8001d2e:	1bbf      	subs	r7, r7, r6
 8001d30:	4666      	mov	r6, ip
 8001d32:	40be      	lsls	r6, r7
 8001d34:	4332      	orrs	r2, r6
 8001d36:	4690      	mov	r8, r2
 8001d38:	4646      	mov	r6, r8
 8001d3a:	1e72      	subs	r2, r6, #1
 8001d3c:	4196      	sbcs	r6, r2
 8001d3e:	4333      	orrs	r3, r6
 8001d40:	e5ef      	b.n	8001922 <__aeabi_dsub+0x182>
 8001d42:	4b39      	ldr	r3, [pc, #228]	; (8001e28 <__aeabi_dsub+0x688>)
 8001d44:	429f      	cmp	r7, r3
 8001d46:	d0cb      	beq.n	8001ce0 <__aeabi_dsub+0x540>
 8001d48:	2580      	movs	r5, #128	; 0x80
 8001d4a:	042d      	lsls	r5, r5, #16
 8001d4c:	4273      	negs	r3, r6
 8001d4e:	4329      	orrs	r1, r5
 8001d50:	e7a8      	b.n	8001ca4 <__aeabi_dsub+0x504>
 8001d52:	4308      	orrs	r0, r1
 8001d54:	1e41      	subs	r1, r0, #1
 8001d56:	4188      	sbcs	r0, r1
 8001d58:	e6a2      	b.n	8001aa0 <__aeabi_dsub+0x300>
 8001d5a:	2f00      	cmp	r7, #0
 8001d5c:	d100      	bne.n	8001d60 <__aeabi_dsub+0x5c0>
 8001d5e:	e63c      	b.n	80019da <__aeabi_dsub+0x23a>
 8001d60:	4663      	mov	r3, ip
 8001d62:	1a86      	subs	r6, r0, r2
 8001d64:	1acf      	subs	r7, r1, r3
 8001d66:	42b0      	cmp	r0, r6
 8001d68:	419b      	sbcs	r3, r3
 8001d6a:	425b      	negs	r3, r3
 8001d6c:	1afb      	subs	r3, r7, r3
 8001d6e:	4698      	mov	r8, r3
 8001d70:	021b      	lsls	r3, r3, #8
 8001d72:	d54e      	bpl.n	8001e12 <__aeabi_dsub+0x672>
 8001d74:	1a16      	subs	r6, r2, r0
 8001d76:	4663      	mov	r3, ip
 8001d78:	42b2      	cmp	r2, r6
 8001d7a:	4192      	sbcs	r2, r2
 8001d7c:	1a59      	subs	r1, r3, r1
 8001d7e:	4252      	negs	r2, r2
 8001d80:	1a89      	subs	r1, r1, r2
 8001d82:	465c      	mov	r4, fp
 8001d84:	2200      	movs	r2, #0
 8001d86:	e57b      	b.n	8001880 <__aeabi_dsub+0xe0>
 8001d88:	4301      	orrs	r1, r0
 8001d8a:	000e      	movs	r6, r1
 8001d8c:	1e71      	subs	r1, r6, #1
 8001d8e:	418e      	sbcs	r6, r1
 8001d90:	e79f      	b.n	8001cd2 <__aeabi_dsub+0x532>
 8001d92:	001d      	movs	r5, r3
 8001d94:	000e      	movs	r6, r1
 8001d96:	3d20      	subs	r5, #32
 8001d98:	40ee      	lsrs	r6, r5
 8001d9a:	46b0      	mov	r8, r6
 8001d9c:	2b20      	cmp	r3, #32
 8001d9e:	d004      	beq.n	8001daa <__aeabi_dsub+0x60a>
 8001da0:	2540      	movs	r5, #64	; 0x40
 8001da2:	1aeb      	subs	r3, r5, r3
 8001da4:	4099      	lsls	r1, r3
 8001da6:	4308      	orrs	r0, r1
 8001da8:	4681      	mov	r9, r0
 8001daa:	4648      	mov	r0, r9
 8001dac:	4643      	mov	r3, r8
 8001dae:	1e41      	subs	r1, r0, #1
 8001db0:	4188      	sbcs	r0, r1
 8001db2:	4318      	orrs	r0, r3
 8001db4:	e674      	b.n	8001aa0 <__aeabi_dsub+0x300>
 8001db6:	2200      	movs	r2, #0
 8001db8:	2400      	movs	r4, #0
 8001dba:	e617      	b.n	80019ec <__aeabi_dsub+0x24c>
 8001dbc:	1a16      	subs	r6, r2, r0
 8001dbe:	4663      	mov	r3, ip
 8001dc0:	42b2      	cmp	r2, r6
 8001dc2:	4192      	sbcs	r2, r2
 8001dc4:	1a59      	subs	r1, r3, r1
 8001dc6:	4252      	negs	r2, r2
 8001dc8:	1a89      	subs	r1, r1, r2
 8001dca:	003d      	movs	r5, r7
 8001dcc:	e525      	b.n	800181a <__aeabi_dsub+0x7a>
 8001dce:	4661      	mov	r1, ip
 8001dd0:	4691      	mov	r9, r2
 8001dd2:	4d15      	ldr	r5, [pc, #84]	; (8001e28 <__aeabi_dsub+0x688>)
 8001dd4:	e601      	b.n	80019da <__aeabi_dsub+0x23a>
 8001dd6:	2280      	movs	r2, #128	; 0x80
 8001dd8:	2400      	movs	r4, #0
 8001dda:	0312      	lsls	r2, r2, #12
 8001ddc:	e679      	b.n	8001ad2 <__aeabi_dsub+0x332>
 8001dde:	001d      	movs	r5, r3
 8001de0:	000e      	movs	r6, r1
 8001de2:	3d20      	subs	r5, #32
 8001de4:	40ee      	lsrs	r6, r5
 8001de6:	46b0      	mov	r8, r6
 8001de8:	2b20      	cmp	r3, #32
 8001dea:	d004      	beq.n	8001df6 <__aeabi_dsub+0x656>
 8001dec:	2540      	movs	r5, #64	; 0x40
 8001dee:	1aeb      	subs	r3, r5, r3
 8001df0:	4099      	lsls	r1, r3
 8001df2:	4308      	orrs	r0, r1
 8001df4:	4681      	mov	r9, r0
 8001df6:	464e      	mov	r6, r9
 8001df8:	4643      	mov	r3, r8
 8001dfa:	1e71      	subs	r1, r6, #1
 8001dfc:	418e      	sbcs	r6, r1
 8001dfe:	431e      	orrs	r6, r3
 8001e00:	e767      	b.n	8001cd2 <__aeabi_dsub+0x532>
 8001e02:	1886      	adds	r6, r0, r2
 8001e04:	4296      	cmp	r6, r2
 8001e06:	419b      	sbcs	r3, r3
 8001e08:	4461      	add	r1, ip
 8001e0a:	425b      	negs	r3, r3
 8001e0c:	18c9      	adds	r1, r1, r3
 8001e0e:	003d      	movs	r5, r7
 8001e10:	e58c      	b.n	800192c <__aeabi_dsub+0x18c>
 8001e12:	4647      	mov	r7, r8
 8001e14:	4337      	orrs	r7, r6
 8001e16:	d0ce      	beq.n	8001db6 <__aeabi_dsub+0x616>
 8001e18:	2207      	movs	r2, #7
 8001e1a:	4641      	mov	r1, r8
 8001e1c:	4032      	ands	r2, r6
 8001e1e:	e649      	b.n	8001ab4 <__aeabi_dsub+0x314>
 8001e20:	2700      	movs	r7, #0
 8001e22:	003a      	movs	r2, r7
 8001e24:	e5e6      	b.n	80019f4 <__aeabi_dsub+0x254>
 8001e26:	46c0      	nop			; (mov r8, r8)
 8001e28:	000007ff 	.word	0x000007ff
 8001e2c:	ff7fffff 	.word	0xff7fffff

08001e30 <__aeabi_i2d>:
 8001e30:	b570      	push	{r4, r5, r6, lr}
 8001e32:	2800      	cmp	r0, #0
 8001e34:	d02d      	beq.n	8001e92 <__aeabi_i2d+0x62>
 8001e36:	17c3      	asrs	r3, r0, #31
 8001e38:	18c5      	adds	r5, r0, r3
 8001e3a:	405d      	eors	r5, r3
 8001e3c:	0fc4      	lsrs	r4, r0, #31
 8001e3e:	0028      	movs	r0, r5
 8001e40:	f000 f830 	bl	8001ea4 <__clzsi2>
 8001e44:	4b15      	ldr	r3, [pc, #84]	; (8001e9c <__aeabi_i2d+0x6c>)
 8001e46:	1a1b      	subs	r3, r3, r0
 8001e48:	055b      	lsls	r3, r3, #21
 8001e4a:	0d5b      	lsrs	r3, r3, #21
 8001e4c:	280a      	cmp	r0, #10
 8001e4e:	dd15      	ble.n	8001e7c <__aeabi_i2d+0x4c>
 8001e50:	380b      	subs	r0, #11
 8001e52:	4085      	lsls	r5, r0
 8001e54:	2200      	movs	r2, #0
 8001e56:	032d      	lsls	r5, r5, #12
 8001e58:	0b2d      	lsrs	r5, r5, #12
 8001e5a:	2100      	movs	r1, #0
 8001e5c:	0010      	movs	r0, r2
 8001e5e:	032d      	lsls	r5, r5, #12
 8001e60:	0d0a      	lsrs	r2, r1, #20
 8001e62:	0b2d      	lsrs	r5, r5, #12
 8001e64:	0512      	lsls	r2, r2, #20
 8001e66:	432a      	orrs	r2, r5
 8001e68:	4d0d      	ldr	r5, [pc, #52]	; (8001ea0 <__aeabi_i2d+0x70>)
 8001e6a:	051b      	lsls	r3, r3, #20
 8001e6c:	402a      	ands	r2, r5
 8001e6e:	4313      	orrs	r3, r2
 8001e70:	005b      	lsls	r3, r3, #1
 8001e72:	07e4      	lsls	r4, r4, #31
 8001e74:	085b      	lsrs	r3, r3, #1
 8001e76:	4323      	orrs	r3, r4
 8001e78:	0019      	movs	r1, r3
 8001e7a:	bd70      	pop	{r4, r5, r6, pc}
 8001e7c:	0002      	movs	r2, r0
 8001e7e:	0029      	movs	r1, r5
 8001e80:	3215      	adds	r2, #21
 8001e82:	4091      	lsls	r1, r2
 8001e84:	000a      	movs	r2, r1
 8001e86:	210b      	movs	r1, #11
 8001e88:	1a08      	subs	r0, r1, r0
 8001e8a:	40c5      	lsrs	r5, r0
 8001e8c:	032d      	lsls	r5, r5, #12
 8001e8e:	0b2d      	lsrs	r5, r5, #12
 8001e90:	e7e3      	b.n	8001e5a <__aeabi_i2d+0x2a>
 8001e92:	2400      	movs	r4, #0
 8001e94:	2300      	movs	r3, #0
 8001e96:	2500      	movs	r5, #0
 8001e98:	2200      	movs	r2, #0
 8001e9a:	e7de      	b.n	8001e5a <__aeabi_i2d+0x2a>
 8001e9c:	0000041e 	.word	0x0000041e
 8001ea0:	800fffff 	.word	0x800fffff

08001ea4 <__clzsi2>:
 8001ea4:	211c      	movs	r1, #28
 8001ea6:	2301      	movs	r3, #1
 8001ea8:	041b      	lsls	r3, r3, #16
 8001eaa:	4298      	cmp	r0, r3
 8001eac:	d301      	bcc.n	8001eb2 <__clzsi2+0xe>
 8001eae:	0c00      	lsrs	r0, r0, #16
 8001eb0:	3910      	subs	r1, #16
 8001eb2:	0a1b      	lsrs	r3, r3, #8
 8001eb4:	4298      	cmp	r0, r3
 8001eb6:	d301      	bcc.n	8001ebc <__clzsi2+0x18>
 8001eb8:	0a00      	lsrs	r0, r0, #8
 8001eba:	3908      	subs	r1, #8
 8001ebc:	091b      	lsrs	r3, r3, #4
 8001ebe:	4298      	cmp	r0, r3
 8001ec0:	d301      	bcc.n	8001ec6 <__clzsi2+0x22>
 8001ec2:	0900      	lsrs	r0, r0, #4
 8001ec4:	3904      	subs	r1, #4
 8001ec6:	a202      	add	r2, pc, #8	; (adr r2, 8001ed0 <__clzsi2+0x2c>)
 8001ec8:	5c10      	ldrb	r0, [r2, r0]
 8001eca:	1840      	adds	r0, r0, r1
 8001ecc:	4770      	bx	lr
 8001ece:	46c0      	nop			; (mov r8, r8)
 8001ed0:	02020304 	.word	0x02020304
 8001ed4:	01010101 	.word	0x01010101
	...

08001ee0 <TDA7719_begin>:

uint8_t TDA7418_register_data[REG_SPK_ATT_SUBR + 1];
I2C_HandleTypeDef i2c;


int TDA7719_begin(I2C_HandleTypeDef dev) {
 8001ee0:	b084      	sub	sp, #16
 8001ee2:	b5b0      	push	{r4, r5, r7, lr}
 8001ee4:	b086      	sub	sp, #24
 8001ee6:	af02      	add	r7, sp, #8
 8001ee8:	2520      	movs	r5, #32
 8001eea:	197c      	adds	r4, r7, r5
 8001eec:	6020      	str	r0, [r4, #0]
 8001eee:	6061      	str	r1, [r4, #4]
 8001ef0:	60a2      	str	r2, [r4, #8]
 8001ef2:	60e3      	str	r3, [r4, #12]
	i2c = dev;
 8001ef4:	4b3b      	ldr	r3, [pc, #236]	; (8001fe4 <TDA7719_begin+0x104>)
 8001ef6:	197a      	adds	r2, r7, r5
 8001ef8:	0018      	movs	r0, r3
 8001efa:	0011      	movs	r1, r2
 8001efc:	234c      	movs	r3, #76	; 0x4c
 8001efe:	001a      	movs	r2, r3
 8001f00:	f003 ffa8 	bl	8005e54 <memcpy>
	TDA7418_register_data[REG_SOURCE_SEL ] 	= 0b11100011;
 8001f04:	4b38      	ldr	r3, [pc, #224]	; (8001fe8 <TDA7719_begin+0x108>)
 8001f06:	22e3      	movs	r2, #227	; 0xe3
 8001f08:	701a      	strb	r2, [r3, #0]
	TDA7418_register_data[REG_2SOURCE_SEL] 	= 0b11111011;
 8001f0a:	4b37      	ldr	r3, [pc, #220]	; (8001fe8 <TDA7719_begin+0x108>)
 8001f0c:	22fb      	movs	r2, #251	; 0xfb
 8001f0e:	705a      	strb	r2, [r3, #1]
	TDA7418_register_data[REG_MIX_SOURCE ] 	= 0b00111111;
 8001f10:	4b35      	ldr	r3, [pc, #212]	; (8001fe8 <TDA7719_begin+0x108>)
 8001f12:	223f      	movs	r2, #63	; 0x3f
 8001f14:	709a      	strb	r2, [r3, #2]
	TDA7418_register_data[REG_LEVELMETER ] 	= 0b00111111;
 8001f16:	4b34      	ldr	r3, [pc, #208]	; (8001fe8 <TDA7719_begin+0x108>)
 8001f18:	223f      	movs	r2, #63	; 0x3f
 8001f1a:	70da      	strb	r2, [r3, #3]
	TDA7418_register_data[REG_SOFTMUTE   ] 	= 0b11010011;
 8001f1c:	4b32      	ldr	r3, [pc, #200]	; (8001fe8 <TDA7719_begin+0x108>)
 8001f1e:	22d3      	movs	r2, #211	; 0xd3
 8001f20:	711a      	strb	r2, [r3, #4]
	TDA7418_register_data[REG_SOFT_STEP1 ] 	= 0b11111111;
 8001f22:	4b31      	ldr	r3, [pc, #196]	; (8001fe8 <TDA7719_begin+0x108>)
 8001f24:	22ff      	movs	r2, #255	; 0xff
 8001f26:	715a      	strb	r2, [r3, #5]
	TDA7418_register_data[REG_SOFT_STEP2 ] 	= 0b11001111;
 8001f28:	4b2f      	ldr	r3, [pc, #188]	; (8001fe8 <TDA7719_begin+0x108>)
 8001f2a:	22cf      	movs	r2, #207	; 0xcf
 8001f2c:	719a      	strb	r2, [r3, #6]

	TDA7418_register_data[REG_LOUDNESS] 	= 0b11110000;
 8001f2e:	4b2e      	ldr	r3, [pc, #184]	; (8001fe8 <TDA7719_begin+0x108>)
 8001f30:	22f0      	movs	r2, #240	; 0xf0
 8001f32:	71da      	strb	r2, [r3, #7]
	TDA7418_register_data[REG_VOLUME] 		= 0b11011111;
 8001f34:	4b2c      	ldr	r3, [pc, #176]	; (8001fe8 <TDA7719_begin+0x108>)
 8001f36:	22df      	movs	r2, #223	; 0xdf
 8001f38:	721a      	strb	r2, [r3, #8]
	TDA7418_register_data[REG_TREBLE] 		= 0b11111111;
 8001f3a:	4b2b      	ldr	r3, [pc, #172]	; (8001fe8 <TDA7719_begin+0x108>)
 8001f3c:	22ff      	movs	r2, #255	; 0xff
 8001f3e:	725a      	strb	r2, [r3, #9]
	TDA7418_register_data[REG_MIDDLE] 		= 0b11111111;
 8001f40:	4b29      	ldr	r3, [pc, #164]	; (8001fe8 <TDA7719_begin+0x108>)
 8001f42:	22ff      	movs	r2, #255	; 0xff
 8001f44:	729a      	strb	r2, [r3, #10]
	TDA7418_register_data[REG_BASS] 		= 0b11110000;	// +15dB
 8001f46:	4b28      	ldr	r3, [pc, #160]	; (8001fe8 <TDA7719_begin+0x108>)
 8001f48:	22f0      	movs	r2, #240	; 0xf0
 8001f4a:	72da      	strb	r2, [r3, #11]
	TDA7418_register_data[REG_MID_BAS_FC] 	= 0b11111111;
 8001f4c:	4b26      	ldr	r3, [pc, #152]	; (8001fe8 <TDA7719_begin+0x108>)
 8001f4e:	22ff      	movs	r2, #255	; 0xff
 8001f50:	731a      	strb	r2, [r3, #12]
	TDA7418_register_data[REG_SPK_ATT_LF] 	= 0b10000000;	// 0dB
 8001f52:	4b25      	ldr	r3, [pc, #148]	; (8001fe8 <TDA7719_begin+0x108>)
 8001f54:	2280      	movs	r2, #128	; 0x80
 8001f56:	735a      	strb	r2, [r3, #13]
	TDA7418_register_data[REG_SPK_ATT_RF] 	= 0b10000000;	// 0dB
 8001f58:	4b23      	ldr	r3, [pc, #140]	; (8001fe8 <TDA7719_begin+0x108>)
 8001f5a:	2280      	movs	r2, #128	; 0x80
 8001f5c:	739a      	strb	r2, [r3, #14]
	TDA7418_register_data[REG_SPK_ATT_LR] 	= 0b11100000;	// Mute
 8001f5e:	4b22      	ldr	r3, [pc, #136]	; (8001fe8 <TDA7719_begin+0x108>)
 8001f60:	22e0      	movs	r2, #224	; 0xe0
 8001f62:	73da      	strb	r2, [r3, #15]
	TDA7418_register_data[REG_SPK_ATT_RR] 	= 0b11100000;	// Mute
 8001f64:	4b20      	ldr	r3, [pc, #128]	; (8001fe8 <TDA7719_begin+0x108>)
 8001f66:	22e0      	movs	r2, #224	; 0xe0
 8001f68:	741a      	strb	r2, [r3, #16]
	TDA7418_register_data[REG_SPK_ATT_SUBL] = 0b10000000;	// 0dB
 8001f6a:	4b1f      	ldr	r3, [pc, #124]	; (8001fe8 <TDA7719_begin+0x108>)
 8001f6c:	2280      	movs	r2, #128	; 0x80
 8001f6e:	745a      	strb	r2, [r3, #17]
	TDA7418_register_data[REG_SPK_ATT_SUBR] = 0b10000000;	// 0dB
 8001f70:	4b1d      	ldr	r3, [pc, #116]	; (8001fe8 <TDA7719_begin+0x108>)
 8001f72:	2280      	movs	r2, #128	; 0x80
 8001f74:	749a      	strb	r2, [r3, #18]

	  char data[2] = {0,0};
 8001f76:	1d3b      	adds	r3, r7, #4
 8001f78:	2200      	movs	r2, #0
 8001f7a:	701a      	strb	r2, [r3, #0]
 8001f7c:	1d3b      	adds	r3, r7, #4
 8001f7e:	2200      	movs	r2, #0
 8001f80:	705a      	strb	r2, [r3, #1]
	  HAL_StatusTypeDef ret;
	  for(int i = 0; i<= REG_SPK_ATT_SUBR; i++){
 8001f82:	2300      	movs	r3, #0
 8001f84:	60bb      	str	r3, [r7, #8]
 8001f86:	e020      	b.n	8001fca <TDA7719_begin+0xea>
		  data[0] = i;
 8001f88:	68bb      	ldr	r3, [r7, #8]
 8001f8a:	b2da      	uxtb	r2, r3
 8001f8c:	1d3b      	adds	r3, r7, #4
 8001f8e:	701a      	strb	r2, [r3, #0]
		  data[1] = TDA7418_register_data[i];
 8001f90:	4a15      	ldr	r2, [pc, #84]	; (8001fe8 <TDA7719_begin+0x108>)
 8001f92:	68bb      	ldr	r3, [r7, #8]
 8001f94:	18d3      	adds	r3, r2, r3
 8001f96:	781a      	ldrb	r2, [r3, #0]
 8001f98:	1d3b      	adds	r3, r7, #4
 8001f9a:	705a      	strb	r2, [r3, #1]
		  ret = HAL_I2C_Master_Transmit(&i2c, TDA_ADDR, &data, 2, 1000);
 8001f9c:	250f      	movs	r5, #15
 8001f9e:	197c      	adds	r4, r7, r5
 8001fa0:	1d3a      	adds	r2, r7, #4
 8001fa2:	4810      	ldr	r0, [pc, #64]	; (8001fe4 <TDA7719_begin+0x104>)
 8001fa4:	23fa      	movs	r3, #250	; 0xfa
 8001fa6:	009b      	lsls	r3, r3, #2
 8001fa8:	9300      	str	r3, [sp, #0]
 8001faa:	2302      	movs	r3, #2
 8001fac:	2188      	movs	r1, #136	; 0x88
 8001fae:	f002 f93b 	bl	8004228 <HAL_I2C_Master_Transmit>
 8001fb2:	0003      	movs	r3, r0
 8001fb4:	7023      	strb	r3, [r4, #0]
		  if(ret != HAL_OK)
 8001fb6:	197b      	adds	r3, r7, r5
 8001fb8:	781b      	ldrb	r3, [r3, #0]
 8001fba:	2b00      	cmp	r3, #0
 8001fbc:	d002      	beq.n	8001fc4 <TDA7719_begin+0xe4>
			  return -1;
 8001fbe:	2301      	movs	r3, #1
 8001fc0:	425b      	negs	r3, r3
 8001fc2:	e008      	b.n	8001fd6 <TDA7719_begin+0xf6>
	  for(int i = 0; i<= REG_SPK_ATT_SUBR; i++){
 8001fc4:	68bb      	ldr	r3, [r7, #8]
 8001fc6:	3301      	adds	r3, #1
 8001fc8:	60bb      	str	r3, [r7, #8]
 8001fca:	68bb      	ldr	r3, [r7, #8]
 8001fcc:	2b12      	cmp	r3, #18
 8001fce:	dddb      	ble.n	8001f88 <TDA7719_begin+0xa8>
	  }
    return ret;
 8001fd0:	230f      	movs	r3, #15
 8001fd2:	18fb      	adds	r3, r7, r3
 8001fd4:	781b      	ldrb	r3, [r3, #0]
}
 8001fd6:	0018      	movs	r0, r3
 8001fd8:	46bd      	mov	sp, r7
 8001fda:	b004      	add	sp, #16
 8001fdc:	bcb0      	pop	{r4, r5, r7}
 8001fde:	bc08      	pop	{r3}
 8001fe0:	b004      	add	sp, #16
 8001fe2:	4718      	bx	r3
 8001fe4:	20000094 	.word	0x20000094
 8001fe8:	20000080 	.word	0x20000080

08001fec <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001fec:	b5b0      	push	{r4, r5, r7, lr}
 8001fee:	b0a4      	sub	sp, #144	; 0x90
 8001ff0:	af10      	add	r7, sp, #64	; 0x40
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001ff2:	f000 ff7d 	bl	8002ef0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001ff6:	f000 fa3f 	bl	8002478 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001ffa:	f000 fc9b 	bl	8002934 <MX_GPIO_Init>
  MX_DMA_Init();
 8001ffe:	f000 fc7b 	bl	80028f8 <MX_DMA_Init>
  MX_ADC_Init();
 8002002:	f000 faa3 	bl	800254c <MX_ADC_Init>
  MX_I2C1_Init();
 8002006:	f000 fb57 	bl	80026b8 <MX_I2C1_Init>
  MX_USART1_UART_Init();
 800200a:	f000 fc45 	bl	8002898 <MX_USART1_UART_Init>
  MX_TIM1_Init();
 800200e:	f000 fb93 	bl	8002738 <MX_TIM1_Init>
  MX_TIM3_Init();
 8002012:	f000 fbe9 	bl	80027e8 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */
  if(HAL_OK != HAL_ADCEx_Calibration_Start(&hadc))
 8002016:	4bc1      	ldr	r3, [pc, #772]	; (800231c <main+0x330>)
 8002018:	0018      	movs	r0, r3
 800201a:	f001 fb95 	bl	8003748 <HAL_ADCEx_Calibration_Start>
 800201e:	1e03      	subs	r3, r0, #0
 8002020:	d001      	beq.n	8002026 <main+0x3a>
	  Error_Handler();
 8002022:	f000 fda3 	bl	8002b6c <Error_Handler>

  if(HAL_ADC_Start_DMA(&hadc, &ADC_buffer, ADC_BUF_SIZE) != HAL_OK)
 8002026:	49be      	ldr	r1, [pc, #760]	; (8002320 <main+0x334>)
 8002028:	4bbc      	ldr	r3, [pc, #752]	; (800231c <main+0x330>)
 800202a:	2206      	movs	r2, #6
 800202c:	0018      	movs	r0, r3
 800202e:	f001 f903 	bl	8003238 <HAL_ADC_Start_DMA>
 8002032:	1e03      	subs	r3, r0, #0
 8002034:	d001      	beq.n	800203a <main+0x4e>
	  Error_Handler();
 8002036:	f000 fd99 	bl	8002b6c <Error_Handler>

  if(HAL_OK != HAL_TIM_Base_Start(&htim1))
 800203a:	4bba      	ldr	r3, [pc, #744]	; (8002324 <main+0x338>)
 800203c:	0018      	movs	r0, r3
 800203e:	f003 f973 	bl	8005328 <HAL_TIM_Base_Start>
 8002042:	1e03      	subs	r3, r0, #0
 8002044:	d001      	beq.n	800204a <main+0x5e>
	  Error_Handler();
 8002046:	f000 fd91 	bl	8002b6c <Error_Handler>
  if(HAL_OK != HAL_TIM_Base_Start(&htim3))
 800204a:	4bb7      	ldr	r3, [pc, #732]	; (8002328 <main+0x33c>)
 800204c:	0018      	movs	r0, r3
 800204e:	f003 f96b 	bl	8005328 <HAL_TIM_Base_Start>
 8002052:	1e03      	subs	r3, r0, #0
 8002054:	d001      	beq.n	800205a <main+0x6e>
	  Error_Handler();
 8002056:	f000 fd89 	bl	8002b6c <Error_Handler>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  // Endstufe einschalten
  HAL_GPIO_WritePin(MUTE_AMP1_GPIO_Port,MUTE_AMP1_Pin, GPIO_PIN_RESET);	// Mute eingeschaltet für tests
 800205a:	4bb4      	ldr	r3, [pc, #720]	; (800232c <main+0x340>)
 800205c:	2200      	movs	r2, #0
 800205e:	2180      	movs	r1, #128	; 0x80
 8002060:	0018      	movs	r0, r3
 8002062:	f002 f812 	bl	800408a <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(STBY_AMP1_GPIO_Port,STBY_AMP1_Pin, GPIO_PIN_SET);
 8002066:	2380      	movs	r3, #128	; 0x80
 8002068:	005b      	lsls	r3, r3, #1
 800206a:	48b0      	ldr	r0, [pc, #704]	; (800232c <main+0x340>)
 800206c:	2201      	movs	r2, #1
 800206e:	0019      	movs	r1, r3
 8002070:	f002 f80b 	bl	800408a <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(MUTE_AMP2_GPIO_Port,MUTE_AMP2_Pin, GPIO_PIN_RESET);	// Mute eingeschaltet für tests
 8002074:	2380      	movs	r3, #128	; 0x80
 8002076:	019b      	lsls	r3, r3, #6
 8002078:	48ac      	ldr	r0, [pc, #688]	; (800232c <main+0x340>)
 800207a:	2200      	movs	r2, #0
 800207c:	0019      	movs	r1, r3
 800207e:	f002 f804 	bl	800408a <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(STBY_AMP2_GPIO_Port,STBY_AMP2_Pin, GPIO_PIN_SET);
 8002082:	4baa      	ldr	r3, [pc, #680]	; (800232c <main+0x340>)
 8002084:	2201      	movs	r2, #1
 8002086:	2108      	movs	r1, #8
 8002088:	0018      	movs	r0, r3
 800208a:	f001 fffe 	bl	800408a <HAL_GPIO_WritePin>

  GPIO_PinState state;
  uint8_t test = 0;
 800208e:	2343      	movs	r3, #67	; 0x43
 8002090:	18fb      	adds	r3, r7, r3
 8002092:	2200      	movs	r2, #0
 8002094:	701a      	strb	r2, [r3, #0]
  uint8_t adresses[5] = {0,0,0,0,0};
 8002096:	003b      	movs	r3, r7
 8002098:	0018      	movs	r0, r3
 800209a:	2305      	movs	r3, #5
 800209c:	001a      	movs	r2, r3
 800209e:	2100      	movs	r1, #0
 80020a0:	f003 fee1 	bl	8005e66 <memset>
  	  //if(ret != HAL_OK)
  	  //Error_Handler();

*/

  	  const int GAIN = 4;
 80020a4:	2304      	movs	r3, #4
 80020a6:	63fb      	str	r3, [r7, #60]	; 0x3c
  	  const int BASS = 3;
 80020a8:	2303      	movs	r3, #3
 80020aa:	63bb      	str	r3, [r7, #56]	; 0x38
  	  const int MIDDLE = 2;
 80020ac:	2302      	movs	r3, #2
 80020ae:	637b      	str	r3, [r7, #52]	; 0x34
  	  const int TREBLE = 1;
 80020b0:	2301      	movs	r3, #1
 80020b2:	633b      	str	r3, [r7, #48]	; 0x30
  	  const int PACK = 5;
 80020b4:	2305      	movs	r3, #5
 80020b6:	62fb      	str	r3, [r7, #44]	; 0x2c
  	  // Faktor aus Debug Wert, und Messung mit Multimeter bestimmt; Stimmt auf 10mV mit Fluke Multimeter überein
  	  const double PACK_FAKTOR = 14.86 / 1698.0;
 80020b8:	4b9d      	ldr	r3, [pc, #628]	; (8002330 <main+0x344>)
 80020ba:	4c9e      	ldr	r4, [pc, #632]	; (8002334 <main+0x348>)
 80020bc:	623b      	str	r3, [r7, #32]
 80020be:	627c      	str	r4, [r7, #36]	; 0x24
  	  const double PACK_LOW = 13.5;
 80020c0:	2300      	movs	r3, #0
 80020c2:	4c9d      	ldr	r4, [pc, #628]	; (8002338 <main+0x34c>)
 80020c4:	61bb      	str	r3, [r7, #24]
 80020c6:	61fc      	str	r4, [r7, #28]
  	  const double PACK_FULL = 16.8;
 80020c8:	4b9c      	ldr	r3, [pc, #624]	; (800233c <main+0x350>)
 80020ca:	4c9d      	ldr	r4, [pc, #628]	; (8002340 <main+0x354>)
 80020cc:	613b      	str	r3, [r7, #16]
 80020ce:	617c      	str	r4, [r7, #20]
  	  const double PACK_HYST = 0.1;
 80020d0:	4b9c      	ldr	r3, [pc, #624]	; (8002344 <main+0x358>)
 80020d2:	4c9d      	ldr	r4, [pc, #628]	; (8002348 <main+0x35c>)
 80020d4:	60bb      	str	r3, [r7, #8]
 80020d6:	60fc      	str	r4, [r7, #12]
  	  static int dsp_delay = 0;
  	  static int FAIL = 0;

  while (1)
  {
	  if(adc_flag == 1){
 80020d8:	4b9c      	ldr	r3, [pc, #624]	; (800234c <main+0x360>)
 80020da:	781b      	ldrb	r3, [r3, #0]
 80020dc:	2b01      	cmp	r3, #1
 80020de:	d000      	beq.n	80020e2 <main+0xf6>
 80020e0:	e1b5      	b.n	800244e <main+0x462>
		  if( FAIL == 0)
 80020e2:	4b9b      	ldr	r3, [pc, #620]	; (8002350 <main+0x364>)
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	2b00      	cmp	r3, #0
 80020e8:	d108      	bne.n	80020fc <main+0x110>
			  HAL_GPIO_TogglePin(STATUS_LED_GPIO_Port, STATUS_LED_Pin);
 80020ea:	2380      	movs	r3, #128	; 0x80
 80020ec:	005a      	lsls	r2, r3, #1
 80020ee:	2390      	movs	r3, #144	; 0x90
 80020f0:	05db      	lsls	r3, r3, #23
 80020f2:	0011      	movs	r1, r2
 80020f4:	0018      	movs	r0, r3
 80020f6:	f001 ffe5 	bl	80040c4 <HAL_GPIO_TogglePin>
 80020fa:	e00b      	b.n	8002114 <main+0x128>
		  else if(FAIL == 1)
 80020fc:	4b94      	ldr	r3, [pc, #592]	; (8002350 <main+0x364>)
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	2b01      	cmp	r3, #1
 8002102:	d107      	bne.n	8002114 <main+0x128>
			  HAL_GPIO_WritePin(STATUS_LED_GPIO_Port, STATUS_LED_Pin, GPIO_PIN_SET);
 8002104:	2380      	movs	r3, #128	; 0x80
 8002106:	0059      	lsls	r1, r3, #1
 8002108:	2390      	movs	r3, #144	; 0x90
 800210a:	05db      	lsls	r3, r3, #23
 800210c:	2201      	movs	r2, #1
 800210e:	0018      	movs	r0, r3
 8002110:	f001 ffbb 	bl	800408a <HAL_GPIO_WritePin>

		  if(HAL_ADC_Start_DMA(&hadc, &ADC_buffer, ADC_BUF_SIZE) != HAL_OK)
 8002114:	4982      	ldr	r1, [pc, #520]	; (8002320 <main+0x334>)
 8002116:	4b81      	ldr	r3, [pc, #516]	; (800231c <main+0x330>)
 8002118:	2206      	movs	r2, #6
 800211a:	0018      	movs	r0, r3
 800211c:	f001 f88c 	bl	8003238 <HAL_ADC_Start_DMA>
 8002120:	1e03      	subs	r3, r0, #0
 8002122:	d001      	beq.n	8002128 <main+0x13c>
			  Error_Handler();
 8002124:	f000 fd22 	bl	8002b6c <Error_Handler>

		  if(HAL_OK != HAL_TIM_Base_Start(&htim1))
 8002128:	4b7e      	ldr	r3, [pc, #504]	; (8002324 <main+0x338>)
 800212a:	0018      	movs	r0, r3
 800212c:	f003 f8fc 	bl	8005328 <HAL_TIM_Base_Start>
 8002130:	1e03      	subs	r3, r0, #0
 8002132:	d001      	beq.n	8002138 <main+0x14c>
			  Error_Handler();
 8002134:	f000 fd1a 	bl	8002b6c <Error_Handler>
		  adc_flag = 0;
 8002138:	4b84      	ldr	r3, [pc, #528]	; (800234c <main+0x360>)
 800213a:	2200      	movs	r2, #0
 800213c:	701a      	strb	r2, [r3, #0]
		  //TDA7719_begin(hi2c1);

		  // Akku Spannung überwachen
		  if(HAL_GPIO_ReadPin(EN_PACK_SENSE_GPIO_Port,EN_PACK_SENSE_Pin) == GPIO_PIN_SET){
 800213e:	2380      	movs	r3, #128	; 0x80
 8002140:	019b      	lsls	r3, r3, #6
 8002142:	4a84      	ldr	r2, [pc, #528]	; (8002354 <main+0x368>)
 8002144:	0019      	movs	r1, r3
 8002146:	0010      	movs	r0, r2
 8002148:	f001 ff82 	bl	8004050 <HAL_GPIO_ReadPin>
 800214c:	0003      	movs	r3, r0
 800214e:	2b01      	cmp	r3, #1
 8002150:	d14f      	bne.n	80021f2 <main+0x206>
			  //1698 ~ 14,76V
			  pack_val = ADC_buffer[PACK];
 8002152:	4b73      	ldr	r3, [pc, #460]	; (8002320 <main+0x334>)
 8002154:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002156:	0052      	lsls	r2, r2, #1
 8002158:	5ad3      	ldrh	r3, [r2, r3]
 800215a:	001a      	movs	r2, r3
 800215c:	4b7e      	ldr	r3, [pc, #504]	; (8002358 <main+0x36c>)
 800215e:	601a      	str	r2, [r3, #0]
			  // Ringpuffer
			  pack_voltage_buf[buf_index] = ((double)pack_val) * PACK_FAKTOR;
 8002160:	4b7d      	ldr	r3, [pc, #500]	; (8002358 <main+0x36c>)
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	0018      	movs	r0, r3
 8002166:	f7ff fe63 	bl	8001e30 <__aeabi_i2d>
 800216a:	4b7c      	ldr	r3, [pc, #496]	; (800235c <main+0x370>)
 800216c:	681d      	ldr	r5, [r3, #0]
 800216e:	6a3a      	ldr	r2, [r7, #32]
 8002170:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002172:	f7ff f8a3 	bl	80012bc <__aeabi_dmul>
 8002176:	0003      	movs	r3, r0
 8002178:	000c      	movs	r4, r1
 800217a:	4979      	ldr	r1, [pc, #484]	; (8002360 <main+0x374>)
 800217c:	00ea      	lsls	r2, r5, #3
 800217e:	188a      	adds	r2, r1, r2
 8002180:	6013      	str	r3, [r2, #0]
 8002182:	6054      	str	r4, [r2, #4]
			  double rms = 0;
 8002184:	2300      	movs	r3, #0
 8002186:	2400      	movs	r4, #0
 8002188:	64bb      	str	r3, [r7, #72]	; 0x48
 800218a:	64fc      	str	r4, [r7, #76]	; 0x4c
			  for(int i = 0; i<5; i++)rms+=pack_voltage_buf[i];
 800218c:	2300      	movs	r3, #0
 800218e:	647b      	str	r3, [r7, #68]	; 0x44
 8002190:	e012      	b.n	80021b8 <main+0x1cc>
 8002192:	4a73      	ldr	r2, [pc, #460]	; (8002360 <main+0x374>)
 8002194:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002196:	00db      	lsls	r3, r3, #3
 8002198:	18d3      	adds	r3, r2, r3
 800219a:	685c      	ldr	r4, [r3, #4]
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	001a      	movs	r2, r3
 80021a0:	0023      	movs	r3, r4
 80021a2:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 80021a4:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 80021a6:	f7fe f963 	bl	8000470 <__aeabi_dadd>
 80021aa:	0003      	movs	r3, r0
 80021ac:	000c      	movs	r4, r1
 80021ae:	64bb      	str	r3, [r7, #72]	; 0x48
 80021b0:	64fc      	str	r4, [r7, #76]	; 0x4c
 80021b2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80021b4:	3301      	adds	r3, #1
 80021b6:	647b      	str	r3, [r7, #68]	; 0x44
 80021b8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80021ba:	2b04      	cmp	r3, #4
 80021bc:	dde9      	ble.n	8002192 <main+0x1a6>
			  rms/=5.0;
 80021be:	2200      	movs	r2, #0
 80021c0:	4b68      	ldr	r3, [pc, #416]	; (8002364 <main+0x378>)
 80021c2:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 80021c4:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 80021c6:	f7fe fc6f 	bl	8000aa8 <__aeabi_ddiv>
 80021ca:	0003      	movs	r3, r0
 80021cc:	000c      	movs	r4, r1
 80021ce:	64bb      	str	r3, [r7, #72]	; 0x48
 80021d0:	64fc      	str	r4, [r7, #76]	; 0x4c
			  pack_voltage = rms;
 80021d2:	4a65      	ldr	r2, [pc, #404]	; (8002368 <main+0x37c>)
 80021d4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80021d6:	6cfc      	ldr	r4, [r7, #76]	; 0x4c
 80021d8:	6013      	str	r3, [r2, #0]
 80021da:	6054      	str	r4, [r2, #4]
			  buf_index = buf_index == 4 ? 0 : buf_index +1;
 80021dc:	4b5f      	ldr	r3, [pc, #380]	; (800235c <main+0x370>)
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	2b04      	cmp	r3, #4
 80021e2:	d003      	beq.n	80021ec <main+0x200>
 80021e4:	4b5d      	ldr	r3, [pc, #372]	; (800235c <main+0x370>)
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	1c5a      	adds	r2, r3, #1
 80021ea:	e000      	b.n	80021ee <main+0x202>
 80021ec:	2200      	movs	r2, #0
 80021ee:	4b5b      	ldr	r3, [pc, #364]	; (800235c <main+0x370>)
 80021f0:	601a      	str	r2, [r3, #0]
		  }
		  pack_sense++;
 80021f2:	4b5e      	ldr	r3, [pc, #376]	; (800236c <main+0x380>)
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	1c5a      	adds	r2, r3, #1
 80021f8:	4b5c      	ldr	r3, [pc, #368]	; (800236c <main+0x380>)
 80021fa:	601a      	str	r2, [r3, #0]
		  HAL_GPIO_WritePin(EN_PACK_SENSE_GPIO_Port,EN_PACK_SENSE_Pin , ((pack_sense%10) == 0));
 80021fc:	4b5b      	ldr	r3, [pc, #364]	; (800236c <main+0x380>)
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	210a      	movs	r1, #10
 8002202:	0018      	movs	r0, r3
 8002204:	f7fe f8f0 	bl	80003e8 <__aeabi_idivmod>
 8002208:	000b      	movs	r3, r1
 800220a:	425a      	negs	r2, r3
 800220c:	4153      	adcs	r3, r2
 800220e:	b2db      	uxtb	r3, r3
 8002210:	001a      	movs	r2, r3
 8002212:	2380      	movs	r3, #128	; 0x80
 8002214:	019b      	lsls	r3, r3, #6
 8002216:	484f      	ldr	r0, [pc, #316]	; (8002354 <main+0x368>)
 8002218:	0019      	movs	r1, r3
 800221a:	f001 ff36 	bl	800408a <HAL_GPIO_WritePin>

		  // Charger abschalten, wenn Spannung überschritten wird
		  pack_full = pack_voltage > (PACK_FULL + (PACK_HYST*2)) ? 1 : pack_voltage < (PACK_FULL - (PACK_HYST*2)) ? 0 : pack_full;
 800221e:	68b8      	ldr	r0, [r7, #8]
 8002220:	68f9      	ldr	r1, [r7, #12]
 8002222:	0002      	movs	r2, r0
 8002224:	000b      	movs	r3, r1
 8002226:	f7fe f923 	bl	8000470 <__aeabi_dadd>
 800222a:	0003      	movs	r3, r0
 800222c:	000c      	movs	r4, r1
 800222e:	0018      	movs	r0, r3
 8002230:	0021      	movs	r1, r4
 8002232:	693a      	ldr	r2, [r7, #16]
 8002234:	697b      	ldr	r3, [r7, #20]
 8002236:	f7fe f91b 	bl	8000470 <__aeabi_dadd>
 800223a:	0003      	movs	r3, r0
 800223c:	000c      	movs	r4, r1
 800223e:	0018      	movs	r0, r3
 8002240:	0021      	movs	r1, r4
 8002242:	4b49      	ldr	r3, [pc, #292]	; (8002368 <main+0x37c>)
 8002244:	685c      	ldr	r4, [r3, #4]
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	001a      	movs	r2, r3
 800224a:	0023      	movs	r3, r4
 800224c:	f7fe f8e8 	bl	8000420 <__aeabi_dcmplt>
 8002250:	1e03      	subs	r3, r0, #0
 8002252:	d001      	beq.n	8002258 <main+0x26c>
 8002254:	2301      	movs	r3, #1
 8002256:	e01e      	b.n	8002296 <main+0x2aa>
 8002258:	68b8      	ldr	r0, [r7, #8]
 800225a:	68f9      	ldr	r1, [r7, #12]
 800225c:	0002      	movs	r2, r0
 800225e:	000b      	movs	r3, r1
 8002260:	f7fe f906 	bl	8000470 <__aeabi_dadd>
 8002264:	0003      	movs	r3, r0
 8002266:	000c      	movs	r4, r1
 8002268:	001a      	movs	r2, r3
 800226a:	0023      	movs	r3, r4
 800226c:	6938      	ldr	r0, [r7, #16]
 800226e:	6979      	ldr	r1, [r7, #20]
 8002270:	f7ff fa96 	bl	80017a0 <__aeabi_dsub>
 8002274:	0003      	movs	r3, r0
 8002276:	000c      	movs	r4, r1
 8002278:	0018      	movs	r0, r3
 800227a:	0021      	movs	r1, r4
 800227c:	4b3a      	ldr	r3, [pc, #232]	; (8002368 <main+0x37c>)
 800227e:	685c      	ldr	r4, [r3, #4]
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	001a      	movs	r2, r3
 8002284:	0023      	movs	r3, r4
 8002286:	f7fe f8df 	bl	8000448 <__aeabi_dcmpgt>
 800228a:	1e03      	subs	r3, r0, #0
 800228c:	d001      	beq.n	8002292 <main+0x2a6>
 800228e:	2300      	movs	r3, #0
 8002290:	e001      	b.n	8002296 <main+0x2aa>
 8002292:	4b37      	ldr	r3, [pc, #220]	; (8002370 <main+0x384>)
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	4a36      	ldr	r2, [pc, #216]	; (8002370 <main+0x384>)
 8002298:	6013      	str	r3, [r2, #0]
		  // TEST pack_full = pack_voltage > (15.0 + (PACK_HYST*2)) ? 1 : pack_voltage < 15.0 ? 0 : 0;
		  HAL_GPIO_WritePin(CHARGER_DISABLE_GPIO_Port,CHARGER_DISABLE_Pin , pack_full);
 800229a:	4b35      	ldr	r3, [pc, #212]	; (8002370 <main+0x384>)
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	b2da      	uxtb	r2, r3
 80022a0:	2380      	movs	r3, #128	; 0x80
 80022a2:	01db      	lsls	r3, r3, #7
 80022a4:	482b      	ldr	r0, [pc, #172]	; (8002354 <main+0x368>)
 80022a6:	0019      	movs	r1, r3
 80022a8:	f001 feef 	bl	800408a <HAL_GPIO_WritePin>

		  // Versorgungsspannung schalten
		  pack_low = (pack_voltage > (PACK_LOW + PACK_HYST)) ? 0 : (pack_voltage < PACK_LOW) ? 1 : pack_low;
 80022ac:	68ba      	ldr	r2, [r7, #8]
 80022ae:	68fb      	ldr	r3, [r7, #12]
 80022b0:	69b8      	ldr	r0, [r7, #24]
 80022b2:	69f9      	ldr	r1, [r7, #28]
 80022b4:	f7fe f8dc 	bl	8000470 <__aeabi_dadd>
 80022b8:	0003      	movs	r3, r0
 80022ba:	000c      	movs	r4, r1
 80022bc:	0018      	movs	r0, r3
 80022be:	0021      	movs	r1, r4
 80022c0:	4b29      	ldr	r3, [pc, #164]	; (8002368 <main+0x37c>)
 80022c2:	685c      	ldr	r4, [r3, #4]
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	001a      	movs	r2, r3
 80022c8:	0023      	movs	r3, r4
 80022ca:	f7fe f8a9 	bl	8000420 <__aeabi_dcmplt>
 80022ce:	1e03      	subs	r3, r0, #0
 80022d0:	d001      	beq.n	80022d6 <main+0x2ea>
 80022d2:	2300      	movs	r3, #0
 80022d4:	e00e      	b.n	80022f4 <main+0x308>
 80022d6:	4b24      	ldr	r3, [pc, #144]	; (8002368 <main+0x37c>)
 80022d8:	685c      	ldr	r4, [r3, #4]
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	001a      	movs	r2, r3
 80022de:	0023      	movs	r3, r4
 80022e0:	69b8      	ldr	r0, [r7, #24]
 80022e2:	69f9      	ldr	r1, [r7, #28]
 80022e4:	f7fe f8b0 	bl	8000448 <__aeabi_dcmpgt>
 80022e8:	1e03      	subs	r3, r0, #0
 80022ea:	d001      	beq.n	80022f0 <main+0x304>
 80022ec:	2301      	movs	r3, #1
 80022ee:	e001      	b.n	80022f4 <main+0x308>
 80022f0:	4b20      	ldr	r3, [pc, #128]	; (8002374 <main+0x388>)
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	4a1f      	ldr	r2, [pc, #124]	; (8002374 <main+0x388>)
 80022f6:	6013      	str	r3, [r2, #0]
		  GPIO_PinState state_3v3;
		  state_3v3 = HAL_GPIO_ReadPin(U3V3_ENABLED_GPIO_Port, U3V3_ENABLED_Pin);
 80022f8:	1dfc      	adds	r4, r7, #7
 80022fa:	4b0c      	ldr	r3, [pc, #48]	; (800232c <main+0x340>)
 80022fc:	2120      	movs	r1, #32
 80022fe:	0018      	movs	r0, r3
 8002300:	f001 fea6 	bl	8004050 <HAL_GPIO_ReadPin>
 8002304:	0003      	movs	r3, r0
 8002306:	7023      	strb	r3, [r4, #0]
		  HAL_GPIO_WritePin(POWER_GPIO_Port,POWER_Pin, (state_3v3 == GPIO_PIN_RESET) && (pack_low == 0));
 8002308:	1dfb      	adds	r3, r7, #7
 800230a:	781b      	ldrb	r3, [r3, #0]
 800230c:	2b00      	cmp	r3, #0
 800230e:	d133      	bne.n	8002378 <main+0x38c>
 8002310:	4b18      	ldr	r3, [pc, #96]	; (8002374 <main+0x388>)
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	2b00      	cmp	r3, #0
 8002316:	d12f      	bne.n	8002378 <main+0x38c>
 8002318:	2301      	movs	r3, #1
 800231a:	e02e      	b.n	800237a <main+0x38e>
 800231c:	2000027c 	.word	0x2000027c
 8002320:	20000270 	.word	0x20000270
 8002324:	200001ec 	.word	0x200001ec
 8002328:	2000012c 	.word	0x2000012c
 800232c:	48000400 	.word	0x48000400
 8002330:	bb435057 	.word	0xbb435057
 8002334:	3f81ec4a 	.word	0x3f81ec4a
 8002338:	402b0000 	.word	0x402b0000
 800233c:	cccccccd 	.word	0xcccccccd
 8002340:	4030cccc 	.word	0x4030cccc
 8002344:	9999999a 	.word	0x9999999a
 8002348:	3fb99999 	.word	0x3fb99999
 800234c:	2000002c 	.word	0x2000002c
 8002350:	20000030 	.word	0x20000030
 8002354:	48000800 	.word	0x48000800
 8002358:	20000034 	.word	0x20000034
 800235c:	20000038 	.word	0x20000038
 8002360:	20000040 	.word	0x20000040
 8002364:	40140000 	.word	0x40140000
 8002368:	20000068 	.word	0x20000068
 800236c:	20000070 	.word	0x20000070
 8002370:	20000074 	.word	0x20000074
 8002374:	20000000 	.word	0x20000000
 8002378:	2300      	movs	r3, #0
 800237a:	b2db      	uxtb	r3, r3
 800237c:	4838      	ldr	r0, [pc, #224]	; (8002460 <main+0x474>)
 800237e:	001a      	movs	r2, r3
 8002380:	2110      	movs	r1, #16
 8002382:	f001 fe82 	bl	800408a <HAL_GPIO_WritePin>



		  // Versorgungsspannung für Audio-DSP einschalten
		  HAL_GPIO_WritePin(ENABLE_9V_GPIO_Port,ENABLE_9V_Pin, HAL_GPIO_ReadPin(POWER_GPIO_Port,POWER_Pin));
 8002386:	4b36      	ldr	r3, [pc, #216]	; (8002460 <main+0x474>)
 8002388:	2110      	movs	r1, #16
 800238a:	0018      	movs	r0, r3
 800238c:	f001 fe60 	bl	8004050 <HAL_GPIO_ReadPin>
 8002390:	0003      	movs	r3, r0
 8002392:	001a      	movs	r2, r3
 8002394:	2380      	movs	r3, #128	; 0x80
 8002396:	0219      	lsls	r1, r3, #8
 8002398:	2390      	movs	r3, #144	; 0x90
 800239a:	05db      	lsls	r3, r3, #23
 800239c:	0018      	movs	r0, r3
 800239e:	f001 fe74 	bl	800408a <HAL_GPIO_WritePin>
		  // Bluetooth Modul einschalten
		  HAL_GPIO_WritePin(BT_EN_GPIO_Port,BT_EN_Pin, HAL_GPIO_ReadPin(POWER_GPIO_Port,POWER_Pin));
 80023a2:	4b2f      	ldr	r3, [pc, #188]	; (8002460 <main+0x474>)
 80023a4:	2110      	movs	r1, #16
 80023a6:	0018      	movs	r0, r3
 80023a8:	f001 fe52 	bl	8004050 <HAL_GPIO_ReadPin>
 80023ac:	0003      	movs	r3, r0
 80023ae:	001a      	movs	r2, r3
 80023b0:	4b2c      	ldr	r3, [pc, #176]	; (8002464 <main+0x478>)
 80023b2:	2180      	movs	r1, #128	; 0x80
 80023b4:	0018      	movs	r0, r3
 80023b6:	f001 fe68 	bl	800408a <HAL_GPIO_WritePin>

		  // DSP initialisieren
		  if(power_rise < HAL_GPIO_ReadPin(POWER_GPIO_Port,POWER_Pin)){
 80023ba:	4b29      	ldr	r3, [pc, #164]	; (8002460 <main+0x474>)
 80023bc:	2110      	movs	r1, #16
 80023be:	0018      	movs	r0, r3
 80023c0:	f001 fe46 	bl	8004050 <HAL_GPIO_ReadPin>
 80023c4:	0003      	movs	r3, r0
 80023c6:	001a      	movs	r2, r3
 80023c8:	4b27      	ldr	r3, [pc, #156]	; (8002468 <main+0x47c>)
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	429a      	cmp	r2, r3
 80023ce:	dd04      	ble.n	80023da <main+0x3ee>
			  dsp_delay++;
 80023d0:	4b26      	ldr	r3, [pc, #152]	; (800246c <main+0x480>)
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	1c5a      	adds	r2, r3, #1
 80023d6:	4b25      	ldr	r3, [pc, #148]	; (800246c <main+0x480>)
 80023d8:	601a      	str	r2, [r3, #0]
		  }
		  dsp_delay = dsp_delay == 0 ? 0 : dsp_delay < 11 ? dsp_delay + 1 : dsp_delay;
 80023da:	4b24      	ldr	r3, [pc, #144]	; (800246c <main+0x480>)
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	2b00      	cmp	r3, #0
 80023e0:	d00a      	beq.n	80023f8 <main+0x40c>
 80023e2:	4b22      	ldr	r3, [pc, #136]	; (800246c <main+0x480>)
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	2b0a      	cmp	r3, #10
 80023e8:	dc03      	bgt.n	80023f2 <main+0x406>
 80023ea:	4b20      	ldr	r3, [pc, #128]	; (800246c <main+0x480>)
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	3301      	adds	r3, #1
 80023f0:	e003      	b.n	80023fa <main+0x40e>
 80023f2:	4b1e      	ldr	r3, [pc, #120]	; (800246c <main+0x480>)
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	e000      	b.n	80023fa <main+0x40e>
 80023f8:	2300      	movs	r3, #0
 80023fa:	4a1c      	ldr	r2, [pc, #112]	; (800246c <main+0x480>)
 80023fc:	6013      	str	r3, [r2, #0]
		  if( dsp_delay == 10){
 80023fe:	4b1b      	ldr	r3, [pc, #108]	; (800246c <main+0x480>)
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	2b0a      	cmp	r3, #10
 8002404:	d113      	bne.n	800242e <main+0x442>
			  // 1s gewartet nach power up
			  if(TDA7719_begin(hi2c1) < 0)
 8002406:	4c1a      	ldr	r4, [pc, #104]	; (8002470 <main+0x484>)
 8002408:	466b      	mov	r3, sp
 800240a:	0018      	movs	r0, r3
 800240c:	0023      	movs	r3, r4
 800240e:	3310      	adds	r3, #16
 8002410:	223c      	movs	r2, #60	; 0x3c
 8002412:	0019      	movs	r1, r3
 8002414:	f003 fd1e 	bl	8005e54 <memcpy>
 8002418:	6820      	ldr	r0, [r4, #0]
 800241a:	6861      	ldr	r1, [r4, #4]
 800241c:	68a2      	ldr	r2, [r4, #8]
 800241e:	68e3      	ldr	r3, [r4, #12]
 8002420:	f7ff fd5e 	bl	8001ee0 <TDA7719_begin>
 8002424:	1e03      	subs	r3, r0, #0
 8002426:	da02      	bge.n	800242e <main+0x442>
				  FAIL = 1;
 8002428:	4b12      	ldr	r3, [pc, #72]	; (8002474 <main+0x488>)
 800242a:	2201      	movs	r2, #1
 800242c:	601a      	str	r2, [r3, #0]
		  }
		  power_rise = HAL_GPIO_ReadPin(POWER_GPIO_Port,POWER_Pin);
 800242e:	4b0c      	ldr	r3, [pc, #48]	; (8002460 <main+0x474>)
 8002430:	2110      	movs	r1, #16
 8002432:	0018      	movs	r0, r3
 8002434:	f001 fe0c 	bl	8004050 <HAL_GPIO_ReadPin>
 8002438:	0003      	movs	r3, r0
 800243a:	001a      	movs	r2, r3
 800243c:	4b0a      	ldr	r3, [pc, #40]	; (8002468 <main+0x47c>)
 800243e:	601a      	str	r2, [r3, #0]
		  if(power_rise == 0) dsp_delay = 0;
 8002440:	4b09      	ldr	r3, [pc, #36]	; (8002468 <main+0x47c>)
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	2b00      	cmp	r3, #0
 8002446:	d102      	bne.n	800244e <main+0x462>
 8002448:	4b08      	ldr	r3, [pc, #32]	; (800246c <main+0x480>)
 800244a:	2200      	movs	r2, #0
 800244c:	601a      	str	r2, [r3, #0]


	  }

	  // Power Schalter lesen zum aktiven ausschalten
	  state = HAL_GPIO_ReadPin(POWER_GPIO_Port, POWER_Pin);
 800244e:	1dbc      	adds	r4, r7, #6
 8002450:	4b03      	ldr	r3, [pc, #12]	; (8002460 <main+0x474>)
 8002452:	2110      	movs	r1, #16
 8002454:	0018      	movs	r0, r3
 8002456:	f001 fdfb 	bl	8004050 <HAL_GPIO_ReadPin>
 800245a:	0003      	movs	r3, r0
 800245c:	7023      	strb	r3, [r4, #0]
	  if(adc_flag == 1){
 800245e:	e63b      	b.n	80020d8 <main+0xec>
 8002460:	48000400 	.word	0x48000400
 8002464:	48001400 	.word	0x48001400
 8002468:	20000078 	.word	0x20000078
 800246c:	2000007c 	.word	0x2000007c
 8002470:	200000e0 	.word	0x200000e0
 8002474:	20000030 	.word	0x20000030

08002478 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002478:	b590      	push	{r4, r7, lr}
 800247a:	b095      	sub	sp, #84	; 0x54
 800247c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800247e:	2420      	movs	r4, #32
 8002480:	193b      	adds	r3, r7, r4
 8002482:	0018      	movs	r0, r3
 8002484:	2330      	movs	r3, #48	; 0x30
 8002486:	001a      	movs	r2, r3
 8002488:	2100      	movs	r1, #0
 800248a:	f003 fcec 	bl	8005e66 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800248e:	2310      	movs	r3, #16
 8002490:	18fb      	adds	r3, r7, r3
 8002492:	0018      	movs	r0, r3
 8002494:	2310      	movs	r3, #16
 8002496:	001a      	movs	r2, r3
 8002498:	2100      	movs	r1, #0
 800249a:	f003 fce4 	bl	8005e66 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800249e:	003b      	movs	r3, r7
 80024a0:	0018      	movs	r0, r3
 80024a2:	2310      	movs	r3, #16
 80024a4:	001a      	movs	r2, r3
 80024a6:	2100      	movs	r1, #0
 80024a8:	f003 fcdd 	bl	8005e66 <memset>

  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSI14;
 80024ac:	0021      	movs	r1, r4
 80024ae:	187b      	adds	r3, r7, r1
 80024b0:	2212      	movs	r2, #18
 80024b2:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80024b4:	187b      	adds	r3, r7, r1
 80024b6:	2201      	movs	r2, #1
 80024b8:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSI14State = RCC_HSI14_ON;
 80024ba:	187b      	adds	r3, r7, r1
 80024bc:	2201      	movs	r2, #1
 80024be:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80024c0:	187b      	adds	r3, r7, r1
 80024c2:	2210      	movs	r2, #16
 80024c4:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSI14CalibrationValue = 16;
 80024c6:	187b      	adds	r3, r7, r1
 80024c8:	2210      	movs	r2, #16
 80024ca:	619a      	str	r2, [r3, #24]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80024cc:	187b      	adds	r3, r7, r1
 80024ce:	2202      	movs	r2, #2
 80024d0:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80024d2:	187b      	adds	r3, r7, r1
 80024d4:	2200      	movs	r2, #0
 80024d6:	625a      	str	r2, [r3, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL8;
 80024d8:	187b      	adds	r3, r7, r1
 80024da:	22c0      	movs	r2, #192	; 0xc0
 80024dc:	0352      	lsls	r2, r2, #13
 80024de:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 80024e0:	187b      	adds	r3, r7, r1
 80024e2:	2200      	movs	r2, #0
 80024e4:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80024e6:	187b      	adds	r3, r7, r1
 80024e8:	0018      	movs	r0, r3
 80024ea:	f002 f9b5 	bl	8004858 <HAL_RCC_OscConfig>
 80024ee:	1e03      	subs	r3, r0, #0
 80024f0:	d001      	beq.n	80024f6 <SystemClock_Config+0x7e>
  {
    Error_Handler();
 80024f2:	f000 fb3b 	bl	8002b6c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80024f6:	2110      	movs	r1, #16
 80024f8:	187b      	adds	r3, r7, r1
 80024fa:	2207      	movs	r2, #7
 80024fc:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80024fe:	187b      	adds	r3, r7, r1
 8002500:	2202      	movs	r2, #2
 8002502:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002504:	187b      	adds	r3, r7, r1
 8002506:	2200      	movs	r2, #0
 8002508:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800250a:	187b      	adds	r3, r7, r1
 800250c:	2200      	movs	r2, #0
 800250e:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8002510:	187b      	adds	r3, r7, r1
 8002512:	2101      	movs	r1, #1
 8002514:	0018      	movs	r0, r3
 8002516:	f002 fcbb 	bl	8004e90 <HAL_RCC_ClockConfig>
 800251a:	1e03      	subs	r3, r0, #0
 800251c:	d001      	beq.n	8002522 <SystemClock_Config+0xaa>
  {
    Error_Handler();
 800251e:	f000 fb25 	bl	8002b6c <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_I2C1;
 8002522:	003b      	movs	r3, r7
 8002524:	2221      	movs	r2, #33	; 0x21
 8002526:	601a      	str	r2, [r3, #0]
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_SYSCLK;
 8002528:	003b      	movs	r3, r7
 800252a:	2201      	movs	r2, #1
 800252c:	609a      	str	r2, [r3, #8]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_HSI;
 800252e:	003b      	movs	r3, r7
 8002530:	2200      	movs	r2, #0
 8002532:	60da      	str	r2, [r3, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002534:	003b      	movs	r3, r7
 8002536:	0018      	movs	r0, r3
 8002538:	f002 fdfc 	bl	8005134 <HAL_RCCEx_PeriphCLKConfig>
 800253c:	1e03      	subs	r3, r0, #0
 800253e:	d001      	beq.n	8002544 <SystemClock_Config+0xcc>
  {
    Error_Handler();
 8002540:	f000 fb14 	bl	8002b6c <Error_Handler>
  }
}
 8002544:	46c0      	nop			; (mov r8, r8)
 8002546:	46bd      	mov	sp, r7
 8002548:	b015      	add	sp, #84	; 0x54
 800254a:	bd90      	pop	{r4, r7, pc}

0800254c <MX_ADC_Init>:
  * @brief ADC Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC_Init(void)
{
 800254c:	b580      	push	{r7, lr}
 800254e:	b084      	sub	sp, #16
 8002550:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC_Init 0 */

  /* USER CODE END ADC_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8002552:	1d3b      	adds	r3, r7, #4
 8002554:	0018      	movs	r0, r3
 8002556:	230c      	movs	r3, #12
 8002558:	001a      	movs	r2, r3
 800255a:	2100      	movs	r1, #0
 800255c:	f003 fc83 	bl	8005e66 <memset>
  /* USER CODE BEGIN ADC_Init 1 */

  /* USER CODE END ADC_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion) 
  */
  hadc.Instance = ADC1;
 8002560:	4b53      	ldr	r3, [pc, #332]	; (80026b0 <MX_ADC_Init+0x164>)
 8002562:	4a54      	ldr	r2, [pc, #336]	; (80026b4 <MX_ADC_Init+0x168>)
 8002564:	601a      	str	r2, [r3, #0]
  hadc.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8002566:	4b52      	ldr	r3, [pc, #328]	; (80026b0 <MX_ADC_Init+0x164>)
 8002568:	2200      	movs	r2, #0
 800256a:	605a      	str	r2, [r3, #4]
  hadc.Init.Resolution = ADC_RESOLUTION_12B;
 800256c:	4b50      	ldr	r3, [pc, #320]	; (80026b0 <MX_ADC_Init+0x164>)
 800256e:	2200      	movs	r2, #0
 8002570:	609a      	str	r2, [r3, #8]
  hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8002572:	4b4f      	ldr	r3, [pc, #316]	; (80026b0 <MX_ADC_Init+0x164>)
 8002574:	2200      	movs	r2, #0
 8002576:	60da      	str	r2, [r3, #12]
  hadc.Init.ScanConvMode = ADC_SCAN_DIRECTION_FORWARD;
 8002578:	4b4d      	ldr	r3, [pc, #308]	; (80026b0 <MX_ADC_Init+0x164>)
 800257a:	2201      	movs	r2, #1
 800257c:	611a      	str	r2, [r3, #16]
  hadc.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800257e:	4b4c      	ldr	r3, [pc, #304]	; (80026b0 <MX_ADC_Init+0x164>)
 8002580:	2204      	movs	r2, #4
 8002582:	615a      	str	r2, [r3, #20]
  hadc.Init.LowPowerAutoWait = DISABLE;
 8002584:	4b4a      	ldr	r3, [pc, #296]	; (80026b0 <MX_ADC_Init+0x164>)
 8002586:	2200      	movs	r2, #0
 8002588:	761a      	strb	r2, [r3, #24]
  hadc.Init.LowPowerAutoPowerOff = DISABLE;
 800258a:	4b49      	ldr	r3, [pc, #292]	; (80026b0 <MX_ADC_Init+0x164>)
 800258c:	2200      	movs	r2, #0
 800258e:	765a      	strb	r2, [r3, #25]
  hadc.Init.ContinuousConvMode = DISABLE;
 8002590:	4b47      	ldr	r3, [pc, #284]	; (80026b0 <MX_ADC_Init+0x164>)
 8002592:	2200      	movs	r2, #0
 8002594:	769a      	strb	r2, [r3, #26]
  hadc.Init.DiscontinuousConvMode = DISABLE;
 8002596:	4b46      	ldr	r3, [pc, #280]	; (80026b0 <MX_ADC_Init+0x164>)
 8002598:	2200      	movs	r2, #0
 800259a:	76da      	strb	r2, [r3, #27]
  hadc.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T1_TRGO;
 800259c:	4b44      	ldr	r3, [pc, #272]	; (80026b0 <MX_ADC_Init+0x164>)
 800259e:	2200      	movs	r2, #0
 80025a0:	61da      	str	r2, [r3, #28]
  hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 80025a2:	4b43      	ldr	r3, [pc, #268]	; (80026b0 <MX_ADC_Init+0x164>)
 80025a4:	2280      	movs	r2, #128	; 0x80
 80025a6:	00d2      	lsls	r2, r2, #3
 80025a8:	621a      	str	r2, [r3, #32]
  hadc.Init.DMAContinuousRequests = DISABLE;
 80025aa:	4b41      	ldr	r3, [pc, #260]	; (80026b0 <MX_ADC_Init+0x164>)
 80025ac:	2224      	movs	r2, #36	; 0x24
 80025ae:	2100      	movs	r1, #0
 80025b0:	5499      	strb	r1, [r3, r2]
  hadc.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80025b2:	4b3f      	ldr	r3, [pc, #252]	; (80026b0 <MX_ADC_Init+0x164>)
 80025b4:	2201      	movs	r2, #1
 80025b6:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_ADC_Init(&hadc) != HAL_OK)
 80025b8:	4b3d      	ldr	r3, [pc, #244]	; (80026b0 <MX_ADC_Init+0x164>)
 80025ba:	0018      	movs	r0, r3
 80025bc:	f000 fcfc 	bl	8002fb8 <HAL_ADC_Init>
 80025c0:	1e03      	subs	r3, r0, #0
 80025c2:	d001      	beq.n	80025c8 <MX_ADC_Init+0x7c>
  {
    Error_Handler();
 80025c4:	f000 fad2 	bl	8002b6c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel to be converted. 
  */
  sConfig.Channel = ADC_CHANNEL_0;
 80025c8:	1d3b      	adds	r3, r7, #4
 80025ca:	2200      	movs	r2, #0
 80025cc:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 80025ce:	1d3b      	adds	r3, r7, #4
 80025d0:	2280      	movs	r2, #128	; 0x80
 80025d2:	0152      	lsls	r2, r2, #5
 80025d4:	605a      	str	r2, [r3, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_71CYCLES_5;
 80025d6:	1d3b      	adds	r3, r7, #4
 80025d8:	2206      	movs	r2, #6
 80025da:	609a      	str	r2, [r3, #8]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 80025dc:	1d3a      	adds	r2, r7, #4
 80025de:	4b34      	ldr	r3, [pc, #208]	; (80026b0 <MX_ADC_Init+0x164>)
 80025e0:	0011      	movs	r1, r2
 80025e2:	0018      	movs	r0, r3
 80025e4:	f000 feba 	bl	800335c <HAL_ADC_ConfigChannel>
 80025e8:	1e03      	subs	r3, r0, #0
 80025ea:	d001      	beq.n	80025f0 <MX_ADC_Init+0xa4>
  {
    Error_Handler();
 80025ec:	f000 fabe 	bl	8002b6c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel to be converted. 
  */
  sConfig.Channel = ADC_CHANNEL_1;
 80025f0:	1d3b      	adds	r3, r7, #4
 80025f2:	2201      	movs	r2, #1
 80025f4:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 80025f6:	1d3a      	adds	r2, r7, #4
 80025f8:	4b2d      	ldr	r3, [pc, #180]	; (80026b0 <MX_ADC_Init+0x164>)
 80025fa:	0011      	movs	r1, r2
 80025fc:	0018      	movs	r0, r3
 80025fe:	f000 fead 	bl	800335c <HAL_ADC_ConfigChannel>
 8002602:	1e03      	subs	r3, r0, #0
 8002604:	d001      	beq.n	800260a <MX_ADC_Init+0xbe>
  {
    Error_Handler();
 8002606:	f000 fab1 	bl	8002b6c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel to be converted. 
  */
  sConfig.Channel = ADC_CHANNEL_2;
 800260a:	1d3b      	adds	r3, r7, #4
 800260c:	2202      	movs	r2, #2
 800260e:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8002610:	1d3a      	adds	r2, r7, #4
 8002612:	4b27      	ldr	r3, [pc, #156]	; (80026b0 <MX_ADC_Init+0x164>)
 8002614:	0011      	movs	r1, r2
 8002616:	0018      	movs	r0, r3
 8002618:	f000 fea0 	bl	800335c <HAL_ADC_ConfigChannel>
 800261c:	1e03      	subs	r3, r0, #0
 800261e:	d001      	beq.n	8002624 <MX_ADC_Init+0xd8>
  {
    Error_Handler();
 8002620:	f000 faa4 	bl	8002b6c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel to be converted. 
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8002624:	1d3b      	adds	r3, r7, #4
 8002626:	2203      	movs	r2, #3
 8002628:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 800262a:	1d3a      	adds	r2, r7, #4
 800262c:	4b20      	ldr	r3, [pc, #128]	; (80026b0 <MX_ADC_Init+0x164>)
 800262e:	0011      	movs	r1, r2
 8002630:	0018      	movs	r0, r3
 8002632:	f000 fe93 	bl	800335c <HAL_ADC_ConfigChannel>
 8002636:	1e03      	subs	r3, r0, #0
 8002638:	d001      	beq.n	800263e <MX_ADC_Init+0xf2>
  {
    Error_Handler();
 800263a:	f000 fa97 	bl	8002b6c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel to be converted. 
  */
  sConfig.Channel = ADC_CHANNEL_4;
 800263e:	1d3b      	adds	r3, r7, #4
 8002640:	2204      	movs	r2, #4
 8002642:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8002644:	1d3a      	adds	r2, r7, #4
 8002646:	4b1a      	ldr	r3, [pc, #104]	; (80026b0 <MX_ADC_Init+0x164>)
 8002648:	0011      	movs	r1, r2
 800264a:	0018      	movs	r0, r3
 800264c:	f000 fe86 	bl	800335c <HAL_ADC_ConfigChannel>
 8002650:	1e03      	subs	r3, r0, #0
 8002652:	d001      	beq.n	8002658 <MX_ADC_Init+0x10c>
  {
    Error_Handler();
 8002654:	f000 fa8a 	bl	8002b6c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel to be converted. 
  */
  sConfig.Channel = ADC_CHANNEL_5;
 8002658:	1d3b      	adds	r3, r7, #4
 800265a:	2205      	movs	r2, #5
 800265c:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 800265e:	1d3a      	adds	r2, r7, #4
 8002660:	4b13      	ldr	r3, [pc, #76]	; (80026b0 <MX_ADC_Init+0x164>)
 8002662:	0011      	movs	r1, r2
 8002664:	0018      	movs	r0, r3
 8002666:	f000 fe79 	bl	800335c <HAL_ADC_ConfigChannel>
 800266a:	1e03      	subs	r3, r0, #0
 800266c:	d001      	beq.n	8002672 <MX_ADC_Init+0x126>
  {
    Error_Handler();
 800266e:	f000 fa7d 	bl	8002b6c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel to be converted. 
  */
  sConfig.Channel = ADC_CHANNEL_6;
 8002672:	1d3b      	adds	r3, r7, #4
 8002674:	2206      	movs	r2, #6
 8002676:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8002678:	1d3a      	adds	r2, r7, #4
 800267a:	4b0d      	ldr	r3, [pc, #52]	; (80026b0 <MX_ADC_Init+0x164>)
 800267c:	0011      	movs	r1, r2
 800267e:	0018      	movs	r0, r3
 8002680:	f000 fe6c 	bl	800335c <HAL_ADC_ConfigChannel>
 8002684:	1e03      	subs	r3, r0, #0
 8002686:	d001      	beq.n	800268c <MX_ADC_Init+0x140>
  {
    Error_Handler();
 8002688:	f000 fa70 	bl	8002b6c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel to be converted. 
  */
  sConfig.Channel = ADC_CHANNEL_7;
 800268c:	1d3b      	adds	r3, r7, #4
 800268e:	2207      	movs	r2, #7
 8002690:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8002692:	1d3a      	adds	r2, r7, #4
 8002694:	4b06      	ldr	r3, [pc, #24]	; (80026b0 <MX_ADC_Init+0x164>)
 8002696:	0011      	movs	r1, r2
 8002698:	0018      	movs	r0, r3
 800269a:	f000 fe5f 	bl	800335c <HAL_ADC_ConfigChannel>
 800269e:	1e03      	subs	r3, r0, #0
 80026a0:	d001      	beq.n	80026a6 <MX_ADC_Init+0x15a>
  {
    Error_Handler();
 80026a2:	f000 fa63 	bl	8002b6c <Error_Handler>
  }
  /* USER CODE BEGIN ADC_Init 2 */

  /* USER CODE END ADC_Init 2 */

}
 80026a6:	46c0      	nop			; (mov r8, r8)
 80026a8:	46bd      	mov	sp, r7
 80026aa:	b004      	add	sp, #16
 80026ac:	bd80      	pop	{r7, pc}
 80026ae:	46c0      	nop			; (mov r8, r8)
 80026b0:	2000027c 	.word	0x2000027c
 80026b4:	40012400 	.word	0x40012400

080026b8 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80026b8:	b580      	push	{r7, lr}
 80026ba:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80026bc:	4b1b      	ldr	r3, [pc, #108]	; (800272c <MX_I2C1_Init+0x74>)
 80026be:	4a1c      	ldr	r2, [pc, #112]	; (8002730 <MX_I2C1_Init+0x78>)
 80026c0:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00103D84;
 80026c2:	4b1a      	ldr	r3, [pc, #104]	; (800272c <MX_I2C1_Init+0x74>)
 80026c4:	4a1b      	ldr	r2, [pc, #108]	; (8002734 <MX_I2C1_Init+0x7c>)
 80026c6:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80026c8:	4b18      	ldr	r3, [pc, #96]	; (800272c <MX_I2C1_Init+0x74>)
 80026ca:	2200      	movs	r2, #0
 80026cc:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80026ce:	4b17      	ldr	r3, [pc, #92]	; (800272c <MX_I2C1_Init+0x74>)
 80026d0:	2201      	movs	r2, #1
 80026d2:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80026d4:	4b15      	ldr	r3, [pc, #84]	; (800272c <MX_I2C1_Init+0x74>)
 80026d6:	2200      	movs	r2, #0
 80026d8:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80026da:	4b14      	ldr	r3, [pc, #80]	; (800272c <MX_I2C1_Init+0x74>)
 80026dc:	2200      	movs	r2, #0
 80026de:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80026e0:	4b12      	ldr	r3, [pc, #72]	; (800272c <MX_I2C1_Init+0x74>)
 80026e2:	2200      	movs	r2, #0
 80026e4:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80026e6:	4b11      	ldr	r3, [pc, #68]	; (800272c <MX_I2C1_Init+0x74>)
 80026e8:	2200      	movs	r2, #0
 80026ea:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80026ec:	4b0f      	ldr	r3, [pc, #60]	; (800272c <MX_I2C1_Init+0x74>)
 80026ee:	2200      	movs	r2, #0
 80026f0:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80026f2:	4b0e      	ldr	r3, [pc, #56]	; (800272c <MX_I2C1_Init+0x74>)
 80026f4:	0018      	movs	r0, r3
 80026f6:	f001 fd01 	bl	80040fc <HAL_I2C_Init>
 80026fa:	1e03      	subs	r3, r0, #0
 80026fc:	d001      	beq.n	8002702 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 80026fe:	f000 fa35 	bl	8002b6c <Error_Handler>
  }
  /** Configure Analogue filter 
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8002702:	4b0a      	ldr	r3, [pc, #40]	; (800272c <MX_I2C1_Init+0x74>)
 8002704:	2100      	movs	r1, #0
 8002706:	0018      	movs	r0, r3
 8002708:	f002 f80e 	bl	8004728 <HAL_I2CEx_ConfigAnalogFilter>
 800270c:	1e03      	subs	r3, r0, #0
 800270e:	d001      	beq.n	8002714 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8002710:	f000 fa2c 	bl	8002b6c <Error_Handler>
  }
  /** Configure Digital filter 
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8002714:	4b05      	ldr	r3, [pc, #20]	; (800272c <MX_I2C1_Init+0x74>)
 8002716:	2100      	movs	r1, #0
 8002718:	0018      	movs	r0, r3
 800271a:	f002 f851 	bl	80047c0 <HAL_I2CEx_ConfigDigitalFilter>
 800271e:	1e03      	subs	r3, r0, #0
 8002720:	d001      	beq.n	8002726 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8002722:	f000 fa23 	bl	8002b6c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8002726:	46c0      	nop			; (mov r8, r8)
 8002728:	46bd      	mov	sp, r7
 800272a:	bd80      	pop	{r7, pc}
 800272c:	200000e0 	.word	0x200000e0
 8002730:	40005400 	.word	0x40005400
 8002734:	00103d84 	.word	0x00103d84

08002738 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8002738:	b580      	push	{r7, lr}
 800273a:	b086      	sub	sp, #24
 800273c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800273e:	2308      	movs	r3, #8
 8002740:	18fb      	adds	r3, r7, r3
 8002742:	0018      	movs	r0, r3
 8002744:	2310      	movs	r3, #16
 8002746:	001a      	movs	r2, r3
 8002748:	2100      	movs	r1, #0
 800274a:	f003 fb8c 	bl	8005e66 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800274e:	003b      	movs	r3, r7
 8002750:	0018      	movs	r0, r3
 8002752:	2308      	movs	r3, #8
 8002754:	001a      	movs	r2, r3
 8002756:	2100      	movs	r1, #0
 8002758:	f003 fb85 	bl	8005e66 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800275c:	4b20      	ldr	r3, [pc, #128]	; (80027e0 <MX_TIM1_Init+0xa8>)
 800275e:	4a21      	ldr	r2, [pc, #132]	; (80027e4 <MX_TIM1_Init+0xac>)
 8002760:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 8000;
 8002762:	4b1f      	ldr	r3, [pc, #124]	; (80027e0 <MX_TIM1_Init+0xa8>)
 8002764:	22fa      	movs	r2, #250	; 0xfa
 8002766:	0152      	lsls	r2, r2, #5
 8002768:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800276a:	4b1d      	ldr	r3, [pc, #116]	; (80027e0 <MX_TIM1_Init+0xa8>)
 800276c:	2200      	movs	r2, #0
 800276e:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 100;
 8002770:	4b1b      	ldr	r3, [pc, #108]	; (80027e0 <MX_TIM1_Init+0xa8>)
 8002772:	2264      	movs	r2, #100	; 0x64
 8002774:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002776:	4b1a      	ldr	r3, [pc, #104]	; (80027e0 <MX_TIM1_Init+0xa8>)
 8002778:	2200      	movs	r2, #0
 800277a:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800277c:	4b18      	ldr	r3, [pc, #96]	; (80027e0 <MX_TIM1_Init+0xa8>)
 800277e:	2200      	movs	r2, #0
 8002780:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002782:	4b17      	ldr	r3, [pc, #92]	; (80027e0 <MX_TIM1_Init+0xa8>)
 8002784:	2200      	movs	r2, #0
 8002786:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8002788:	4b15      	ldr	r3, [pc, #84]	; (80027e0 <MX_TIM1_Init+0xa8>)
 800278a:	0018      	movs	r0, r3
 800278c:	f002 fda0 	bl	80052d0 <HAL_TIM_Base_Init>
 8002790:	1e03      	subs	r3, r0, #0
 8002792:	d001      	beq.n	8002798 <MX_TIM1_Init+0x60>
  {
    Error_Handler();
 8002794:	f000 f9ea 	bl	8002b6c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002798:	2108      	movs	r1, #8
 800279a:	187b      	adds	r3, r7, r1
 800279c:	2280      	movs	r2, #128	; 0x80
 800279e:	0152      	lsls	r2, r2, #5
 80027a0:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80027a2:	187a      	adds	r2, r7, r1
 80027a4:	4b0e      	ldr	r3, [pc, #56]	; (80027e0 <MX_TIM1_Init+0xa8>)
 80027a6:	0011      	movs	r1, r2
 80027a8:	0018      	movs	r0, r3
 80027aa:	f002 fddf 	bl	800536c <HAL_TIM_ConfigClockSource>
 80027ae:	1e03      	subs	r3, r0, #0
 80027b0:	d001      	beq.n	80027b6 <MX_TIM1_Init+0x7e>
  {
    Error_Handler();
 80027b2:	f000 f9db 	bl	8002b6c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 80027b6:	003b      	movs	r3, r7
 80027b8:	2220      	movs	r2, #32
 80027ba:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_ENABLE;
 80027bc:	003b      	movs	r3, r7
 80027be:	2280      	movs	r2, #128	; 0x80
 80027c0:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80027c2:	003a      	movs	r2, r7
 80027c4:	4b06      	ldr	r3, [pc, #24]	; (80027e0 <MX_TIM1_Init+0xa8>)
 80027c6:	0011      	movs	r1, r2
 80027c8:	0018      	movs	r0, r3
 80027ca:	f002 ff93 	bl	80056f4 <HAL_TIMEx_MasterConfigSynchronization>
 80027ce:	1e03      	subs	r3, r0, #0
 80027d0:	d001      	beq.n	80027d6 <MX_TIM1_Init+0x9e>
  {
    Error_Handler();
 80027d2:	f000 f9cb 	bl	8002b6c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 80027d6:	46c0      	nop			; (mov r8, r8)
 80027d8:	46bd      	mov	sp, r7
 80027da:	b006      	add	sp, #24
 80027dc:	bd80      	pop	{r7, pc}
 80027de:	46c0      	nop			; (mov r8, r8)
 80027e0:	200001ec 	.word	0x200001ec
 80027e4:	40012c00 	.word	0x40012c00

080027e8 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80027e8:	b580      	push	{r7, lr}
 80027ea:	b086      	sub	sp, #24
 80027ec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80027ee:	2308      	movs	r3, #8
 80027f0:	18fb      	adds	r3, r7, r3
 80027f2:	0018      	movs	r0, r3
 80027f4:	2310      	movs	r3, #16
 80027f6:	001a      	movs	r2, r3
 80027f8:	2100      	movs	r1, #0
 80027fa:	f003 fb34 	bl	8005e66 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80027fe:	003b      	movs	r3, r7
 8002800:	0018      	movs	r0, r3
 8002802:	2308      	movs	r3, #8
 8002804:	001a      	movs	r2, r3
 8002806:	2100      	movs	r1, #0
 8002808:	f003 fb2d 	bl	8005e66 <memset>

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800280c:	4b1e      	ldr	r3, [pc, #120]	; (8002888 <MX_TIM3_Init+0xa0>)
 800280e:	4a1f      	ldr	r2, [pc, #124]	; (800288c <MX_TIM3_Init+0xa4>)
 8002810:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 7999;
 8002812:	4b1d      	ldr	r3, [pc, #116]	; (8002888 <MX_TIM3_Init+0xa0>)
 8002814:	4a1e      	ldr	r2, [pc, #120]	; (8002890 <MX_TIM3_Init+0xa8>)
 8002816:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002818:	4b1b      	ldr	r3, [pc, #108]	; (8002888 <MX_TIM3_Init+0xa0>)
 800281a:	2200      	movs	r2, #0
 800281c:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 999;
 800281e:	4b1a      	ldr	r3, [pc, #104]	; (8002888 <MX_TIM3_Init+0xa0>)
 8002820:	4a1c      	ldr	r2, [pc, #112]	; (8002894 <MX_TIM3_Init+0xac>)
 8002822:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002824:	4b18      	ldr	r3, [pc, #96]	; (8002888 <MX_TIM3_Init+0xa0>)
 8002826:	2200      	movs	r2, #0
 8002828:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800282a:	4b17      	ldr	r3, [pc, #92]	; (8002888 <MX_TIM3_Init+0xa0>)
 800282c:	2280      	movs	r2, #128	; 0x80
 800282e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8002830:	4b15      	ldr	r3, [pc, #84]	; (8002888 <MX_TIM3_Init+0xa0>)
 8002832:	0018      	movs	r0, r3
 8002834:	f002 fd4c 	bl	80052d0 <HAL_TIM_Base_Init>
 8002838:	1e03      	subs	r3, r0, #0
 800283a:	d001      	beq.n	8002840 <MX_TIM3_Init+0x58>
  {
    Error_Handler();
 800283c:	f000 f996 	bl	8002b6c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002840:	2108      	movs	r1, #8
 8002842:	187b      	adds	r3, r7, r1
 8002844:	2280      	movs	r2, #128	; 0x80
 8002846:	0152      	lsls	r2, r2, #5
 8002848:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 800284a:	187a      	adds	r2, r7, r1
 800284c:	4b0e      	ldr	r3, [pc, #56]	; (8002888 <MX_TIM3_Init+0xa0>)
 800284e:	0011      	movs	r1, r2
 8002850:	0018      	movs	r0, r3
 8002852:	f002 fd8b 	bl	800536c <HAL_TIM_ConfigClockSource>
 8002856:	1e03      	subs	r3, r0, #0
 8002858:	d001      	beq.n	800285e <MX_TIM3_Init+0x76>
  {
    Error_Handler();
 800285a:	f000 f987 	bl	8002b6c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 800285e:	003b      	movs	r3, r7
 8002860:	2220      	movs	r2, #32
 8002862:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_ENABLE;
 8002864:	003b      	movs	r3, r7
 8002866:	2280      	movs	r2, #128	; 0x80
 8002868:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800286a:	003a      	movs	r2, r7
 800286c:	4b06      	ldr	r3, [pc, #24]	; (8002888 <MX_TIM3_Init+0xa0>)
 800286e:	0011      	movs	r1, r2
 8002870:	0018      	movs	r0, r3
 8002872:	f002 ff3f 	bl	80056f4 <HAL_TIMEx_MasterConfigSynchronization>
 8002876:	1e03      	subs	r3, r0, #0
 8002878:	d001      	beq.n	800287e <MX_TIM3_Init+0x96>
  {
    Error_Handler();
 800287a:	f000 f977 	bl	8002b6c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 800287e:	46c0      	nop			; (mov r8, r8)
 8002880:	46bd      	mov	sp, r7
 8002882:	b006      	add	sp, #24
 8002884:	bd80      	pop	{r7, pc}
 8002886:	46c0      	nop			; (mov r8, r8)
 8002888:	2000012c 	.word	0x2000012c
 800288c:	40000400 	.word	0x40000400
 8002890:	00001f3f 	.word	0x00001f3f
 8002894:	000003e7 	.word	0x000003e7

08002898 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8002898:	b580      	push	{r7, lr}
 800289a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800289c:	4b14      	ldr	r3, [pc, #80]	; (80028f0 <MX_USART1_UART_Init+0x58>)
 800289e:	4a15      	ldr	r2, [pc, #84]	; (80028f4 <MX_USART1_UART_Init+0x5c>)
 80028a0:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80028a2:	4b13      	ldr	r3, [pc, #76]	; (80028f0 <MX_USART1_UART_Init+0x58>)
 80028a4:	22e1      	movs	r2, #225	; 0xe1
 80028a6:	0252      	lsls	r2, r2, #9
 80028a8:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80028aa:	4b11      	ldr	r3, [pc, #68]	; (80028f0 <MX_USART1_UART_Init+0x58>)
 80028ac:	2200      	movs	r2, #0
 80028ae:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80028b0:	4b0f      	ldr	r3, [pc, #60]	; (80028f0 <MX_USART1_UART_Init+0x58>)
 80028b2:	2200      	movs	r2, #0
 80028b4:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80028b6:	4b0e      	ldr	r3, [pc, #56]	; (80028f0 <MX_USART1_UART_Init+0x58>)
 80028b8:	2200      	movs	r2, #0
 80028ba:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80028bc:	4b0c      	ldr	r3, [pc, #48]	; (80028f0 <MX_USART1_UART_Init+0x58>)
 80028be:	220c      	movs	r2, #12
 80028c0:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80028c2:	4b0b      	ldr	r3, [pc, #44]	; (80028f0 <MX_USART1_UART_Init+0x58>)
 80028c4:	2200      	movs	r2, #0
 80028c6:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80028c8:	4b09      	ldr	r3, [pc, #36]	; (80028f0 <MX_USART1_UART_Init+0x58>)
 80028ca:	2200      	movs	r2, #0
 80028cc:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80028ce:	4b08      	ldr	r3, [pc, #32]	; (80028f0 <MX_USART1_UART_Init+0x58>)
 80028d0:	2200      	movs	r2, #0
 80028d2:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80028d4:	4b06      	ldr	r3, [pc, #24]	; (80028f0 <MX_USART1_UART_Init+0x58>)
 80028d6:	2200      	movs	r2, #0
 80028d8:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80028da:	4b05      	ldr	r3, [pc, #20]	; (80028f0 <MX_USART1_UART_Init+0x58>)
 80028dc:	0018      	movs	r0, r3
 80028de:	f002 ff5b 	bl	8005798 <HAL_UART_Init>
 80028e2:	1e03      	subs	r3, r0, #0
 80028e4:	d001      	beq.n	80028ea <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 80028e6:	f000 f941 	bl	8002b6c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80028ea:	46c0      	nop			; (mov r8, r8)
 80028ec:	46bd      	mov	sp, r7
 80028ee:	bd80      	pop	{r7, pc}
 80028f0:	2000016c 	.word	0x2000016c
 80028f4:	40013800 	.word	0x40013800

080028f8 <MX_DMA_Init>:

/** 
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void) 
{
 80028f8:	b580      	push	{r7, lr}
 80028fa:	b082      	sub	sp, #8
 80028fc:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80028fe:	4b0c      	ldr	r3, [pc, #48]	; (8002930 <MX_DMA_Init+0x38>)
 8002900:	695a      	ldr	r2, [r3, #20]
 8002902:	4b0b      	ldr	r3, [pc, #44]	; (8002930 <MX_DMA_Init+0x38>)
 8002904:	2101      	movs	r1, #1
 8002906:	430a      	orrs	r2, r1
 8002908:	615a      	str	r2, [r3, #20]
 800290a:	4b09      	ldr	r3, [pc, #36]	; (8002930 <MX_DMA_Init+0x38>)
 800290c:	695b      	ldr	r3, [r3, #20]
 800290e:	2201      	movs	r2, #1
 8002910:	4013      	ands	r3, r2
 8002912:	607b      	str	r3, [r7, #4]
 8002914:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8002916:	2200      	movs	r2, #0
 8002918:	2100      	movs	r1, #0
 800291a:	2009      	movs	r0, #9
 800291c:	f001 f85e 	bl	80039dc <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8002920:	2009      	movs	r0, #9
 8002922:	f001 f870 	bl	8003a06 <HAL_NVIC_EnableIRQ>

}
 8002926:	46c0      	nop			; (mov r8, r8)
 8002928:	46bd      	mov	sp, r7
 800292a:	b002      	add	sp, #8
 800292c:	bd80      	pop	{r7, pc}
 800292e:	46c0      	nop			; (mov r8, r8)
 8002930:	40021000 	.word	0x40021000

08002934 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002934:	b590      	push	{r4, r7, lr}
 8002936:	b08b      	sub	sp, #44	; 0x2c
 8002938:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800293a:	2414      	movs	r4, #20
 800293c:	193b      	adds	r3, r7, r4
 800293e:	0018      	movs	r0, r3
 8002940:	2314      	movs	r3, #20
 8002942:	001a      	movs	r2, r3
 8002944:	2100      	movs	r1, #0
 8002946:	f003 fa8e 	bl	8005e66 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800294a:	4b76      	ldr	r3, [pc, #472]	; (8002b24 <MX_GPIO_Init+0x1f0>)
 800294c:	695a      	ldr	r2, [r3, #20]
 800294e:	4b75      	ldr	r3, [pc, #468]	; (8002b24 <MX_GPIO_Init+0x1f0>)
 8002950:	2180      	movs	r1, #128	; 0x80
 8002952:	0309      	lsls	r1, r1, #12
 8002954:	430a      	orrs	r2, r1
 8002956:	615a      	str	r2, [r3, #20]
 8002958:	4b72      	ldr	r3, [pc, #456]	; (8002b24 <MX_GPIO_Init+0x1f0>)
 800295a:	695a      	ldr	r2, [r3, #20]
 800295c:	2380      	movs	r3, #128	; 0x80
 800295e:	031b      	lsls	r3, r3, #12
 8002960:	4013      	ands	r3, r2
 8002962:	613b      	str	r3, [r7, #16]
 8002964:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8002966:	4b6f      	ldr	r3, [pc, #444]	; (8002b24 <MX_GPIO_Init+0x1f0>)
 8002968:	695a      	ldr	r2, [r3, #20]
 800296a:	4b6e      	ldr	r3, [pc, #440]	; (8002b24 <MX_GPIO_Init+0x1f0>)
 800296c:	2180      	movs	r1, #128	; 0x80
 800296e:	03c9      	lsls	r1, r1, #15
 8002970:	430a      	orrs	r2, r1
 8002972:	615a      	str	r2, [r3, #20]
 8002974:	4b6b      	ldr	r3, [pc, #428]	; (8002b24 <MX_GPIO_Init+0x1f0>)
 8002976:	695a      	ldr	r2, [r3, #20]
 8002978:	2380      	movs	r3, #128	; 0x80
 800297a:	03db      	lsls	r3, r3, #15
 800297c:	4013      	ands	r3, r2
 800297e:	60fb      	str	r3, [r7, #12]
 8002980:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002982:	4b68      	ldr	r3, [pc, #416]	; (8002b24 <MX_GPIO_Init+0x1f0>)
 8002984:	695a      	ldr	r2, [r3, #20]
 8002986:	4b67      	ldr	r3, [pc, #412]	; (8002b24 <MX_GPIO_Init+0x1f0>)
 8002988:	2180      	movs	r1, #128	; 0x80
 800298a:	0289      	lsls	r1, r1, #10
 800298c:	430a      	orrs	r2, r1
 800298e:	615a      	str	r2, [r3, #20]
 8002990:	4b64      	ldr	r3, [pc, #400]	; (8002b24 <MX_GPIO_Init+0x1f0>)
 8002992:	695a      	ldr	r2, [r3, #20]
 8002994:	2380      	movs	r3, #128	; 0x80
 8002996:	029b      	lsls	r3, r3, #10
 8002998:	4013      	ands	r3, r2
 800299a:	60bb      	str	r3, [r7, #8]
 800299c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800299e:	4b61      	ldr	r3, [pc, #388]	; (8002b24 <MX_GPIO_Init+0x1f0>)
 80029a0:	695a      	ldr	r2, [r3, #20]
 80029a2:	4b60      	ldr	r3, [pc, #384]	; (8002b24 <MX_GPIO_Init+0x1f0>)
 80029a4:	2180      	movs	r1, #128	; 0x80
 80029a6:	02c9      	lsls	r1, r1, #11
 80029a8:	430a      	orrs	r2, r1
 80029aa:	615a      	str	r2, [r3, #20]
 80029ac:	4b5d      	ldr	r3, [pc, #372]	; (8002b24 <MX_GPIO_Init+0x1f0>)
 80029ae:	695a      	ldr	r2, [r3, #20]
 80029b0:	2380      	movs	r3, #128	; 0x80
 80029b2:	02db      	lsls	r3, r3, #11
 80029b4:	4013      	ands	r3, r2
 80029b6:	607b      	str	r3, [r7, #4]
 80029b8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, EN_PACK_SENSE_Pin|CHARGER_DISABLE_Pin, GPIO_PIN_RESET);
 80029ba:	23c0      	movs	r3, #192	; 0xc0
 80029bc:	01db      	lsls	r3, r3, #7
 80029be:	485a      	ldr	r0, [pc, #360]	; (8002b28 <MX_GPIO_Init+0x1f4>)
 80029c0:	2200      	movs	r2, #0
 80029c2:	0019      	movs	r1, r3
 80029c4:	f001 fb61 	bl	800408a <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, MUTE_AMP2_Pin|STEPUP_DISABLE_Pin|STBY_AMP2_Pin|POWER_Pin 
 80029c8:	4958      	ldr	r1, [pc, #352]	; (8002b2c <MX_GPIO_Init+0x1f8>)
 80029ca:	4b59      	ldr	r3, [pc, #356]	; (8002b30 <MX_GPIO_Init+0x1fc>)
 80029cc:	2200      	movs	r2, #0
 80029ce:	0018      	movs	r0, r3
 80029d0:	f001 fb5b 	bl	800408a <HAL_GPIO_WritePin>
                          |RST_BT_Pin|MUTE_AMP1_Pin|STBY_AMP1_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, STATUS_LED_Pin|ENABLE_9V_Pin, GPIO_PIN_RESET);
 80029d4:	2381      	movs	r3, #129	; 0x81
 80029d6:	0219      	lsls	r1, r3, #8
 80029d8:	2390      	movs	r3, #144	; 0x90
 80029da:	05db      	lsls	r3, r3, #23
 80029dc:	2200      	movs	r2, #0
 80029de:	0018      	movs	r0, r3
 80029e0:	f001 fb53 	bl	800408a <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(BT_EN_GPIO_Port, BT_EN_Pin, GPIO_PIN_RESET);
 80029e4:	4b53      	ldr	r3, [pc, #332]	; (8002b34 <MX_GPIO_Init+0x200>)
 80029e6:	2200      	movs	r2, #0
 80029e8:	2180      	movs	r1, #128	; 0x80
 80029ea:	0018      	movs	r0, r3
 80029ec:	f001 fb4d 	bl	800408a <HAL_GPIO_WritePin>

  /*Configure GPIO pins : EN_PACK_SENSE_Pin CHARGER_DISABLE_Pin */
  GPIO_InitStruct.Pin = EN_PACK_SENSE_Pin|CHARGER_DISABLE_Pin;
 80029f0:	193b      	adds	r3, r7, r4
 80029f2:	22c0      	movs	r2, #192	; 0xc0
 80029f4:	01d2      	lsls	r2, r2, #7
 80029f6:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80029f8:	193b      	adds	r3, r7, r4
 80029fa:	2201      	movs	r2, #1
 80029fc:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029fe:	193b      	adds	r3, r7, r4
 8002a00:	2200      	movs	r2, #0
 8002a02:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002a04:	193b      	adds	r3, r7, r4
 8002a06:	2200      	movs	r2, #0
 8002a08:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002a0a:	193b      	adds	r3, r7, r4
 8002a0c:	4a46      	ldr	r2, [pc, #280]	; (8002b28 <MX_GPIO_Init+0x1f4>)
 8002a0e:	0019      	movs	r1, r3
 8002a10:	0010      	movs	r0, r2
 8002a12:	f001 f9ad 	bl	8003d70 <HAL_GPIO_Init>

  /*Configure GPIO pin : CHARGER_PLUGGED_Pin */
  GPIO_InitStruct.Pin = CHARGER_PLUGGED_Pin;
 8002a16:	0021      	movs	r1, r4
 8002a18:	187b      	adds	r3, r7, r1
 8002a1a:	2280      	movs	r2, #128	; 0x80
 8002a1c:	0212      	lsls	r2, r2, #8
 8002a1e:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002a20:	187b      	adds	r3, r7, r1
 8002a22:	2200      	movs	r2, #0
 8002a24:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a26:	187b      	adds	r3, r7, r1
 8002a28:	2200      	movs	r2, #0
 8002a2a:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(CHARGER_PLUGGED_GPIO_Port, &GPIO_InitStruct);
 8002a2c:	000c      	movs	r4, r1
 8002a2e:	187b      	adds	r3, r7, r1
 8002a30:	4a3d      	ldr	r2, [pc, #244]	; (8002b28 <MX_GPIO_Init+0x1f4>)
 8002a32:	0019      	movs	r1, r3
 8002a34:	0010      	movs	r0, r2
 8002a36:	f001 f99b 	bl	8003d70 <HAL_GPIO_Init>

  /*Configure GPIO pins : GPIO1_Pin GPIO2_Pin GPIO3_Pin GPIO4_Pin 
                           DIAG_AMP2_Pin U3V3_ENABLED_Pin DIAG_AMP1_Pin */
  GPIO_InitStruct.Pin = GPIO1_Pin|GPIO2_Pin|GPIO3_Pin|GPIO4_Pin 
 8002a3a:	0021      	movs	r1, r4
 8002a3c:	187b      	adds	r3, r7, r1
 8002a3e:	4a3e      	ldr	r2, [pc, #248]	; (8002b38 <MX_GPIO_Init+0x204>)
 8002a40:	601a      	str	r2, [r3, #0]
                          |DIAG_AMP2_Pin|U3V3_ENABLED_Pin|DIAG_AMP1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002a42:	187b      	adds	r3, r7, r1
 8002a44:	2200      	movs	r2, #0
 8002a46:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a48:	187b      	adds	r3, r7, r1
 8002a4a:	2200      	movs	r2, #0
 8002a4c:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002a4e:	000c      	movs	r4, r1
 8002a50:	187b      	adds	r3, r7, r1
 8002a52:	4a37      	ldr	r2, [pc, #220]	; (8002b30 <MX_GPIO_Init+0x1fc>)
 8002a54:	0019      	movs	r1, r3
 8002a56:	0010      	movs	r0, r2
 8002a58:	f001 f98a 	bl	8003d70 <HAL_GPIO_Init>

  /*Configure GPIO pins : MUTE_AMP2_Pin STEPUP_DISABLE_Pin STBY_AMP2_Pin POWER_Pin 
                           RST_BT_Pin MUTE_AMP1_Pin STBY_AMP1_Pin */
  GPIO_InitStruct.Pin = MUTE_AMP2_Pin|STEPUP_DISABLE_Pin|STBY_AMP2_Pin|POWER_Pin 
 8002a5c:	0021      	movs	r1, r4
 8002a5e:	187b      	adds	r3, r7, r1
 8002a60:	4a32      	ldr	r2, [pc, #200]	; (8002b2c <MX_GPIO_Init+0x1f8>)
 8002a62:	601a      	str	r2, [r3, #0]
                          |RST_BT_Pin|MUTE_AMP1_Pin|STBY_AMP1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002a64:	187b      	adds	r3, r7, r1
 8002a66:	2201      	movs	r2, #1
 8002a68:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a6a:	187b      	adds	r3, r7, r1
 8002a6c:	2200      	movs	r2, #0
 8002a6e:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002a70:	187b      	adds	r3, r7, r1
 8002a72:	2200      	movs	r2, #0
 8002a74:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002a76:	000c      	movs	r4, r1
 8002a78:	187b      	adds	r3, r7, r1
 8002a7a:	4a2d      	ldr	r2, [pc, #180]	; (8002b30 <MX_GPIO_Init+0x1fc>)
 8002a7c:	0019      	movs	r1, r3
 8002a7e:	0010      	movs	r0, r2
 8002a80:	f001 f976 	bl	8003d70 <HAL_GPIO_Init>

  /*Configure GPIO pins : STATUS_LED_Pin ENABLE_9V_Pin */
  GPIO_InitStruct.Pin = STATUS_LED_Pin|ENABLE_9V_Pin;
 8002a84:	0021      	movs	r1, r4
 8002a86:	187b      	adds	r3, r7, r1
 8002a88:	2281      	movs	r2, #129	; 0x81
 8002a8a:	0212      	lsls	r2, r2, #8
 8002a8c:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002a8e:	000c      	movs	r4, r1
 8002a90:	193b      	adds	r3, r7, r4
 8002a92:	2201      	movs	r2, #1
 8002a94:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a96:	193b      	adds	r3, r7, r4
 8002a98:	2200      	movs	r2, #0
 8002a9a:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002a9c:	193b      	adds	r3, r7, r4
 8002a9e:	2200      	movs	r2, #0
 8002aa0:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002aa2:	193a      	adds	r2, r7, r4
 8002aa4:	2390      	movs	r3, #144	; 0x90
 8002aa6:	05db      	lsls	r3, r3, #23
 8002aa8:	0011      	movs	r1, r2
 8002aaa:	0018      	movs	r0, r3
 8002aac:	f001 f960 	bl	8003d70 <HAL_GPIO_Init>

  /*Configure GPIO pins : CHARGER_STAT1_Pin BT_FAULT_Pin */
  GPIO_InitStruct.Pin = CHARGER_STAT1_Pin|BT_FAULT_Pin;
 8002ab0:	193b      	adds	r3, r7, r4
 8002ab2:	22c0      	movs	r2, #192	; 0xc0
 8002ab4:	0152      	lsls	r2, r2, #5
 8002ab6:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002ab8:	193b      	adds	r3, r7, r4
 8002aba:	2200      	movs	r2, #0
 8002abc:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002abe:	193b      	adds	r3, r7, r4
 8002ac0:	2200      	movs	r2, #0
 8002ac2:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002ac4:	193a      	adds	r2, r7, r4
 8002ac6:	2390      	movs	r3, #144	; 0x90
 8002ac8:	05db      	lsls	r3, r3, #23
 8002aca:	0011      	movs	r1, r2
 8002acc:	0018      	movs	r0, r3
 8002ace:	f001 f94f 	bl	8003d70 <HAL_GPIO_Init>

  /*Configure GPIO pin : CHARGER_STAT2_Pin */
  GPIO_InitStruct.Pin = CHARGER_STAT2_Pin;
 8002ad2:	0021      	movs	r1, r4
 8002ad4:	187b      	adds	r3, r7, r1
 8002ad6:	2240      	movs	r2, #64	; 0x40
 8002ad8:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002ada:	187b      	adds	r3, r7, r1
 8002adc:	2200      	movs	r2, #0
 8002ade:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ae0:	187b      	adds	r3, r7, r1
 8002ae2:	2200      	movs	r2, #0
 8002ae4:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(CHARGER_STAT2_GPIO_Port, &GPIO_InitStruct);
 8002ae6:	000c      	movs	r4, r1
 8002ae8:	187b      	adds	r3, r7, r1
 8002aea:	4a12      	ldr	r2, [pc, #72]	; (8002b34 <MX_GPIO_Init+0x200>)
 8002aec:	0019      	movs	r1, r3
 8002aee:	0010      	movs	r0, r2
 8002af0:	f001 f93e 	bl	8003d70 <HAL_GPIO_Init>

  /*Configure GPIO pin : BT_EN_Pin */
  GPIO_InitStruct.Pin = BT_EN_Pin;
 8002af4:	0021      	movs	r1, r4
 8002af6:	187b      	adds	r3, r7, r1
 8002af8:	2280      	movs	r2, #128	; 0x80
 8002afa:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002afc:	187b      	adds	r3, r7, r1
 8002afe:	2201      	movs	r2, #1
 8002b00:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b02:	187b      	adds	r3, r7, r1
 8002b04:	2200      	movs	r2, #0
 8002b06:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002b08:	187b      	adds	r3, r7, r1
 8002b0a:	2200      	movs	r2, #0
 8002b0c:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(BT_EN_GPIO_Port, &GPIO_InitStruct);
 8002b0e:	187b      	adds	r3, r7, r1
 8002b10:	4a08      	ldr	r2, [pc, #32]	; (8002b34 <MX_GPIO_Init+0x200>)
 8002b12:	0019      	movs	r1, r3
 8002b14:	0010      	movs	r0, r2
 8002b16:	f001 f92b 	bl	8003d70 <HAL_GPIO_Init>

}
 8002b1a:	46c0      	nop			; (mov r8, r8)
 8002b1c:	46bd      	mov	sp, r7
 8002b1e:	b00b      	add	sp, #44	; 0x2c
 8002b20:	bd90      	pop	{r4, r7, pc}
 8002b22:	46c0      	nop			; (mov r8, r8)
 8002b24:	40021000 	.word	0x40021000
 8002b28:	48000800 	.word	0x48000800
 8002b2c:	0000a1d8 	.word	0x0000a1d8
 8002b30:	48000400 	.word	0x48000400
 8002b34:	48001400 	.word	0x48001400
 8002b38:	00005227 	.word	0x00005227

08002b3c <HAL_ADC_ConvCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc){
 8002b3c:	b580      	push	{r7, lr}
 8002b3e:	b082      	sub	sp, #8
 8002b40:	af00      	add	r7, sp, #0
 8002b42:	6078      	str	r0, [r7, #4]


  if(HAL_OK != HAL_TIM_Base_Start(&htim1))
 8002b44:	4b07      	ldr	r3, [pc, #28]	; (8002b64 <HAL_ADC_ConvCpltCallback+0x28>)
 8002b46:	0018      	movs	r0, r3
 8002b48:	f002 fbee 	bl	8005328 <HAL_TIM_Base_Start>
 8002b4c:	1e03      	subs	r3, r0, #0
 8002b4e:	d001      	beq.n	8002b54 <HAL_ADC_ConvCpltCallback+0x18>
	  Error_Handler();
 8002b50:	f000 f80c 	bl	8002b6c <Error_Handler>
	adc_flag = 1;
 8002b54:	4b04      	ldr	r3, [pc, #16]	; (8002b68 <HAL_ADC_ConvCpltCallback+0x2c>)
 8002b56:	2201      	movs	r2, #1
 8002b58:	701a      	strb	r2, [r3, #0]
}
 8002b5a:	46c0      	nop			; (mov r8, r8)
 8002b5c:	46bd      	mov	sp, r7
 8002b5e:	b002      	add	sp, #8
 8002b60:	bd80      	pop	{r7, pc}
 8002b62:	46c0      	nop			; (mov r8, r8)
 8002b64:	200001ec 	.word	0x200001ec
 8002b68:	2000002c 	.word	0x2000002c

08002b6c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002b6c:	b580      	push	{r7, lr}
 8002b6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8002b70:	46c0      	nop			; (mov r8, r8)
 8002b72:	46bd      	mov	sp, r7
 8002b74:	bd80      	pop	{r7, pc}
	...

08002b78 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002b78:	b580      	push	{r7, lr}
 8002b7a:	b082      	sub	sp, #8
 8002b7c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002b7e:	4b0f      	ldr	r3, [pc, #60]	; (8002bbc <HAL_MspInit+0x44>)
 8002b80:	699a      	ldr	r2, [r3, #24]
 8002b82:	4b0e      	ldr	r3, [pc, #56]	; (8002bbc <HAL_MspInit+0x44>)
 8002b84:	2101      	movs	r1, #1
 8002b86:	430a      	orrs	r2, r1
 8002b88:	619a      	str	r2, [r3, #24]
 8002b8a:	4b0c      	ldr	r3, [pc, #48]	; (8002bbc <HAL_MspInit+0x44>)
 8002b8c:	699b      	ldr	r3, [r3, #24]
 8002b8e:	2201      	movs	r2, #1
 8002b90:	4013      	ands	r3, r2
 8002b92:	607b      	str	r3, [r7, #4]
 8002b94:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002b96:	4b09      	ldr	r3, [pc, #36]	; (8002bbc <HAL_MspInit+0x44>)
 8002b98:	69da      	ldr	r2, [r3, #28]
 8002b9a:	4b08      	ldr	r3, [pc, #32]	; (8002bbc <HAL_MspInit+0x44>)
 8002b9c:	2180      	movs	r1, #128	; 0x80
 8002b9e:	0549      	lsls	r1, r1, #21
 8002ba0:	430a      	orrs	r2, r1
 8002ba2:	61da      	str	r2, [r3, #28]
 8002ba4:	4b05      	ldr	r3, [pc, #20]	; (8002bbc <HAL_MspInit+0x44>)
 8002ba6:	69da      	ldr	r2, [r3, #28]
 8002ba8:	2380      	movs	r3, #128	; 0x80
 8002baa:	055b      	lsls	r3, r3, #21
 8002bac:	4013      	ands	r3, r2
 8002bae:	603b      	str	r3, [r7, #0]
 8002bb0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002bb2:	46c0      	nop			; (mov r8, r8)
 8002bb4:	46bd      	mov	sp, r7
 8002bb6:	b002      	add	sp, #8
 8002bb8:	bd80      	pop	{r7, pc}
 8002bba:	46c0      	nop			; (mov r8, r8)
 8002bbc:	40021000 	.word	0x40021000

08002bc0 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8002bc0:	b580      	push	{r7, lr}
 8002bc2:	b08a      	sub	sp, #40	; 0x28
 8002bc4:	af00      	add	r7, sp, #0
 8002bc6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002bc8:	2314      	movs	r3, #20
 8002bca:	18fb      	adds	r3, r7, r3
 8002bcc:	0018      	movs	r0, r3
 8002bce:	2314      	movs	r3, #20
 8002bd0:	001a      	movs	r2, r3
 8002bd2:	2100      	movs	r1, #0
 8002bd4:	f003 f947 	bl	8005e66 <memset>
  if(hadc->Instance==ADC1)
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	4a2d      	ldr	r2, [pc, #180]	; (8002c94 <HAL_ADC_MspInit+0xd4>)
 8002bde:	4293      	cmp	r3, r2
 8002be0:	d154      	bne.n	8002c8c <HAL_ADC_MspInit+0xcc>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8002be2:	4b2d      	ldr	r3, [pc, #180]	; (8002c98 <HAL_ADC_MspInit+0xd8>)
 8002be4:	699a      	ldr	r2, [r3, #24]
 8002be6:	4b2c      	ldr	r3, [pc, #176]	; (8002c98 <HAL_ADC_MspInit+0xd8>)
 8002be8:	2180      	movs	r1, #128	; 0x80
 8002bea:	0089      	lsls	r1, r1, #2
 8002bec:	430a      	orrs	r2, r1
 8002bee:	619a      	str	r2, [r3, #24]
 8002bf0:	4b29      	ldr	r3, [pc, #164]	; (8002c98 <HAL_ADC_MspInit+0xd8>)
 8002bf2:	699a      	ldr	r2, [r3, #24]
 8002bf4:	2380      	movs	r3, #128	; 0x80
 8002bf6:	009b      	lsls	r3, r3, #2
 8002bf8:	4013      	ands	r3, r2
 8002bfa:	613b      	str	r3, [r7, #16]
 8002bfc:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002bfe:	4b26      	ldr	r3, [pc, #152]	; (8002c98 <HAL_ADC_MspInit+0xd8>)
 8002c00:	695a      	ldr	r2, [r3, #20]
 8002c02:	4b25      	ldr	r3, [pc, #148]	; (8002c98 <HAL_ADC_MspInit+0xd8>)
 8002c04:	2180      	movs	r1, #128	; 0x80
 8002c06:	0289      	lsls	r1, r1, #10
 8002c08:	430a      	orrs	r2, r1
 8002c0a:	615a      	str	r2, [r3, #20]
 8002c0c:	4b22      	ldr	r3, [pc, #136]	; (8002c98 <HAL_ADC_MspInit+0xd8>)
 8002c0e:	695a      	ldr	r2, [r3, #20]
 8002c10:	2380      	movs	r3, #128	; 0x80
 8002c12:	029b      	lsls	r3, r3, #10
 8002c14:	4013      	ands	r3, r2
 8002c16:	60fb      	str	r3, [r7, #12]
 8002c18:	68fb      	ldr	r3, [r7, #12]
    PA4     ------> ADC_IN4
    PA5     ------> ADC_IN5
    PA6     ------> ADC_IN6
    PA7     ------> ADC_IN7 
    */
    GPIO_InitStruct.Pin = CHARGER_PG_Pin|GAIN_Pin|GAIN_BASS_Pin|GAIN_MIDDLE_Pin 
 8002c1a:	2114      	movs	r1, #20
 8002c1c:	187b      	adds	r3, r7, r1
 8002c1e:	22ff      	movs	r2, #255	; 0xff
 8002c20:	601a      	str	r2, [r3, #0]
                          |GAIN_TREBLE_Pin|PACK_VOLTAGE_Pin|TEMP_SENSOR1_Pin|LEVELMETER_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002c22:	187b      	adds	r3, r7, r1
 8002c24:	2203      	movs	r2, #3
 8002c26:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c28:	187b      	adds	r3, r7, r1
 8002c2a:	2200      	movs	r2, #0
 8002c2c:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002c2e:	187a      	adds	r2, r7, r1
 8002c30:	2390      	movs	r3, #144	; 0x90
 8002c32:	05db      	lsls	r3, r3, #23
 8002c34:	0011      	movs	r1, r2
 8002c36:	0018      	movs	r0, r3
 8002c38:	f001 f89a 	bl	8003d70 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC Init */
    hdma_adc.Instance = DMA1_Channel1;
 8002c3c:	4b17      	ldr	r3, [pc, #92]	; (8002c9c <HAL_ADC_MspInit+0xdc>)
 8002c3e:	4a18      	ldr	r2, [pc, #96]	; (8002ca0 <HAL_ADC_MspInit+0xe0>)
 8002c40:	601a      	str	r2, [r3, #0]
    hdma_adc.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002c42:	4b16      	ldr	r3, [pc, #88]	; (8002c9c <HAL_ADC_MspInit+0xdc>)
 8002c44:	2200      	movs	r2, #0
 8002c46:	605a      	str	r2, [r3, #4]
    hdma_adc.Init.PeriphInc = DMA_PINC_DISABLE;
 8002c48:	4b14      	ldr	r3, [pc, #80]	; (8002c9c <HAL_ADC_MspInit+0xdc>)
 8002c4a:	2200      	movs	r2, #0
 8002c4c:	609a      	str	r2, [r3, #8]
    hdma_adc.Init.MemInc = DMA_MINC_ENABLE;
 8002c4e:	4b13      	ldr	r3, [pc, #76]	; (8002c9c <HAL_ADC_MspInit+0xdc>)
 8002c50:	2280      	movs	r2, #128	; 0x80
 8002c52:	60da      	str	r2, [r3, #12]
    hdma_adc.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8002c54:	4b11      	ldr	r3, [pc, #68]	; (8002c9c <HAL_ADC_MspInit+0xdc>)
 8002c56:	2280      	movs	r2, #128	; 0x80
 8002c58:	0052      	lsls	r2, r2, #1
 8002c5a:	611a      	str	r2, [r3, #16]
    hdma_adc.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8002c5c:	4b0f      	ldr	r3, [pc, #60]	; (8002c9c <HAL_ADC_MspInit+0xdc>)
 8002c5e:	2280      	movs	r2, #128	; 0x80
 8002c60:	00d2      	lsls	r2, r2, #3
 8002c62:	615a      	str	r2, [r3, #20]
    hdma_adc.Init.Mode = DMA_NORMAL;
 8002c64:	4b0d      	ldr	r3, [pc, #52]	; (8002c9c <HAL_ADC_MspInit+0xdc>)
 8002c66:	2200      	movs	r2, #0
 8002c68:	619a      	str	r2, [r3, #24]
    hdma_adc.Init.Priority = DMA_PRIORITY_LOW;
 8002c6a:	4b0c      	ldr	r3, [pc, #48]	; (8002c9c <HAL_ADC_MspInit+0xdc>)
 8002c6c:	2200      	movs	r2, #0
 8002c6e:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_adc) != HAL_OK)
 8002c70:	4b0a      	ldr	r3, [pc, #40]	; (8002c9c <HAL_ADC_MspInit+0xdc>)
 8002c72:	0018      	movs	r0, r3
 8002c74:	f000 fee4 	bl	8003a40 <HAL_DMA_Init>
 8002c78:	1e03      	subs	r3, r0, #0
 8002c7a:	d001      	beq.n	8002c80 <HAL_ADC_MspInit+0xc0>
    {
      Error_Handler();
 8002c7c:	f7ff ff76 	bl	8002b6c <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc);
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	4a06      	ldr	r2, [pc, #24]	; (8002c9c <HAL_ADC_MspInit+0xdc>)
 8002c84:	631a      	str	r2, [r3, #48]	; 0x30
 8002c86:	4b05      	ldr	r3, [pc, #20]	; (8002c9c <HAL_ADC_MspInit+0xdc>)
 8002c88:	687a      	ldr	r2, [r7, #4]
 8002c8a:	625a      	str	r2, [r3, #36]	; 0x24
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8002c8c:	46c0      	nop			; (mov r8, r8)
 8002c8e:	46bd      	mov	sp, r7
 8002c90:	b00a      	add	sp, #40	; 0x28
 8002c92:	bd80      	pop	{r7, pc}
 8002c94:	40012400 	.word	0x40012400
 8002c98:	40021000 	.word	0x40021000
 8002c9c:	2000022c 	.word	0x2000022c
 8002ca0:	40020008 	.word	0x40020008

08002ca4 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002ca4:	b580      	push	{r7, lr}
 8002ca6:	b08a      	sub	sp, #40	; 0x28
 8002ca8:	af00      	add	r7, sp, #0
 8002caa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002cac:	2314      	movs	r3, #20
 8002cae:	18fb      	adds	r3, r7, r3
 8002cb0:	0018      	movs	r0, r3
 8002cb2:	2314      	movs	r3, #20
 8002cb4:	001a      	movs	r2, r3
 8002cb6:	2100      	movs	r1, #0
 8002cb8:	f003 f8d5 	bl	8005e66 <memset>
  if(hi2c->Instance==I2C1)
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	4a1c      	ldr	r2, [pc, #112]	; (8002d34 <HAL_I2C_MspInit+0x90>)
 8002cc2:	4293      	cmp	r3, r2
 8002cc4:	d132      	bne.n	8002d2c <HAL_I2C_MspInit+0x88>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002cc6:	4b1c      	ldr	r3, [pc, #112]	; (8002d38 <HAL_I2C_MspInit+0x94>)
 8002cc8:	695a      	ldr	r2, [r3, #20]
 8002cca:	4b1b      	ldr	r3, [pc, #108]	; (8002d38 <HAL_I2C_MspInit+0x94>)
 8002ccc:	2180      	movs	r1, #128	; 0x80
 8002cce:	02c9      	lsls	r1, r1, #11
 8002cd0:	430a      	orrs	r2, r1
 8002cd2:	615a      	str	r2, [r3, #20]
 8002cd4:	4b18      	ldr	r3, [pc, #96]	; (8002d38 <HAL_I2C_MspInit+0x94>)
 8002cd6:	695a      	ldr	r2, [r3, #20]
 8002cd8:	2380      	movs	r3, #128	; 0x80
 8002cda:	02db      	lsls	r3, r3, #11
 8002cdc:	4013      	ands	r3, r2
 8002cde:	613b      	str	r3, [r7, #16]
 8002ce0:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration    
    PB10     ------> I2C1_SCL
    PB11     ------> I2C1_SDA 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8002ce2:	2114      	movs	r1, #20
 8002ce4:	187b      	adds	r3, r7, r1
 8002ce6:	22c0      	movs	r2, #192	; 0xc0
 8002ce8:	0112      	lsls	r2, r2, #4
 8002cea:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002cec:	187b      	adds	r3, r7, r1
 8002cee:	2212      	movs	r2, #18
 8002cf0:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002cf2:	187b      	adds	r3, r7, r1
 8002cf4:	2201      	movs	r2, #1
 8002cf6:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002cf8:	187b      	adds	r3, r7, r1
 8002cfa:	2203      	movs	r2, #3
 8002cfc:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_I2C1;
 8002cfe:	187b      	adds	r3, r7, r1
 8002d00:	2201      	movs	r2, #1
 8002d02:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002d04:	187b      	adds	r3, r7, r1
 8002d06:	4a0d      	ldr	r2, [pc, #52]	; (8002d3c <HAL_I2C_MspInit+0x98>)
 8002d08:	0019      	movs	r1, r3
 8002d0a:	0010      	movs	r0, r2
 8002d0c:	f001 f830 	bl	8003d70 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002d10:	4b09      	ldr	r3, [pc, #36]	; (8002d38 <HAL_I2C_MspInit+0x94>)
 8002d12:	69da      	ldr	r2, [r3, #28]
 8002d14:	4b08      	ldr	r3, [pc, #32]	; (8002d38 <HAL_I2C_MspInit+0x94>)
 8002d16:	2180      	movs	r1, #128	; 0x80
 8002d18:	0389      	lsls	r1, r1, #14
 8002d1a:	430a      	orrs	r2, r1
 8002d1c:	61da      	str	r2, [r3, #28]
 8002d1e:	4b06      	ldr	r3, [pc, #24]	; (8002d38 <HAL_I2C_MspInit+0x94>)
 8002d20:	69da      	ldr	r2, [r3, #28]
 8002d22:	2380      	movs	r3, #128	; 0x80
 8002d24:	039b      	lsls	r3, r3, #14
 8002d26:	4013      	ands	r3, r2
 8002d28:	60fb      	str	r3, [r7, #12]
 8002d2a:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8002d2c:	46c0      	nop			; (mov r8, r8)
 8002d2e:	46bd      	mov	sp, r7
 8002d30:	b00a      	add	sp, #40	; 0x28
 8002d32:	bd80      	pop	{r7, pc}
 8002d34:	40005400 	.word	0x40005400
 8002d38:	40021000 	.word	0x40021000
 8002d3c:	48000400 	.word	0x48000400

08002d40 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002d40:	b580      	push	{r7, lr}
 8002d42:	b084      	sub	sp, #16
 8002d44:	af00      	add	r7, sp, #0
 8002d46:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	4a13      	ldr	r2, [pc, #76]	; (8002d9c <HAL_TIM_Base_MspInit+0x5c>)
 8002d4e:	4293      	cmp	r3, r2
 8002d50:	d10e      	bne.n	8002d70 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8002d52:	4b13      	ldr	r3, [pc, #76]	; (8002da0 <HAL_TIM_Base_MspInit+0x60>)
 8002d54:	699a      	ldr	r2, [r3, #24]
 8002d56:	4b12      	ldr	r3, [pc, #72]	; (8002da0 <HAL_TIM_Base_MspInit+0x60>)
 8002d58:	2180      	movs	r1, #128	; 0x80
 8002d5a:	0109      	lsls	r1, r1, #4
 8002d5c:	430a      	orrs	r2, r1
 8002d5e:	619a      	str	r2, [r3, #24]
 8002d60:	4b0f      	ldr	r3, [pc, #60]	; (8002da0 <HAL_TIM_Base_MspInit+0x60>)
 8002d62:	699a      	ldr	r2, [r3, #24]
 8002d64:	2380      	movs	r3, #128	; 0x80
 8002d66:	011b      	lsls	r3, r3, #4
 8002d68:	4013      	ands	r3, r2
 8002d6a:	60fb      	str	r3, [r7, #12]
 8002d6c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8002d6e:	e010      	b.n	8002d92 <HAL_TIM_Base_MspInit+0x52>
  else if(htim_base->Instance==TIM3)
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	4a0b      	ldr	r2, [pc, #44]	; (8002da4 <HAL_TIM_Base_MspInit+0x64>)
 8002d76:	4293      	cmp	r3, r2
 8002d78:	d10b      	bne.n	8002d92 <HAL_TIM_Base_MspInit+0x52>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002d7a:	4b09      	ldr	r3, [pc, #36]	; (8002da0 <HAL_TIM_Base_MspInit+0x60>)
 8002d7c:	69da      	ldr	r2, [r3, #28]
 8002d7e:	4b08      	ldr	r3, [pc, #32]	; (8002da0 <HAL_TIM_Base_MspInit+0x60>)
 8002d80:	2102      	movs	r1, #2
 8002d82:	430a      	orrs	r2, r1
 8002d84:	61da      	str	r2, [r3, #28]
 8002d86:	4b06      	ldr	r3, [pc, #24]	; (8002da0 <HAL_TIM_Base_MspInit+0x60>)
 8002d88:	69db      	ldr	r3, [r3, #28]
 8002d8a:	2202      	movs	r2, #2
 8002d8c:	4013      	ands	r3, r2
 8002d8e:	60bb      	str	r3, [r7, #8]
 8002d90:	68bb      	ldr	r3, [r7, #8]
}
 8002d92:	46c0      	nop			; (mov r8, r8)
 8002d94:	46bd      	mov	sp, r7
 8002d96:	b004      	add	sp, #16
 8002d98:	bd80      	pop	{r7, pc}
 8002d9a:	46c0      	nop			; (mov r8, r8)
 8002d9c:	40012c00 	.word	0x40012c00
 8002da0:	40021000 	.word	0x40021000
 8002da4:	40000400 	.word	0x40000400

08002da8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002da8:	b580      	push	{r7, lr}
 8002daa:	b08a      	sub	sp, #40	; 0x28
 8002dac:	af00      	add	r7, sp, #0
 8002dae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002db0:	2314      	movs	r3, #20
 8002db2:	18fb      	adds	r3, r7, r3
 8002db4:	0018      	movs	r0, r3
 8002db6:	2314      	movs	r3, #20
 8002db8:	001a      	movs	r2, r3
 8002dba:	2100      	movs	r1, #0
 8002dbc:	f003 f853 	bl	8005e66 <memset>
  if(huart->Instance==USART1)
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	4a1d      	ldr	r2, [pc, #116]	; (8002e3c <HAL_UART_MspInit+0x94>)
 8002dc6:	4293      	cmp	r3, r2
 8002dc8:	d133      	bne.n	8002e32 <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002dca:	4b1d      	ldr	r3, [pc, #116]	; (8002e40 <HAL_UART_MspInit+0x98>)
 8002dcc:	699a      	ldr	r2, [r3, #24]
 8002dce:	4b1c      	ldr	r3, [pc, #112]	; (8002e40 <HAL_UART_MspInit+0x98>)
 8002dd0:	2180      	movs	r1, #128	; 0x80
 8002dd2:	01c9      	lsls	r1, r1, #7
 8002dd4:	430a      	orrs	r2, r1
 8002dd6:	619a      	str	r2, [r3, #24]
 8002dd8:	4b19      	ldr	r3, [pc, #100]	; (8002e40 <HAL_UART_MspInit+0x98>)
 8002dda:	699a      	ldr	r2, [r3, #24]
 8002ddc:	2380      	movs	r3, #128	; 0x80
 8002dde:	01db      	lsls	r3, r3, #7
 8002de0:	4013      	ands	r3, r2
 8002de2:	613b      	str	r3, [r7, #16]
 8002de4:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002de6:	4b16      	ldr	r3, [pc, #88]	; (8002e40 <HAL_UART_MspInit+0x98>)
 8002de8:	695a      	ldr	r2, [r3, #20]
 8002dea:	4b15      	ldr	r3, [pc, #84]	; (8002e40 <HAL_UART_MspInit+0x98>)
 8002dec:	2180      	movs	r1, #128	; 0x80
 8002dee:	0289      	lsls	r1, r1, #10
 8002df0:	430a      	orrs	r2, r1
 8002df2:	615a      	str	r2, [r3, #20]
 8002df4:	4b12      	ldr	r3, [pc, #72]	; (8002e40 <HAL_UART_MspInit+0x98>)
 8002df6:	695a      	ldr	r2, [r3, #20]
 8002df8:	2380      	movs	r3, #128	; 0x80
 8002dfa:	029b      	lsls	r3, r3, #10
 8002dfc:	4013      	ands	r3, r2
 8002dfe:	60fb      	str	r3, [r7, #12]
 8002e00:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration    
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8002e02:	2114      	movs	r1, #20
 8002e04:	187b      	adds	r3, r7, r1
 8002e06:	22c0      	movs	r2, #192	; 0xc0
 8002e08:	00d2      	lsls	r2, r2, #3
 8002e0a:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002e0c:	187b      	adds	r3, r7, r1
 8002e0e:	2202      	movs	r2, #2
 8002e10:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e12:	187b      	adds	r3, r7, r1
 8002e14:	2200      	movs	r2, #0
 8002e16:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002e18:	187b      	adds	r3, r7, r1
 8002e1a:	2203      	movs	r2, #3
 8002e1c:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART1;
 8002e1e:	187b      	adds	r3, r7, r1
 8002e20:	2201      	movs	r2, #1
 8002e22:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002e24:	187a      	adds	r2, r7, r1
 8002e26:	2390      	movs	r3, #144	; 0x90
 8002e28:	05db      	lsls	r3, r3, #23
 8002e2a:	0011      	movs	r1, r2
 8002e2c:	0018      	movs	r0, r3
 8002e2e:	f000 ff9f 	bl	8003d70 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8002e32:	46c0      	nop			; (mov r8, r8)
 8002e34:	46bd      	mov	sp, r7
 8002e36:	b00a      	add	sp, #40	; 0x28
 8002e38:	bd80      	pop	{r7, pc}
 8002e3a:	46c0      	nop			; (mov r8, r8)
 8002e3c:	40013800 	.word	0x40013800
 8002e40:	40021000 	.word	0x40021000

08002e44 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002e44:	b580      	push	{r7, lr}
 8002e46:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8002e48:	46c0      	nop			; (mov r8, r8)
 8002e4a:	46bd      	mov	sp, r7
 8002e4c:	bd80      	pop	{r7, pc}

08002e4e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002e4e:	b580      	push	{r7, lr}
 8002e50:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002e52:	e7fe      	b.n	8002e52 <HardFault_Handler+0x4>

08002e54 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002e54:	b580      	push	{r7, lr}
 8002e56:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8002e58:	46c0      	nop			; (mov r8, r8)
 8002e5a:	46bd      	mov	sp, r7
 8002e5c:	bd80      	pop	{r7, pc}

08002e5e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002e5e:	b580      	push	{r7, lr}
 8002e60:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002e62:	46c0      	nop			; (mov r8, r8)
 8002e64:	46bd      	mov	sp, r7
 8002e66:	bd80      	pop	{r7, pc}

08002e68 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002e68:	b580      	push	{r7, lr}
 8002e6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002e6c:	f000 f888 	bl	8002f80 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002e70:	46c0      	nop			; (mov r8, r8)
 8002e72:	46bd      	mov	sp, r7
 8002e74:	bd80      	pop	{r7, pc}
	...

08002e78 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 1 interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8002e78:	b580      	push	{r7, lr}
 8002e7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc);
 8002e7c:	4b03      	ldr	r3, [pc, #12]	; (8002e8c <DMA1_Channel1_IRQHandler+0x14>)
 8002e7e:	0018      	movs	r0, r3
 8002e80:	f000 fe8c 	bl	8003b9c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8002e84:	46c0      	nop			; (mov r8, r8)
 8002e86:	46bd      	mov	sp, r7
 8002e88:	bd80      	pop	{r7, pc}
 8002e8a:	46c0      	nop			; (mov r8, r8)
 8002e8c:	2000022c 	.word	0x2000022c

08002e90 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002e90:	b580      	push	{r7, lr}
 8002e92:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 8002e94:	46c0      	nop			; (mov r8, r8)
 8002e96:	46bd      	mov	sp, r7
 8002e98:	bd80      	pop	{r7, pc}
	...

08002e9c <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8002e9c:	480d      	ldr	r0, [pc, #52]	; (8002ed4 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8002e9e:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002ea0:	480d      	ldr	r0, [pc, #52]	; (8002ed8 <LoopForever+0x6>)
  ldr r1, =_edata
 8002ea2:	490e      	ldr	r1, [pc, #56]	; (8002edc <LoopForever+0xa>)
  ldr r2, =_sidata
 8002ea4:	4a0e      	ldr	r2, [pc, #56]	; (8002ee0 <LoopForever+0xe>)
  movs r3, #0
 8002ea6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002ea8:	e002      	b.n	8002eb0 <LoopCopyDataInit>

08002eaa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002eaa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002eac:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002eae:	3304      	adds	r3, #4

08002eb0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002eb0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002eb2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002eb4:	d3f9      	bcc.n	8002eaa <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002eb6:	4a0b      	ldr	r2, [pc, #44]	; (8002ee4 <LoopForever+0x12>)
  ldr r4, =_ebss
 8002eb8:	4c0b      	ldr	r4, [pc, #44]	; (8002ee8 <LoopForever+0x16>)
  movs r3, #0
 8002eba:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002ebc:	e001      	b.n	8002ec2 <LoopFillZerobss>

08002ebe <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002ebe:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002ec0:	3204      	adds	r2, #4

08002ec2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002ec2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002ec4:	d3fb      	bcc.n	8002ebe <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8002ec6:	f7ff ffe3 	bl	8002e90 <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 8002eca:	f002 ff9f 	bl	8005e0c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8002ece:	f7ff f88d 	bl	8001fec <main>

08002ed2 <LoopForever>:

LoopForever:
    b LoopForever
 8002ed2:	e7fe      	b.n	8002ed2 <LoopForever>
  ldr   r0, =_estack
 8002ed4:	20001000 	.word	0x20001000
  ldr r0, =_sdata
 8002ed8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002edc:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 8002ee0:	08005f50 	.word	0x08005f50
  ldr r2, =_sbss
 8002ee4:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 8002ee8:	200002c0 	.word	0x200002c0

08002eec <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002eec:	e7fe      	b.n	8002eec <ADC1_IRQHandler>
	...

08002ef0 <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002ef0:	b580      	push	{r7, lr}
 8002ef2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002ef4:	4b07      	ldr	r3, [pc, #28]	; (8002f14 <HAL_Init+0x24>)
 8002ef6:	681a      	ldr	r2, [r3, #0]
 8002ef8:	4b06      	ldr	r3, [pc, #24]	; (8002f14 <HAL_Init+0x24>)
 8002efa:	2110      	movs	r1, #16
 8002efc:	430a      	orrs	r2, r1
 8002efe:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 8002f00:	2000      	movs	r0, #0
 8002f02:	f000 f809 	bl	8002f18 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002f06:	f7ff fe37 	bl	8002b78 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002f0a:	2300      	movs	r3, #0
}
 8002f0c:	0018      	movs	r0, r3
 8002f0e:	46bd      	mov	sp, r7
 8002f10:	bd80      	pop	{r7, pc}
 8002f12:	46c0      	nop			; (mov r8, r8)
 8002f14:	40022000 	.word	0x40022000

08002f18 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002f18:	b590      	push	{r4, r7, lr}
 8002f1a:	b083      	sub	sp, #12
 8002f1c:	af00      	add	r7, sp, #0
 8002f1e:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002f20:	4b14      	ldr	r3, [pc, #80]	; (8002f74 <HAL_InitTick+0x5c>)
 8002f22:	681c      	ldr	r4, [r3, #0]
 8002f24:	4b14      	ldr	r3, [pc, #80]	; (8002f78 <HAL_InitTick+0x60>)
 8002f26:	781b      	ldrb	r3, [r3, #0]
 8002f28:	0019      	movs	r1, r3
 8002f2a:	23fa      	movs	r3, #250	; 0xfa
 8002f2c:	0098      	lsls	r0, r3, #2
 8002f2e:	f7fd f8eb 	bl	8000108 <__udivsi3>
 8002f32:	0003      	movs	r3, r0
 8002f34:	0019      	movs	r1, r3
 8002f36:	0020      	movs	r0, r4
 8002f38:	f7fd f8e6 	bl	8000108 <__udivsi3>
 8002f3c:	0003      	movs	r3, r0
 8002f3e:	0018      	movs	r0, r3
 8002f40:	f000 fd71 	bl	8003a26 <HAL_SYSTICK_Config>
 8002f44:	1e03      	subs	r3, r0, #0
 8002f46:	d001      	beq.n	8002f4c <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8002f48:	2301      	movs	r3, #1
 8002f4a:	e00f      	b.n	8002f6c <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	2b03      	cmp	r3, #3
 8002f50:	d80b      	bhi.n	8002f6a <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002f52:	6879      	ldr	r1, [r7, #4]
 8002f54:	2301      	movs	r3, #1
 8002f56:	425b      	negs	r3, r3
 8002f58:	2200      	movs	r2, #0
 8002f5a:	0018      	movs	r0, r3
 8002f5c:	f000 fd3e 	bl	80039dc <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002f60:	4b06      	ldr	r3, [pc, #24]	; (8002f7c <HAL_InitTick+0x64>)
 8002f62:	687a      	ldr	r2, [r7, #4]
 8002f64:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
 8002f66:	2300      	movs	r3, #0
 8002f68:	e000      	b.n	8002f6c <HAL_InitTick+0x54>
    return HAL_ERROR;
 8002f6a:	2301      	movs	r3, #1
}
 8002f6c:	0018      	movs	r0, r3
 8002f6e:	46bd      	mov	sp, r7
 8002f70:	b003      	add	sp, #12
 8002f72:	bd90      	pop	{r4, r7, pc}
 8002f74:	20000004 	.word	0x20000004
 8002f78:	2000000c 	.word	0x2000000c
 8002f7c:	20000008 	.word	0x20000008

08002f80 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002f80:	b580      	push	{r7, lr}
 8002f82:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002f84:	4b05      	ldr	r3, [pc, #20]	; (8002f9c <HAL_IncTick+0x1c>)
 8002f86:	781b      	ldrb	r3, [r3, #0]
 8002f88:	001a      	movs	r2, r3
 8002f8a:	4b05      	ldr	r3, [pc, #20]	; (8002fa0 <HAL_IncTick+0x20>)
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	18d2      	adds	r2, r2, r3
 8002f90:	4b03      	ldr	r3, [pc, #12]	; (8002fa0 <HAL_IncTick+0x20>)
 8002f92:	601a      	str	r2, [r3, #0]
}
 8002f94:	46c0      	nop			; (mov r8, r8)
 8002f96:	46bd      	mov	sp, r7
 8002f98:	bd80      	pop	{r7, pc}
 8002f9a:	46c0      	nop			; (mov r8, r8)
 8002f9c:	2000000c 	.word	0x2000000c
 8002fa0:	200002bc 	.word	0x200002bc

08002fa4 <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002fa4:	b580      	push	{r7, lr}
 8002fa6:	af00      	add	r7, sp, #0
  return uwTick;
 8002fa8:	4b02      	ldr	r3, [pc, #8]	; (8002fb4 <HAL_GetTick+0x10>)
 8002faa:	681b      	ldr	r3, [r3, #0]
}
 8002fac:	0018      	movs	r0, r3
 8002fae:	46bd      	mov	sp, r7
 8002fb0:	bd80      	pop	{r7, pc}
 8002fb2:	46c0      	nop			; (mov r8, r8)
 8002fb4:	200002bc 	.word	0x200002bc

08002fb8 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002fb8:	b580      	push	{r7, lr}
 8002fba:	b084      	sub	sp, #16
 8002fbc:	af00      	add	r7, sp, #0
 8002fbe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002fc0:	230f      	movs	r3, #15
 8002fc2:	18fb      	adds	r3, r7, r3
 8002fc4:	2200      	movs	r2, #0
 8002fc6:	701a      	strb	r2, [r3, #0]
  uint32_t tmpCFGR1 = 0U;
 8002fc8:	2300      	movs	r3, #0
 8002fca:	60bb      	str	r3, [r7, #8]

  /* Check ADC handle */
  if(hadc == NULL)
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	2b00      	cmp	r3, #0
 8002fd0:	d101      	bne.n	8002fd6 <HAL_ADC_Init+0x1e>
  {
    return HAL_ERROR;
 8002fd2:	2301      	movs	r3, #1
 8002fd4:	e125      	b.n	8003222 <HAL_ADC_Init+0x26a>
  /* Refer to header of this file for more details on clock enabling procedure*/
  
  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  /* - ADC voltage regulator enable                                           */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002fda:	2b00      	cmp	r3, #0
 8002fdc:	d10a      	bne.n	8002ff4 <HAL_ADC_Init+0x3c>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	2200      	movs	r2, #0
 8002fe2:	63da      	str	r2, [r3, #60]	; 0x3c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	2234      	movs	r2, #52	; 0x34
 8002fe8:	2100      	movs	r1, #0
 8002fea:	5499      	strb	r1, [r3, r2]
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	0018      	movs	r0, r3
 8002ff0:	f7ff fde6 	bl	8002bc0 <HAL_ADC_MspInit>
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  /* and if there is no conversion on going on regular group (ADC can be      */ 
  /* enabled anyway, in case of call of this function to update a parameter   */
  /* on the fly).                                                             */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ff8:	2210      	movs	r2, #16
 8002ffa:	4013      	ands	r3, r2
 8002ffc:	d000      	beq.n	8003000 <HAL_ADC_Init+0x48>
 8002ffe:	e103      	b.n	8003208 <HAL_ADC_Init+0x250>
 8003000:	230f      	movs	r3, #15
 8003002:	18fb      	adds	r3, r7, r3
 8003004:	781b      	ldrb	r3, [r3, #0]
 8003006:	2b00      	cmp	r3, #0
 8003008:	d000      	beq.n	800300c <HAL_ADC_Init+0x54>
 800300a:	e0fd      	b.n	8003208 <HAL_ADC_Init+0x250>
      (tmp_hal_status == HAL_OK)                                &&
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	689b      	ldr	r3, [r3, #8]
 8003012:	2204      	movs	r2, #4
 8003014:	4013      	ands	r3, r2
      (tmp_hal_status == HAL_OK)                                &&
 8003016:	d000      	beq.n	800301a <HAL_ADC_Init+0x62>
 8003018:	e0f6      	b.n	8003208 <HAL_ADC_Init+0x250>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800301e:	4a83      	ldr	r2, [pc, #524]	; (800322c <HAL_ADC_Init+0x274>)
 8003020:	4013      	ands	r3, r2
 8003022:	2202      	movs	r2, #2
 8003024:	431a      	orrs	r2, r3
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	639a      	str	r2, [r3, #56]	; 0x38
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - ADC clock mode                                                      */
    /*  - ADC clock prescaler                                                 */
    /*  - ADC resolution                                                      */
    if (ADC_IS_ENABLE(hadc) == RESET)
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	689b      	ldr	r3, [r3, #8]
 8003030:	2203      	movs	r2, #3
 8003032:	4013      	ands	r3, r2
 8003034:	2b01      	cmp	r3, #1
 8003036:	d112      	bne.n	800305e <HAL_ADC_Init+0xa6>
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	2201      	movs	r2, #1
 8003040:	4013      	ands	r3, r2
 8003042:	2b01      	cmp	r3, #1
 8003044:	d009      	beq.n	800305a <HAL_ADC_Init+0xa2>
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	68da      	ldr	r2, [r3, #12]
 800304c:	2380      	movs	r3, #128	; 0x80
 800304e:	021b      	lsls	r3, r3, #8
 8003050:	401a      	ands	r2, r3
 8003052:	2380      	movs	r3, #128	; 0x80
 8003054:	021b      	lsls	r3, r3, #8
 8003056:	429a      	cmp	r2, r3
 8003058:	d101      	bne.n	800305e <HAL_ADC_Init+0xa6>
 800305a:	2301      	movs	r3, #1
 800305c:	e000      	b.n	8003060 <HAL_ADC_Init+0xa8>
 800305e:	2300      	movs	r3, #0
 8003060:	2b00      	cmp	r3, #0
 8003062:	d116      	bne.n	8003092 <HAL_ADC_Init+0xda>
      /* parameters):                                                         */
      /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
      /*     (set into HAL_ADC_ConfigChannel() )                              */
     
      /* Configuration of ADC resolution                                      */
      MODIFY_REG(hadc->Instance->CFGR1,
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	68db      	ldr	r3, [r3, #12]
 800306a:	2218      	movs	r2, #24
 800306c:	4393      	bics	r3, r2
 800306e:	0019      	movs	r1, r3
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	689a      	ldr	r2, [r3, #8]
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	430a      	orrs	r2, r1
 800307a:	60da      	str	r2, [r3, #12]
                 ADC_CFGR1_RES        ,
                 hadc->Init.Resolution );
      
      /* Configuration of ADC clock mode: clock source AHB or HSI with        */
      /* selectable prescaler                                                 */
      MODIFY_REG(hadc->Instance->CFGR2    ,
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	691b      	ldr	r3, [r3, #16]
 8003082:	009b      	lsls	r3, r3, #2
 8003084:	0899      	lsrs	r1, r3, #2
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	685a      	ldr	r2, [r3, #4]
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	430a      	orrs	r2, r1
 8003090:	611a      	str	r2, [r3, #16]
    /*  - external trigger polarity                                           */
    /*  - data alignment                                                      */
    /*  - resolution                                                          */
    /*  - scan direction                                                      */
    /*  - DMA continuous request                                              */
    hadc->Instance->CFGR1 &= ~( ADC_CFGR1_DISCEN  |
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	68da      	ldr	r2, [r3, #12]
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	4964      	ldr	r1, [pc, #400]	; (8003230 <HAL_ADC_Init+0x278>)
 800309e:	400a      	ands	r2, r1
 80030a0:	60da      	str	r2, [r3, #12]
                                ADC_CFGR1_EXTEN   |
                                ADC_CFGR1_ALIGN   |
                                ADC_CFGR1_SCANDIR |
                                ADC_CFGR1_DMACFG   );

    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	7e1b      	ldrb	r3, [r3, #24]
 80030a6:	039a      	lsls	r2, r3, #14
                 ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)     |
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	7e5b      	ldrb	r3, [r3, #25]
 80030ac:	03db      	lsls	r3, r3, #15
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80030ae:	431a      	orrs	r2, r3
                 ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	7e9b      	ldrb	r3, [r3, #26]
 80030b4:	035b      	lsls	r3, r3, #13
                 ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)     |
 80030b6:	431a      	orrs	r2, r3
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                            |
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80030bc:	2b01      	cmp	r3, #1
 80030be:	d002      	beq.n	80030c6 <HAL_ADC_Init+0x10e>
 80030c0:	2380      	movs	r3, #128	; 0x80
 80030c2:	015b      	lsls	r3, r3, #5
 80030c4:	e000      	b.n	80030c8 <HAL_ADC_Init+0x110>
 80030c6:	2300      	movs	r3, #0
                 ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 80030c8:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                             |
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	68db      	ldr	r3, [r3, #12]
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                            |
 80030ce:	431a      	orrs	r2, r3
                 ADC_SCANDIR(hadc->Init.ScanConvMode)                             |
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	691b      	ldr	r3, [r3, #16]
 80030d4:	2b02      	cmp	r3, #2
 80030d6:	d101      	bne.n	80030dc <HAL_ADC_Init+0x124>
 80030d8:	2304      	movs	r3, #4
 80030da:	e000      	b.n	80030de <HAL_ADC_Init+0x126>
 80030dc:	2300      	movs	r3, #0
                 hadc->Init.DataAlign                                             |
 80030de:	431a      	orrs	r2, r3
                 ADC_CFGR1_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests)  );
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	2124      	movs	r1, #36	; 0x24
 80030e4:	5c5b      	ldrb	r3, [r3, r1]
 80030e6:	005b      	lsls	r3, r3, #1
                 ADC_SCANDIR(hadc->Init.ScanConvMode)                             |
 80030e8:	4313      	orrs	r3, r2
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80030ea:	68ba      	ldr	r2, [r7, #8]
 80030ec:	4313      	orrs	r3, r2
 80030ee:	60bb      	str	r3, [r7, #8]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	7edb      	ldrb	r3, [r3, #27]
 80030f4:	2b01      	cmp	r3, #1
 80030f6:	d115      	bne.n	8003124 <HAL_ADC_Init+0x16c>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	7e9b      	ldrb	r3, [r3, #26]
 80030fc:	2b00      	cmp	r3, #0
 80030fe:	d105      	bne.n	800310c <HAL_ADC_Init+0x154>
      {
        /* Enable the selected ADC group regular discontinuous mode */
        tmpCFGR1 |= ADC_CFGR1_DISCEN;
 8003100:	68bb      	ldr	r3, [r7, #8]
 8003102:	2280      	movs	r2, #128	; 0x80
 8003104:	0252      	lsls	r2, r2, #9
 8003106:	4313      	orrs	r3, r2
 8003108:	60bb      	str	r3, [r7, #8]
 800310a:	e00b      	b.n	8003124 <HAL_ADC_Init+0x16c>
        /* ADC regular group discontinuous was intended to be enabled,        */
        /* but ADC regular group modes continuous and sequencer discontinuous */
        /* cannot be enabled simultaneously.                                  */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003110:	2220      	movs	r2, #32
 8003112:	431a      	orrs	r2, r3
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	639a      	str	r2, [r3, #56]	; 0x38
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800311c:	2201      	movs	r2, #1
 800311e:	431a      	orrs	r2, r3
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	63da      	str	r2, [r3, #60]	; 0x3c
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	69da      	ldr	r2, [r3, #28]
 8003128:	23c2      	movs	r3, #194	; 0xc2
 800312a:	33ff      	adds	r3, #255	; 0xff
 800312c:	429a      	cmp	r2, r3
 800312e:	d007      	beq.n	8003140 <HAL_ADC_Init+0x188>
    {
      tmpCFGR1 |= ( hadc->Init.ExternalTrigConv    |
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	69da      	ldr	r2, [r3, #28]
                    hadc->Init.ExternalTrigConvEdge );
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	6a1b      	ldr	r3, [r3, #32]
      tmpCFGR1 |= ( hadc->Init.ExternalTrigConv    |
 8003138:	4313      	orrs	r3, r2
 800313a:	68ba      	ldr	r2, [r7, #8]
 800313c:	4313      	orrs	r3, r2
 800313e:	60bb      	str	r3, [r7, #8]
    }
    
    /* Update ADC configuration register with previous settings */
    hadc->Instance->CFGR1 |= tmpCFGR1;
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	68d9      	ldr	r1, [r3, #12]
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	68ba      	ldr	r2, [r7, #8]
 800314c:	430a      	orrs	r2, r1
 800314e:	60da      	str	r2, [r3, #12]
    /* Management of parameters "SamplingTimeCommon" and "SamplingTime"       */
    /* (obsolete): sampling time set in this function if parameter            */
    /*  "SamplingTimeCommon" has been set to a valid sampling time.           */
    /* Otherwise, sampling time is set into ADC channel initialization        */
    /* structure with parameter "SamplingTime" (obsolete).                    */
    if (IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003154:	2380      	movs	r3, #128	; 0x80
 8003156:	055b      	lsls	r3, r3, #21
 8003158:	429a      	cmp	r2, r3
 800315a:	d01b      	beq.n	8003194 <HAL_ADC_Init+0x1dc>
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003160:	2b01      	cmp	r3, #1
 8003162:	d017      	beq.n	8003194 <HAL_ADC_Init+0x1dc>
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003168:	2b02      	cmp	r3, #2
 800316a:	d013      	beq.n	8003194 <HAL_ADC_Init+0x1dc>
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003170:	2b03      	cmp	r3, #3
 8003172:	d00f      	beq.n	8003194 <HAL_ADC_Init+0x1dc>
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003178:	2b04      	cmp	r3, #4
 800317a:	d00b      	beq.n	8003194 <HAL_ADC_Init+0x1dc>
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003180:	2b05      	cmp	r3, #5
 8003182:	d007      	beq.n	8003194 <HAL_ADC_Init+0x1dc>
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003188:	2b06      	cmp	r3, #6
 800318a:	d003      	beq.n	8003194 <HAL_ADC_Init+0x1dc>
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003190:	2b07      	cmp	r3, #7
 8003192:	d112      	bne.n	80031ba <HAL_ADC_Init+0x202>
    {
      /* Channel sampling time configuration */
      /* Clear the old sample time */
      hadc->Instance->SMPR &= ~(ADC_SMPR_SMP);
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	695a      	ldr	r2, [r3, #20]
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	2107      	movs	r1, #7
 80031a0:	438a      	bics	r2, r1
 80031a2:	615a      	str	r2, [r3, #20]
      
      /* Set the new sample time */
      hadc->Instance->SMPR |= ADC_SMPR_SET(hadc->Init.SamplingTimeCommon);
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	6959      	ldr	r1, [r3, #20]
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80031ae:	2207      	movs	r2, #7
 80031b0:	401a      	ands	r2, r3
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	430a      	orrs	r2, r1
 80031b8:	615a      	str	r2, [r3, #20]
    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CFGR1 (excluding analog watchdog configuration: */
    /* set into separate dedicated function, and bits of ADC resolution set   */
    /* out of temporary variable 'tmpCFGR1').                                 */
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	68db      	ldr	r3, [r3, #12]
 80031c0:	4a1c      	ldr	r2, [pc, #112]	; (8003234 <HAL_ADC_Init+0x27c>)
 80031c2:	4013      	ands	r3, r2
 80031c4:	68ba      	ldr	r2, [r7, #8]
 80031c6:	429a      	cmp	r2, r3
 80031c8:	d10b      	bne.n	80031e2 <HAL_ADC_Init+0x22a>
         == tmpCFGR1)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	2200      	movs	r2, #0
 80031ce:	63da      	str	r2, [r3, #60]	; 0x3c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80031d4:	2203      	movs	r2, #3
 80031d6:	4393      	bics	r3, r2
 80031d8:	2201      	movs	r2, #1
 80031da:	431a      	orrs	r2, r3
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	639a      	str	r2, [r3, #56]	; 0x38
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 80031e0:	e01c      	b.n	800321c <HAL_ADC_Init+0x264>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80031e6:	2212      	movs	r2, #18
 80031e8:	4393      	bics	r3, r2
 80031ea:	2210      	movs	r2, #16
 80031ec:	431a      	orrs	r2, r3
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	639a      	str	r2, [r3, #56]	; 0x38
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80031f6:	2201      	movs	r2, #1
 80031f8:	431a      	orrs	r2, r3
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	63da      	str	r2, [r3, #60]	; 0x3c
      
      tmp_hal_status = HAL_ERROR;
 80031fe:	230f      	movs	r3, #15
 8003200:	18fb      	adds	r3, r7, r3
 8003202:	2201      	movs	r2, #1
 8003204:	701a      	strb	r2, [r3, #0]
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 8003206:	e009      	b.n	800321c <HAL_ADC_Init+0x264>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800320c:	2210      	movs	r2, #16
 800320e:	431a      	orrs	r2, r3
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	639a      	str	r2, [r3, #56]	; 0x38
        
    tmp_hal_status = HAL_ERROR;
 8003214:	230f      	movs	r3, #15
 8003216:	18fb      	adds	r3, r7, r3
 8003218:	2201      	movs	r2, #1
 800321a:	701a      	strb	r2, [r3, #0]
  }
  
  /* Return function status */
  return tmp_hal_status;
 800321c:	230f      	movs	r3, #15
 800321e:	18fb      	adds	r3, r7, r3
 8003220:	781b      	ldrb	r3, [r3, #0]
}
 8003222:	0018      	movs	r0, r3
 8003224:	46bd      	mov	sp, r7
 8003226:	b004      	add	sp, #16
 8003228:	bd80      	pop	{r7, pc}
 800322a:	46c0      	nop			; (mov r8, r8)
 800322c:	fffffefd 	.word	0xfffffefd
 8003230:	fffe0219 	.word	0xfffe0219
 8003234:	833fffe7 	.word	0x833fffe7

08003238 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval None
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8003238:	b590      	push	{r4, r7, lr}
 800323a:	b087      	sub	sp, #28
 800323c:	af00      	add	r7, sp, #0
 800323e:	60f8      	str	r0, [r7, #12]
 8003240:	60b9      	str	r1, [r7, #8]
 8003242:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003244:	2317      	movs	r3, #23
 8003246:	18fb      	adds	r3, r7, r3
 8003248:	2200      	movs	r2, #0
 800324a:	701a      	strb	r2, [r3, #0]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 800324c:	68fb      	ldr	r3, [r7, #12]
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	689b      	ldr	r3, [r3, #8]
 8003252:	2204      	movs	r2, #4
 8003254:	4013      	ands	r3, r2
 8003256:	d15e      	bne.n	8003316 <HAL_ADC_Start_DMA+0xde>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8003258:	68fb      	ldr	r3, [r7, #12]
 800325a:	2234      	movs	r2, #52	; 0x34
 800325c:	5c9b      	ldrb	r3, [r3, r2]
 800325e:	2b01      	cmp	r3, #1
 8003260:	d101      	bne.n	8003266 <HAL_ADC_Start_DMA+0x2e>
 8003262:	2302      	movs	r3, #2
 8003264:	e05e      	b.n	8003324 <HAL_ADC_Start_DMA+0xec>
 8003266:	68fb      	ldr	r3, [r7, #12]
 8003268:	2234      	movs	r2, #52	; 0x34
 800326a:	2101      	movs	r1, #1
 800326c:	5499      	strb	r1, [r3, r2]

    /* Enable the ADC peripheral */
    /* If low power mode AutoPowerOff is enabled, power-on/off phases are       */
    /* performed automatically by hardware.                                     */
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 800326e:	68fb      	ldr	r3, [r7, #12]
 8003270:	7e5b      	ldrb	r3, [r3, #25]
 8003272:	2b01      	cmp	r3, #1
 8003274:	d007      	beq.n	8003286 <HAL_ADC_Start_DMA+0x4e>
    {
      tmp_hal_status = ADC_Enable(hadc);
 8003276:	2317      	movs	r3, #23
 8003278:	18fc      	adds	r4, r7, r3
 800327a:	68fb      	ldr	r3, [r7, #12]
 800327c:	0018      	movs	r0, r3
 800327e:	f000 f963 	bl	8003548 <ADC_Enable>
 8003282:	0003      	movs	r3, r0
 8003284:	7023      	strb	r3, [r4, #0]
    }
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8003286:	2317      	movs	r3, #23
 8003288:	18fb      	adds	r3, r7, r3
 800328a:	781b      	ldrb	r3, [r3, #0]
 800328c:	2b00      	cmp	r3, #0
 800328e:	d146      	bne.n	800331e <HAL_ADC_Start_DMA+0xe6>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8003290:	68fb      	ldr	r3, [r7, #12]
 8003292:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003294:	4a25      	ldr	r2, [pc, #148]	; (800332c <HAL_ADC_Start_DMA+0xf4>)
 8003296:	4013      	ands	r3, r2
 8003298:	2280      	movs	r2, #128	; 0x80
 800329a:	0052      	lsls	r2, r2, #1
 800329c:	431a      	orrs	r2, r3
 800329e:	68fb      	ldr	r3, [r7, #12]
 80032a0:	639a      	str	r2, [r3, #56]	; 0x38
                        HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR | HAL_ADC_STATE_REG_EOSMP,
                        HAL_ADC_STATE_REG_BUSY);
      
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80032a2:	68fb      	ldr	r3, [r7, #12]
 80032a4:	2200      	movs	r2, #0
 80032a6:	63da      	str	r2, [r3, #60]	; 0x3c
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 80032a8:	68fb      	ldr	r3, [r7, #12]
 80032aa:	2234      	movs	r2, #52	; 0x34
 80032ac:	2100      	movs	r1, #0
 80032ae:	5499      	strb	r1, [r3, r2]

      /* Set the DMA transfer complete callback */
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80032b0:	68fb      	ldr	r3, [r7, #12]
 80032b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032b4:	4a1e      	ldr	r2, [pc, #120]	; (8003330 <HAL_ADC_Start_DMA+0xf8>)
 80032b6:	629a      	str	r2, [r3, #40]	; 0x28

      /* Set the DMA half transfer complete callback */
      hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 80032b8:	68fb      	ldr	r3, [r7, #12]
 80032ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032bc:	4a1d      	ldr	r2, [pc, #116]	; (8003334 <HAL_ADC_Start_DMA+0xfc>)
 80032be:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the DMA error callback */
      hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 80032c0:	68fb      	ldr	r3, [r7, #12]
 80032c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032c4:	4a1c      	ldr	r2, [pc, #112]	; (8003338 <HAL_ADC_Start_DMA+0x100>)
 80032c6:	631a      	str	r2, [r3, #48]	; 0x30
      /* start (in case of SW start):                                         */
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 80032c8:	68fb      	ldr	r3, [r7, #12]
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	221c      	movs	r2, #28
 80032ce:	601a      	str	r2, [r3, #0]
      
      /* Enable ADC overrun interrupt */
      __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 80032d0:	68fb      	ldr	r3, [r7, #12]
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	685a      	ldr	r2, [r3, #4]
 80032d6:	68fb      	ldr	r3, [r7, #12]
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	2110      	movs	r1, #16
 80032dc:	430a      	orrs	r2, r1
 80032de:	605a      	str	r2, [r3, #4]
      
      /* Enable ADC DMA mode */
      hadc->Instance->CFGR1 |= ADC_CFGR1_DMAEN;
 80032e0:	68fb      	ldr	r3, [r7, #12]
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	68da      	ldr	r2, [r3, #12]
 80032e6:	68fb      	ldr	r3, [r7, #12]
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	2101      	movs	r1, #1
 80032ec:	430a      	orrs	r2, r1
 80032ee:	60da      	str	r2, [r3, #12]
      
      /* Start the DMA channel */
      HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 80032f0:	68fb      	ldr	r3, [r7, #12]
 80032f2:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80032f4:	68fb      	ldr	r3, [r7, #12]
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	3340      	adds	r3, #64	; 0x40
 80032fa:	0019      	movs	r1, r3
 80032fc:	68ba      	ldr	r2, [r7, #8]
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	f000 fbe6 	bl	8003ad0 <HAL_DMA_Start_IT>
           
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      hadc->Instance->CR |= ADC_CR_ADSTART;
 8003304:	68fb      	ldr	r3, [r7, #12]
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	689a      	ldr	r2, [r3, #8]
 800330a:	68fb      	ldr	r3, [r7, #12]
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	2104      	movs	r1, #4
 8003310:	430a      	orrs	r2, r1
 8003312:	609a      	str	r2, [r3, #8]
 8003314:	e003      	b.n	800331e <HAL_ADC_Start_DMA+0xe6>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8003316:	2317      	movs	r3, #23
 8003318:	18fb      	adds	r3, r7, r3
 800331a:	2202      	movs	r2, #2
 800331c:	701a      	strb	r2, [r3, #0]
  }
    
  /* Return function status */
  return tmp_hal_status;
 800331e:	2317      	movs	r3, #23
 8003320:	18fb      	adds	r3, r7, r3
 8003322:	781b      	ldrb	r3, [r3, #0]
}
 8003324:	0018      	movs	r0, r3
 8003326:	46bd      	mov	sp, r7
 8003328:	b007      	add	sp, #28
 800332a:	bd90      	pop	{r4, r7, pc}
 800332c:	fffff0fe 	.word	0xfffff0fe
 8003330:	08003641 	.word	0x08003641
 8003334:	080036f5 	.word	0x080036f5
 8003338:	08003713 	.word	0x08003713

0800333c <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non blocking mode 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 800333c:	b580      	push	{r7, lr}
 800333e:	b082      	sub	sp, #8
 8003340:	af00      	add	r7, sp, #0
 8003342:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8003344:	46c0      	nop			; (mov r8, r8)
 8003346:	46bd      	mov	sp, r7
 8003348:	b002      	add	sp, #8
 800334a:	bd80      	pop	{r7, pc}

0800334c <HAL_ADC_ErrorCallback>:
  *        (ADC conversion with interruption or transfer by DMA)
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 800334c:	b580      	push	{r7, lr}
 800334e:	b082      	sub	sp, #8
 8003350:	af00      	add	r7, sp, #0
 8003352:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8003354:	46c0      	nop			; (mov r8, r8)
 8003356:	46bd      	mov	sp, r7
 8003358:	b002      	add	sp, #8
 800335a:	bd80      	pop	{r7, pc}

0800335c <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 800335c:	b580      	push	{r7, lr}
 800335e:	b084      	sub	sp, #16
 8003360:	af00      	add	r7, sp, #0
 8003362:	6078      	str	r0, [r7, #4]
 8003364:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003366:	230f      	movs	r3, #15
 8003368:	18fb      	adds	r3, r7, r3
 800336a:	2200      	movs	r2, #0
 800336c:	701a      	strb	r2, [r3, #0]
  __IO uint32_t wait_loop_index = 0U;
 800336e:	2300      	movs	r3, #0
 8003370:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_RANK(sConfig->Rank));
  
  if (! IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003376:	2380      	movs	r3, #128	; 0x80
 8003378:	055b      	lsls	r3, r3, #21
 800337a:	429a      	cmp	r2, r3
 800337c:	d011      	beq.n	80033a2 <HAL_ADC_ConfigChannel+0x46>
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003382:	2b01      	cmp	r3, #1
 8003384:	d00d      	beq.n	80033a2 <HAL_ADC_ConfigChannel+0x46>
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800338a:	2b02      	cmp	r3, #2
 800338c:	d009      	beq.n	80033a2 <HAL_ADC_ConfigChannel+0x46>
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003392:	2b03      	cmp	r3, #3
 8003394:	d005      	beq.n	80033a2 <HAL_ADC_ConfigChannel+0x46>
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800339a:	2b04      	cmp	r3, #4
 800339c:	d001      	beq.n	80033a2 <HAL_ADC_ConfigChannel+0x46>
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  {
    assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	2234      	movs	r2, #52	; 0x34
 80033a6:	5c9b      	ldrb	r3, [r3, r2]
 80033a8:	2b01      	cmp	r3, #1
 80033aa:	d101      	bne.n	80033b0 <HAL_ADC_ConfigChannel+0x54>
 80033ac:	2302      	movs	r3, #2
 80033ae:	e0bb      	b.n	8003528 <HAL_ADC_ConfigChannel+0x1cc>
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	2234      	movs	r2, #52	; 0x34
 80033b4:	2101      	movs	r1, #1
 80033b6:	5499      	strb	r1, [r3, r2]
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel sampling time                                                 */
  /*  - Management of internal measurement channels: VrefInt/TempSensor/Vbat  */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	689b      	ldr	r3, [r3, #8]
 80033be:	2204      	movs	r2, #4
 80033c0:	4013      	ands	r3, r2
 80033c2:	d000      	beq.n	80033c6 <HAL_ADC_ConfigChannel+0x6a>
 80033c4:	e09f      	b.n	8003506 <HAL_ADC_ConfigChannel+0x1aa>
  {
    /* Configure channel: depending on rank setting, add it or remove it from */
    /* ADC conversion sequencer.                                              */
    if (sConfig->Rank != ADC_RANK_NONE)
 80033c6:	683b      	ldr	r3, [r7, #0]
 80033c8:	685b      	ldr	r3, [r3, #4]
 80033ca:	4a59      	ldr	r2, [pc, #356]	; (8003530 <HAL_ADC_ConfigChannel+0x1d4>)
 80033cc:	4293      	cmp	r3, r2
 80033ce:	d100      	bne.n	80033d2 <HAL_ADC_ConfigChannel+0x76>
 80033d0:	e077      	b.n	80034c2 <HAL_ADC_ConfigChannel+0x166>
    {
      /* Regular sequence configuration */
      /* Set the channel selection register from the selected channel */
      hadc->Instance->CHSELR |= ADC_CHSELR_CHANNEL(sConfig->Channel);
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	6a99      	ldr	r1, [r3, #40]	; 0x28
 80033d8:	683b      	ldr	r3, [r7, #0]
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	2201      	movs	r2, #1
 80033de:	409a      	lsls	r2, r3
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	430a      	orrs	r2, r1
 80033e6:	629a      	str	r2, [r3, #40]	; 0x28
      /* Channel sampling time configuration */
      /* Management of parameters "SamplingTimeCommon" and "SamplingTime"     */
      /* (obsolete): sampling time set in this function with                  */
      /* parameter "SamplingTime" (obsolete) only if not already set into     */
      /* ADC initialization structure with parameter "SamplingTimeCommon".    */
      if (! IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80033ec:	2380      	movs	r3, #128	; 0x80
 80033ee:	055b      	lsls	r3, r3, #21
 80033f0:	429a      	cmp	r2, r3
 80033f2:	d037      	beq.n	8003464 <HAL_ADC_ConfigChannel+0x108>
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80033f8:	2b01      	cmp	r3, #1
 80033fa:	d033      	beq.n	8003464 <HAL_ADC_ConfigChannel+0x108>
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003400:	2b02      	cmp	r3, #2
 8003402:	d02f      	beq.n	8003464 <HAL_ADC_ConfigChannel+0x108>
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003408:	2b03      	cmp	r3, #3
 800340a:	d02b      	beq.n	8003464 <HAL_ADC_ConfigChannel+0x108>
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003410:	2b04      	cmp	r3, #4
 8003412:	d027      	beq.n	8003464 <HAL_ADC_ConfigChannel+0x108>
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003418:	2b05      	cmp	r3, #5
 800341a:	d023      	beq.n	8003464 <HAL_ADC_ConfigChannel+0x108>
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003420:	2b06      	cmp	r3, #6
 8003422:	d01f      	beq.n	8003464 <HAL_ADC_ConfigChannel+0x108>
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003428:	2b07      	cmp	r3, #7
 800342a:	d01b      	beq.n	8003464 <HAL_ADC_ConfigChannel+0x108>
      {
        /* Modify sampling time if needed (not needed in case of reoccurrence */
        /* for several channels programmed consecutively into the sequencer)  */
        if (sConfig->SamplingTime != ADC_GET_SAMPLINGTIME(hadc))
 800342c:	683b      	ldr	r3, [r7, #0]
 800342e:	689a      	ldr	r2, [r3, #8]
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	695b      	ldr	r3, [r3, #20]
 8003436:	2107      	movs	r1, #7
 8003438:	400b      	ands	r3, r1
 800343a:	429a      	cmp	r2, r3
 800343c:	d012      	beq.n	8003464 <HAL_ADC_ConfigChannel+0x108>
        {
          /* Channel sampling time configuration */
          /* Clear the old sample time */
          hadc->Instance->SMPR &= ~(ADC_SMPR_SMP);
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	695a      	ldr	r2, [r3, #20]
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	2107      	movs	r1, #7
 800344a:	438a      	bics	r2, r1
 800344c:	615a      	str	r2, [r3, #20]
          
          /* Set the new sample time */
          hadc->Instance->SMPR |= ADC_SMPR_SET(sConfig->SamplingTime);
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	6959      	ldr	r1, [r3, #20]
 8003454:	683b      	ldr	r3, [r7, #0]
 8003456:	689b      	ldr	r3, [r3, #8]
 8003458:	2207      	movs	r2, #7
 800345a:	401a      	ands	r2, r3
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	430a      	orrs	r2, r1
 8003462:	615a      	str	r2, [r3, #20]
      /* internal measurement paths enable: If internal channel selected,     */
      /* enable dedicated internal buffers and path.                          */
      /* Note: these internal measurement paths can be disabled using         */
      /*       HAL_ADC_DeInit() or removing the channel from sequencer with   */
      /*       channel configuration parameter "Rank".                        */
      if(ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8003464:	683b      	ldr	r3, [r7, #0]
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	2b10      	cmp	r3, #16
 800346a:	d003      	beq.n	8003474 <HAL_ADC_ConfigChannel+0x118>
 800346c:	683b      	ldr	r3, [r7, #0]
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	2b11      	cmp	r3, #17
 8003472:	d152      	bne.n	800351a <HAL_ADC_ConfigChannel+0x1be>
      {
        /* If Channel_16 is selected, enable Temp. sensor measurement path. */
        /* If Channel_17 is selected, enable VREFINT measurement path. */
        /* If Channel_18 is selected, enable VBAT measurement path. */
        ADC->CCR |= ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 8003474:	4b2f      	ldr	r3, [pc, #188]	; (8003534 <HAL_ADC_ConfigChannel+0x1d8>)
 8003476:	6819      	ldr	r1, [r3, #0]
 8003478:	683b      	ldr	r3, [r7, #0]
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	2b10      	cmp	r3, #16
 800347e:	d102      	bne.n	8003486 <HAL_ADC_ConfigChannel+0x12a>
 8003480:	2380      	movs	r3, #128	; 0x80
 8003482:	041b      	lsls	r3, r3, #16
 8003484:	e001      	b.n	800348a <HAL_ADC_ConfigChannel+0x12e>
 8003486:	2380      	movs	r3, #128	; 0x80
 8003488:	03db      	lsls	r3, r3, #15
 800348a:	4a2a      	ldr	r2, [pc, #168]	; (8003534 <HAL_ADC_ConfigChannel+0x1d8>)
 800348c:	430b      	orrs	r3, r1
 800348e:	6013      	str	r3, [r2, #0]
        
        /* If Temp. sensor is selected, wait for stabilization delay */
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8003490:	683b      	ldr	r3, [r7, #0]
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	2b10      	cmp	r3, #16
 8003496:	d140      	bne.n	800351a <HAL_ADC_ConfigChannel+0x1be>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8003498:	4b27      	ldr	r3, [pc, #156]	; (8003538 <HAL_ADC_ConfigChannel+0x1dc>)
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	4927      	ldr	r1, [pc, #156]	; (800353c <HAL_ADC_ConfigChannel+0x1e0>)
 800349e:	0018      	movs	r0, r3
 80034a0:	f7fc fe32 	bl	8000108 <__udivsi3>
 80034a4:	0003      	movs	r3, r0
 80034a6:	001a      	movs	r2, r3
 80034a8:	0013      	movs	r3, r2
 80034aa:	009b      	lsls	r3, r3, #2
 80034ac:	189b      	adds	r3, r3, r2
 80034ae:	005b      	lsls	r3, r3, #1
 80034b0:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80034b2:	e002      	b.n	80034ba <HAL_ADC_ConfigChannel+0x15e>
          {
            wait_loop_index--;
 80034b4:	68bb      	ldr	r3, [r7, #8]
 80034b6:	3b01      	subs	r3, #1
 80034b8:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80034ba:	68bb      	ldr	r3, [r7, #8]
 80034bc:	2b00      	cmp	r3, #0
 80034be:	d1f9      	bne.n	80034b4 <HAL_ADC_ConfigChannel+0x158>
 80034c0:	e02b      	b.n	800351a <HAL_ADC_ConfigChannel+0x1be>
    }
    else
    {
      /* Regular sequence configuration */
      /* Reset the channel selection register from the selected channel */
      hadc->Instance->CHSELR &= ~ADC_CHSELR_CHANNEL(sConfig->Channel);
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80034c8:	683b      	ldr	r3, [r7, #0]
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	2101      	movs	r1, #1
 80034ce:	4099      	lsls	r1, r3
 80034d0:	000b      	movs	r3, r1
 80034d2:	43d9      	mvns	r1, r3
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	400a      	ands	r2, r1
 80034da:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* Management of internal measurement channels: VrefInt/TempSensor/Vbat */
      /* internal measurement paths disable: If internal channel selected,    */
      /* disable dedicated internal buffers and path.                         */
      if(ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 80034dc:	683b      	ldr	r3, [r7, #0]
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	2b10      	cmp	r3, #16
 80034e2:	d003      	beq.n	80034ec <HAL_ADC_ConfigChannel+0x190>
 80034e4:	683b      	ldr	r3, [r7, #0]
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	2b11      	cmp	r3, #17
 80034ea:	d116      	bne.n	800351a <HAL_ADC_ConfigChannel+0x1be>
      {
        /* If Channel_16 is selected, disable Temp. sensor measurement path. */
        /* If Channel_17 is selected, disable VREFINT measurement path. */
        /* If Channel_18 is selected, disable VBAT measurement path. */
        ADC->CCR &= ~ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 80034ec:	4b11      	ldr	r3, [pc, #68]	; (8003534 <HAL_ADC_ConfigChannel+0x1d8>)
 80034ee:	6819      	ldr	r1, [r3, #0]
 80034f0:	683b      	ldr	r3, [r7, #0]
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	2b10      	cmp	r3, #16
 80034f6:	d101      	bne.n	80034fc <HAL_ADC_ConfigChannel+0x1a0>
 80034f8:	4a11      	ldr	r2, [pc, #68]	; (8003540 <HAL_ADC_ConfigChannel+0x1e4>)
 80034fa:	e000      	b.n	80034fe <HAL_ADC_ConfigChannel+0x1a2>
 80034fc:	4a11      	ldr	r2, [pc, #68]	; (8003544 <HAL_ADC_ConfigChannel+0x1e8>)
 80034fe:	4b0d      	ldr	r3, [pc, #52]	; (8003534 <HAL_ADC_ConfigChannel+0x1d8>)
 8003500:	400a      	ands	r2, r1
 8003502:	601a      	str	r2, [r3, #0]
 8003504:	e009      	b.n	800351a <HAL_ADC_ConfigChannel+0x1be>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800350a:	2220      	movs	r2, #32
 800350c:	431a      	orrs	r2, r3
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	639a      	str	r2, [r3, #56]	; 0x38
    
    tmp_hal_status = HAL_ERROR;
 8003512:	230f      	movs	r3, #15
 8003514:	18fb      	adds	r3, r7, r3
 8003516:	2201      	movs	r2, #1
 8003518:	701a      	strb	r2, [r3, #0]
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	2234      	movs	r2, #52	; 0x34
 800351e:	2100      	movs	r1, #0
 8003520:	5499      	strb	r1, [r3, r2]
  
  /* Return function status */
  return tmp_hal_status;
 8003522:	230f      	movs	r3, #15
 8003524:	18fb      	adds	r3, r7, r3
 8003526:	781b      	ldrb	r3, [r3, #0]
}
 8003528:	0018      	movs	r0, r3
 800352a:	46bd      	mov	sp, r7
 800352c:	b004      	add	sp, #16
 800352e:	bd80      	pop	{r7, pc}
 8003530:	00001001 	.word	0x00001001
 8003534:	40012708 	.word	0x40012708
 8003538:	20000004 	.word	0x20000004
 800353c:	000f4240 	.word	0x000f4240
 8003540:	ff7fffff 	.word	0xff7fffff
 8003544:	ffbfffff 	.word	0xffbfffff

08003548 <ADC_Enable>:
  *         "if (hadc->Init.LowPowerAutoPowerOff != ENABLE)".
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8003548:	b580      	push	{r7, lr}
 800354a:	b084      	sub	sp, #16
 800354c:	af00      	add	r7, sp, #0
 800354e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003550:	2300      	movs	r3, #0
 8003552:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 8003554:	2300      	movs	r3, #0
 8003556:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	689b      	ldr	r3, [r3, #8]
 800355e:	2203      	movs	r2, #3
 8003560:	4013      	ands	r3, r2
 8003562:	2b01      	cmp	r3, #1
 8003564:	d112      	bne.n	800358c <ADC_Enable+0x44>
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	2201      	movs	r2, #1
 800356e:	4013      	ands	r3, r2
 8003570:	2b01      	cmp	r3, #1
 8003572:	d009      	beq.n	8003588 <ADC_Enable+0x40>
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	68da      	ldr	r2, [r3, #12]
 800357a:	2380      	movs	r3, #128	; 0x80
 800357c:	021b      	lsls	r3, r3, #8
 800357e:	401a      	ands	r2, r3
 8003580:	2380      	movs	r3, #128	; 0x80
 8003582:	021b      	lsls	r3, r3, #8
 8003584:	429a      	cmp	r2, r3
 8003586:	d101      	bne.n	800358c <ADC_Enable+0x44>
 8003588:	2301      	movs	r3, #1
 800358a:	e000      	b.n	800358e <ADC_Enable+0x46>
 800358c:	2300      	movs	r3, #0
 800358e:	2b00      	cmp	r3, #0
 8003590:	d14b      	bne.n	800362a <ADC_Enable+0xe2>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	689b      	ldr	r3, [r3, #8]
 8003598:	4a26      	ldr	r2, [pc, #152]	; (8003634 <ADC_Enable+0xec>)
 800359a:	4013      	ands	r3, r2
 800359c:	d00d      	beq.n	80035ba <ADC_Enable+0x72>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80035a2:	2210      	movs	r2, #16
 80035a4:	431a      	orrs	r2, r3
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	639a      	str	r2, [r3, #56]	; 0x38
    
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80035ae:	2201      	movs	r2, #1
 80035b0:	431a      	orrs	r2, r3
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	63da      	str	r2, [r3, #60]	; 0x3c
      
      return HAL_ERROR;
 80035b6:	2301      	movs	r3, #1
 80035b8:	e038      	b.n	800362c <ADC_Enable+0xe4>
    }
    
    /* Enable the ADC peripheral */
    __HAL_ADC_ENABLE(hadc);
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	689a      	ldr	r2, [r3, #8]
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	2101      	movs	r1, #1
 80035c6:	430a      	orrs	r2, r1
 80035c8:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80035ca:	4b1b      	ldr	r3, [pc, #108]	; (8003638 <ADC_Enable+0xf0>)
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	491b      	ldr	r1, [pc, #108]	; (800363c <ADC_Enable+0xf4>)
 80035d0:	0018      	movs	r0, r3
 80035d2:	f7fc fd99 	bl	8000108 <__udivsi3>
 80035d6:	0003      	movs	r3, r0
 80035d8:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 80035da:	e002      	b.n	80035e2 <ADC_Enable+0x9a>
    {
      wait_loop_index--;
 80035dc:	68bb      	ldr	r3, [r7, #8]
 80035de:	3b01      	subs	r3, #1
 80035e0:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 80035e2:	68bb      	ldr	r3, [r7, #8]
 80035e4:	2b00      	cmp	r3, #0
 80035e6:	d1f9      	bne.n	80035dc <ADC_Enable+0x94>
    }

    /* Get tick count */
    tickstart = HAL_GetTick();
 80035e8:	f7ff fcdc 	bl	8002fa4 <HAL_GetTick>
 80035ec:	0003      	movs	r3, r0
 80035ee:	60fb      	str	r3, [r7, #12]
    
    /* Wait for ADC effectively enabled */
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 80035f0:	e014      	b.n	800361c <ADC_Enable+0xd4>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80035f2:	f7ff fcd7 	bl	8002fa4 <HAL_GetTick>
 80035f6:	0002      	movs	r2, r0
 80035f8:	68fb      	ldr	r3, [r7, #12]
 80035fa:	1ad3      	subs	r3, r2, r3
 80035fc:	2b02      	cmp	r3, #2
 80035fe:	d90d      	bls.n	800361c <ADC_Enable+0xd4>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003604:	2210      	movs	r2, #16
 8003606:	431a      	orrs	r2, r3
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	639a      	str	r2, [r3, #56]	; 0x38
      
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003610:	2201      	movs	r2, #1
 8003612:	431a      	orrs	r2, r3
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	63da      	str	r2, [r3, #60]	; 0x3c
      
        return HAL_ERROR;
 8003618:	2301      	movs	r3, #1
 800361a:	e007      	b.n	800362c <ADC_Enable+0xe4>
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	2201      	movs	r2, #1
 8003624:	4013      	ands	r3, r2
 8003626:	2b01      	cmp	r3, #1
 8003628:	d1e3      	bne.n	80035f2 <ADC_Enable+0xaa>
    }   
    
  }
   
  /* Return HAL status */
  return HAL_OK;
 800362a:	2300      	movs	r3, #0
}
 800362c:	0018      	movs	r0, r3
 800362e:	46bd      	mov	sp, r7
 8003630:	b004      	add	sp, #16
 8003632:	bd80      	pop	{r7, pc}
 8003634:	80000017 	.word	0x80000017
 8003638:	20000004 	.word	0x20000004
 800363c:	000f4240 	.word	0x000f4240

08003640 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback. 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8003640:	b580      	push	{r7, lr}
 8003642:	b084      	sub	sp, #16
 8003644:	af00      	add	r7, sp, #0
 8003646:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800364c:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 800364e:	68fb      	ldr	r3, [r7, #12]
 8003650:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003652:	2250      	movs	r2, #80	; 0x50
 8003654:	4013      	ands	r3, r2
 8003656:	d140      	bne.n	80036da <ADC_DMAConvCplt+0x9a>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 8003658:	68fb      	ldr	r3, [r7, #12]
 800365a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800365c:	2280      	movs	r2, #128	; 0x80
 800365e:	0092      	lsls	r2, r2, #2
 8003660:	431a      	orrs	r2, r3
 8003662:	68fb      	ldr	r3, [r7, #12]
 8003664:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going.        */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8003666:	68fb      	ldr	r3, [r7, #12]
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	68da      	ldr	r2, [r3, #12]
 800366c:	23c0      	movs	r3, #192	; 0xc0
 800366e:	011b      	lsls	r3, r3, #4
 8003670:	4013      	ands	r3, r2
 8003672:	d12d      	bne.n	80036d0 <ADC_DMAConvCplt+0x90>
       (hadc->Init.ContinuousConvMode == DISABLE)   )
 8003674:	68fb      	ldr	r3, [r7, #12]
 8003676:	7e9b      	ldrb	r3, [r3, #26]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8003678:	2b00      	cmp	r3, #0
 800367a:	d129      	bne.n	80036d0 <ADC_DMAConvCplt+0x90>
    {
      /* If End of Sequence is reached, disable interrupts */
      if( __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) )
 800367c:	68fb      	ldr	r3, [r7, #12]
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	2208      	movs	r2, #8
 8003684:	4013      	ands	r3, r2
 8003686:	2b08      	cmp	r3, #8
 8003688:	d122      	bne.n	80036d0 <ADC_DMAConvCplt+0x90>
      {
        /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit           */
        /* ADSTART==0 (no conversion on going)                                */
        if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 800368a:	68fb      	ldr	r3, [r7, #12]
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	689b      	ldr	r3, [r3, #8]
 8003690:	2204      	movs	r2, #4
 8003692:	4013      	ands	r3, r2
 8003694:	d110      	bne.n	80036b8 <ADC_DMAConvCplt+0x78>
        {
          /* Disable ADC end of single conversion interrupt on group regular */
          /* Note: Overrun interrupt was enabled with EOC interrupt in        */
          /* HAL_Start_IT(), but is not disabled here because can be used     */
          /* by overrun IRQ process below.                                    */
          __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8003696:	68fb      	ldr	r3, [r7, #12]
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	685a      	ldr	r2, [r3, #4]
 800369c:	68fb      	ldr	r3, [r7, #12]
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	210c      	movs	r1, #12
 80036a2:	438a      	bics	r2, r1
 80036a4:	605a      	str	r2, [r3, #4]
          
          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 80036a6:	68fb      	ldr	r3, [r7, #12]
 80036a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80036aa:	4a11      	ldr	r2, [pc, #68]	; (80036f0 <ADC_DMAConvCplt+0xb0>)
 80036ac:	4013      	ands	r3, r2
 80036ae:	2201      	movs	r2, #1
 80036b0:	431a      	orrs	r2, r3
 80036b2:	68fb      	ldr	r3, [r7, #12]
 80036b4:	639a      	str	r2, [r3, #56]	; 0x38
 80036b6:	e00b      	b.n	80036d0 <ADC_DMAConvCplt+0x90>
                            HAL_ADC_STATE_READY);
        }
        else
        {
          /* Change ADC state to error state */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80036b8:	68fb      	ldr	r3, [r7, #12]
 80036ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80036bc:	2220      	movs	r2, #32
 80036be:	431a      	orrs	r2, r3
 80036c0:	68fb      	ldr	r3, [r7, #12]
 80036c2:	639a      	str	r2, [r3, #56]	; 0x38
          
          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80036c4:	68fb      	ldr	r3, [r7, #12]
 80036c6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80036c8:	2201      	movs	r2, #1
 80036ca:	431a      	orrs	r2, r3
 80036cc:	68fb      	ldr	r3, [r7, #12]
 80036ce:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80036d0:	68fb      	ldr	r3, [r7, #12]
 80036d2:	0018      	movs	r0, r3
 80036d4:	f7ff fa32 	bl	8002b3c <HAL_ADC_ConvCpltCallback>
  {
    /* Call DMA error callback */
    hadc->DMA_Handle->XferErrorCallback(hdma);
  }

}
 80036d8:	e005      	b.n	80036e6 <ADC_DMAConvCplt+0xa6>
    hadc->DMA_Handle->XferErrorCallback(hdma);
 80036da:	68fb      	ldr	r3, [r7, #12]
 80036dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036e0:	687a      	ldr	r2, [r7, #4]
 80036e2:	0010      	movs	r0, r2
 80036e4:	4798      	blx	r3
}
 80036e6:	46c0      	nop			; (mov r8, r8)
 80036e8:	46bd      	mov	sp, r7
 80036ea:	b004      	add	sp, #16
 80036ec:	bd80      	pop	{r7, pc}
 80036ee:	46c0      	nop			; (mov r8, r8)
 80036f0:	fffffefe 	.word	0xfffffefe

080036f4 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback. 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 80036f4:	b580      	push	{r7, lr}
 80036f6:	b084      	sub	sp, #16
 80036f8:	af00      	add	r7, sp, #0
 80036fa:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003700:	60fb      	str	r3, [r7, #12]
  
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc); 
 8003702:	68fb      	ldr	r3, [r7, #12]
 8003704:	0018      	movs	r0, r3
 8003706:	f7ff fe19 	bl	800333c <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800370a:	46c0      	nop			; (mov r8, r8)
 800370c:	46bd      	mov	sp, r7
 800370e:	b004      	add	sp, #16
 8003710:	bd80      	pop	{r7, pc}

08003712 <ADC_DMAError>:
  * @brief  DMA error callback 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8003712:	b580      	push	{r7, lr}
 8003714:	b084      	sub	sp, #16
 8003716:	af00      	add	r7, sp, #0
 8003718:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800371e:	60fb      	str	r3, [r7, #12]
  
  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8003720:	68fb      	ldr	r3, [r7, #12]
 8003722:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003724:	2240      	movs	r2, #64	; 0x40
 8003726:	431a      	orrs	r2, r3
 8003728:	68fb      	ldr	r3, [r7, #12]
 800372a:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 800372c:	68fb      	ldr	r3, [r7, #12]
 800372e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003730:	2204      	movs	r2, #4
 8003732:	431a      	orrs	r2, r3
 8003734:	68fb      	ldr	r3, [r7, #12]
 8003736:	63da      	str	r2, [r3, #60]	; 0x3c
  
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc); 
 8003738:	68fb      	ldr	r3, [r7, #12]
 800373a:	0018      	movs	r0, r3
 800373c:	f7ff fe06 	bl	800334c <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8003740:	46c0      	nop			; (mov r8, r8)
 8003742:	46bd      	mov	sp, r7
 8003744:	b004      	add	sp, #16
 8003746:	bd80      	pop	{r7, pc}

08003748 <HAL_ADCEx_Calibration_Start>:
  *         HAL_ADC_GetValue() (value on 7 bits: from DR[6;0]).
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef* hadc)
{
 8003748:	b580      	push	{r7, lr}
 800374a:	b086      	sub	sp, #24
 800374c:	af00      	add	r7, sp, #0
 800374e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003750:	2317      	movs	r3, #23
 8003752:	18fb      	adds	r3, r7, r3
 8003754:	2200      	movs	r2, #0
 8003756:	701a      	strb	r2, [r3, #0]
  uint32_t tickstart = 0U;
 8003758:	2300      	movs	r3, #0
 800375a:	613b      	str	r3, [r7, #16]
  uint32_t backup_setting_adc_dma_transfer = 0; /* Note: Variable not declared as volatile because register read is already declared as volatile */
 800375c:	2300      	movs	r3, #0
 800375e:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	2234      	movs	r2, #52	; 0x34
 8003764:	5c9b      	ldrb	r3, [r3, r2]
 8003766:	2b01      	cmp	r3, #1
 8003768:	d101      	bne.n	800376e <HAL_ADCEx_Calibration_Start+0x26>
 800376a:	2302      	movs	r3, #2
 800376c:	e084      	b.n	8003878 <HAL_ADCEx_Calibration_Start+0x130>
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	2234      	movs	r2, #52	; 0x34
 8003772:	2101      	movs	r1, #1
 8003774:	5499      	strb	r1, [r3, r2]
  
  /* Calibration prerequisite: ADC must be disabled. */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	689b      	ldr	r3, [r3, #8]
 800377c:	2203      	movs	r2, #3
 800377e:	4013      	ands	r3, r2
 8003780:	2b01      	cmp	r3, #1
 8003782:	d112      	bne.n	80037aa <HAL_ADCEx_Calibration_Start+0x62>
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	2201      	movs	r2, #1
 800378c:	4013      	ands	r3, r2
 800378e:	2b01      	cmp	r3, #1
 8003790:	d009      	beq.n	80037a6 <HAL_ADCEx_Calibration_Start+0x5e>
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	68da      	ldr	r2, [r3, #12]
 8003798:	2380      	movs	r3, #128	; 0x80
 800379a:	021b      	lsls	r3, r3, #8
 800379c:	401a      	ands	r2, r3
 800379e:	2380      	movs	r3, #128	; 0x80
 80037a0:	021b      	lsls	r3, r3, #8
 80037a2:	429a      	cmp	r2, r3
 80037a4:	d101      	bne.n	80037aa <HAL_ADCEx_Calibration_Start+0x62>
 80037a6:	2301      	movs	r3, #1
 80037a8:	e000      	b.n	80037ac <HAL_ADCEx_Calibration_Start+0x64>
 80037aa:	2300      	movs	r3, #0
 80037ac:	2b00      	cmp	r3, #0
 80037ae:	d152      	bne.n	8003856 <HAL_ADCEx_Calibration_Start+0x10e>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State, 
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80037b4:	4a32      	ldr	r2, [pc, #200]	; (8003880 <HAL_ADCEx_Calibration_Start+0x138>)
 80037b6:	4013      	ands	r3, r2
 80037b8:	2202      	movs	r2, #2
 80037ba:	431a      	orrs	r2, r3
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	639a      	str	r2, [r3, #56]	; 0x38
    /* Note: Specificity of this STM32 serie: Calibration factor is           */
    /*       available in data register and also transfered by DMA.           */
    /*       To not insert ADC calibration factor among ADC conversion data   */
    /*       in array variable, DMA transfer must be disabled during          */
    /*       calibration.                                                     */
    backup_setting_adc_dma_transfer = READ_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG);
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	68db      	ldr	r3, [r3, #12]
 80037c6:	2203      	movs	r2, #3
 80037c8:	4013      	ands	r3, r2
 80037ca:	60fb      	str	r3, [r7, #12]
    CLEAR_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG);
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	68da      	ldr	r2, [r3, #12]
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	2103      	movs	r1, #3
 80037d8:	438a      	bics	r2, r1
 80037da:	60da      	str	r2, [r3, #12]

    /* Start ADC calibration */
    hadc->Instance->CR |= ADC_CR_ADCAL;
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	689a      	ldr	r2, [r3, #8]
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	2180      	movs	r1, #128	; 0x80
 80037e8:	0609      	lsls	r1, r1, #24
 80037ea:	430a      	orrs	r2, r1
 80037ec:	609a      	str	r2, [r3, #8]

    tickstart = HAL_GetTick();  
 80037ee:	f7ff fbd9 	bl	8002fa4 <HAL_GetTick>
 80037f2:	0003      	movs	r3, r0
 80037f4:	613b      	str	r3, [r7, #16]

    /* Wait for calibration completion */
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADCAL))
 80037f6:	e014      	b.n	8003822 <HAL_ADCEx_Calibration_Start+0xda>
    {
      if((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 80037f8:	f7ff fbd4 	bl	8002fa4 <HAL_GetTick>
 80037fc:	0002      	movs	r2, r0
 80037fe:	693b      	ldr	r3, [r7, #16]
 8003800:	1ad3      	subs	r3, r2, r3
 8003802:	2b02      	cmp	r3, #2
 8003804:	d90d      	bls.n	8003822 <HAL_ADCEx_Calibration_Start+0xda>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800380a:	2212      	movs	r2, #18
 800380c:	4393      	bics	r3, r2
 800380e:	2210      	movs	r2, #16
 8003810:	431a      	orrs	r2, r3
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	639a      	str	r2, [r3, #56]	; 0x38
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	2234      	movs	r2, #52	; 0x34
 800381a:	2100      	movs	r1, #0
 800381c:	5499      	strb	r1, [r3, r2]
        
        return HAL_ERROR;
 800381e:	2301      	movs	r3, #1
 8003820:	e02a      	b.n	8003878 <HAL_ADCEx_Calibration_Start+0x130>
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADCAL))
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	689b      	ldr	r3, [r3, #8]
 8003828:	0fdb      	lsrs	r3, r3, #31
 800382a:	07da      	lsls	r2, r3, #31
 800382c:	2380      	movs	r3, #128	; 0x80
 800382e:	061b      	lsls	r3, r3, #24
 8003830:	429a      	cmp	r2, r3
 8003832:	d0e1      	beq.n	80037f8 <HAL_ADCEx_Calibration_Start+0xb0>
      }
    }
    
    /* Restore ADC DMA transfer request after calibration */
    SET_BIT(hadc->Instance->CFGR1, backup_setting_adc_dma_transfer);
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	68d9      	ldr	r1, [r3, #12]
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	68fa      	ldr	r2, [r7, #12]
 8003840:	430a      	orrs	r2, r1
 8003842:	60da      	str	r2, [r3, #12]

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003848:	2203      	movs	r2, #3
 800384a:	4393      	bics	r3, r2
 800384c:	2201      	movs	r2, #1
 800384e:	431a      	orrs	r2, r3
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	639a      	str	r2, [r3, #56]	; 0x38
 8003854:	e009      	b.n	800386a <HAL_ADCEx_Calibration_Start+0x122>
                      HAL_ADC_STATE_READY);
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800385a:	2220      	movs	r2, #32
 800385c:	431a      	orrs	r2, r3
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	639a      	str	r2, [r3, #56]	; 0x38
    
    tmp_hal_status = HAL_ERROR;
 8003862:	2317      	movs	r3, #23
 8003864:	18fb      	adds	r3, r7, r3
 8003866:	2201      	movs	r2, #1
 8003868:	701a      	strb	r2, [r3, #0]
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	2234      	movs	r2, #52	; 0x34
 800386e:	2100      	movs	r1, #0
 8003870:	5499      	strb	r1, [r3, r2]
  
  /* Return function status */
  return tmp_hal_status;
 8003872:	2317      	movs	r3, #23
 8003874:	18fb      	adds	r3, r7, r3
 8003876:	781b      	ldrb	r3, [r3, #0]
}
 8003878:	0018      	movs	r0, r3
 800387a:	46bd      	mov	sp, r7
 800387c:	b006      	add	sp, #24
 800387e:	bd80      	pop	{r7, pc}
 8003880:	fffffefd 	.word	0xfffffefd

08003884 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003884:	b580      	push	{r7, lr}
 8003886:	b082      	sub	sp, #8
 8003888:	af00      	add	r7, sp, #0
 800388a:	0002      	movs	r2, r0
 800388c:	1dfb      	adds	r3, r7, #7
 800388e:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8003890:	1dfb      	adds	r3, r7, #7
 8003892:	781b      	ldrb	r3, [r3, #0]
 8003894:	2b7f      	cmp	r3, #127	; 0x7f
 8003896:	d809      	bhi.n	80038ac <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003898:	1dfb      	adds	r3, r7, #7
 800389a:	781b      	ldrb	r3, [r3, #0]
 800389c:	001a      	movs	r2, r3
 800389e:	231f      	movs	r3, #31
 80038a0:	401a      	ands	r2, r3
 80038a2:	4b04      	ldr	r3, [pc, #16]	; (80038b4 <__NVIC_EnableIRQ+0x30>)
 80038a4:	2101      	movs	r1, #1
 80038a6:	4091      	lsls	r1, r2
 80038a8:	000a      	movs	r2, r1
 80038aa:	601a      	str	r2, [r3, #0]
  }
}
 80038ac:	46c0      	nop			; (mov r8, r8)
 80038ae:	46bd      	mov	sp, r7
 80038b0:	b002      	add	sp, #8
 80038b2:	bd80      	pop	{r7, pc}
 80038b4:	e000e100 	.word	0xe000e100

080038b8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80038b8:	b590      	push	{r4, r7, lr}
 80038ba:	b083      	sub	sp, #12
 80038bc:	af00      	add	r7, sp, #0
 80038be:	0002      	movs	r2, r0
 80038c0:	6039      	str	r1, [r7, #0]
 80038c2:	1dfb      	adds	r3, r7, #7
 80038c4:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80038c6:	1dfb      	adds	r3, r7, #7
 80038c8:	781b      	ldrb	r3, [r3, #0]
 80038ca:	2b7f      	cmp	r3, #127	; 0x7f
 80038cc:	d828      	bhi.n	8003920 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80038ce:	4a2f      	ldr	r2, [pc, #188]	; (800398c <__NVIC_SetPriority+0xd4>)
 80038d0:	1dfb      	adds	r3, r7, #7
 80038d2:	781b      	ldrb	r3, [r3, #0]
 80038d4:	b25b      	sxtb	r3, r3
 80038d6:	089b      	lsrs	r3, r3, #2
 80038d8:	33c0      	adds	r3, #192	; 0xc0
 80038da:	009b      	lsls	r3, r3, #2
 80038dc:	589b      	ldr	r3, [r3, r2]
 80038de:	1dfa      	adds	r2, r7, #7
 80038e0:	7812      	ldrb	r2, [r2, #0]
 80038e2:	0011      	movs	r1, r2
 80038e4:	2203      	movs	r2, #3
 80038e6:	400a      	ands	r2, r1
 80038e8:	00d2      	lsls	r2, r2, #3
 80038ea:	21ff      	movs	r1, #255	; 0xff
 80038ec:	4091      	lsls	r1, r2
 80038ee:	000a      	movs	r2, r1
 80038f0:	43d2      	mvns	r2, r2
 80038f2:	401a      	ands	r2, r3
 80038f4:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80038f6:	683b      	ldr	r3, [r7, #0]
 80038f8:	019b      	lsls	r3, r3, #6
 80038fa:	22ff      	movs	r2, #255	; 0xff
 80038fc:	401a      	ands	r2, r3
 80038fe:	1dfb      	adds	r3, r7, #7
 8003900:	781b      	ldrb	r3, [r3, #0]
 8003902:	0018      	movs	r0, r3
 8003904:	2303      	movs	r3, #3
 8003906:	4003      	ands	r3, r0
 8003908:	00db      	lsls	r3, r3, #3
 800390a:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800390c:	481f      	ldr	r0, [pc, #124]	; (800398c <__NVIC_SetPriority+0xd4>)
 800390e:	1dfb      	adds	r3, r7, #7
 8003910:	781b      	ldrb	r3, [r3, #0]
 8003912:	b25b      	sxtb	r3, r3
 8003914:	089b      	lsrs	r3, r3, #2
 8003916:	430a      	orrs	r2, r1
 8003918:	33c0      	adds	r3, #192	; 0xc0
 800391a:	009b      	lsls	r3, r3, #2
 800391c:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 800391e:	e031      	b.n	8003984 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8003920:	4a1b      	ldr	r2, [pc, #108]	; (8003990 <__NVIC_SetPriority+0xd8>)
 8003922:	1dfb      	adds	r3, r7, #7
 8003924:	781b      	ldrb	r3, [r3, #0]
 8003926:	0019      	movs	r1, r3
 8003928:	230f      	movs	r3, #15
 800392a:	400b      	ands	r3, r1
 800392c:	3b08      	subs	r3, #8
 800392e:	089b      	lsrs	r3, r3, #2
 8003930:	3306      	adds	r3, #6
 8003932:	009b      	lsls	r3, r3, #2
 8003934:	18d3      	adds	r3, r2, r3
 8003936:	3304      	adds	r3, #4
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	1dfa      	adds	r2, r7, #7
 800393c:	7812      	ldrb	r2, [r2, #0]
 800393e:	0011      	movs	r1, r2
 8003940:	2203      	movs	r2, #3
 8003942:	400a      	ands	r2, r1
 8003944:	00d2      	lsls	r2, r2, #3
 8003946:	21ff      	movs	r1, #255	; 0xff
 8003948:	4091      	lsls	r1, r2
 800394a:	000a      	movs	r2, r1
 800394c:	43d2      	mvns	r2, r2
 800394e:	401a      	ands	r2, r3
 8003950:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8003952:	683b      	ldr	r3, [r7, #0]
 8003954:	019b      	lsls	r3, r3, #6
 8003956:	22ff      	movs	r2, #255	; 0xff
 8003958:	401a      	ands	r2, r3
 800395a:	1dfb      	adds	r3, r7, #7
 800395c:	781b      	ldrb	r3, [r3, #0]
 800395e:	0018      	movs	r0, r3
 8003960:	2303      	movs	r3, #3
 8003962:	4003      	ands	r3, r0
 8003964:	00db      	lsls	r3, r3, #3
 8003966:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8003968:	4809      	ldr	r0, [pc, #36]	; (8003990 <__NVIC_SetPriority+0xd8>)
 800396a:	1dfb      	adds	r3, r7, #7
 800396c:	781b      	ldrb	r3, [r3, #0]
 800396e:	001c      	movs	r4, r3
 8003970:	230f      	movs	r3, #15
 8003972:	4023      	ands	r3, r4
 8003974:	3b08      	subs	r3, #8
 8003976:	089b      	lsrs	r3, r3, #2
 8003978:	430a      	orrs	r2, r1
 800397a:	3306      	adds	r3, #6
 800397c:	009b      	lsls	r3, r3, #2
 800397e:	18c3      	adds	r3, r0, r3
 8003980:	3304      	adds	r3, #4
 8003982:	601a      	str	r2, [r3, #0]
}
 8003984:	46c0      	nop			; (mov r8, r8)
 8003986:	46bd      	mov	sp, r7
 8003988:	b003      	add	sp, #12
 800398a:	bd90      	pop	{r4, r7, pc}
 800398c:	e000e100 	.word	0xe000e100
 8003990:	e000ed00 	.word	0xe000ed00

08003994 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003994:	b580      	push	{r7, lr}
 8003996:	b082      	sub	sp, #8
 8003998:	af00      	add	r7, sp, #0
 800399a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	3b01      	subs	r3, #1
 80039a0:	4a0c      	ldr	r2, [pc, #48]	; (80039d4 <SysTick_Config+0x40>)
 80039a2:	4293      	cmp	r3, r2
 80039a4:	d901      	bls.n	80039aa <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80039a6:	2301      	movs	r3, #1
 80039a8:	e010      	b.n	80039cc <SysTick_Config+0x38>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80039aa:	4b0b      	ldr	r3, [pc, #44]	; (80039d8 <SysTick_Config+0x44>)
 80039ac:	687a      	ldr	r2, [r7, #4]
 80039ae:	3a01      	subs	r2, #1
 80039b0:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80039b2:	2301      	movs	r3, #1
 80039b4:	425b      	negs	r3, r3
 80039b6:	2103      	movs	r1, #3
 80039b8:	0018      	movs	r0, r3
 80039ba:	f7ff ff7d 	bl	80038b8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80039be:	4b06      	ldr	r3, [pc, #24]	; (80039d8 <SysTick_Config+0x44>)
 80039c0:	2200      	movs	r2, #0
 80039c2:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80039c4:	4b04      	ldr	r3, [pc, #16]	; (80039d8 <SysTick_Config+0x44>)
 80039c6:	2207      	movs	r2, #7
 80039c8:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80039ca:	2300      	movs	r3, #0
}
 80039cc:	0018      	movs	r0, r3
 80039ce:	46bd      	mov	sp, r7
 80039d0:	b002      	add	sp, #8
 80039d2:	bd80      	pop	{r7, pc}
 80039d4:	00ffffff 	.word	0x00ffffff
 80039d8:	e000e010 	.word	0xe000e010

080039dc <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80039dc:	b580      	push	{r7, lr}
 80039de:	b084      	sub	sp, #16
 80039e0:	af00      	add	r7, sp, #0
 80039e2:	60b9      	str	r1, [r7, #8]
 80039e4:	607a      	str	r2, [r7, #4]
 80039e6:	210f      	movs	r1, #15
 80039e8:	187b      	adds	r3, r7, r1
 80039ea:	1c02      	adds	r2, r0, #0
 80039ec:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 80039ee:	68ba      	ldr	r2, [r7, #8]
 80039f0:	187b      	adds	r3, r7, r1
 80039f2:	781b      	ldrb	r3, [r3, #0]
 80039f4:	b25b      	sxtb	r3, r3
 80039f6:	0011      	movs	r1, r2
 80039f8:	0018      	movs	r0, r3
 80039fa:	f7ff ff5d 	bl	80038b8 <__NVIC_SetPriority>
}
 80039fe:	46c0      	nop			; (mov r8, r8)
 8003a00:	46bd      	mov	sp, r7
 8003a02:	b004      	add	sp, #16
 8003a04:	bd80      	pop	{r7, pc}

08003a06 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003a06:	b580      	push	{r7, lr}
 8003a08:	b082      	sub	sp, #8
 8003a0a:	af00      	add	r7, sp, #0
 8003a0c:	0002      	movs	r2, r0
 8003a0e:	1dfb      	adds	r3, r7, #7
 8003a10:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003a12:	1dfb      	adds	r3, r7, #7
 8003a14:	781b      	ldrb	r3, [r3, #0]
 8003a16:	b25b      	sxtb	r3, r3
 8003a18:	0018      	movs	r0, r3
 8003a1a:	f7ff ff33 	bl	8003884 <__NVIC_EnableIRQ>
}
 8003a1e:	46c0      	nop			; (mov r8, r8)
 8003a20:	46bd      	mov	sp, r7
 8003a22:	b002      	add	sp, #8
 8003a24:	bd80      	pop	{r7, pc}

08003a26 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003a26:	b580      	push	{r7, lr}
 8003a28:	b082      	sub	sp, #8
 8003a2a:	af00      	add	r7, sp, #0
 8003a2c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	0018      	movs	r0, r3
 8003a32:	f7ff ffaf 	bl	8003994 <SysTick_Config>
 8003a36:	0003      	movs	r3, r0
}
 8003a38:	0018      	movs	r0, r3
 8003a3a:	46bd      	mov	sp, r7
 8003a3c:	b002      	add	sp, #8
 8003a3e:	bd80      	pop	{r7, pc}

08003a40 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{ 
 8003a40:	b580      	push	{r7, lr}
 8003a42:	b084      	sub	sp, #16
 8003a44:	af00      	add	r7, sp, #0
 8003a46:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8003a48:	2300      	movs	r3, #0
 8003a4a:	60fb      	str	r3, [r7, #12]
  
  /* Check the DMA handle allocation */
  if(NULL == hdma)
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	2b00      	cmp	r3, #0
 8003a50:	d101      	bne.n	8003a56 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8003a52:	2301      	movs	r3, #1
 8003a54:	e036      	b.n	8003ac4 <HAL_DMA_Init+0x84>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	2221      	movs	r2, #33	; 0x21
 8003a5a:	2102      	movs	r1, #2
 8003a5c:	5499      	strb	r1, [r3, r2]

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	60fb      	str	r3, [r7, #12]
  
  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8003a66:	68fb      	ldr	r3, [r7, #12]
 8003a68:	4a18      	ldr	r2, [pc, #96]	; (8003acc <HAL_DMA_Init+0x8c>)
 8003a6a:	4013      	ands	r3, r2
 8003a6c:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));
  
  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8003a76:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	68db      	ldr	r3, [r3, #12]
 8003a7c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003a82:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	695b      	ldr	r3, [r3, #20]
 8003a88:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003a8e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	69db      	ldr	r3, [r3, #28]
 8003a94:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8003a96:	68fa      	ldr	r2, [r7, #12]
 8003a98:	4313      	orrs	r3, r2
 8003a9a:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;  
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	68fa      	ldr	r2, [r7, #12]
 8003aa2:	601a      	str	r2, [r3, #0]
  
  /* Initialize DmaBaseAddress and ChannelIndex parameters used 
     by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  DMA_CalcBaseAndBitshift(hdma);
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	0018      	movs	r0, r3
 8003aa8:	f000 f946 	bl	8003d38 <DMA_CalcBaseAndBitshift>
  
  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	2200      	movs	r2, #0
 8003ab0:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	2221      	movs	r2, #33	; 0x21
 8003ab6:	2101      	movs	r1, #1
 8003ab8:	5499      	strb	r1, [r3, r2]
  
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	2220      	movs	r2, #32
 8003abe:	2100      	movs	r1, #0
 8003ac0:	5499      	strb	r1, [r3, r2]
  
  return HAL_OK;
 8003ac2:	2300      	movs	r3, #0
}  
 8003ac4:	0018      	movs	r0, r3
 8003ac6:	46bd      	mov	sp, r7
 8003ac8:	b004      	add	sp, #16
 8003aca:	bd80      	pop	{r7, pc}
 8003acc:	ffffc00f 	.word	0xffffc00f

08003ad0 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003ad0:	b580      	push	{r7, lr}
 8003ad2:	b086      	sub	sp, #24
 8003ad4:	af00      	add	r7, sp, #0
 8003ad6:	60f8      	str	r0, [r7, #12]
 8003ad8:	60b9      	str	r1, [r7, #8]
 8003ada:	607a      	str	r2, [r7, #4]
 8003adc:	603b      	str	r3, [r7, #0]
	HAL_StatusTypeDef status = HAL_OK;
 8003ade:	2317      	movs	r3, #23
 8003ae0:	18fb      	adds	r3, r7, r3
 8003ae2:	2200      	movs	r2, #0
 8003ae4:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
  
  /* Process locked */
  __HAL_LOCK(hdma);
 8003ae6:	68fb      	ldr	r3, [r7, #12]
 8003ae8:	2220      	movs	r2, #32
 8003aea:	5c9b      	ldrb	r3, [r3, r2]
 8003aec:	2b01      	cmp	r3, #1
 8003aee:	d101      	bne.n	8003af4 <HAL_DMA_Start_IT+0x24>
 8003af0:	2302      	movs	r3, #2
 8003af2:	e04f      	b.n	8003b94 <HAL_DMA_Start_IT+0xc4>
 8003af4:	68fb      	ldr	r3, [r7, #12]
 8003af6:	2220      	movs	r2, #32
 8003af8:	2101      	movs	r1, #1
 8003afa:	5499      	strb	r1, [r3, r2]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8003afc:	68fb      	ldr	r3, [r7, #12]
 8003afe:	2221      	movs	r2, #33	; 0x21
 8003b00:	5c9b      	ldrb	r3, [r3, r2]
 8003b02:	b2db      	uxtb	r3, r3
 8003b04:	2b01      	cmp	r3, #1
 8003b06:	d13a      	bne.n	8003b7e <HAL_DMA_Start_IT+0xae>
  {
  	/* Change DMA peripheral state */  
  	hdma->State = HAL_DMA_STATE_BUSY;
 8003b08:	68fb      	ldr	r3, [r7, #12]
 8003b0a:	2221      	movs	r2, #33	; 0x21
 8003b0c:	2102      	movs	r1, #2
 8003b0e:	5499      	strb	r1, [r3, r2]
  	
  	hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003b10:	68fb      	ldr	r3, [r7, #12]
 8003b12:	2200      	movs	r2, #0
 8003b14:	639a      	str	r2, [r3, #56]	; 0x38
  	
  	/* Disable the peripheral */
  	hdma->Instance->CCR &= ~DMA_CCR_EN;
 8003b16:	68fb      	ldr	r3, [r7, #12]
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	681a      	ldr	r2, [r3, #0]
 8003b1c:	68fb      	ldr	r3, [r7, #12]
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	2101      	movs	r1, #1
 8003b22:	438a      	bics	r2, r1
 8003b24:	601a      	str	r2, [r3, #0]
  	
  	/* Configure the source, destination address and the data length */  
  	DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003b26:	683b      	ldr	r3, [r7, #0]
 8003b28:	687a      	ldr	r2, [r7, #4]
 8003b2a:	68b9      	ldr	r1, [r7, #8]
 8003b2c:	68f8      	ldr	r0, [r7, #12]
 8003b2e:	f000 f8d7 	bl	8003ce0 <DMA_SetConfig>
  	
  	/* Enable the transfer complete, & transfer error interrupts */
  	/* Half transfer interrupt is optional: enable it only if associated callback is available */
    if(NULL != hdma->XferHalfCpltCallback )
 8003b32:	68fb      	ldr	r3, [r7, #12]
 8003b34:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b36:	2b00      	cmp	r3, #0
 8003b38:	d008      	beq.n	8003b4c <HAL_DMA_Start_IT+0x7c>
    {
      hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8003b3a:	68fb      	ldr	r3, [r7, #12]
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	681a      	ldr	r2, [r3, #0]
 8003b40:	68fb      	ldr	r3, [r7, #12]
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	210e      	movs	r1, #14
 8003b46:	430a      	orrs	r2, r1
 8003b48:	601a      	str	r2, [r3, #0]
 8003b4a:	e00f      	b.n	8003b6c <HAL_DMA_Start_IT+0x9c>
    }
  	else
  	{
  		hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_TE);
 8003b4c:	68fb      	ldr	r3, [r7, #12]
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	681a      	ldr	r2, [r3, #0]
 8003b52:	68fb      	ldr	r3, [r7, #12]
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	210a      	movs	r1, #10
 8003b58:	430a      	orrs	r2, r1
 8003b5a:	601a      	str	r2, [r3, #0]
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 8003b5c:	68fb      	ldr	r3, [r7, #12]
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	681a      	ldr	r2, [r3, #0]
 8003b62:	68fb      	ldr	r3, [r7, #12]
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	2104      	movs	r1, #4
 8003b68:	438a      	bics	r2, r1
 8003b6a:	601a      	str	r2, [r3, #0]
  	}
  	
  	/* Enable the Peripheral */
  	hdma->Instance->CCR |= DMA_CCR_EN;
 8003b6c:	68fb      	ldr	r3, [r7, #12]
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	681a      	ldr	r2, [r3, #0]
 8003b72:	68fb      	ldr	r3, [r7, #12]
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	2101      	movs	r1, #1
 8003b78:	430a      	orrs	r2, r1
 8003b7a:	601a      	str	r2, [r3, #0]
 8003b7c:	e007      	b.n	8003b8e <HAL_DMA_Start_IT+0xbe>
  }
  else
  {
  	/* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8003b7e:	68fb      	ldr	r3, [r7, #12]
 8003b80:	2220      	movs	r2, #32
 8003b82:	2100      	movs	r1, #0
 8003b84:	5499      	strb	r1, [r3, r2]
  
    /* Remain BUSY */
    status = HAL_BUSY;
 8003b86:	2317      	movs	r3, #23
 8003b88:	18fb      	adds	r3, r7, r3
 8003b8a:	2202      	movs	r2, #2
 8003b8c:	701a      	strb	r2, [r3, #0]
  }     
  
  return status;    
 8003b8e:	2317      	movs	r3, #23
 8003b90:	18fb      	adds	r3, r7, r3
 8003b92:	781b      	ldrb	r3, [r3, #0]
} 
 8003b94:	0018      	movs	r0, r3
 8003b96:	46bd      	mov	sp, r7
 8003b98:	b006      	add	sp, #24
 8003b9a:	bd80      	pop	{r7, pc}

08003b9c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003b9c:	b580      	push	{r7, lr}
 8003b9e:	b084      	sub	sp, #16
 8003ba0:	af00      	add	r7, sp, #0
 8003ba2:	6078      	str	r0, [r7, #4]
	uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	60bb      	str	r3, [r7, #8]
          
  /* Half Transfer Complete Interrupt management ******************************/
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bb8:	2204      	movs	r2, #4
 8003bba:	409a      	lsls	r2, r3
 8003bbc:	0013      	movs	r3, r2
 8003bbe:	68fa      	ldr	r2, [r7, #12]
 8003bc0:	4013      	ands	r3, r2
 8003bc2:	d024      	beq.n	8003c0e <HAL_DMA_IRQHandler+0x72>
 8003bc4:	68bb      	ldr	r3, [r7, #8]
 8003bc6:	2204      	movs	r2, #4
 8003bc8:	4013      	ands	r3, r2
 8003bca:	d020      	beq.n	8003c0e <HAL_DMA_IRQHandler+0x72>
  {
  	/* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	2220      	movs	r2, #32
 8003bd4:	4013      	ands	r3, r2
 8003bd6:	d107      	bne.n	8003be8 <HAL_DMA_IRQHandler+0x4c>
  	{
  		/* Disable the half transfer interrupt */
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	681a      	ldr	r2, [r3, #0]
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	2104      	movs	r1, #4
 8003be4:	438a      	bics	r2, r1
 8003be6:	601a      	str	r2, [r3, #0]
  	}
  	
  	/* Clear the half transfer complete flag */
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_HT1 << hdma->ChannelIndex;
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003bf0:	2104      	movs	r1, #4
 8003bf2:	4091      	lsls	r1, r2
 8003bf4:	000a      	movs	r2, r1
 8003bf6:	605a      	str	r2, [r3, #4]
  	
  	/* DMA peripheral state is not updated in Half Transfer */
  	/* State is updated only in Transfer Complete case */
  	
  	if(hdma->XferHalfCpltCallback != NULL)
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003bfc:	2b00      	cmp	r3, #0
 8003bfe:	d100      	bne.n	8003c02 <HAL_DMA_IRQHandler+0x66>
 8003c00:	e06a      	b.n	8003cd8 <HAL_DMA_IRQHandler+0x13c>
  	{
  		/* Half transfer callback */
  		hdma->XferHalfCpltCallback(hdma);
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c06:	687a      	ldr	r2, [r7, #4]
 8003c08:	0010      	movs	r0, r2
 8003c0a:	4798      	blx	r3
  	if(hdma->XferHalfCpltCallback != NULL)
 8003c0c:	e064      	b.n	8003cd8 <HAL_DMA_IRQHandler+0x13c>
  	}
  }
  
  /* Transfer Complete Interrupt management ***********************************/
  else if ((RESET != (flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TC)))
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c12:	2202      	movs	r2, #2
 8003c14:	409a      	lsls	r2, r3
 8003c16:	0013      	movs	r3, r2
 8003c18:	68fa      	ldr	r2, [r7, #12]
 8003c1a:	4013      	ands	r3, r2
 8003c1c:	d02b      	beq.n	8003c76 <HAL_DMA_IRQHandler+0xda>
 8003c1e:	68bb      	ldr	r3, [r7, #8]
 8003c20:	2202      	movs	r2, #2
 8003c22:	4013      	ands	r3, r2
 8003c24:	d027      	beq.n	8003c76 <HAL_DMA_IRQHandler+0xda>
  {
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	2220      	movs	r2, #32
 8003c2e:	4013      	ands	r3, r2
 8003c30:	d10b      	bne.n	8003c4a <HAL_DMA_IRQHandler+0xae>
  	{
  		/* Disable the transfer complete  & transfer error interrupts */
  		/* if the DMA mode is not CIRCULAR */
  		hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_TE);
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	681a      	ldr	r2, [r3, #0]
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	210a      	movs	r1, #10
 8003c3e:	438a      	bics	r2, r1
 8003c40:	601a      	str	r2, [r3, #0]
  		
  		/* Change the DMA state */
  		hdma->State = HAL_DMA_STATE_READY;
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	2221      	movs	r2, #33	; 0x21
 8003c46:	2101      	movs	r1, #1
 8003c48:	5499      	strb	r1, [r3, r2]
  	}
  	
  	/* Clear the transfer complete flag */
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_TC1 << hdma->ChannelIndex;
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003c52:	2102      	movs	r1, #2
 8003c54:	4091      	lsls	r1, r2
 8003c56:	000a      	movs	r2, r1
 8003c58:	605a      	str	r2, [r3, #4]
  	
  	/* Process Unlocked */
  	__HAL_UNLOCK(hdma);
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	2220      	movs	r2, #32
 8003c5e:	2100      	movs	r1, #0
 8003c60:	5499      	strb	r1, [r3, r2]
  	
  	if(hdma->XferCpltCallback != NULL)
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c66:	2b00      	cmp	r3, #0
 8003c68:	d036      	beq.n	8003cd8 <HAL_DMA_IRQHandler+0x13c>
  	{
  		/* Transfer complete callback */
  		hdma->XferCpltCallback(hdma);
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c6e:	687a      	ldr	r2, [r7, #4]
 8003c70:	0010      	movs	r0, r2
 8003c72:	4798      	blx	r3
  	if(hdma->XferCpltCallback != NULL)
 8003c74:	e030      	b.n	8003cd8 <HAL_DMA_IRQHandler+0x13c>
  	}
  }
  
  /* Transfer Error Interrupt management ***************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c7a:	2208      	movs	r2, #8
 8003c7c:	409a      	lsls	r2, r3
 8003c7e:	0013      	movs	r3, r2
 8003c80:	68fa      	ldr	r2, [r7, #12]
 8003c82:	4013      	ands	r3, r2
 8003c84:	d028      	beq.n	8003cd8 <HAL_DMA_IRQHandler+0x13c>
 8003c86:	68bb      	ldr	r3, [r7, #8]
 8003c88:	2208      	movs	r2, #8
 8003c8a:	4013      	ands	r3, r2
 8003c8c:	d024      	beq.n	8003cd8 <HAL_DMA_IRQHandler+0x13c>
  {
  	/* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Then, disable all DMA interrupts */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	681a      	ldr	r2, [r3, #0]
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	210e      	movs	r1, #14
 8003c9a:	438a      	bics	r2, r1
 8003c9c:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003ca6:	2101      	movs	r1, #1
 8003ca8:	4091      	lsls	r1, r2
 8003caa:	000a      	movs	r2, r1
 8003cac:	605a      	str	r2, [r3, #4]
    
    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	2201      	movs	r2, #1
 8003cb2:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;    
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	2221      	movs	r2, #33	; 0x21
 8003cb8:	2101      	movs	r1, #1
 8003cba:	5499      	strb	r1, [r3, r2]
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	2220      	movs	r2, #32
 8003cc0:	2100      	movs	r1, #0
 8003cc2:	5499      	strb	r1, [r3, r2]
    
    if(hdma->XferErrorCallback != NULL)
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003cc8:	2b00      	cmp	r3, #0
 8003cca:	d005      	beq.n	8003cd8 <HAL_DMA_IRQHandler+0x13c>
    {
    	/* Transfer error callback */
    	hdma->XferErrorCallback(hdma);
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003cd0:	687a      	ldr	r2, [r7, #4]
 8003cd2:	0010      	movs	r0, r2
 8003cd4:	4798      	blx	r3
    }
   }
}  
 8003cd6:	e7ff      	b.n	8003cd8 <HAL_DMA_IRQHandler+0x13c>
 8003cd8:	46c0      	nop			; (mov r8, r8)
 8003cda:	46bd      	mov	sp, r7
 8003cdc:	b004      	add	sp, #16
 8003cde:	bd80      	pop	{r7, pc}

08003ce0 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003ce0:	b580      	push	{r7, lr}
 8003ce2:	b084      	sub	sp, #16
 8003ce4:	af00      	add	r7, sp, #0
 8003ce6:	60f8      	str	r0, [r7, #12]
 8003ce8:	60b9      	str	r1, [r7, #8]
 8003cea:	607a      	str	r2, [r7, #4]
 8003cec:	603b      	str	r3, [r7, #0]
	/* Clear all flags */
  hdma->DmaBaseAddress->IFCR  = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8003cee:	68fb      	ldr	r3, [r7, #12]
 8003cf0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003cf2:	68fb      	ldr	r3, [r7, #12]
 8003cf4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003cf6:	2101      	movs	r1, #1
 8003cf8:	4091      	lsls	r1, r2
 8003cfa:	000a      	movs	r2, r1
 8003cfc:	605a      	str	r2, [r3, #4]
  
  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8003cfe:	68fb      	ldr	r3, [r7, #12]
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	683a      	ldr	r2, [r7, #0]
 8003d04:	605a      	str	r2, [r3, #4]
  
  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003d06:	68fb      	ldr	r3, [r7, #12]
 8003d08:	685b      	ldr	r3, [r3, #4]
 8003d0a:	2b10      	cmp	r3, #16
 8003d0c:	d108      	bne.n	8003d20 <DMA_SetConfig+0x40>
  {   
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8003d0e:	68fb      	ldr	r3, [r7, #12]
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	687a      	ldr	r2, [r7, #4]
 8003d14:	609a      	str	r2, [r3, #8]
    
    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8003d16:	68fb      	ldr	r3, [r7, #12]
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	68ba      	ldr	r2, [r7, #8]
 8003d1c:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;
    
    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8003d1e:	e007      	b.n	8003d30 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8003d20:	68fb      	ldr	r3, [r7, #12]
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	68ba      	ldr	r2, [r7, #8]
 8003d26:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8003d28:	68fb      	ldr	r3, [r7, #12]
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	687a      	ldr	r2, [r7, #4]
 8003d2e:	60da      	str	r2, [r3, #12]
}
 8003d30:	46c0      	nop			; (mov r8, r8)
 8003d32:	46bd      	mov	sp, r7
 8003d34:	b004      	add	sp, #16
 8003d36:	bd80      	pop	{r7, pc}

08003d38 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval None
  */
static void DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8003d38:	b580      	push	{r7, lr}
 8003d3a:	b082      	sub	sp, #8
 8003d3c:	af00      	add	r7, sp, #0
 8003d3e:	6078      	str	r0, [r7, #4]
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* calculation of the channel index */
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	4a08      	ldr	r2, [pc, #32]	; (8003d68 <DMA_CalcBaseAndBitshift+0x30>)
 8003d46:	4694      	mov	ip, r2
 8003d48:	4463      	add	r3, ip
 8003d4a:	2114      	movs	r1, #20
 8003d4c:	0018      	movs	r0, r3
 8003d4e:	f7fc f9db 	bl	8000108 <__udivsi3>
 8003d52:	0003      	movs	r3, r0
 8003d54:	009a      	lsls	r2, r3, #2
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	4a03      	ldr	r2, [pc, #12]	; (8003d6c <DMA_CalcBaseAndBitshift+0x34>)
 8003d5e:	63da      	str	r2, [r3, #60]	; 0x3c
#endif
}
 8003d60:	46c0      	nop			; (mov r8, r8)
 8003d62:	46bd      	mov	sp, r7
 8003d64:	b002      	add	sp, #8
 8003d66:	bd80      	pop	{r7, pc}
 8003d68:	bffdfff8 	.word	0xbffdfff8
 8003d6c:	40020000 	.word	0x40020000

08003d70 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{ 
 8003d70:	b580      	push	{r7, lr}
 8003d72:	b086      	sub	sp, #24
 8003d74:	af00      	add	r7, sp, #0
 8003d76:	6078      	str	r0, [r7, #4]
 8003d78:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003d7a:	2300      	movs	r3, #0
 8003d7c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003d7e:	e14f      	b.n	8004020 <HAL_GPIO_Init+0x2b0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8003d80:	683b      	ldr	r3, [r7, #0]
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	2101      	movs	r1, #1
 8003d86:	697a      	ldr	r2, [r7, #20]
 8003d88:	4091      	lsls	r1, r2
 8003d8a:	000a      	movs	r2, r1
 8003d8c:	4013      	ands	r3, r2
 8003d8e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8003d90:	68fb      	ldr	r3, [r7, #12]
 8003d92:	2b00      	cmp	r3, #0
 8003d94:	d100      	bne.n	8003d98 <HAL_GPIO_Init+0x28>
 8003d96:	e140      	b.n	800401a <HAL_GPIO_Init+0x2aa>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003d98:	683b      	ldr	r3, [r7, #0]
 8003d9a:	685b      	ldr	r3, [r3, #4]
 8003d9c:	2b02      	cmp	r3, #2
 8003d9e:	d003      	beq.n	8003da8 <HAL_GPIO_Init+0x38>
 8003da0:	683b      	ldr	r3, [r7, #0]
 8003da2:	685b      	ldr	r3, [r3, #4]
 8003da4:	2b12      	cmp	r3, #18
 8003da6:	d123      	bne.n	8003df0 <HAL_GPIO_Init+0x80>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8003da8:	697b      	ldr	r3, [r7, #20]
 8003daa:	08da      	lsrs	r2, r3, #3
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	3208      	adds	r2, #8
 8003db0:	0092      	lsls	r2, r2, #2
 8003db2:	58d3      	ldr	r3, [r2, r3]
 8003db4:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8003db6:	697b      	ldr	r3, [r7, #20]
 8003db8:	2207      	movs	r2, #7
 8003dba:	4013      	ands	r3, r2
 8003dbc:	009b      	lsls	r3, r3, #2
 8003dbe:	220f      	movs	r2, #15
 8003dc0:	409a      	lsls	r2, r3
 8003dc2:	0013      	movs	r3, r2
 8003dc4:	43da      	mvns	r2, r3
 8003dc6:	693b      	ldr	r3, [r7, #16]
 8003dc8:	4013      	ands	r3, r2
 8003dca:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8003dcc:	683b      	ldr	r3, [r7, #0]
 8003dce:	691a      	ldr	r2, [r3, #16]
 8003dd0:	697b      	ldr	r3, [r7, #20]
 8003dd2:	2107      	movs	r1, #7
 8003dd4:	400b      	ands	r3, r1
 8003dd6:	009b      	lsls	r3, r3, #2
 8003dd8:	409a      	lsls	r2, r3
 8003dda:	0013      	movs	r3, r2
 8003ddc:	693a      	ldr	r2, [r7, #16]
 8003dde:	4313      	orrs	r3, r2
 8003de0:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8003de2:	697b      	ldr	r3, [r7, #20]
 8003de4:	08da      	lsrs	r2, r3, #3
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	3208      	adds	r2, #8
 8003dea:	0092      	lsls	r2, r2, #2
 8003dec:	6939      	ldr	r1, [r7, #16]
 8003dee:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8003df6:	697b      	ldr	r3, [r7, #20]
 8003df8:	005b      	lsls	r3, r3, #1
 8003dfa:	2203      	movs	r2, #3
 8003dfc:	409a      	lsls	r2, r3
 8003dfe:	0013      	movs	r3, r2
 8003e00:	43da      	mvns	r2, r3
 8003e02:	693b      	ldr	r3, [r7, #16]
 8003e04:	4013      	ands	r3, r2
 8003e06:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8003e08:	683b      	ldr	r3, [r7, #0]
 8003e0a:	685b      	ldr	r3, [r3, #4]
 8003e0c:	2203      	movs	r2, #3
 8003e0e:	401a      	ands	r2, r3
 8003e10:	697b      	ldr	r3, [r7, #20]
 8003e12:	005b      	lsls	r3, r3, #1
 8003e14:	409a      	lsls	r2, r3
 8003e16:	0013      	movs	r3, r2
 8003e18:	693a      	ldr	r2, [r7, #16]
 8003e1a:	4313      	orrs	r3, r2
 8003e1c:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	693a      	ldr	r2, [r7, #16]
 8003e22:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003e24:	683b      	ldr	r3, [r7, #0]
 8003e26:	685b      	ldr	r3, [r3, #4]
 8003e28:	2b01      	cmp	r3, #1
 8003e2a:	d00b      	beq.n	8003e44 <HAL_GPIO_Init+0xd4>
 8003e2c:	683b      	ldr	r3, [r7, #0]
 8003e2e:	685b      	ldr	r3, [r3, #4]
 8003e30:	2b02      	cmp	r3, #2
 8003e32:	d007      	beq.n	8003e44 <HAL_GPIO_Init+0xd4>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003e34:	683b      	ldr	r3, [r7, #0]
 8003e36:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003e38:	2b11      	cmp	r3, #17
 8003e3a:	d003      	beq.n	8003e44 <HAL_GPIO_Init+0xd4>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003e3c:	683b      	ldr	r3, [r7, #0]
 8003e3e:	685b      	ldr	r3, [r3, #4]
 8003e40:	2b12      	cmp	r3, #18
 8003e42:	d130      	bne.n	8003ea6 <HAL_GPIO_Init+0x136>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	689b      	ldr	r3, [r3, #8]
 8003e48:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8003e4a:	697b      	ldr	r3, [r7, #20]
 8003e4c:	005b      	lsls	r3, r3, #1
 8003e4e:	2203      	movs	r2, #3
 8003e50:	409a      	lsls	r2, r3
 8003e52:	0013      	movs	r3, r2
 8003e54:	43da      	mvns	r2, r3
 8003e56:	693b      	ldr	r3, [r7, #16]
 8003e58:	4013      	ands	r3, r2
 8003e5a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8003e5c:	683b      	ldr	r3, [r7, #0]
 8003e5e:	68da      	ldr	r2, [r3, #12]
 8003e60:	697b      	ldr	r3, [r7, #20]
 8003e62:	005b      	lsls	r3, r3, #1
 8003e64:	409a      	lsls	r2, r3
 8003e66:	0013      	movs	r3, r2
 8003e68:	693a      	ldr	r2, [r7, #16]
 8003e6a:	4313      	orrs	r3, r2
 8003e6c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	693a      	ldr	r2, [r7, #16]
 8003e72:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	685b      	ldr	r3, [r3, #4]
 8003e78:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003e7a:	2201      	movs	r2, #1
 8003e7c:	697b      	ldr	r3, [r7, #20]
 8003e7e:	409a      	lsls	r2, r3
 8003e80:	0013      	movs	r3, r2
 8003e82:	43da      	mvns	r2, r3
 8003e84:	693b      	ldr	r3, [r7, #16]
 8003e86:	4013      	ands	r3, r2
 8003e88:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8003e8a:	683b      	ldr	r3, [r7, #0]
 8003e8c:	685b      	ldr	r3, [r3, #4]
 8003e8e:	091b      	lsrs	r3, r3, #4
 8003e90:	2201      	movs	r2, #1
 8003e92:	401a      	ands	r2, r3
 8003e94:	697b      	ldr	r3, [r7, #20]
 8003e96:	409a      	lsls	r2, r3
 8003e98:	0013      	movs	r3, r2
 8003e9a:	693a      	ldr	r2, [r7, #16]
 8003e9c:	4313      	orrs	r3, r2
 8003e9e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	693a      	ldr	r2, [r7, #16]
 8003ea4:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	68db      	ldr	r3, [r3, #12]
 8003eaa:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8003eac:	697b      	ldr	r3, [r7, #20]
 8003eae:	005b      	lsls	r3, r3, #1
 8003eb0:	2203      	movs	r2, #3
 8003eb2:	409a      	lsls	r2, r3
 8003eb4:	0013      	movs	r3, r2
 8003eb6:	43da      	mvns	r2, r3
 8003eb8:	693b      	ldr	r3, [r7, #16]
 8003eba:	4013      	ands	r3, r2
 8003ebc:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8003ebe:	683b      	ldr	r3, [r7, #0]
 8003ec0:	689a      	ldr	r2, [r3, #8]
 8003ec2:	697b      	ldr	r3, [r7, #20]
 8003ec4:	005b      	lsls	r3, r3, #1
 8003ec6:	409a      	lsls	r2, r3
 8003ec8:	0013      	movs	r3, r2
 8003eca:	693a      	ldr	r2, [r7, #16]
 8003ecc:	4313      	orrs	r3, r2
 8003ece:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	693a      	ldr	r2, [r7, #16]
 8003ed4:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8003ed6:	683b      	ldr	r3, [r7, #0]
 8003ed8:	685a      	ldr	r2, [r3, #4]
 8003eda:	2380      	movs	r3, #128	; 0x80
 8003edc:	055b      	lsls	r3, r3, #21
 8003ede:	4013      	ands	r3, r2
 8003ee0:	d100      	bne.n	8003ee4 <HAL_GPIO_Init+0x174>
 8003ee2:	e09a      	b.n	800401a <HAL_GPIO_Init+0x2aa>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003ee4:	4b54      	ldr	r3, [pc, #336]	; (8004038 <HAL_GPIO_Init+0x2c8>)
 8003ee6:	699a      	ldr	r2, [r3, #24]
 8003ee8:	4b53      	ldr	r3, [pc, #332]	; (8004038 <HAL_GPIO_Init+0x2c8>)
 8003eea:	2101      	movs	r1, #1
 8003eec:	430a      	orrs	r2, r1
 8003eee:	619a      	str	r2, [r3, #24]
 8003ef0:	4b51      	ldr	r3, [pc, #324]	; (8004038 <HAL_GPIO_Init+0x2c8>)
 8003ef2:	699b      	ldr	r3, [r3, #24]
 8003ef4:	2201      	movs	r2, #1
 8003ef6:	4013      	ands	r3, r2
 8003ef8:	60bb      	str	r3, [r7, #8]
 8003efa:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8003efc:	4a4f      	ldr	r2, [pc, #316]	; (800403c <HAL_GPIO_Init+0x2cc>)
 8003efe:	697b      	ldr	r3, [r7, #20]
 8003f00:	089b      	lsrs	r3, r3, #2
 8003f02:	3302      	adds	r3, #2
 8003f04:	009b      	lsls	r3, r3, #2
 8003f06:	589b      	ldr	r3, [r3, r2]
 8003f08:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8003f0a:	697b      	ldr	r3, [r7, #20]
 8003f0c:	2203      	movs	r2, #3
 8003f0e:	4013      	ands	r3, r2
 8003f10:	009b      	lsls	r3, r3, #2
 8003f12:	220f      	movs	r2, #15
 8003f14:	409a      	lsls	r2, r3
 8003f16:	0013      	movs	r3, r2
 8003f18:	43da      	mvns	r2, r3
 8003f1a:	693b      	ldr	r3, [r7, #16]
 8003f1c:	4013      	ands	r3, r2
 8003f1e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8003f20:	687a      	ldr	r2, [r7, #4]
 8003f22:	2390      	movs	r3, #144	; 0x90
 8003f24:	05db      	lsls	r3, r3, #23
 8003f26:	429a      	cmp	r2, r3
 8003f28:	d013      	beq.n	8003f52 <HAL_GPIO_Init+0x1e2>
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	4a44      	ldr	r2, [pc, #272]	; (8004040 <HAL_GPIO_Init+0x2d0>)
 8003f2e:	4293      	cmp	r3, r2
 8003f30:	d00d      	beq.n	8003f4e <HAL_GPIO_Init+0x1de>
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	4a43      	ldr	r2, [pc, #268]	; (8004044 <HAL_GPIO_Init+0x2d4>)
 8003f36:	4293      	cmp	r3, r2
 8003f38:	d007      	beq.n	8003f4a <HAL_GPIO_Init+0x1da>
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	4a42      	ldr	r2, [pc, #264]	; (8004048 <HAL_GPIO_Init+0x2d8>)
 8003f3e:	4293      	cmp	r3, r2
 8003f40:	d101      	bne.n	8003f46 <HAL_GPIO_Init+0x1d6>
 8003f42:	2303      	movs	r3, #3
 8003f44:	e006      	b.n	8003f54 <HAL_GPIO_Init+0x1e4>
 8003f46:	2305      	movs	r3, #5
 8003f48:	e004      	b.n	8003f54 <HAL_GPIO_Init+0x1e4>
 8003f4a:	2302      	movs	r3, #2
 8003f4c:	e002      	b.n	8003f54 <HAL_GPIO_Init+0x1e4>
 8003f4e:	2301      	movs	r3, #1
 8003f50:	e000      	b.n	8003f54 <HAL_GPIO_Init+0x1e4>
 8003f52:	2300      	movs	r3, #0
 8003f54:	697a      	ldr	r2, [r7, #20]
 8003f56:	2103      	movs	r1, #3
 8003f58:	400a      	ands	r2, r1
 8003f5a:	0092      	lsls	r2, r2, #2
 8003f5c:	4093      	lsls	r3, r2
 8003f5e:	693a      	ldr	r2, [r7, #16]
 8003f60:	4313      	orrs	r3, r2
 8003f62:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8003f64:	4935      	ldr	r1, [pc, #212]	; (800403c <HAL_GPIO_Init+0x2cc>)
 8003f66:	697b      	ldr	r3, [r7, #20]
 8003f68:	089b      	lsrs	r3, r3, #2
 8003f6a:	3302      	adds	r3, #2
 8003f6c:	009b      	lsls	r3, r3, #2
 8003f6e:	693a      	ldr	r2, [r7, #16]
 8003f70:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003f72:	4b36      	ldr	r3, [pc, #216]	; (800404c <HAL_GPIO_Init+0x2dc>)
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003f78:	68fb      	ldr	r3, [r7, #12]
 8003f7a:	43da      	mvns	r2, r3
 8003f7c:	693b      	ldr	r3, [r7, #16]
 8003f7e:	4013      	ands	r3, r2
 8003f80:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8003f82:	683b      	ldr	r3, [r7, #0]
 8003f84:	685a      	ldr	r2, [r3, #4]
 8003f86:	2380      	movs	r3, #128	; 0x80
 8003f88:	025b      	lsls	r3, r3, #9
 8003f8a:	4013      	ands	r3, r2
 8003f8c:	d003      	beq.n	8003f96 <HAL_GPIO_Init+0x226>
        {
          temp |= iocurrent;
 8003f8e:	693a      	ldr	r2, [r7, #16]
 8003f90:	68fb      	ldr	r3, [r7, #12]
 8003f92:	4313      	orrs	r3, r2
 8003f94:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8003f96:	4b2d      	ldr	r3, [pc, #180]	; (800404c <HAL_GPIO_Init+0x2dc>)
 8003f98:	693a      	ldr	r2, [r7, #16]
 8003f9a:	601a      	str	r2, [r3, #0]

        temp = EXTI->EMR;
 8003f9c:	4b2b      	ldr	r3, [pc, #172]	; (800404c <HAL_GPIO_Init+0x2dc>)
 8003f9e:	685b      	ldr	r3, [r3, #4]
 8003fa0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003fa2:	68fb      	ldr	r3, [r7, #12]
 8003fa4:	43da      	mvns	r2, r3
 8003fa6:	693b      	ldr	r3, [r7, #16]
 8003fa8:	4013      	ands	r3, r2
 8003faa:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003fac:	683b      	ldr	r3, [r7, #0]
 8003fae:	685a      	ldr	r2, [r3, #4]
 8003fb0:	2380      	movs	r3, #128	; 0x80
 8003fb2:	029b      	lsls	r3, r3, #10
 8003fb4:	4013      	ands	r3, r2
 8003fb6:	d003      	beq.n	8003fc0 <HAL_GPIO_Init+0x250>
        {
          temp |= iocurrent;
 8003fb8:	693a      	ldr	r2, [r7, #16]
 8003fba:	68fb      	ldr	r3, [r7, #12]
 8003fbc:	4313      	orrs	r3, r2
 8003fbe:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8003fc0:	4b22      	ldr	r3, [pc, #136]	; (800404c <HAL_GPIO_Init+0x2dc>)
 8003fc2:	693a      	ldr	r2, [r7, #16]
 8003fc4:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003fc6:	4b21      	ldr	r3, [pc, #132]	; (800404c <HAL_GPIO_Init+0x2dc>)
 8003fc8:	689b      	ldr	r3, [r3, #8]
 8003fca:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003fcc:	68fb      	ldr	r3, [r7, #12]
 8003fce:	43da      	mvns	r2, r3
 8003fd0:	693b      	ldr	r3, [r7, #16]
 8003fd2:	4013      	ands	r3, r2
 8003fd4:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003fd6:	683b      	ldr	r3, [r7, #0]
 8003fd8:	685a      	ldr	r2, [r3, #4]
 8003fda:	2380      	movs	r3, #128	; 0x80
 8003fdc:	035b      	lsls	r3, r3, #13
 8003fde:	4013      	ands	r3, r2
 8003fe0:	d003      	beq.n	8003fea <HAL_GPIO_Init+0x27a>
        {
          temp |= iocurrent;
 8003fe2:	693a      	ldr	r2, [r7, #16]
 8003fe4:	68fb      	ldr	r3, [r7, #12]
 8003fe6:	4313      	orrs	r3, r2
 8003fe8:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8003fea:	4b18      	ldr	r3, [pc, #96]	; (800404c <HAL_GPIO_Init+0x2dc>)
 8003fec:	693a      	ldr	r2, [r7, #16]
 8003fee:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8003ff0:	4b16      	ldr	r3, [pc, #88]	; (800404c <HAL_GPIO_Init+0x2dc>)
 8003ff2:	68db      	ldr	r3, [r3, #12]
 8003ff4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003ff6:	68fb      	ldr	r3, [r7, #12]
 8003ff8:	43da      	mvns	r2, r3
 8003ffa:	693b      	ldr	r3, [r7, #16]
 8003ffc:	4013      	ands	r3, r2
 8003ffe:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8004000:	683b      	ldr	r3, [r7, #0]
 8004002:	685a      	ldr	r2, [r3, #4]
 8004004:	2380      	movs	r3, #128	; 0x80
 8004006:	039b      	lsls	r3, r3, #14
 8004008:	4013      	ands	r3, r2
 800400a:	d003      	beq.n	8004014 <HAL_GPIO_Init+0x2a4>
        {
          temp |= iocurrent;
 800400c:	693a      	ldr	r2, [r7, #16]
 800400e:	68fb      	ldr	r3, [r7, #12]
 8004010:	4313      	orrs	r3, r2
 8004012:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8004014:	4b0d      	ldr	r3, [pc, #52]	; (800404c <HAL_GPIO_Init+0x2dc>)
 8004016:	693a      	ldr	r2, [r7, #16]
 8004018:	60da      	str	r2, [r3, #12]
      }
    }

    position++;
 800401a:	697b      	ldr	r3, [r7, #20]
 800401c:	3301      	adds	r3, #1
 800401e:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004020:	683b      	ldr	r3, [r7, #0]
 8004022:	681a      	ldr	r2, [r3, #0]
 8004024:	697b      	ldr	r3, [r7, #20]
 8004026:	40da      	lsrs	r2, r3
 8004028:	1e13      	subs	r3, r2, #0
 800402a:	d000      	beq.n	800402e <HAL_GPIO_Init+0x2be>
 800402c:	e6a8      	b.n	8003d80 <HAL_GPIO_Init+0x10>
  } 
}
 800402e:	46c0      	nop			; (mov r8, r8)
 8004030:	46bd      	mov	sp, r7
 8004032:	b006      	add	sp, #24
 8004034:	bd80      	pop	{r7, pc}
 8004036:	46c0      	nop			; (mov r8, r8)
 8004038:	40021000 	.word	0x40021000
 800403c:	40010000 	.word	0x40010000
 8004040:	48000400 	.word	0x48000400
 8004044:	48000800 	.word	0x48000800
 8004048:	48000c00 	.word	0x48000c00
 800404c:	40010400 	.word	0x40010400

08004050 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8004050:	b580      	push	{r7, lr}
 8004052:	b084      	sub	sp, #16
 8004054:	af00      	add	r7, sp, #0
 8004056:	6078      	str	r0, [r7, #4]
 8004058:	000a      	movs	r2, r1
 800405a:	1cbb      	adds	r3, r7, #2
 800405c:	801a      	strh	r2, [r3, #0]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	691b      	ldr	r3, [r3, #16]
 8004062:	1cba      	adds	r2, r7, #2
 8004064:	8812      	ldrh	r2, [r2, #0]
 8004066:	4013      	ands	r3, r2
 8004068:	d004      	beq.n	8004074 <HAL_GPIO_ReadPin+0x24>
  {
    bitstatus = GPIO_PIN_SET;
 800406a:	230f      	movs	r3, #15
 800406c:	18fb      	adds	r3, r7, r3
 800406e:	2201      	movs	r2, #1
 8004070:	701a      	strb	r2, [r3, #0]
 8004072:	e003      	b.n	800407c <HAL_GPIO_ReadPin+0x2c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8004074:	230f      	movs	r3, #15
 8004076:	18fb      	adds	r3, r7, r3
 8004078:	2200      	movs	r2, #0
 800407a:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
 800407c:	230f      	movs	r3, #15
 800407e:	18fb      	adds	r3, r7, r3
 8004080:	781b      	ldrb	r3, [r3, #0]
  }
 8004082:	0018      	movs	r0, r3
 8004084:	46bd      	mov	sp, r7
 8004086:	b004      	add	sp, #16
 8004088:	bd80      	pop	{r7, pc}

0800408a <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800408a:	b580      	push	{r7, lr}
 800408c:	b082      	sub	sp, #8
 800408e:	af00      	add	r7, sp, #0
 8004090:	6078      	str	r0, [r7, #4]
 8004092:	0008      	movs	r0, r1
 8004094:	0011      	movs	r1, r2
 8004096:	1cbb      	adds	r3, r7, #2
 8004098:	1c02      	adds	r2, r0, #0
 800409a:	801a      	strh	r2, [r3, #0]
 800409c:	1c7b      	adds	r3, r7, #1
 800409e:	1c0a      	adds	r2, r1, #0
 80040a0:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80040a2:	1c7b      	adds	r3, r7, #1
 80040a4:	781b      	ldrb	r3, [r3, #0]
 80040a6:	2b00      	cmp	r3, #0
 80040a8:	d004      	beq.n	80040b4 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80040aa:	1cbb      	adds	r3, r7, #2
 80040ac:	881a      	ldrh	r2, [r3, #0]
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80040b2:	e003      	b.n	80040bc <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80040b4:	1cbb      	adds	r3, r7, #2
 80040b6:	881a      	ldrh	r2, [r3, #0]
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	629a      	str	r2, [r3, #40]	; 0x28
}
 80040bc:	46c0      	nop			; (mov r8, r8)
 80040be:	46bd      	mov	sp, r7
 80040c0:	b002      	add	sp, #8
 80040c2:	bd80      	pop	{r7, pc}

080040c4 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..F) to select the GPIO peripheral for STM32F0 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80040c4:	b580      	push	{r7, lr}
 80040c6:	b082      	sub	sp, #8
 80040c8:	af00      	add	r7, sp, #0
 80040ca:	6078      	str	r0, [r7, #4]
 80040cc:	000a      	movs	r2, r1
 80040ce:	1cbb      	adds	r3, r7, #2
 80040d0:	801a      	strh	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) != 0X00u)
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	695b      	ldr	r3, [r3, #20]
 80040d6:	1cba      	adds	r2, r7, #2
 80040d8:	8812      	ldrh	r2, [r2, #0]
 80040da:	4013      	ands	r3, r2
 80040dc:	d005      	beq.n	80040ea <HAL_GPIO_TogglePin+0x26>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 80040de:	1cbb      	adds	r3, r7, #2
 80040e0:	881b      	ldrh	r3, [r3, #0]
 80040e2:	041a      	lsls	r2, r3, #16
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
  }
}
 80040e8:	e003      	b.n	80040f2 <HAL_GPIO_TogglePin+0x2e>
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80040ea:	1cbb      	adds	r3, r7, #2
 80040ec:	881a      	ldrh	r2, [r3, #0]
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	619a      	str	r2, [r3, #24]
}
 80040f2:	46c0      	nop			; (mov r8, r8)
 80040f4:	46bd      	mov	sp, r7
 80040f6:	b002      	add	sp, #8
 80040f8:	bd80      	pop	{r7, pc}
	...

080040fc <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80040fc:	b580      	push	{r7, lr}
 80040fe:	b082      	sub	sp, #8
 8004100:	af00      	add	r7, sp, #0
 8004102:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	2b00      	cmp	r3, #0
 8004108:	d101      	bne.n	800410e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800410a:	2301      	movs	r3, #1
 800410c:	e082      	b.n	8004214 <HAL_I2C_Init+0x118>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	2241      	movs	r2, #65	; 0x41
 8004112:	5c9b      	ldrb	r3, [r3, r2]
 8004114:	b2db      	uxtb	r3, r3
 8004116:	2b00      	cmp	r3, #0
 8004118:	d107      	bne.n	800412a <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	2240      	movs	r2, #64	; 0x40
 800411e:	2100      	movs	r1, #0
 8004120:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	0018      	movs	r0, r3
 8004126:	f7fe fdbd 	bl	8002ca4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	2241      	movs	r2, #65	; 0x41
 800412e:	2124      	movs	r1, #36	; 0x24
 8004130:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	681a      	ldr	r2, [r3, #0]
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	2101      	movs	r1, #1
 800413e:	438a      	bics	r2, r1
 8004140:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	685a      	ldr	r2, [r3, #4]
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	4934      	ldr	r1, [pc, #208]	; (800421c <HAL_I2C_Init+0x120>)
 800414c:	400a      	ands	r2, r1
 800414e:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	689a      	ldr	r2, [r3, #8]
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	4931      	ldr	r1, [pc, #196]	; (8004220 <HAL_I2C_Init+0x124>)
 800415c:	400a      	ands	r2, r1
 800415e:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	68db      	ldr	r3, [r3, #12]
 8004164:	2b01      	cmp	r3, #1
 8004166:	d108      	bne.n	800417a <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	689a      	ldr	r2, [r3, #8]
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	2180      	movs	r1, #128	; 0x80
 8004172:	0209      	lsls	r1, r1, #8
 8004174:	430a      	orrs	r2, r1
 8004176:	609a      	str	r2, [r3, #8]
 8004178:	e007      	b.n	800418a <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	689a      	ldr	r2, [r3, #8]
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	2184      	movs	r1, #132	; 0x84
 8004184:	0209      	lsls	r1, r1, #8
 8004186:	430a      	orrs	r2, r1
 8004188:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	68db      	ldr	r3, [r3, #12]
 800418e:	2b02      	cmp	r3, #2
 8004190:	d104      	bne.n	800419c <HAL_I2C_Init+0xa0>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	2280      	movs	r2, #128	; 0x80
 8004198:	0112      	lsls	r2, r2, #4
 800419a:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	685a      	ldr	r2, [r3, #4]
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	491f      	ldr	r1, [pc, #124]	; (8004224 <HAL_I2C_Init+0x128>)
 80041a8:	430a      	orrs	r2, r1
 80041aa:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	68da      	ldr	r2, [r3, #12]
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	491a      	ldr	r1, [pc, #104]	; (8004220 <HAL_I2C_Init+0x124>)
 80041b8:	400a      	ands	r2, r1
 80041ba:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	691a      	ldr	r2, [r3, #16]
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	695b      	ldr	r3, [r3, #20]
 80041c4:	431a      	orrs	r2, r3
 80041c6:	0011      	movs	r1, r2
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	699b      	ldr	r3, [r3, #24]
 80041cc:	021a      	lsls	r2, r3, #8
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	430a      	orrs	r2, r1
 80041d4:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	69d9      	ldr	r1, [r3, #28]
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	6a1a      	ldr	r2, [r3, #32]
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	681b      	ldr	r3, [r3, #0]
 80041e2:	430a      	orrs	r2, r1
 80041e4:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	681a      	ldr	r2, [r3, #0]
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	2101      	movs	r1, #1
 80041f2:	430a      	orrs	r2, r1
 80041f4:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	2200      	movs	r2, #0
 80041fa:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	2241      	movs	r2, #65	; 0x41
 8004200:	2120      	movs	r1, #32
 8004202:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	2200      	movs	r2, #0
 8004208:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	2242      	movs	r2, #66	; 0x42
 800420e:	2100      	movs	r1, #0
 8004210:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004212:	2300      	movs	r3, #0
}
 8004214:	0018      	movs	r0, r3
 8004216:	46bd      	mov	sp, r7
 8004218:	b002      	add	sp, #8
 800421a:	bd80      	pop	{r7, pc}
 800421c:	f0ffffff 	.word	0xf0ffffff
 8004220:	ffff7fff 	.word	0xffff7fff
 8004224:	02008000 	.word	0x02008000

08004228 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004228:	b590      	push	{r4, r7, lr}
 800422a:	b089      	sub	sp, #36	; 0x24
 800422c:	af02      	add	r7, sp, #8
 800422e:	60f8      	str	r0, [r7, #12]
 8004230:	0008      	movs	r0, r1
 8004232:	607a      	str	r2, [r7, #4]
 8004234:	0019      	movs	r1, r3
 8004236:	230a      	movs	r3, #10
 8004238:	18fb      	adds	r3, r7, r3
 800423a:	1c02      	adds	r2, r0, #0
 800423c:	801a      	strh	r2, [r3, #0]
 800423e:	2308      	movs	r3, #8
 8004240:	18fb      	adds	r3, r7, r3
 8004242:	1c0a      	adds	r2, r1, #0
 8004244:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004246:	68fb      	ldr	r3, [r7, #12]
 8004248:	2241      	movs	r2, #65	; 0x41
 800424a:	5c9b      	ldrb	r3, [r3, r2]
 800424c:	b2db      	uxtb	r3, r3
 800424e:	2b20      	cmp	r3, #32
 8004250:	d000      	beq.n	8004254 <HAL_I2C_Master_Transmit+0x2c>
 8004252:	e0e7      	b.n	8004424 <HAL_I2C_Master_Transmit+0x1fc>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004254:	68fb      	ldr	r3, [r7, #12]
 8004256:	2240      	movs	r2, #64	; 0x40
 8004258:	5c9b      	ldrb	r3, [r3, r2]
 800425a:	2b01      	cmp	r3, #1
 800425c:	d101      	bne.n	8004262 <HAL_I2C_Master_Transmit+0x3a>
 800425e:	2302      	movs	r3, #2
 8004260:	e0e1      	b.n	8004426 <HAL_I2C_Master_Transmit+0x1fe>
 8004262:	68fb      	ldr	r3, [r7, #12]
 8004264:	2240      	movs	r2, #64	; 0x40
 8004266:	2101      	movs	r1, #1
 8004268:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800426a:	f7fe fe9b 	bl	8002fa4 <HAL_GetTick>
 800426e:	0003      	movs	r3, r0
 8004270:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8004272:	2380      	movs	r3, #128	; 0x80
 8004274:	0219      	lsls	r1, r3, #8
 8004276:	68f8      	ldr	r0, [r7, #12]
 8004278:	697b      	ldr	r3, [r7, #20]
 800427a:	9300      	str	r3, [sp, #0]
 800427c:	2319      	movs	r3, #25
 800427e:	2201      	movs	r2, #1
 8004280:	f000 f8fc 	bl	800447c <I2C_WaitOnFlagUntilTimeout>
 8004284:	1e03      	subs	r3, r0, #0
 8004286:	d001      	beq.n	800428c <HAL_I2C_Master_Transmit+0x64>
    {
      return HAL_ERROR;
 8004288:	2301      	movs	r3, #1
 800428a:	e0cc      	b.n	8004426 <HAL_I2C_Master_Transmit+0x1fe>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800428c:	68fb      	ldr	r3, [r7, #12]
 800428e:	2241      	movs	r2, #65	; 0x41
 8004290:	2121      	movs	r1, #33	; 0x21
 8004292:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8004294:	68fb      	ldr	r3, [r7, #12]
 8004296:	2242      	movs	r2, #66	; 0x42
 8004298:	2110      	movs	r1, #16
 800429a:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800429c:	68fb      	ldr	r3, [r7, #12]
 800429e:	2200      	movs	r2, #0
 80042a0:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80042a2:	68fb      	ldr	r3, [r7, #12]
 80042a4:	687a      	ldr	r2, [r7, #4]
 80042a6:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80042a8:	68fb      	ldr	r3, [r7, #12]
 80042aa:	2208      	movs	r2, #8
 80042ac:	18ba      	adds	r2, r7, r2
 80042ae:	8812      	ldrh	r2, [r2, #0]
 80042b0:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80042b2:	68fb      	ldr	r3, [r7, #12]
 80042b4:	2200      	movs	r2, #0
 80042b6:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80042b8:	68fb      	ldr	r3, [r7, #12]
 80042ba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80042bc:	b29b      	uxth	r3, r3
 80042be:	2bff      	cmp	r3, #255	; 0xff
 80042c0:	d911      	bls.n	80042e6 <HAL_I2C_Master_Transmit+0xbe>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80042c2:	68fb      	ldr	r3, [r7, #12]
 80042c4:	22ff      	movs	r2, #255	; 0xff
 80042c6:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 80042c8:	68fb      	ldr	r3, [r7, #12]
 80042ca:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80042cc:	b2da      	uxtb	r2, r3
 80042ce:	2380      	movs	r3, #128	; 0x80
 80042d0:	045c      	lsls	r4, r3, #17
 80042d2:	230a      	movs	r3, #10
 80042d4:	18fb      	adds	r3, r7, r3
 80042d6:	8819      	ldrh	r1, [r3, #0]
 80042d8:	68f8      	ldr	r0, [r7, #12]
 80042da:	4b55      	ldr	r3, [pc, #340]	; (8004430 <HAL_I2C_Master_Transmit+0x208>)
 80042dc:	9300      	str	r3, [sp, #0]
 80042de:	0023      	movs	r3, r4
 80042e0:	f000 f9ec 	bl	80046bc <I2C_TransferConfig>
 80042e4:	e075      	b.n	80043d2 <HAL_I2C_Master_Transmit+0x1aa>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80042e6:	68fb      	ldr	r3, [r7, #12]
 80042e8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80042ea:	b29a      	uxth	r2, r3
 80042ec:	68fb      	ldr	r3, [r7, #12]
 80042ee:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_WRITE);
 80042f0:	68fb      	ldr	r3, [r7, #12]
 80042f2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80042f4:	b2da      	uxtb	r2, r3
 80042f6:	2380      	movs	r3, #128	; 0x80
 80042f8:	049c      	lsls	r4, r3, #18
 80042fa:	230a      	movs	r3, #10
 80042fc:	18fb      	adds	r3, r7, r3
 80042fe:	8819      	ldrh	r1, [r3, #0]
 8004300:	68f8      	ldr	r0, [r7, #12]
 8004302:	4b4b      	ldr	r3, [pc, #300]	; (8004430 <HAL_I2C_Master_Transmit+0x208>)
 8004304:	9300      	str	r3, [sp, #0]
 8004306:	0023      	movs	r3, r4
 8004308:	f000 f9d8 	bl	80046bc <I2C_TransferConfig>
    }

    while (hi2c->XferCount > 0U)
 800430c:	e061      	b.n	80043d2 <HAL_I2C_Master_Transmit+0x1aa>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800430e:	697a      	ldr	r2, [r7, #20]
 8004310:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004312:	68fb      	ldr	r3, [r7, #12]
 8004314:	0018      	movs	r0, r3
 8004316:	f000 f8f0 	bl	80044fa <I2C_WaitOnTXISFlagUntilTimeout>
 800431a:	1e03      	subs	r3, r0, #0
 800431c:	d001      	beq.n	8004322 <HAL_I2C_Master_Transmit+0xfa>
      {
        return HAL_ERROR;
 800431e:	2301      	movs	r3, #1
 8004320:	e081      	b.n	8004426 <HAL_I2C_Master_Transmit+0x1fe>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8004322:	68fb      	ldr	r3, [r7, #12]
 8004324:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004326:	781a      	ldrb	r2, [r3, #0]
 8004328:	68fb      	ldr	r3, [r7, #12]
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800432e:	68fb      	ldr	r3, [r7, #12]
 8004330:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004332:	1c5a      	adds	r2, r3, #1
 8004334:	68fb      	ldr	r3, [r7, #12]
 8004336:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8004338:	68fb      	ldr	r3, [r7, #12]
 800433a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800433c:	b29b      	uxth	r3, r3
 800433e:	3b01      	subs	r3, #1
 8004340:	b29a      	uxth	r2, r3
 8004342:	68fb      	ldr	r3, [r7, #12]
 8004344:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8004346:	68fb      	ldr	r3, [r7, #12]
 8004348:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800434a:	3b01      	subs	r3, #1
 800434c:	b29a      	uxth	r2, r3
 800434e:	68fb      	ldr	r3, [r7, #12]
 8004350:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8004352:	68fb      	ldr	r3, [r7, #12]
 8004354:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004356:	b29b      	uxth	r3, r3
 8004358:	2b00      	cmp	r3, #0
 800435a:	d03a      	beq.n	80043d2 <HAL_I2C_Master_Transmit+0x1aa>
 800435c:	68fb      	ldr	r3, [r7, #12]
 800435e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004360:	2b00      	cmp	r3, #0
 8004362:	d136      	bne.n	80043d2 <HAL_I2C_Master_Transmit+0x1aa>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8004364:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004366:	68f8      	ldr	r0, [r7, #12]
 8004368:	697b      	ldr	r3, [r7, #20]
 800436a:	9300      	str	r3, [sp, #0]
 800436c:	0013      	movs	r3, r2
 800436e:	2200      	movs	r2, #0
 8004370:	2180      	movs	r1, #128	; 0x80
 8004372:	f000 f883 	bl	800447c <I2C_WaitOnFlagUntilTimeout>
 8004376:	1e03      	subs	r3, r0, #0
 8004378:	d001      	beq.n	800437e <HAL_I2C_Master_Transmit+0x156>
        {
          return HAL_ERROR;
 800437a:	2301      	movs	r3, #1
 800437c:	e053      	b.n	8004426 <HAL_I2C_Master_Transmit+0x1fe>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800437e:	68fb      	ldr	r3, [r7, #12]
 8004380:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004382:	b29b      	uxth	r3, r3
 8004384:	2bff      	cmp	r3, #255	; 0xff
 8004386:	d911      	bls.n	80043ac <HAL_I2C_Master_Transmit+0x184>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8004388:	68fb      	ldr	r3, [r7, #12]
 800438a:	22ff      	movs	r2, #255	; 0xff
 800438c:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 800438e:	68fb      	ldr	r3, [r7, #12]
 8004390:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004392:	b2da      	uxtb	r2, r3
 8004394:	2380      	movs	r3, #128	; 0x80
 8004396:	045c      	lsls	r4, r3, #17
 8004398:	230a      	movs	r3, #10
 800439a:	18fb      	adds	r3, r7, r3
 800439c:	8819      	ldrh	r1, [r3, #0]
 800439e:	68f8      	ldr	r0, [r7, #12]
 80043a0:	2300      	movs	r3, #0
 80043a2:	9300      	str	r3, [sp, #0]
 80043a4:	0023      	movs	r3, r4
 80043a6:	f000 f989 	bl	80046bc <I2C_TransferConfig>
 80043aa:	e012      	b.n	80043d2 <HAL_I2C_Master_Transmit+0x1aa>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80043ac:	68fb      	ldr	r3, [r7, #12]
 80043ae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80043b0:	b29a      	uxth	r2, r3
 80043b2:	68fb      	ldr	r3, [r7, #12]
 80043b4:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80043b6:	68fb      	ldr	r3, [r7, #12]
 80043b8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80043ba:	b2da      	uxtb	r2, r3
 80043bc:	2380      	movs	r3, #128	; 0x80
 80043be:	049c      	lsls	r4, r3, #18
 80043c0:	230a      	movs	r3, #10
 80043c2:	18fb      	adds	r3, r7, r3
 80043c4:	8819      	ldrh	r1, [r3, #0]
 80043c6:	68f8      	ldr	r0, [r7, #12]
 80043c8:	2300      	movs	r3, #0
 80043ca:	9300      	str	r3, [sp, #0]
 80043cc:	0023      	movs	r3, r4
 80043ce:	f000 f975 	bl	80046bc <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 80043d2:	68fb      	ldr	r3, [r7, #12]
 80043d4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80043d6:	b29b      	uxth	r3, r3
 80043d8:	2b00      	cmp	r3, #0
 80043da:	d198      	bne.n	800430e <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80043dc:	697a      	ldr	r2, [r7, #20]
 80043de:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80043e0:	68fb      	ldr	r3, [r7, #12]
 80043e2:	0018      	movs	r0, r3
 80043e4:	f000 f8c8 	bl	8004578 <I2C_WaitOnSTOPFlagUntilTimeout>
 80043e8:	1e03      	subs	r3, r0, #0
 80043ea:	d001      	beq.n	80043f0 <HAL_I2C_Master_Transmit+0x1c8>
    {
      return HAL_ERROR;
 80043ec:	2301      	movs	r3, #1
 80043ee:	e01a      	b.n	8004426 <HAL_I2C_Master_Transmit+0x1fe>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80043f0:	68fb      	ldr	r3, [r7, #12]
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	2220      	movs	r2, #32
 80043f6:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80043f8:	68fb      	ldr	r3, [r7, #12]
 80043fa:	681b      	ldr	r3, [r3, #0]
 80043fc:	685a      	ldr	r2, [r3, #4]
 80043fe:	68fb      	ldr	r3, [r7, #12]
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	490c      	ldr	r1, [pc, #48]	; (8004434 <HAL_I2C_Master_Transmit+0x20c>)
 8004404:	400a      	ands	r2, r1
 8004406:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8004408:	68fb      	ldr	r3, [r7, #12]
 800440a:	2241      	movs	r2, #65	; 0x41
 800440c:	2120      	movs	r1, #32
 800440e:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8004410:	68fb      	ldr	r3, [r7, #12]
 8004412:	2242      	movs	r2, #66	; 0x42
 8004414:	2100      	movs	r1, #0
 8004416:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004418:	68fb      	ldr	r3, [r7, #12]
 800441a:	2240      	movs	r2, #64	; 0x40
 800441c:	2100      	movs	r1, #0
 800441e:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8004420:	2300      	movs	r3, #0
 8004422:	e000      	b.n	8004426 <HAL_I2C_Master_Transmit+0x1fe>
  }
  else
  {
    return HAL_BUSY;
 8004424:	2302      	movs	r3, #2
  }
}
 8004426:	0018      	movs	r0, r3
 8004428:	46bd      	mov	sp, r7
 800442a:	b007      	add	sp, #28
 800442c:	bd90      	pop	{r4, r7, pc}
 800442e:	46c0      	nop			; (mov r8, r8)
 8004430:	80002000 	.word	0x80002000
 8004434:	fe00e800 	.word	0xfe00e800

08004438 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8004438:	b580      	push	{r7, lr}
 800443a:	b082      	sub	sp, #8
 800443c:	af00      	add	r7, sp, #0
 800443e:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	699b      	ldr	r3, [r3, #24]
 8004446:	2202      	movs	r2, #2
 8004448:	4013      	ands	r3, r2
 800444a:	2b02      	cmp	r3, #2
 800444c:	d103      	bne.n	8004456 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	681b      	ldr	r3, [r3, #0]
 8004452:	2200      	movs	r2, #0
 8004454:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	681b      	ldr	r3, [r3, #0]
 800445a:	699b      	ldr	r3, [r3, #24]
 800445c:	2201      	movs	r2, #1
 800445e:	4013      	ands	r3, r2
 8004460:	2b01      	cmp	r3, #1
 8004462:	d007      	beq.n	8004474 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	681b      	ldr	r3, [r3, #0]
 8004468:	699a      	ldr	r2, [r3, #24]
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	2101      	movs	r1, #1
 8004470:	430a      	orrs	r2, r1
 8004472:	619a      	str	r2, [r3, #24]
  }
}
 8004474:	46c0      	nop			; (mov r8, r8)
 8004476:	46bd      	mov	sp, r7
 8004478:	b002      	add	sp, #8
 800447a:	bd80      	pop	{r7, pc}

0800447c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 800447c:	b580      	push	{r7, lr}
 800447e:	b084      	sub	sp, #16
 8004480:	af00      	add	r7, sp, #0
 8004482:	60f8      	str	r0, [r7, #12]
 8004484:	60b9      	str	r1, [r7, #8]
 8004486:	603b      	str	r3, [r7, #0]
 8004488:	1dfb      	adds	r3, r7, #7
 800448a:	701a      	strb	r2, [r3, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800448c:	e021      	b.n	80044d2 <I2C_WaitOnFlagUntilTimeout+0x56>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800448e:	683b      	ldr	r3, [r7, #0]
 8004490:	3301      	adds	r3, #1
 8004492:	d01e      	beq.n	80044d2 <I2C_WaitOnFlagUntilTimeout+0x56>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004494:	f7fe fd86 	bl	8002fa4 <HAL_GetTick>
 8004498:	0002      	movs	r2, r0
 800449a:	69bb      	ldr	r3, [r7, #24]
 800449c:	1ad3      	subs	r3, r2, r3
 800449e:	683a      	ldr	r2, [r7, #0]
 80044a0:	429a      	cmp	r2, r3
 80044a2:	d302      	bcc.n	80044aa <I2C_WaitOnFlagUntilTimeout+0x2e>
 80044a4:	683b      	ldr	r3, [r7, #0]
 80044a6:	2b00      	cmp	r3, #0
 80044a8:	d113      	bne.n	80044d2 <I2C_WaitOnFlagUntilTimeout+0x56>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80044aa:	68fb      	ldr	r3, [r7, #12]
 80044ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80044ae:	2220      	movs	r2, #32
 80044b0:	431a      	orrs	r2, r3
 80044b2:	68fb      	ldr	r3, [r7, #12]
 80044b4:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80044b6:	68fb      	ldr	r3, [r7, #12]
 80044b8:	2241      	movs	r2, #65	; 0x41
 80044ba:	2120      	movs	r1, #32
 80044bc:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80044be:	68fb      	ldr	r3, [r7, #12]
 80044c0:	2242      	movs	r2, #66	; 0x42
 80044c2:	2100      	movs	r1, #0
 80044c4:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80044c6:	68fb      	ldr	r3, [r7, #12]
 80044c8:	2240      	movs	r2, #64	; 0x40
 80044ca:	2100      	movs	r1, #0
 80044cc:	5499      	strb	r1, [r3, r2]
        return HAL_ERROR;
 80044ce:	2301      	movs	r3, #1
 80044d0:	e00f      	b.n	80044f2 <I2C_WaitOnFlagUntilTimeout+0x76>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80044d2:	68fb      	ldr	r3, [r7, #12]
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	699b      	ldr	r3, [r3, #24]
 80044d8:	68ba      	ldr	r2, [r7, #8]
 80044da:	4013      	ands	r3, r2
 80044dc:	68ba      	ldr	r2, [r7, #8]
 80044de:	1ad3      	subs	r3, r2, r3
 80044e0:	425a      	negs	r2, r3
 80044e2:	4153      	adcs	r3, r2
 80044e4:	b2db      	uxtb	r3, r3
 80044e6:	001a      	movs	r2, r3
 80044e8:	1dfb      	adds	r3, r7, #7
 80044ea:	781b      	ldrb	r3, [r3, #0]
 80044ec:	429a      	cmp	r2, r3
 80044ee:	d0ce      	beq.n	800448e <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80044f0:	2300      	movs	r3, #0
}
 80044f2:	0018      	movs	r0, r3
 80044f4:	46bd      	mov	sp, r7
 80044f6:	b004      	add	sp, #16
 80044f8:	bd80      	pop	{r7, pc}

080044fa <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80044fa:	b580      	push	{r7, lr}
 80044fc:	b084      	sub	sp, #16
 80044fe:	af00      	add	r7, sp, #0
 8004500:	60f8      	str	r0, [r7, #12]
 8004502:	60b9      	str	r1, [r7, #8]
 8004504:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8004506:	e02b      	b.n	8004560 <I2C_WaitOnTXISFlagUntilTimeout+0x66>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8004508:	687a      	ldr	r2, [r7, #4]
 800450a:	68b9      	ldr	r1, [r7, #8]
 800450c:	68fb      	ldr	r3, [r7, #12]
 800450e:	0018      	movs	r0, r3
 8004510:	f000 f86e 	bl	80045f0 <I2C_IsAcknowledgeFailed>
 8004514:	1e03      	subs	r3, r0, #0
 8004516:	d001      	beq.n	800451c <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8004518:	2301      	movs	r3, #1
 800451a:	e029      	b.n	8004570 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800451c:	68bb      	ldr	r3, [r7, #8]
 800451e:	3301      	adds	r3, #1
 8004520:	d01e      	beq.n	8004560 <I2C_WaitOnTXISFlagUntilTimeout+0x66>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004522:	f7fe fd3f 	bl	8002fa4 <HAL_GetTick>
 8004526:	0002      	movs	r2, r0
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	1ad3      	subs	r3, r2, r3
 800452c:	68ba      	ldr	r2, [r7, #8]
 800452e:	429a      	cmp	r2, r3
 8004530:	d302      	bcc.n	8004538 <I2C_WaitOnTXISFlagUntilTimeout+0x3e>
 8004532:	68bb      	ldr	r3, [r7, #8]
 8004534:	2b00      	cmp	r3, #0
 8004536:	d113      	bne.n	8004560 <I2C_WaitOnTXISFlagUntilTimeout+0x66>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004538:	68fb      	ldr	r3, [r7, #12]
 800453a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800453c:	2220      	movs	r2, #32
 800453e:	431a      	orrs	r2, r3
 8004540:	68fb      	ldr	r3, [r7, #12]
 8004542:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8004544:	68fb      	ldr	r3, [r7, #12]
 8004546:	2241      	movs	r2, #65	; 0x41
 8004548:	2120      	movs	r1, #32
 800454a:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800454c:	68fb      	ldr	r3, [r7, #12]
 800454e:	2242      	movs	r2, #66	; 0x42
 8004550:	2100      	movs	r1, #0
 8004552:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004554:	68fb      	ldr	r3, [r7, #12]
 8004556:	2240      	movs	r2, #64	; 0x40
 8004558:	2100      	movs	r1, #0
 800455a:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 800455c:	2301      	movs	r3, #1
 800455e:	e007      	b.n	8004570 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8004560:	68fb      	ldr	r3, [r7, #12]
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	699b      	ldr	r3, [r3, #24]
 8004566:	2202      	movs	r2, #2
 8004568:	4013      	ands	r3, r2
 800456a:	2b02      	cmp	r3, #2
 800456c:	d1cc      	bne.n	8004508 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800456e:	2300      	movs	r3, #0
}
 8004570:	0018      	movs	r0, r3
 8004572:	46bd      	mov	sp, r7
 8004574:	b004      	add	sp, #16
 8004576:	bd80      	pop	{r7, pc}

08004578 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004578:	b580      	push	{r7, lr}
 800457a:	b084      	sub	sp, #16
 800457c:	af00      	add	r7, sp, #0
 800457e:	60f8      	str	r0, [r7, #12]
 8004580:	60b9      	str	r1, [r7, #8]
 8004582:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004584:	e028      	b.n	80045d8 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8004586:	687a      	ldr	r2, [r7, #4]
 8004588:	68b9      	ldr	r1, [r7, #8]
 800458a:	68fb      	ldr	r3, [r7, #12]
 800458c:	0018      	movs	r0, r3
 800458e:	f000 f82f 	bl	80045f0 <I2C_IsAcknowledgeFailed>
 8004592:	1e03      	subs	r3, r0, #0
 8004594:	d001      	beq.n	800459a <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8004596:	2301      	movs	r3, #1
 8004598:	e026      	b.n	80045e8 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800459a:	f7fe fd03 	bl	8002fa4 <HAL_GetTick>
 800459e:	0002      	movs	r2, r0
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	1ad3      	subs	r3, r2, r3
 80045a4:	68ba      	ldr	r2, [r7, #8]
 80045a6:	429a      	cmp	r2, r3
 80045a8:	d302      	bcc.n	80045b0 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 80045aa:	68bb      	ldr	r3, [r7, #8]
 80045ac:	2b00      	cmp	r3, #0
 80045ae:	d113      	bne.n	80045d8 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80045b0:	68fb      	ldr	r3, [r7, #12]
 80045b2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80045b4:	2220      	movs	r2, #32
 80045b6:	431a      	orrs	r2, r3
 80045b8:	68fb      	ldr	r3, [r7, #12]
 80045ba:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 80045bc:	68fb      	ldr	r3, [r7, #12]
 80045be:	2241      	movs	r2, #65	; 0x41
 80045c0:	2120      	movs	r1, #32
 80045c2:	5499      	strb	r1, [r3, r2]
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80045c4:	68fb      	ldr	r3, [r7, #12]
 80045c6:	2242      	movs	r2, #66	; 0x42
 80045c8:	2100      	movs	r1, #0
 80045ca:	5499      	strb	r1, [r3, r2]

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80045cc:	68fb      	ldr	r3, [r7, #12]
 80045ce:	2240      	movs	r2, #64	; 0x40
 80045d0:	2100      	movs	r1, #0
 80045d2:	5499      	strb	r1, [r3, r2]

      return HAL_ERROR;
 80045d4:	2301      	movs	r3, #1
 80045d6:	e007      	b.n	80045e8 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80045d8:	68fb      	ldr	r3, [r7, #12]
 80045da:	681b      	ldr	r3, [r3, #0]
 80045dc:	699b      	ldr	r3, [r3, #24]
 80045de:	2220      	movs	r2, #32
 80045e0:	4013      	ands	r3, r2
 80045e2:	2b20      	cmp	r3, #32
 80045e4:	d1cf      	bne.n	8004586 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80045e6:	2300      	movs	r3, #0
}
 80045e8:	0018      	movs	r0, r3
 80045ea:	46bd      	mov	sp, r7
 80045ec:	b004      	add	sp, #16
 80045ee:	bd80      	pop	{r7, pc}

080045f0 <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80045f0:	b580      	push	{r7, lr}
 80045f2:	b084      	sub	sp, #16
 80045f4:	af00      	add	r7, sp, #0
 80045f6:	60f8      	str	r0, [r7, #12]
 80045f8:	60b9      	str	r1, [r7, #8]
 80045fa:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80045fc:	68fb      	ldr	r3, [r7, #12]
 80045fe:	681b      	ldr	r3, [r3, #0]
 8004600:	699b      	ldr	r3, [r3, #24]
 8004602:	2210      	movs	r2, #16
 8004604:	4013      	ands	r3, r2
 8004606:	2b10      	cmp	r3, #16
 8004608:	d151      	bne.n	80046ae <I2C_IsAcknowledgeFailed+0xbe>
  {
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800460a:	e021      	b.n	8004650 <I2C_IsAcknowledgeFailed+0x60>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800460c:	68bb      	ldr	r3, [r7, #8]
 800460e:	3301      	adds	r3, #1
 8004610:	d01e      	beq.n	8004650 <I2C_IsAcknowledgeFailed+0x60>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004612:	f7fe fcc7 	bl	8002fa4 <HAL_GetTick>
 8004616:	0002      	movs	r2, r0
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	1ad3      	subs	r3, r2, r3
 800461c:	68ba      	ldr	r2, [r7, #8]
 800461e:	429a      	cmp	r2, r3
 8004620:	d302      	bcc.n	8004628 <I2C_IsAcknowledgeFailed+0x38>
 8004622:	68bb      	ldr	r3, [r7, #8]
 8004624:	2b00      	cmp	r3, #0
 8004626:	d113      	bne.n	8004650 <I2C_IsAcknowledgeFailed+0x60>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004628:	68fb      	ldr	r3, [r7, #12]
 800462a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800462c:	2220      	movs	r2, #32
 800462e:	431a      	orrs	r2, r3
 8004630:	68fb      	ldr	r3, [r7, #12]
 8004632:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8004634:	68fb      	ldr	r3, [r7, #12]
 8004636:	2241      	movs	r2, #65	; 0x41
 8004638:	2120      	movs	r1, #32
 800463a:	5499      	strb	r1, [r3, r2]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800463c:	68fb      	ldr	r3, [r7, #12]
 800463e:	2242      	movs	r2, #66	; 0x42
 8004640:	2100      	movs	r1, #0
 8004642:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004644:	68fb      	ldr	r3, [r7, #12]
 8004646:	2240      	movs	r2, #64	; 0x40
 8004648:	2100      	movs	r1, #0
 800464a:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 800464c:	2301      	movs	r3, #1
 800464e:	e02f      	b.n	80046b0 <I2C_IsAcknowledgeFailed+0xc0>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004650:	68fb      	ldr	r3, [r7, #12]
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	699b      	ldr	r3, [r3, #24]
 8004656:	2220      	movs	r2, #32
 8004658:	4013      	ands	r3, r2
 800465a:	2b20      	cmp	r3, #32
 800465c:	d1d6      	bne.n	800460c <I2C_IsAcknowledgeFailed+0x1c>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800465e:	68fb      	ldr	r3, [r7, #12]
 8004660:	681b      	ldr	r3, [r3, #0]
 8004662:	2210      	movs	r2, #16
 8004664:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004666:	68fb      	ldr	r3, [r7, #12]
 8004668:	681b      	ldr	r3, [r3, #0]
 800466a:	2220      	movs	r2, #32
 800466c:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800466e:	68fb      	ldr	r3, [r7, #12]
 8004670:	0018      	movs	r0, r3
 8004672:	f7ff fee1 	bl	8004438 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8004676:	68fb      	ldr	r3, [r7, #12]
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	685a      	ldr	r2, [r3, #4]
 800467c:	68fb      	ldr	r3, [r7, #12]
 800467e:	681b      	ldr	r3, [r3, #0]
 8004680:	490d      	ldr	r1, [pc, #52]	; (80046b8 <I2C_IsAcknowledgeFailed+0xc8>)
 8004682:	400a      	ands	r2, r1
 8004684:	605a      	str	r2, [r3, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8004686:	68fb      	ldr	r3, [r7, #12]
 8004688:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800468a:	2204      	movs	r2, #4
 800468c:	431a      	orrs	r2, r3
 800468e:	68fb      	ldr	r3, [r7, #12]
 8004690:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8004692:	68fb      	ldr	r3, [r7, #12]
 8004694:	2241      	movs	r2, #65	; 0x41
 8004696:	2120      	movs	r1, #32
 8004698:	5499      	strb	r1, [r3, r2]
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800469a:	68fb      	ldr	r3, [r7, #12]
 800469c:	2242      	movs	r2, #66	; 0x42
 800469e:	2100      	movs	r1, #0
 80046a0:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80046a2:	68fb      	ldr	r3, [r7, #12]
 80046a4:	2240      	movs	r2, #64	; 0x40
 80046a6:	2100      	movs	r1, #0
 80046a8:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 80046aa:	2301      	movs	r3, #1
 80046ac:	e000      	b.n	80046b0 <I2C_IsAcknowledgeFailed+0xc0>
  }
  return HAL_OK;
 80046ae:	2300      	movs	r3, #0
}
 80046b0:	0018      	movs	r0, r3
 80046b2:	46bd      	mov	sp, r7
 80046b4:	b004      	add	sp, #16
 80046b6:	bd80      	pop	{r7, pc}
 80046b8:	fe00e800 	.word	0xfe00e800

080046bc <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_READ Generate Restart for read request.
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode, uint32_t Request)
{
 80046bc:	b590      	push	{r4, r7, lr}
 80046be:	b085      	sub	sp, #20
 80046c0:	af00      	add	r7, sp, #0
 80046c2:	60f8      	str	r0, [r7, #12]
 80046c4:	0008      	movs	r0, r1
 80046c6:	0011      	movs	r1, r2
 80046c8:	607b      	str	r3, [r7, #4]
 80046ca:	240a      	movs	r4, #10
 80046cc:	193b      	adds	r3, r7, r4
 80046ce:	1c02      	adds	r2, r0, #0
 80046d0:	801a      	strh	r2, [r3, #0]
 80046d2:	2009      	movs	r0, #9
 80046d4:	183b      	adds	r3, r7, r0
 80046d6:	1c0a      	adds	r2, r1, #0
 80046d8:	701a      	strb	r2, [r3, #0]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 80046da:	68fb      	ldr	r3, [r7, #12]
 80046dc:	681b      	ldr	r3, [r3, #0]
 80046de:	685b      	ldr	r3, [r3, #4]
 80046e0:	6a3a      	ldr	r2, [r7, #32]
 80046e2:	0d51      	lsrs	r1, r2, #21
 80046e4:	2280      	movs	r2, #128	; 0x80
 80046e6:	00d2      	lsls	r2, r2, #3
 80046e8:	400a      	ands	r2, r1
 80046ea:	490e      	ldr	r1, [pc, #56]	; (8004724 <I2C_TransferConfig+0x68>)
 80046ec:	430a      	orrs	r2, r1
 80046ee:	43d2      	mvns	r2, r2
 80046f0:	401a      	ands	r2, r3
 80046f2:	0011      	movs	r1, r2
 80046f4:	193b      	adds	r3, r7, r4
 80046f6:	881b      	ldrh	r3, [r3, #0]
 80046f8:	059b      	lsls	r3, r3, #22
 80046fa:	0d9a      	lsrs	r2, r3, #22
 80046fc:	183b      	adds	r3, r7, r0
 80046fe:	781b      	ldrb	r3, [r3, #0]
 8004700:	0418      	lsls	r0, r3, #16
 8004702:	23ff      	movs	r3, #255	; 0xff
 8004704:	041b      	lsls	r3, r3, #16
 8004706:	4003      	ands	r3, r0
 8004708:	431a      	orrs	r2, r3
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	431a      	orrs	r2, r3
 800470e:	6a3b      	ldr	r3, [r7, #32]
 8004710:	431a      	orrs	r2, r3
 8004712:	68fb      	ldr	r3, [r7, #12]
 8004714:	681b      	ldr	r3, [r3, #0]
 8004716:	430a      	orrs	r2, r1
 8004718:	605a      	str	r2, [r3, #4]
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | (uint32_t)Mode | (uint32_t)Request));
}
 800471a:	46c0      	nop			; (mov r8, r8)
 800471c:	46bd      	mov	sp, r7
 800471e:	b005      	add	sp, #20
 8004720:	bd90      	pop	{r4, r7, pc}
 8004722:	46c0      	nop			; (mov r8, r8)
 8004724:	03ff63ff 	.word	0x03ff63ff

08004728 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8004728:	b580      	push	{r7, lr}
 800472a:	b082      	sub	sp, #8
 800472c:	af00      	add	r7, sp, #0
 800472e:	6078      	str	r0, [r7, #4]
 8004730:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	2241      	movs	r2, #65	; 0x41
 8004736:	5c9b      	ldrb	r3, [r3, r2]
 8004738:	b2db      	uxtb	r3, r3
 800473a:	2b20      	cmp	r3, #32
 800473c:	d138      	bne.n	80047b0 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	2240      	movs	r2, #64	; 0x40
 8004742:	5c9b      	ldrb	r3, [r3, r2]
 8004744:	2b01      	cmp	r3, #1
 8004746:	d101      	bne.n	800474c <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8004748:	2302      	movs	r3, #2
 800474a:	e032      	b.n	80047b2 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	2240      	movs	r2, #64	; 0x40
 8004750:	2101      	movs	r1, #1
 8004752:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	2241      	movs	r2, #65	; 0x41
 8004758:	2124      	movs	r1, #36	; 0x24
 800475a:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	681b      	ldr	r3, [r3, #0]
 8004760:	681a      	ldr	r2, [r3, #0]
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	681b      	ldr	r3, [r3, #0]
 8004766:	2101      	movs	r1, #1
 8004768:	438a      	bics	r2, r1
 800476a:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	681b      	ldr	r3, [r3, #0]
 8004770:	681a      	ldr	r2, [r3, #0]
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	681b      	ldr	r3, [r3, #0]
 8004776:	4911      	ldr	r1, [pc, #68]	; (80047bc <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 8004778:	400a      	ands	r2, r1
 800477a:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	681b      	ldr	r3, [r3, #0]
 8004780:	6819      	ldr	r1, [r3, #0]
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	681b      	ldr	r3, [r3, #0]
 8004786:	683a      	ldr	r2, [r7, #0]
 8004788:	430a      	orrs	r2, r1
 800478a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	681b      	ldr	r3, [r3, #0]
 8004790:	681a      	ldr	r2, [r3, #0]
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	681b      	ldr	r3, [r3, #0]
 8004796:	2101      	movs	r1, #1
 8004798:	430a      	orrs	r2, r1
 800479a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	2241      	movs	r2, #65	; 0x41
 80047a0:	2120      	movs	r1, #32
 80047a2:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	2240      	movs	r2, #64	; 0x40
 80047a8:	2100      	movs	r1, #0
 80047aa:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 80047ac:	2300      	movs	r3, #0
 80047ae:	e000      	b.n	80047b2 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80047b0:	2302      	movs	r3, #2
  }
}
 80047b2:	0018      	movs	r0, r3
 80047b4:	46bd      	mov	sp, r7
 80047b6:	b002      	add	sp, #8
 80047b8:	bd80      	pop	{r7, pc}
 80047ba:	46c0      	nop			; (mov r8, r8)
 80047bc:	ffffefff 	.word	0xffffefff

080047c0 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80047c0:	b580      	push	{r7, lr}
 80047c2:	b084      	sub	sp, #16
 80047c4:	af00      	add	r7, sp, #0
 80047c6:	6078      	str	r0, [r7, #4]
 80047c8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	2241      	movs	r2, #65	; 0x41
 80047ce:	5c9b      	ldrb	r3, [r3, r2]
 80047d0:	b2db      	uxtb	r3, r3
 80047d2:	2b20      	cmp	r3, #32
 80047d4:	d139      	bne.n	800484a <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	2240      	movs	r2, #64	; 0x40
 80047da:	5c9b      	ldrb	r3, [r3, r2]
 80047dc:	2b01      	cmp	r3, #1
 80047de:	d101      	bne.n	80047e4 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80047e0:	2302      	movs	r3, #2
 80047e2:	e033      	b.n	800484c <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	2240      	movs	r2, #64	; 0x40
 80047e8:	2101      	movs	r1, #1
 80047ea:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	2241      	movs	r2, #65	; 0x41
 80047f0:	2124      	movs	r1, #36	; 0x24
 80047f2:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	681b      	ldr	r3, [r3, #0]
 80047f8:	681a      	ldr	r2, [r3, #0]
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	681b      	ldr	r3, [r3, #0]
 80047fe:	2101      	movs	r1, #1
 8004800:	438a      	bics	r2, r1
 8004802:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	681b      	ldr	r3, [r3, #0]
 8004808:	681b      	ldr	r3, [r3, #0]
 800480a:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800480c:	68fb      	ldr	r3, [r7, #12]
 800480e:	4a11      	ldr	r2, [pc, #68]	; (8004854 <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 8004810:	4013      	ands	r3, r2
 8004812:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8004814:	683b      	ldr	r3, [r7, #0]
 8004816:	021b      	lsls	r3, r3, #8
 8004818:	68fa      	ldr	r2, [r7, #12]
 800481a:	4313      	orrs	r3, r2
 800481c:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	68fa      	ldr	r2, [r7, #12]
 8004824:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	681b      	ldr	r3, [r3, #0]
 800482a:	681a      	ldr	r2, [r3, #0]
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	2101      	movs	r1, #1
 8004832:	430a      	orrs	r2, r1
 8004834:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	2241      	movs	r2, #65	; 0x41
 800483a:	2120      	movs	r1, #32
 800483c:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	2240      	movs	r2, #64	; 0x40
 8004842:	2100      	movs	r1, #0
 8004844:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8004846:	2300      	movs	r3, #0
 8004848:	e000      	b.n	800484c <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800484a:	2302      	movs	r3, #2
  }
}
 800484c:	0018      	movs	r0, r3
 800484e:	46bd      	mov	sp, r7
 8004850:	b004      	add	sp, #16
 8004852:	bd80      	pop	{r7, pc}
 8004854:	fffff0ff 	.word	0xfffff0ff

08004858 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004858:	b580      	push	{r7, lr}
 800485a:	b088      	sub	sp, #32
 800485c:	af00      	add	r7, sp, #0
 800485e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	2b00      	cmp	r3, #0
 8004864:	d101      	bne.n	800486a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004866:	2301      	movs	r3, #1
 8004868:	e303      	b.n	8004e72 <HAL_RCC_OscConfig+0x61a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	681b      	ldr	r3, [r3, #0]
 800486e:	2201      	movs	r2, #1
 8004870:	4013      	ands	r3, r2
 8004872:	d100      	bne.n	8004876 <HAL_RCC_OscConfig+0x1e>
 8004874:	e08d      	b.n	8004992 <HAL_RCC_OscConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8004876:	4bc4      	ldr	r3, [pc, #784]	; (8004b88 <HAL_RCC_OscConfig+0x330>)
 8004878:	685b      	ldr	r3, [r3, #4]
 800487a:	220c      	movs	r2, #12
 800487c:	4013      	ands	r3, r2
 800487e:	2b04      	cmp	r3, #4
 8004880:	d00e      	beq.n	80048a0 <HAL_RCC_OscConfig+0x48>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8004882:	4bc1      	ldr	r3, [pc, #772]	; (8004b88 <HAL_RCC_OscConfig+0x330>)
 8004884:	685b      	ldr	r3, [r3, #4]
 8004886:	220c      	movs	r2, #12
 8004888:	4013      	ands	r3, r2
 800488a:	2b08      	cmp	r3, #8
 800488c:	d116      	bne.n	80048bc <HAL_RCC_OscConfig+0x64>
 800488e:	4bbe      	ldr	r3, [pc, #760]	; (8004b88 <HAL_RCC_OscConfig+0x330>)
 8004890:	685a      	ldr	r2, [r3, #4]
 8004892:	2380      	movs	r3, #128	; 0x80
 8004894:	025b      	lsls	r3, r3, #9
 8004896:	401a      	ands	r2, r3
 8004898:	2380      	movs	r3, #128	; 0x80
 800489a:	025b      	lsls	r3, r3, #9
 800489c:	429a      	cmp	r2, r3
 800489e:	d10d      	bne.n	80048bc <HAL_RCC_OscConfig+0x64>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80048a0:	4bb9      	ldr	r3, [pc, #740]	; (8004b88 <HAL_RCC_OscConfig+0x330>)
 80048a2:	681a      	ldr	r2, [r3, #0]
 80048a4:	2380      	movs	r3, #128	; 0x80
 80048a6:	029b      	lsls	r3, r3, #10
 80048a8:	4013      	ands	r3, r2
 80048aa:	d100      	bne.n	80048ae <HAL_RCC_OscConfig+0x56>
 80048ac:	e070      	b.n	8004990 <HAL_RCC_OscConfig+0x138>
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	685b      	ldr	r3, [r3, #4]
 80048b2:	2b00      	cmp	r3, #0
 80048b4:	d000      	beq.n	80048b8 <HAL_RCC_OscConfig+0x60>
 80048b6:	e06b      	b.n	8004990 <HAL_RCC_OscConfig+0x138>
      {
        return HAL_ERROR;
 80048b8:	2301      	movs	r3, #1
 80048ba:	e2da      	b.n	8004e72 <HAL_RCC_OscConfig+0x61a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	685b      	ldr	r3, [r3, #4]
 80048c0:	2b01      	cmp	r3, #1
 80048c2:	d107      	bne.n	80048d4 <HAL_RCC_OscConfig+0x7c>
 80048c4:	4bb0      	ldr	r3, [pc, #704]	; (8004b88 <HAL_RCC_OscConfig+0x330>)
 80048c6:	681a      	ldr	r2, [r3, #0]
 80048c8:	4baf      	ldr	r3, [pc, #700]	; (8004b88 <HAL_RCC_OscConfig+0x330>)
 80048ca:	2180      	movs	r1, #128	; 0x80
 80048cc:	0249      	lsls	r1, r1, #9
 80048ce:	430a      	orrs	r2, r1
 80048d0:	601a      	str	r2, [r3, #0]
 80048d2:	e02f      	b.n	8004934 <HAL_RCC_OscConfig+0xdc>
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	685b      	ldr	r3, [r3, #4]
 80048d8:	2b00      	cmp	r3, #0
 80048da:	d10c      	bne.n	80048f6 <HAL_RCC_OscConfig+0x9e>
 80048dc:	4baa      	ldr	r3, [pc, #680]	; (8004b88 <HAL_RCC_OscConfig+0x330>)
 80048de:	681a      	ldr	r2, [r3, #0]
 80048e0:	4ba9      	ldr	r3, [pc, #676]	; (8004b88 <HAL_RCC_OscConfig+0x330>)
 80048e2:	49aa      	ldr	r1, [pc, #680]	; (8004b8c <HAL_RCC_OscConfig+0x334>)
 80048e4:	400a      	ands	r2, r1
 80048e6:	601a      	str	r2, [r3, #0]
 80048e8:	4ba7      	ldr	r3, [pc, #668]	; (8004b88 <HAL_RCC_OscConfig+0x330>)
 80048ea:	681a      	ldr	r2, [r3, #0]
 80048ec:	4ba6      	ldr	r3, [pc, #664]	; (8004b88 <HAL_RCC_OscConfig+0x330>)
 80048ee:	49a8      	ldr	r1, [pc, #672]	; (8004b90 <HAL_RCC_OscConfig+0x338>)
 80048f0:	400a      	ands	r2, r1
 80048f2:	601a      	str	r2, [r3, #0]
 80048f4:	e01e      	b.n	8004934 <HAL_RCC_OscConfig+0xdc>
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	685b      	ldr	r3, [r3, #4]
 80048fa:	2b05      	cmp	r3, #5
 80048fc:	d10e      	bne.n	800491c <HAL_RCC_OscConfig+0xc4>
 80048fe:	4ba2      	ldr	r3, [pc, #648]	; (8004b88 <HAL_RCC_OscConfig+0x330>)
 8004900:	681a      	ldr	r2, [r3, #0]
 8004902:	4ba1      	ldr	r3, [pc, #644]	; (8004b88 <HAL_RCC_OscConfig+0x330>)
 8004904:	2180      	movs	r1, #128	; 0x80
 8004906:	02c9      	lsls	r1, r1, #11
 8004908:	430a      	orrs	r2, r1
 800490a:	601a      	str	r2, [r3, #0]
 800490c:	4b9e      	ldr	r3, [pc, #632]	; (8004b88 <HAL_RCC_OscConfig+0x330>)
 800490e:	681a      	ldr	r2, [r3, #0]
 8004910:	4b9d      	ldr	r3, [pc, #628]	; (8004b88 <HAL_RCC_OscConfig+0x330>)
 8004912:	2180      	movs	r1, #128	; 0x80
 8004914:	0249      	lsls	r1, r1, #9
 8004916:	430a      	orrs	r2, r1
 8004918:	601a      	str	r2, [r3, #0]
 800491a:	e00b      	b.n	8004934 <HAL_RCC_OscConfig+0xdc>
 800491c:	4b9a      	ldr	r3, [pc, #616]	; (8004b88 <HAL_RCC_OscConfig+0x330>)
 800491e:	681a      	ldr	r2, [r3, #0]
 8004920:	4b99      	ldr	r3, [pc, #612]	; (8004b88 <HAL_RCC_OscConfig+0x330>)
 8004922:	499a      	ldr	r1, [pc, #616]	; (8004b8c <HAL_RCC_OscConfig+0x334>)
 8004924:	400a      	ands	r2, r1
 8004926:	601a      	str	r2, [r3, #0]
 8004928:	4b97      	ldr	r3, [pc, #604]	; (8004b88 <HAL_RCC_OscConfig+0x330>)
 800492a:	681a      	ldr	r2, [r3, #0]
 800492c:	4b96      	ldr	r3, [pc, #600]	; (8004b88 <HAL_RCC_OscConfig+0x330>)
 800492e:	4998      	ldr	r1, [pc, #608]	; (8004b90 <HAL_RCC_OscConfig+0x338>)
 8004930:	400a      	ands	r2, r1
 8004932:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	685b      	ldr	r3, [r3, #4]
 8004938:	2b00      	cmp	r3, #0
 800493a:	d014      	beq.n	8004966 <HAL_RCC_OscConfig+0x10e>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800493c:	f7fe fb32 	bl	8002fa4 <HAL_GetTick>
 8004940:	0003      	movs	r3, r0
 8004942:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004944:	e008      	b.n	8004958 <HAL_RCC_OscConfig+0x100>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004946:	f7fe fb2d 	bl	8002fa4 <HAL_GetTick>
 800494a:	0002      	movs	r2, r0
 800494c:	69bb      	ldr	r3, [r7, #24]
 800494e:	1ad3      	subs	r3, r2, r3
 8004950:	2b64      	cmp	r3, #100	; 0x64
 8004952:	d901      	bls.n	8004958 <HAL_RCC_OscConfig+0x100>
          {
            return HAL_TIMEOUT;
 8004954:	2303      	movs	r3, #3
 8004956:	e28c      	b.n	8004e72 <HAL_RCC_OscConfig+0x61a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004958:	4b8b      	ldr	r3, [pc, #556]	; (8004b88 <HAL_RCC_OscConfig+0x330>)
 800495a:	681a      	ldr	r2, [r3, #0]
 800495c:	2380      	movs	r3, #128	; 0x80
 800495e:	029b      	lsls	r3, r3, #10
 8004960:	4013      	ands	r3, r2
 8004962:	d0f0      	beq.n	8004946 <HAL_RCC_OscConfig+0xee>
 8004964:	e015      	b.n	8004992 <HAL_RCC_OscConfig+0x13a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004966:	f7fe fb1d 	bl	8002fa4 <HAL_GetTick>
 800496a:	0003      	movs	r3, r0
 800496c:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800496e:	e008      	b.n	8004982 <HAL_RCC_OscConfig+0x12a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004970:	f7fe fb18 	bl	8002fa4 <HAL_GetTick>
 8004974:	0002      	movs	r2, r0
 8004976:	69bb      	ldr	r3, [r7, #24]
 8004978:	1ad3      	subs	r3, r2, r3
 800497a:	2b64      	cmp	r3, #100	; 0x64
 800497c:	d901      	bls.n	8004982 <HAL_RCC_OscConfig+0x12a>
          {
            return HAL_TIMEOUT;
 800497e:	2303      	movs	r3, #3
 8004980:	e277      	b.n	8004e72 <HAL_RCC_OscConfig+0x61a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004982:	4b81      	ldr	r3, [pc, #516]	; (8004b88 <HAL_RCC_OscConfig+0x330>)
 8004984:	681a      	ldr	r2, [r3, #0]
 8004986:	2380      	movs	r3, #128	; 0x80
 8004988:	029b      	lsls	r3, r3, #10
 800498a:	4013      	ands	r3, r2
 800498c:	d1f0      	bne.n	8004970 <HAL_RCC_OscConfig+0x118>
 800498e:	e000      	b.n	8004992 <HAL_RCC_OscConfig+0x13a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004990:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	681b      	ldr	r3, [r3, #0]
 8004996:	2202      	movs	r2, #2
 8004998:	4013      	ands	r3, r2
 800499a:	d100      	bne.n	800499e <HAL_RCC_OscConfig+0x146>
 800499c:	e069      	b.n	8004a72 <HAL_RCC_OscConfig+0x21a>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 800499e:	4b7a      	ldr	r3, [pc, #488]	; (8004b88 <HAL_RCC_OscConfig+0x330>)
 80049a0:	685b      	ldr	r3, [r3, #4]
 80049a2:	220c      	movs	r2, #12
 80049a4:	4013      	ands	r3, r2
 80049a6:	d00b      	beq.n	80049c0 <HAL_RCC_OscConfig+0x168>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 80049a8:	4b77      	ldr	r3, [pc, #476]	; (8004b88 <HAL_RCC_OscConfig+0x330>)
 80049aa:	685b      	ldr	r3, [r3, #4]
 80049ac:	220c      	movs	r2, #12
 80049ae:	4013      	ands	r3, r2
 80049b0:	2b08      	cmp	r3, #8
 80049b2:	d11c      	bne.n	80049ee <HAL_RCC_OscConfig+0x196>
 80049b4:	4b74      	ldr	r3, [pc, #464]	; (8004b88 <HAL_RCC_OscConfig+0x330>)
 80049b6:	685a      	ldr	r2, [r3, #4]
 80049b8:	2380      	movs	r3, #128	; 0x80
 80049ba:	025b      	lsls	r3, r3, #9
 80049bc:	4013      	ands	r3, r2
 80049be:	d116      	bne.n	80049ee <HAL_RCC_OscConfig+0x196>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80049c0:	4b71      	ldr	r3, [pc, #452]	; (8004b88 <HAL_RCC_OscConfig+0x330>)
 80049c2:	681b      	ldr	r3, [r3, #0]
 80049c4:	2202      	movs	r2, #2
 80049c6:	4013      	ands	r3, r2
 80049c8:	d005      	beq.n	80049d6 <HAL_RCC_OscConfig+0x17e>
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	68db      	ldr	r3, [r3, #12]
 80049ce:	2b01      	cmp	r3, #1
 80049d0:	d001      	beq.n	80049d6 <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 80049d2:	2301      	movs	r3, #1
 80049d4:	e24d      	b.n	8004e72 <HAL_RCC_OscConfig+0x61a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80049d6:	4b6c      	ldr	r3, [pc, #432]	; (8004b88 <HAL_RCC_OscConfig+0x330>)
 80049d8:	681b      	ldr	r3, [r3, #0]
 80049da:	22f8      	movs	r2, #248	; 0xf8
 80049dc:	4393      	bics	r3, r2
 80049de:	0019      	movs	r1, r3
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	691b      	ldr	r3, [r3, #16]
 80049e4:	00da      	lsls	r2, r3, #3
 80049e6:	4b68      	ldr	r3, [pc, #416]	; (8004b88 <HAL_RCC_OscConfig+0x330>)
 80049e8:	430a      	orrs	r2, r1
 80049ea:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80049ec:	e041      	b.n	8004a72 <HAL_RCC_OscConfig+0x21a>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	68db      	ldr	r3, [r3, #12]
 80049f2:	2b00      	cmp	r3, #0
 80049f4:	d024      	beq.n	8004a40 <HAL_RCC_OscConfig+0x1e8>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80049f6:	4b64      	ldr	r3, [pc, #400]	; (8004b88 <HAL_RCC_OscConfig+0x330>)
 80049f8:	681a      	ldr	r2, [r3, #0]
 80049fa:	4b63      	ldr	r3, [pc, #396]	; (8004b88 <HAL_RCC_OscConfig+0x330>)
 80049fc:	2101      	movs	r1, #1
 80049fe:	430a      	orrs	r2, r1
 8004a00:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004a02:	f7fe facf 	bl	8002fa4 <HAL_GetTick>
 8004a06:	0003      	movs	r3, r0
 8004a08:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004a0a:	e008      	b.n	8004a1e <HAL_RCC_OscConfig+0x1c6>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004a0c:	f7fe faca 	bl	8002fa4 <HAL_GetTick>
 8004a10:	0002      	movs	r2, r0
 8004a12:	69bb      	ldr	r3, [r7, #24]
 8004a14:	1ad3      	subs	r3, r2, r3
 8004a16:	2b02      	cmp	r3, #2
 8004a18:	d901      	bls.n	8004a1e <HAL_RCC_OscConfig+0x1c6>
          {
            return HAL_TIMEOUT;
 8004a1a:	2303      	movs	r3, #3
 8004a1c:	e229      	b.n	8004e72 <HAL_RCC_OscConfig+0x61a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004a1e:	4b5a      	ldr	r3, [pc, #360]	; (8004b88 <HAL_RCC_OscConfig+0x330>)
 8004a20:	681b      	ldr	r3, [r3, #0]
 8004a22:	2202      	movs	r2, #2
 8004a24:	4013      	ands	r3, r2
 8004a26:	d0f1      	beq.n	8004a0c <HAL_RCC_OscConfig+0x1b4>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004a28:	4b57      	ldr	r3, [pc, #348]	; (8004b88 <HAL_RCC_OscConfig+0x330>)
 8004a2a:	681b      	ldr	r3, [r3, #0]
 8004a2c:	22f8      	movs	r2, #248	; 0xf8
 8004a2e:	4393      	bics	r3, r2
 8004a30:	0019      	movs	r1, r3
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	691b      	ldr	r3, [r3, #16]
 8004a36:	00da      	lsls	r2, r3, #3
 8004a38:	4b53      	ldr	r3, [pc, #332]	; (8004b88 <HAL_RCC_OscConfig+0x330>)
 8004a3a:	430a      	orrs	r2, r1
 8004a3c:	601a      	str	r2, [r3, #0]
 8004a3e:	e018      	b.n	8004a72 <HAL_RCC_OscConfig+0x21a>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004a40:	4b51      	ldr	r3, [pc, #324]	; (8004b88 <HAL_RCC_OscConfig+0x330>)
 8004a42:	681a      	ldr	r2, [r3, #0]
 8004a44:	4b50      	ldr	r3, [pc, #320]	; (8004b88 <HAL_RCC_OscConfig+0x330>)
 8004a46:	2101      	movs	r1, #1
 8004a48:	438a      	bics	r2, r1
 8004a4a:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004a4c:	f7fe faaa 	bl	8002fa4 <HAL_GetTick>
 8004a50:	0003      	movs	r3, r0
 8004a52:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004a54:	e008      	b.n	8004a68 <HAL_RCC_OscConfig+0x210>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004a56:	f7fe faa5 	bl	8002fa4 <HAL_GetTick>
 8004a5a:	0002      	movs	r2, r0
 8004a5c:	69bb      	ldr	r3, [r7, #24]
 8004a5e:	1ad3      	subs	r3, r2, r3
 8004a60:	2b02      	cmp	r3, #2
 8004a62:	d901      	bls.n	8004a68 <HAL_RCC_OscConfig+0x210>
          {
            return HAL_TIMEOUT;
 8004a64:	2303      	movs	r3, #3
 8004a66:	e204      	b.n	8004e72 <HAL_RCC_OscConfig+0x61a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004a68:	4b47      	ldr	r3, [pc, #284]	; (8004b88 <HAL_RCC_OscConfig+0x330>)
 8004a6a:	681b      	ldr	r3, [r3, #0]
 8004a6c:	2202      	movs	r2, #2
 8004a6e:	4013      	ands	r3, r2
 8004a70:	d1f1      	bne.n	8004a56 <HAL_RCC_OscConfig+0x1fe>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	681b      	ldr	r3, [r3, #0]
 8004a76:	2208      	movs	r2, #8
 8004a78:	4013      	ands	r3, r2
 8004a7a:	d036      	beq.n	8004aea <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	69db      	ldr	r3, [r3, #28]
 8004a80:	2b00      	cmp	r3, #0
 8004a82:	d019      	beq.n	8004ab8 <HAL_RCC_OscConfig+0x260>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004a84:	4b40      	ldr	r3, [pc, #256]	; (8004b88 <HAL_RCC_OscConfig+0x330>)
 8004a86:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004a88:	4b3f      	ldr	r3, [pc, #252]	; (8004b88 <HAL_RCC_OscConfig+0x330>)
 8004a8a:	2101      	movs	r1, #1
 8004a8c:	430a      	orrs	r2, r1
 8004a8e:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004a90:	f7fe fa88 	bl	8002fa4 <HAL_GetTick>
 8004a94:	0003      	movs	r3, r0
 8004a96:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004a98:	e008      	b.n	8004aac <HAL_RCC_OscConfig+0x254>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004a9a:	f7fe fa83 	bl	8002fa4 <HAL_GetTick>
 8004a9e:	0002      	movs	r2, r0
 8004aa0:	69bb      	ldr	r3, [r7, #24]
 8004aa2:	1ad3      	subs	r3, r2, r3
 8004aa4:	2b02      	cmp	r3, #2
 8004aa6:	d901      	bls.n	8004aac <HAL_RCC_OscConfig+0x254>
        {
          return HAL_TIMEOUT;
 8004aa8:	2303      	movs	r3, #3
 8004aaa:	e1e2      	b.n	8004e72 <HAL_RCC_OscConfig+0x61a>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004aac:	4b36      	ldr	r3, [pc, #216]	; (8004b88 <HAL_RCC_OscConfig+0x330>)
 8004aae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ab0:	2202      	movs	r2, #2
 8004ab2:	4013      	ands	r3, r2
 8004ab4:	d0f1      	beq.n	8004a9a <HAL_RCC_OscConfig+0x242>
 8004ab6:	e018      	b.n	8004aea <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004ab8:	4b33      	ldr	r3, [pc, #204]	; (8004b88 <HAL_RCC_OscConfig+0x330>)
 8004aba:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004abc:	4b32      	ldr	r3, [pc, #200]	; (8004b88 <HAL_RCC_OscConfig+0x330>)
 8004abe:	2101      	movs	r1, #1
 8004ac0:	438a      	bics	r2, r1
 8004ac2:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004ac4:	f7fe fa6e 	bl	8002fa4 <HAL_GetTick>
 8004ac8:	0003      	movs	r3, r0
 8004aca:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004acc:	e008      	b.n	8004ae0 <HAL_RCC_OscConfig+0x288>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004ace:	f7fe fa69 	bl	8002fa4 <HAL_GetTick>
 8004ad2:	0002      	movs	r2, r0
 8004ad4:	69bb      	ldr	r3, [r7, #24]
 8004ad6:	1ad3      	subs	r3, r2, r3
 8004ad8:	2b02      	cmp	r3, #2
 8004ada:	d901      	bls.n	8004ae0 <HAL_RCC_OscConfig+0x288>
        {
          return HAL_TIMEOUT;
 8004adc:	2303      	movs	r3, #3
 8004ade:	e1c8      	b.n	8004e72 <HAL_RCC_OscConfig+0x61a>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004ae0:	4b29      	ldr	r3, [pc, #164]	; (8004b88 <HAL_RCC_OscConfig+0x330>)
 8004ae2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ae4:	2202      	movs	r2, #2
 8004ae6:	4013      	ands	r3, r2
 8004ae8:	d1f1      	bne.n	8004ace <HAL_RCC_OscConfig+0x276>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	681b      	ldr	r3, [r3, #0]
 8004aee:	2204      	movs	r2, #4
 8004af0:	4013      	ands	r3, r2
 8004af2:	d100      	bne.n	8004af6 <HAL_RCC_OscConfig+0x29e>
 8004af4:	e0b6      	b.n	8004c64 <HAL_RCC_OscConfig+0x40c>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004af6:	231f      	movs	r3, #31
 8004af8:	18fb      	adds	r3, r7, r3
 8004afa:	2200      	movs	r2, #0
 8004afc:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004afe:	4b22      	ldr	r3, [pc, #136]	; (8004b88 <HAL_RCC_OscConfig+0x330>)
 8004b00:	69da      	ldr	r2, [r3, #28]
 8004b02:	2380      	movs	r3, #128	; 0x80
 8004b04:	055b      	lsls	r3, r3, #21
 8004b06:	4013      	ands	r3, r2
 8004b08:	d111      	bne.n	8004b2e <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004b0a:	4b1f      	ldr	r3, [pc, #124]	; (8004b88 <HAL_RCC_OscConfig+0x330>)
 8004b0c:	69da      	ldr	r2, [r3, #28]
 8004b0e:	4b1e      	ldr	r3, [pc, #120]	; (8004b88 <HAL_RCC_OscConfig+0x330>)
 8004b10:	2180      	movs	r1, #128	; 0x80
 8004b12:	0549      	lsls	r1, r1, #21
 8004b14:	430a      	orrs	r2, r1
 8004b16:	61da      	str	r2, [r3, #28]
 8004b18:	4b1b      	ldr	r3, [pc, #108]	; (8004b88 <HAL_RCC_OscConfig+0x330>)
 8004b1a:	69da      	ldr	r2, [r3, #28]
 8004b1c:	2380      	movs	r3, #128	; 0x80
 8004b1e:	055b      	lsls	r3, r3, #21
 8004b20:	4013      	ands	r3, r2
 8004b22:	60fb      	str	r3, [r7, #12]
 8004b24:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8004b26:	231f      	movs	r3, #31
 8004b28:	18fb      	adds	r3, r7, r3
 8004b2a:	2201      	movs	r2, #1
 8004b2c:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004b2e:	4b19      	ldr	r3, [pc, #100]	; (8004b94 <HAL_RCC_OscConfig+0x33c>)
 8004b30:	681a      	ldr	r2, [r3, #0]
 8004b32:	2380      	movs	r3, #128	; 0x80
 8004b34:	005b      	lsls	r3, r3, #1
 8004b36:	4013      	ands	r3, r2
 8004b38:	d11a      	bne.n	8004b70 <HAL_RCC_OscConfig+0x318>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004b3a:	4b16      	ldr	r3, [pc, #88]	; (8004b94 <HAL_RCC_OscConfig+0x33c>)
 8004b3c:	681a      	ldr	r2, [r3, #0]
 8004b3e:	4b15      	ldr	r3, [pc, #84]	; (8004b94 <HAL_RCC_OscConfig+0x33c>)
 8004b40:	2180      	movs	r1, #128	; 0x80
 8004b42:	0049      	lsls	r1, r1, #1
 8004b44:	430a      	orrs	r2, r1
 8004b46:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004b48:	f7fe fa2c 	bl	8002fa4 <HAL_GetTick>
 8004b4c:	0003      	movs	r3, r0
 8004b4e:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004b50:	e008      	b.n	8004b64 <HAL_RCC_OscConfig+0x30c>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004b52:	f7fe fa27 	bl	8002fa4 <HAL_GetTick>
 8004b56:	0002      	movs	r2, r0
 8004b58:	69bb      	ldr	r3, [r7, #24]
 8004b5a:	1ad3      	subs	r3, r2, r3
 8004b5c:	2b64      	cmp	r3, #100	; 0x64
 8004b5e:	d901      	bls.n	8004b64 <HAL_RCC_OscConfig+0x30c>
        {
          return HAL_TIMEOUT;
 8004b60:	2303      	movs	r3, #3
 8004b62:	e186      	b.n	8004e72 <HAL_RCC_OscConfig+0x61a>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004b64:	4b0b      	ldr	r3, [pc, #44]	; (8004b94 <HAL_RCC_OscConfig+0x33c>)
 8004b66:	681a      	ldr	r2, [r3, #0]
 8004b68:	2380      	movs	r3, #128	; 0x80
 8004b6a:	005b      	lsls	r3, r3, #1
 8004b6c:	4013      	ands	r3, r2
 8004b6e:	d0f0      	beq.n	8004b52 <HAL_RCC_OscConfig+0x2fa>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	689b      	ldr	r3, [r3, #8]
 8004b74:	2b01      	cmp	r3, #1
 8004b76:	d10f      	bne.n	8004b98 <HAL_RCC_OscConfig+0x340>
 8004b78:	4b03      	ldr	r3, [pc, #12]	; (8004b88 <HAL_RCC_OscConfig+0x330>)
 8004b7a:	6a1a      	ldr	r2, [r3, #32]
 8004b7c:	4b02      	ldr	r3, [pc, #8]	; (8004b88 <HAL_RCC_OscConfig+0x330>)
 8004b7e:	2101      	movs	r1, #1
 8004b80:	430a      	orrs	r2, r1
 8004b82:	621a      	str	r2, [r3, #32]
 8004b84:	e036      	b.n	8004bf4 <HAL_RCC_OscConfig+0x39c>
 8004b86:	46c0      	nop			; (mov r8, r8)
 8004b88:	40021000 	.word	0x40021000
 8004b8c:	fffeffff 	.word	0xfffeffff
 8004b90:	fffbffff 	.word	0xfffbffff
 8004b94:	40007000 	.word	0x40007000
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	689b      	ldr	r3, [r3, #8]
 8004b9c:	2b00      	cmp	r3, #0
 8004b9e:	d10c      	bne.n	8004bba <HAL_RCC_OscConfig+0x362>
 8004ba0:	4bb6      	ldr	r3, [pc, #728]	; (8004e7c <HAL_RCC_OscConfig+0x624>)
 8004ba2:	6a1a      	ldr	r2, [r3, #32]
 8004ba4:	4bb5      	ldr	r3, [pc, #724]	; (8004e7c <HAL_RCC_OscConfig+0x624>)
 8004ba6:	2101      	movs	r1, #1
 8004ba8:	438a      	bics	r2, r1
 8004baa:	621a      	str	r2, [r3, #32]
 8004bac:	4bb3      	ldr	r3, [pc, #716]	; (8004e7c <HAL_RCC_OscConfig+0x624>)
 8004bae:	6a1a      	ldr	r2, [r3, #32]
 8004bb0:	4bb2      	ldr	r3, [pc, #712]	; (8004e7c <HAL_RCC_OscConfig+0x624>)
 8004bb2:	2104      	movs	r1, #4
 8004bb4:	438a      	bics	r2, r1
 8004bb6:	621a      	str	r2, [r3, #32]
 8004bb8:	e01c      	b.n	8004bf4 <HAL_RCC_OscConfig+0x39c>
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	689b      	ldr	r3, [r3, #8]
 8004bbe:	2b05      	cmp	r3, #5
 8004bc0:	d10c      	bne.n	8004bdc <HAL_RCC_OscConfig+0x384>
 8004bc2:	4bae      	ldr	r3, [pc, #696]	; (8004e7c <HAL_RCC_OscConfig+0x624>)
 8004bc4:	6a1a      	ldr	r2, [r3, #32]
 8004bc6:	4bad      	ldr	r3, [pc, #692]	; (8004e7c <HAL_RCC_OscConfig+0x624>)
 8004bc8:	2104      	movs	r1, #4
 8004bca:	430a      	orrs	r2, r1
 8004bcc:	621a      	str	r2, [r3, #32]
 8004bce:	4bab      	ldr	r3, [pc, #684]	; (8004e7c <HAL_RCC_OscConfig+0x624>)
 8004bd0:	6a1a      	ldr	r2, [r3, #32]
 8004bd2:	4baa      	ldr	r3, [pc, #680]	; (8004e7c <HAL_RCC_OscConfig+0x624>)
 8004bd4:	2101      	movs	r1, #1
 8004bd6:	430a      	orrs	r2, r1
 8004bd8:	621a      	str	r2, [r3, #32]
 8004bda:	e00b      	b.n	8004bf4 <HAL_RCC_OscConfig+0x39c>
 8004bdc:	4ba7      	ldr	r3, [pc, #668]	; (8004e7c <HAL_RCC_OscConfig+0x624>)
 8004bde:	6a1a      	ldr	r2, [r3, #32]
 8004be0:	4ba6      	ldr	r3, [pc, #664]	; (8004e7c <HAL_RCC_OscConfig+0x624>)
 8004be2:	2101      	movs	r1, #1
 8004be4:	438a      	bics	r2, r1
 8004be6:	621a      	str	r2, [r3, #32]
 8004be8:	4ba4      	ldr	r3, [pc, #656]	; (8004e7c <HAL_RCC_OscConfig+0x624>)
 8004bea:	6a1a      	ldr	r2, [r3, #32]
 8004bec:	4ba3      	ldr	r3, [pc, #652]	; (8004e7c <HAL_RCC_OscConfig+0x624>)
 8004bee:	2104      	movs	r1, #4
 8004bf0:	438a      	bics	r2, r1
 8004bf2:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	689b      	ldr	r3, [r3, #8]
 8004bf8:	2b00      	cmp	r3, #0
 8004bfa:	d014      	beq.n	8004c26 <HAL_RCC_OscConfig+0x3ce>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004bfc:	f7fe f9d2 	bl	8002fa4 <HAL_GetTick>
 8004c00:	0003      	movs	r3, r0
 8004c02:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004c04:	e009      	b.n	8004c1a <HAL_RCC_OscConfig+0x3c2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004c06:	f7fe f9cd 	bl	8002fa4 <HAL_GetTick>
 8004c0a:	0002      	movs	r2, r0
 8004c0c:	69bb      	ldr	r3, [r7, #24]
 8004c0e:	1ad3      	subs	r3, r2, r3
 8004c10:	4a9b      	ldr	r2, [pc, #620]	; (8004e80 <HAL_RCC_OscConfig+0x628>)
 8004c12:	4293      	cmp	r3, r2
 8004c14:	d901      	bls.n	8004c1a <HAL_RCC_OscConfig+0x3c2>
        {
          return HAL_TIMEOUT;
 8004c16:	2303      	movs	r3, #3
 8004c18:	e12b      	b.n	8004e72 <HAL_RCC_OscConfig+0x61a>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004c1a:	4b98      	ldr	r3, [pc, #608]	; (8004e7c <HAL_RCC_OscConfig+0x624>)
 8004c1c:	6a1b      	ldr	r3, [r3, #32]
 8004c1e:	2202      	movs	r2, #2
 8004c20:	4013      	ands	r3, r2
 8004c22:	d0f0      	beq.n	8004c06 <HAL_RCC_OscConfig+0x3ae>
 8004c24:	e013      	b.n	8004c4e <HAL_RCC_OscConfig+0x3f6>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004c26:	f7fe f9bd 	bl	8002fa4 <HAL_GetTick>
 8004c2a:	0003      	movs	r3, r0
 8004c2c:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004c2e:	e009      	b.n	8004c44 <HAL_RCC_OscConfig+0x3ec>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004c30:	f7fe f9b8 	bl	8002fa4 <HAL_GetTick>
 8004c34:	0002      	movs	r2, r0
 8004c36:	69bb      	ldr	r3, [r7, #24]
 8004c38:	1ad3      	subs	r3, r2, r3
 8004c3a:	4a91      	ldr	r2, [pc, #580]	; (8004e80 <HAL_RCC_OscConfig+0x628>)
 8004c3c:	4293      	cmp	r3, r2
 8004c3e:	d901      	bls.n	8004c44 <HAL_RCC_OscConfig+0x3ec>
        {
          return HAL_TIMEOUT;
 8004c40:	2303      	movs	r3, #3
 8004c42:	e116      	b.n	8004e72 <HAL_RCC_OscConfig+0x61a>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004c44:	4b8d      	ldr	r3, [pc, #564]	; (8004e7c <HAL_RCC_OscConfig+0x624>)
 8004c46:	6a1b      	ldr	r3, [r3, #32]
 8004c48:	2202      	movs	r2, #2
 8004c4a:	4013      	ands	r3, r2
 8004c4c:	d1f0      	bne.n	8004c30 <HAL_RCC_OscConfig+0x3d8>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8004c4e:	231f      	movs	r3, #31
 8004c50:	18fb      	adds	r3, r7, r3
 8004c52:	781b      	ldrb	r3, [r3, #0]
 8004c54:	2b01      	cmp	r3, #1
 8004c56:	d105      	bne.n	8004c64 <HAL_RCC_OscConfig+0x40c>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004c58:	4b88      	ldr	r3, [pc, #544]	; (8004e7c <HAL_RCC_OscConfig+0x624>)
 8004c5a:	69da      	ldr	r2, [r3, #28]
 8004c5c:	4b87      	ldr	r3, [pc, #540]	; (8004e7c <HAL_RCC_OscConfig+0x624>)
 8004c5e:	4989      	ldr	r1, [pc, #548]	; (8004e84 <HAL_RCC_OscConfig+0x62c>)
 8004c60:	400a      	ands	r2, r1
 8004c62:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	681b      	ldr	r3, [r3, #0]
 8004c68:	2210      	movs	r2, #16
 8004c6a:	4013      	ands	r3, r2
 8004c6c:	d063      	beq.n	8004d36 <HAL_RCC_OscConfig+0x4de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	695b      	ldr	r3, [r3, #20]
 8004c72:	2b01      	cmp	r3, #1
 8004c74:	d12a      	bne.n	8004ccc <HAL_RCC_OscConfig+0x474>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8004c76:	4b81      	ldr	r3, [pc, #516]	; (8004e7c <HAL_RCC_OscConfig+0x624>)
 8004c78:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004c7a:	4b80      	ldr	r3, [pc, #512]	; (8004e7c <HAL_RCC_OscConfig+0x624>)
 8004c7c:	2104      	movs	r1, #4
 8004c7e:	430a      	orrs	r2, r1
 8004c80:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 8004c82:	4b7e      	ldr	r3, [pc, #504]	; (8004e7c <HAL_RCC_OscConfig+0x624>)
 8004c84:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004c86:	4b7d      	ldr	r3, [pc, #500]	; (8004e7c <HAL_RCC_OscConfig+0x624>)
 8004c88:	2101      	movs	r1, #1
 8004c8a:	430a      	orrs	r2, r1
 8004c8c:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004c8e:	f7fe f989 	bl	8002fa4 <HAL_GetTick>
 8004c92:	0003      	movs	r3, r0
 8004c94:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8004c96:	e008      	b.n	8004caa <HAL_RCC_OscConfig+0x452>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8004c98:	f7fe f984 	bl	8002fa4 <HAL_GetTick>
 8004c9c:	0002      	movs	r2, r0
 8004c9e:	69bb      	ldr	r3, [r7, #24]
 8004ca0:	1ad3      	subs	r3, r2, r3
 8004ca2:	2b02      	cmp	r3, #2
 8004ca4:	d901      	bls.n	8004caa <HAL_RCC_OscConfig+0x452>
        {
          return HAL_TIMEOUT;
 8004ca6:	2303      	movs	r3, #3
 8004ca8:	e0e3      	b.n	8004e72 <HAL_RCC_OscConfig+0x61a>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8004caa:	4b74      	ldr	r3, [pc, #464]	; (8004e7c <HAL_RCC_OscConfig+0x624>)
 8004cac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004cae:	2202      	movs	r2, #2
 8004cb0:	4013      	ands	r3, r2
 8004cb2:	d0f1      	beq.n	8004c98 <HAL_RCC_OscConfig+0x440>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8004cb4:	4b71      	ldr	r3, [pc, #452]	; (8004e7c <HAL_RCC_OscConfig+0x624>)
 8004cb6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004cb8:	22f8      	movs	r2, #248	; 0xf8
 8004cba:	4393      	bics	r3, r2
 8004cbc:	0019      	movs	r1, r3
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	699b      	ldr	r3, [r3, #24]
 8004cc2:	00da      	lsls	r2, r3, #3
 8004cc4:	4b6d      	ldr	r3, [pc, #436]	; (8004e7c <HAL_RCC_OscConfig+0x624>)
 8004cc6:	430a      	orrs	r2, r1
 8004cc8:	635a      	str	r2, [r3, #52]	; 0x34
 8004cca:	e034      	b.n	8004d36 <HAL_RCC_OscConfig+0x4de>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	695b      	ldr	r3, [r3, #20]
 8004cd0:	3305      	adds	r3, #5
 8004cd2:	d111      	bne.n	8004cf8 <HAL_RCC_OscConfig+0x4a0>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 8004cd4:	4b69      	ldr	r3, [pc, #420]	; (8004e7c <HAL_RCC_OscConfig+0x624>)
 8004cd6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004cd8:	4b68      	ldr	r3, [pc, #416]	; (8004e7c <HAL_RCC_OscConfig+0x624>)
 8004cda:	2104      	movs	r1, #4
 8004cdc:	438a      	bics	r2, r1
 8004cde:	635a      	str	r2, [r3, #52]	; 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8004ce0:	4b66      	ldr	r3, [pc, #408]	; (8004e7c <HAL_RCC_OscConfig+0x624>)
 8004ce2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004ce4:	22f8      	movs	r2, #248	; 0xf8
 8004ce6:	4393      	bics	r3, r2
 8004ce8:	0019      	movs	r1, r3
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	699b      	ldr	r3, [r3, #24]
 8004cee:	00da      	lsls	r2, r3, #3
 8004cf0:	4b62      	ldr	r3, [pc, #392]	; (8004e7c <HAL_RCC_OscConfig+0x624>)
 8004cf2:	430a      	orrs	r2, r1
 8004cf4:	635a      	str	r2, [r3, #52]	; 0x34
 8004cf6:	e01e      	b.n	8004d36 <HAL_RCC_OscConfig+0x4de>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8004cf8:	4b60      	ldr	r3, [pc, #384]	; (8004e7c <HAL_RCC_OscConfig+0x624>)
 8004cfa:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004cfc:	4b5f      	ldr	r3, [pc, #380]	; (8004e7c <HAL_RCC_OscConfig+0x624>)
 8004cfe:	2104      	movs	r1, #4
 8004d00:	430a      	orrs	r2, r1
 8004d02:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 8004d04:	4b5d      	ldr	r3, [pc, #372]	; (8004e7c <HAL_RCC_OscConfig+0x624>)
 8004d06:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004d08:	4b5c      	ldr	r3, [pc, #368]	; (8004e7c <HAL_RCC_OscConfig+0x624>)
 8004d0a:	2101      	movs	r1, #1
 8004d0c:	438a      	bics	r2, r1
 8004d0e:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004d10:	f7fe f948 	bl	8002fa4 <HAL_GetTick>
 8004d14:	0003      	movs	r3, r0
 8004d16:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8004d18:	e008      	b.n	8004d2c <HAL_RCC_OscConfig+0x4d4>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8004d1a:	f7fe f943 	bl	8002fa4 <HAL_GetTick>
 8004d1e:	0002      	movs	r2, r0
 8004d20:	69bb      	ldr	r3, [r7, #24]
 8004d22:	1ad3      	subs	r3, r2, r3
 8004d24:	2b02      	cmp	r3, #2
 8004d26:	d901      	bls.n	8004d2c <HAL_RCC_OscConfig+0x4d4>
        {
          return HAL_TIMEOUT;
 8004d28:	2303      	movs	r3, #3
 8004d2a:	e0a2      	b.n	8004e72 <HAL_RCC_OscConfig+0x61a>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8004d2c:	4b53      	ldr	r3, [pc, #332]	; (8004e7c <HAL_RCC_OscConfig+0x624>)
 8004d2e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004d30:	2202      	movs	r2, #2
 8004d32:	4013      	ands	r3, r2
 8004d34:	d1f1      	bne.n	8004d1a <HAL_RCC_OscConfig+0x4c2>
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	6a1b      	ldr	r3, [r3, #32]
 8004d3a:	2b00      	cmp	r3, #0
 8004d3c:	d100      	bne.n	8004d40 <HAL_RCC_OscConfig+0x4e8>
 8004d3e:	e097      	b.n	8004e70 <HAL_RCC_OscConfig+0x618>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004d40:	4b4e      	ldr	r3, [pc, #312]	; (8004e7c <HAL_RCC_OscConfig+0x624>)
 8004d42:	685b      	ldr	r3, [r3, #4]
 8004d44:	220c      	movs	r2, #12
 8004d46:	4013      	ands	r3, r2
 8004d48:	2b08      	cmp	r3, #8
 8004d4a:	d100      	bne.n	8004d4e <HAL_RCC_OscConfig+0x4f6>
 8004d4c:	e06b      	b.n	8004e26 <HAL_RCC_OscConfig+0x5ce>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	6a1b      	ldr	r3, [r3, #32]
 8004d52:	2b02      	cmp	r3, #2
 8004d54:	d14c      	bne.n	8004df0 <HAL_RCC_OscConfig+0x598>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004d56:	4b49      	ldr	r3, [pc, #292]	; (8004e7c <HAL_RCC_OscConfig+0x624>)
 8004d58:	681a      	ldr	r2, [r3, #0]
 8004d5a:	4b48      	ldr	r3, [pc, #288]	; (8004e7c <HAL_RCC_OscConfig+0x624>)
 8004d5c:	494a      	ldr	r1, [pc, #296]	; (8004e88 <HAL_RCC_OscConfig+0x630>)
 8004d5e:	400a      	ands	r2, r1
 8004d60:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004d62:	f7fe f91f 	bl	8002fa4 <HAL_GetTick>
 8004d66:	0003      	movs	r3, r0
 8004d68:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004d6a:	e008      	b.n	8004d7e <HAL_RCC_OscConfig+0x526>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004d6c:	f7fe f91a 	bl	8002fa4 <HAL_GetTick>
 8004d70:	0002      	movs	r2, r0
 8004d72:	69bb      	ldr	r3, [r7, #24]
 8004d74:	1ad3      	subs	r3, r2, r3
 8004d76:	2b02      	cmp	r3, #2
 8004d78:	d901      	bls.n	8004d7e <HAL_RCC_OscConfig+0x526>
          {
            return HAL_TIMEOUT;
 8004d7a:	2303      	movs	r3, #3
 8004d7c:	e079      	b.n	8004e72 <HAL_RCC_OscConfig+0x61a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004d7e:	4b3f      	ldr	r3, [pc, #252]	; (8004e7c <HAL_RCC_OscConfig+0x624>)
 8004d80:	681a      	ldr	r2, [r3, #0]
 8004d82:	2380      	movs	r3, #128	; 0x80
 8004d84:	049b      	lsls	r3, r3, #18
 8004d86:	4013      	ands	r3, r2
 8004d88:	d1f0      	bne.n	8004d6c <HAL_RCC_OscConfig+0x514>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004d8a:	4b3c      	ldr	r3, [pc, #240]	; (8004e7c <HAL_RCC_OscConfig+0x624>)
 8004d8c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d8e:	220f      	movs	r2, #15
 8004d90:	4393      	bics	r3, r2
 8004d92:	0019      	movs	r1, r3
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004d98:	4b38      	ldr	r3, [pc, #224]	; (8004e7c <HAL_RCC_OscConfig+0x624>)
 8004d9a:	430a      	orrs	r2, r1
 8004d9c:	62da      	str	r2, [r3, #44]	; 0x2c
 8004d9e:	4b37      	ldr	r3, [pc, #220]	; (8004e7c <HAL_RCC_OscConfig+0x624>)
 8004da0:	685b      	ldr	r3, [r3, #4]
 8004da2:	4a3a      	ldr	r2, [pc, #232]	; (8004e8c <HAL_RCC_OscConfig+0x634>)
 8004da4:	4013      	ands	r3, r2
 8004da6:	0019      	movs	r1, r3
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004db0:	431a      	orrs	r2, r3
 8004db2:	4b32      	ldr	r3, [pc, #200]	; (8004e7c <HAL_RCC_OscConfig+0x624>)
 8004db4:	430a      	orrs	r2, r1
 8004db6:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004db8:	4b30      	ldr	r3, [pc, #192]	; (8004e7c <HAL_RCC_OscConfig+0x624>)
 8004dba:	681a      	ldr	r2, [r3, #0]
 8004dbc:	4b2f      	ldr	r3, [pc, #188]	; (8004e7c <HAL_RCC_OscConfig+0x624>)
 8004dbe:	2180      	movs	r1, #128	; 0x80
 8004dc0:	0449      	lsls	r1, r1, #17
 8004dc2:	430a      	orrs	r2, r1
 8004dc4:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004dc6:	f7fe f8ed 	bl	8002fa4 <HAL_GetTick>
 8004dca:	0003      	movs	r3, r0
 8004dcc:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004dce:	e008      	b.n	8004de2 <HAL_RCC_OscConfig+0x58a>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004dd0:	f7fe f8e8 	bl	8002fa4 <HAL_GetTick>
 8004dd4:	0002      	movs	r2, r0
 8004dd6:	69bb      	ldr	r3, [r7, #24]
 8004dd8:	1ad3      	subs	r3, r2, r3
 8004dda:	2b02      	cmp	r3, #2
 8004ddc:	d901      	bls.n	8004de2 <HAL_RCC_OscConfig+0x58a>
          {
            return HAL_TIMEOUT;
 8004dde:	2303      	movs	r3, #3
 8004de0:	e047      	b.n	8004e72 <HAL_RCC_OscConfig+0x61a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004de2:	4b26      	ldr	r3, [pc, #152]	; (8004e7c <HAL_RCC_OscConfig+0x624>)
 8004de4:	681a      	ldr	r2, [r3, #0]
 8004de6:	2380      	movs	r3, #128	; 0x80
 8004de8:	049b      	lsls	r3, r3, #18
 8004dea:	4013      	ands	r3, r2
 8004dec:	d0f0      	beq.n	8004dd0 <HAL_RCC_OscConfig+0x578>
 8004dee:	e03f      	b.n	8004e70 <HAL_RCC_OscConfig+0x618>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004df0:	4b22      	ldr	r3, [pc, #136]	; (8004e7c <HAL_RCC_OscConfig+0x624>)
 8004df2:	681a      	ldr	r2, [r3, #0]
 8004df4:	4b21      	ldr	r3, [pc, #132]	; (8004e7c <HAL_RCC_OscConfig+0x624>)
 8004df6:	4924      	ldr	r1, [pc, #144]	; (8004e88 <HAL_RCC_OscConfig+0x630>)
 8004df8:	400a      	ands	r2, r1
 8004dfa:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004dfc:	f7fe f8d2 	bl	8002fa4 <HAL_GetTick>
 8004e00:	0003      	movs	r3, r0
 8004e02:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004e04:	e008      	b.n	8004e18 <HAL_RCC_OscConfig+0x5c0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004e06:	f7fe f8cd 	bl	8002fa4 <HAL_GetTick>
 8004e0a:	0002      	movs	r2, r0
 8004e0c:	69bb      	ldr	r3, [r7, #24]
 8004e0e:	1ad3      	subs	r3, r2, r3
 8004e10:	2b02      	cmp	r3, #2
 8004e12:	d901      	bls.n	8004e18 <HAL_RCC_OscConfig+0x5c0>
          {
            return HAL_TIMEOUT;
 8004e14:	2303      	movs	r3, #3
 8004e16:	e02c      	b.n	8004e72 <HAL_RCC_OscConfig+0x61a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004e18:	4b18      	ldr	r3, [pc, #96]	; (8004e7c <HAL_RCC_OscConfig+0x624>)
 8004e1a:	681a      	ldr	r2, [r3, #0]
 8004e1c:	2380      	movs	r3, #128	; 0x80
 8004e1e:	049b      	lsls	r3, r3, #18
 8004e20:	4013      	ands	r3, r2
 8004e22:	d1f0      	bne.n	8004e06 <HAL_RCC_OscConfig+0x5ae>
 8004e24:	e024      	b.n	8004e70 <HAL_RCC_OscConfig+0x618>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	6a1b      	ldr	r3, [r3, #32]
 8004e2a:	2b01      	cmp	r3, #1
 8004e2c:	d101      	bne.n	8004e32 <HAL_RCC_OscConfig+0x5da>
      {
        return HAL_ERROR;
 8004e2e:	2301      	movs	r3, #1
 8004e30:	e01f      	b.n	8004e72 <HAL_RCC_OscConfig+0x61a>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 8004e32:	4b12      	ldr	r3, [pc, #72]	; (8004e7c <HAL_RCC_OscConfig+0x624>)
 8004e34:	685b      	ldr	r3, [r3, #4]
 8004e36:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 8004e38:	4b10      	ldr	r3, [pc, #64]	; (8004e7c <HAL_RCC_OscConfig+0x624>)
 8004e3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e3c:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8004e3e:	697a      	ldr	r2, [r7, #20]
 8004e40:	2380      	movs	r3, #128	; 0x80
 8004e42:	025b      	lsls	r3, r3, #9
 8004e44:	401a      	ands	r2, r3
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e4a:	429a      	cmp	r2, r3
 8004e4c:	d10e      	bne.n	8004e6c <HAL_RCC_OscConfig+0x614>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8004e4e:	693b      	ldr	r3, [r7, #16]
 8004e50:	220f      	movs	r2, #15
 8004e52:	401a      	ands	r2, r3
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8004e58:	429a      	cmp	r2, r3
 8004e5a:	d107      	bne.n	8004e6c <HAL_RCC_OscConfig+0x614>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 8004e5c:	697a      	ldr	r2, [r7, #20]
 8004e5e:	23f0      	movs	r3, #240	; 0xf0
 8004e60:	039b      	lsls	r3, r3, #14
 8004e62:	401a      	ands	r2, r3
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8004e68:	429a      	cmp	r2, r3
 8004e6a:	d001      	beq.n	8004e70 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_ERROR;
 8004e6c:	2301      	movs	r3, #1
 8004e6e:	e000      	b.n	8004e72 <HAL_RCC_OscConfig+0x61a>
        }
      }
    }
  }

  return HAL_OK;
 8004e70:	2300      	movs	r3, #0
}
 8004e72:	0018      	movs	r0, r3
 8004e74:	46bd      	mov	sp, r7
 8004e76:	b008      	add	sp, #32
 8004e78:	bd80      	pop	{r7, pc}
 8004e7a:	46c0      	nop			; (mov r8, r8)
 8004e7c:	40021000 	.word	0x40021000
 8004e80:	00001388 	.word	0x00001388
 8004e84:	efffffff 	.word	0xefffffff
 8004e88:	feffffff 	.word	0xfeffffff
 8004e8c:	ffc2ffff 	.word	0xffc2ffff

08004e90 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004e90:	b580      	push	{r7, lr}
 8004e92:	b084      	sub	sp, #16
 8004e94:	af00      	add	r7, sp, #0
 8004e96:	6078      	str	r0, [r7, #4]
 8004e98:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	2b00      	cmp	r3, #0
 8004e9e:	d101      	bne.n	8004ea4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004ea0:	2301      	movs	r3, #1
 8004ea2:	e0b3      	b.n	800500c <HAL_RCC_ClockConfig+0x17c>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004ea4:	4b5b      	ldr	r3, [pc, #364]	; (8005014 <HAL_RCC_ClockConfig+0x184>)
 8004ea6:	681b      	ldr	r3, [r3, #0]
 8004ea8:	2201      	movs	r2, #1
 8004eaa:	4013      	ands	r3, r2
 8004eac:	683a      	ldr	r2, [r7, #0]
 8004eae:	429a      	cmp	r2, r3
 8004eb0:	d911      	bls.n	8004ed6 <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004eb2:	4b58      	ldr	r3, [pc, #352]	; (8005014 <HAL_RCC_ClockConfig+0x184>)
 8004eb4:	681b      	ldr	r3, [r3, #0]
 8004eb6:	2201      	movs	r2, #1
 8004eb8:	4393      	bics	r3, r2
 8004eba:	0019      	movs	r1, r3
 8004ebc:	4b55      	ldr	r3, [pc, #340]	; (8005014 <HAL_RCC_ClockConfig+0x184>)
 8004ebe:	683a      	ldr	r2, [r7, #0]
 8004ec0:	430a      	orrs	r2, r1
 8004ec2:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004ec4:	4b53      	ldr	r3, [pc, #332]	; (8005014 <HAL_RCC_ClockConfig+0x184>)
 8004ec6:	681b      	ldr	r3, [r3, #0]
 8004ec8:	2201      	movs	r2, #1
 8004eca:	4013      	ands	r3, r2
 8004ecc:	683a      	ldr	r2, [r7, #0]
 8004ece:	429a      	cmp	r2, r3
 8004ed0:	d001      	beq.n	8004ed6 <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 8004ed2:	2301      	movs	r3, #1
 8004ed4:	e09a      	b.n	800500c <HAL_RCC_ClockConfig+0x17c>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	681b      	ldr	r3, [r3, #0]
 8004eda:	2202      	movs	r2, #2
 8004edc:	4013      	ands	r3, r2
 8004ede:	d015      	beq.n	8004f0c <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	681b      	ldr	r3, [r3, #0]
 8004ee4:	2204      	movs	r2, #4
 8004ee6:	4013      	ands	r3, r2
 8004ee8:	d006      	beq.n	8004ef8 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8004eea:	4b4b      	ldr	r3, [pc, #300]	; (8005018 <HAL_RCC_ClockConfig+0x188>)
 8004eec:	685a      	ldr	r2, [r3, #4]
 8004eee:	4b4a      	ldr	r3, [pc, #296]	; (8005018 <HAL_RCC_ClockConfig+0x188>)
 8004ef0:	21e0      	movs	r1, #224	; 0xe0
 8004ef2:	00c9      	lsls	r1, r1, #3
 8004ef4:	430a      	orrs	r2, r1
 8004ef6:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004ef8:	4b47      	ldr	r3, [pc, #284]	; (8005018 <HAL_RCC_ClockConfig+0x188>)
 8004efa:	685b      	ldr	r3, [r3, #4]
 8004efc:	22f0      	movs	r2, #240	; 0xf0
 8004efe:	4393      	bics	r3, r2
 8004f00:	0019      	movs	r1, r3
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	689a      	ldr	r2, [r3, #8]
 8004f06:	4b44      	ldr	r3, [pc, #272]	; (8005018 <HAL_RCC_ClockConfig+0x188>)
 8004f08:	430a      	orrs	r2, r1
 8004f0a:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	681b      	ldr	r3, [r3, #0]
 8004f10:	2201      	movs	r2, #1
 8004f12:	4013      	ands	r3, r2
 8004f14:	d040      	beq.n	8004f98 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	685b      	ldr	r3, [r3, #4]
 8004f1a:	2b01      	cmp	r3, #1
 8004f1c:	d107      	bne.n	8004f2e <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004f1e:	4b3e      	ldr	r3, [pc, #248]	; (8005018 <HAL_RCC_ClockConfig+0x188>)
 8004f20:	681a      	ldr	r2, [r3, #0]
 8004f22:	2380      	movs	r3, #128	; 0x80
 8004f24:	029b      	lsls	r3, r3, #10
 8004f26:	4013      	ands	r3, r2
 8004f28:	d114      	bne.n	8004f54 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8004f2a:	2301      	movs	r3, #1
 8004f2c:	e06e      	b.n	800500c <HAL_RCC_ClockConfig+0x17c>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	685b      	ldr	r3, [r3, #4]
 8004f32:	2b02      	cmp	r3, #2
 8004f34:	d107      	bne.n	8004f46 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004f36:	4b38      	ldr	r3, [pc, #224]	; (8005018 <HAL_RCC_ClockConfig+0x188>)
 8004f38:	681a      	ldr	r2, [r3, #0]
 8004f3a:	2380      	movs	r3, #128	; 0x80
 8004f3c:	049b      	lsls	r3, r3, #18
 8004f3e:	4013      	ands	r3, r2
 8004f40:	d108      	bne.n	8004f54 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8004f42:	2301      	movs	r3, #1
 8004f44:	e062      	b.n	800500c <HAL_RCC_ClockConfig+0x17c>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004f46:	4b34      	ldr	r3, [pc, #208]	; (8005018 <HAL_RCC_ClockConfig+0x188>)
 8004f48:	681b      	ldr	r3, [r3, #0]
 8004f4a:	2202      	movs	r2, #2
 8004f4c:	4013      	ands	r3, r2
 8004f4e:	d101      	bne.n	8004f54 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8004f50:	2301      	movs	r3, #1
 8004f52:	e05b      	b.n	800500c <HAL_RCC_ClockConfig+0x17c>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004f54:	4b30      	ldr	r3, [pc, #192]	; (8005018 <HAL_RCC_ClockConfig+0x188>)
 8004f56:	685b      	ldr	r3, [r3, #4]
 8004f58:	2203      	movs	r2, #3
 8004f5a:	4393      	bics	r3, r2
 8004f5c:	0019      	movs	r1, r3
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	685a      	ldr	r2, [r3, #4]
 8004f62:	4b2d      	ldr	r3, [pc, #180]	; (8005018 <HAL_RCC_ClockConfig+0x188>)
 8004f64:	430a      	orrs	r2, r1
 8004f66:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004f68:	f7fe f81c 	bl	8002fa4 <HAL_GetTick>
 8004f6c:	0003      	movs	r3, r0
 8004f6e:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004f70:	e009      	b.n	8004f86 <HAL_RCC_ClockConfig+0xf6>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004f72:	f7fe f817 	bl	8002fa4 <HAL_GetTick>
 8004f76:	0002      	movs	r2, r0
 8004f78:	68fb      	ldr	r3, [r7, #12]
 8004f7a:	1ad3      	subs	r3, r2, r3
 8004f7c:	4a27      	ldr	r2, [pc, #156]	; (800501c <HAL_RCC_ClockConfig+0x18c>)
 8004f7e:	4293      	cmp	r3, r2
 8004f80:	d901      	bls.n	8004f86 <HAL_RCC_ClockConfig+0xf6>
      {
        return HAL_TIMEOUT;
 8004f82:	2303      	movs	r3, #3
 8004f84:	e042      	b.n	800500c <HAL_RCC_ClockConfig+0x17c>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004f86:	4b24      	ldr	r3, [pc, #144]	; (8005018 <HAL_RCC_ClockConfig+0x188>)
 8004f88:	685b      	ldr	r3, [r3, #4]
 8004f8a:	220c      	movs	r2, #12
 8004f8c:	401a      	ands	r2, r3
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	685b      	ldr	r3, [r3, #4]
 8004f92:	009b      	lsls	r3, r3, #2
 8004f94:	429a      	cmp	r2, r3
 8004f96:	d1ec      	bne.n	8004f72 <HAL_RCC_ClockConfig+0xe2>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004f98:	4b1e      	ldr	r3, [pc, #120]	; (8005014 <HAL_RCC_ClockConfig+0x184>)
 8004f9a:	681b      	ldr	r3, [r3, #0]
 8004f9c:	2201      	movs	r2, #1
 8004f9e:	4013      	ands	r3, r2
 8004fa0:	683a      	ldr	r2, [r7, #0]
 8004fa2:	429a      	cmp	r2, r3
 8004fa4:	d211      	bcs.n	8004fca <HAL_RCC_ClockConfig+0x13a>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004fa6:	4b1b      	ldr	r3, [pc, #108]	; (8005014 <HAL_RCC_ClockConfig+0x184>)
 8004fa8:	681b      	ldr	r3, [r3, #0]
 8004faa:	2201      	movs	r2, #1
 8004fac:	4393      	bics	r3, r2
 8004fae:	0019      	movs	r1, r3
 8004fb0:	4b18      	ldr	r3, [pc, #96]	; (8005014 <HAL_RCC_ClockConfig+0x184>)
 8004fb2:	683a      	ldr	r2, [r7, #0]
 8004fb4:	430a      	orrs	r2, r1
 8004fb6:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004fb8:	4b16      	ldr	r3, [pc, #88]	; (8005014 <HAL_RCC_ClockConfig+0x184>)
 8004fba:	681b      	ldr	r3, [r3, #0]
 8004fbc:	2201      	movs	r2, #1
 8004fbe:	4013      	ands	r3, r2
 8004fc0:	683a      	ldr	r2, [r7, #0]
 8004fc2:	429a      	cmp	r2, r3
 8004fc4:	d001      	beq.n	8004fca <HAL_RCC_ClockConfig+0x13a>
    {
      return HAL_ERROR;
 8004fc6:	2301      	movs	r3, #1
 8004fc8:	e020      	b.n	800500c <HAL_RCC_ClockConfig+0x17c>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	681b      	ldr	r3, [r3, #0]
 8004fce:	2204      	movs	r2, #4
 8004fd0:	4013      	ands	r3, r2
 8004fd2:	d009      	beq.n	8004fe8 <HAL_RCC_ClockConfig+0x158>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8004fd4:	4b10      	ldr	r3, [pc, #64]	; (8005018 <HAL_RCC_ClockConfig+0x188>)
 8004fd6:	685b      	ldr	r3, [r3, #4]
 8004fd8:	4a11      	ldr	r2, [pc, #68]	; (8005020 <HAL_RCC_ClockConfig+0x190>)
 8004fda:	4013      	ands	r3, r2
 8004fdc:	0019      	movs	r1, r3
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	68da      	ldr	r2, [r3, #12]
 8004fe2:	4b0d      	ldr	r3, [pc, #52]	; (8005018 <HAL_RCC_ClockConfig+0x188>)
 8004fe4:	430a      	orrs	r2, r1
 8004fe6:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8004fe8:	f000 f820 	bl	800502c <HAL_RCC_GetSysClockFreq>
 8004fec:	0001      	movs	r1, r0
 8004fee:	4b0a      	ldr	r3, [pc, #40]	; (8005018 <HAL_RCC_ClockConfig+0x188>)
 8004ff0:	685b      	ldr	r3, [r3, #4]
 8004ff2:	091b      	lsrs	r3, r3, #4
 8004ff4:	220f      	movs	r2, #15
 8004ff6:	4013      	ands	r3, r2
 8004ff8:	4a0a      	ldr	r2, [pc, #40]	; (8005024 <HAL_RCC_ClockConfig+0x194>)
 8004ffa:	5cd3      	ldrb	r3, [r2, r3]
 8004ffc:	000a      	movs	r2, r1
 8004ffe:	40da      	lsrs	r2, r3
 8005000:	4b09      	ldr	r3, [pc, #36]	; (8005028 <HAL_RCC_ClockConfig+0x198>)
 8005002:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8005004:	2000      	movs	r0, #0
 8005006:	f7fd ff87 	bl	8002f18 <HAL_InitTick>
  
  return HAL_OK;
 800500a:	2300      	movs	r3, #0
}
 800500c:	0018      	movs	r0, r3
 800500e:	46bd      	mov	sp, r7
 8005010:	b004      	add	sp, #16
 8005012:	bd80      	pop	{r7, pc}
 8005014:	40022000 	.word	0x40022000
 8005018:	40021000 	.word	0x40021000
 800501c:	00001388 	.word	0x00001388
 8005020:	fffff8ff 	.word	0xfffff8ff
 8005024:	08005f30 	.word	0x08005f30
 8005028:	20000004 	.word	0x20000004

0800502c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800502c:	b590      	push	{r4, r7, lr}
 800502e:	b08f      	sub	sp, #60	; 0x3c
 8005030:	af00      	add	r7, sp, #0
  const uint8_t aPLLMULFactorTable[16] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
 8005032:	2314      	movs	r3, #20
 8005034:	18fb      	adds	r3, r7, r3
 8005036:	4a2b      	ldr	r2, [pc, #172]	; (80050e4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005038:	ca13      	ldmia	r2!, {r0, r1, r4}
 800503a:	c313      	stmia	r3!, {r0, r1, r4}
 800503c:	6812      	ldr	r2, [r2, #0]
 800503e:	601a      	str	r2, [r3, #0]
                                         10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  const uint8_t aPredivFactorTable[16] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
 8005040:	1d3b      	adds	r3, r7, #4
 8005042:	4a29      	ldr	r2, [pc, #164]	; (80050e8 <HAL_RCC_GetSysClockFreq+0xbc>)
 8005044:	ca13      	ldmia	r2!, {r0, r1, r4}
 8005046:	c313      	stmia	r3!, {r0, r1, r4}
 8005048:	6812      	ldr	r2, [r2, #0]
 800504a:	601a      	str	r2, [r3, #0]
                                           9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800504c:	2300      	movs	r3, #0
 800504e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005050:	2300      	movs	r3, #0
 8005052:	62bb      	str	r3, [r7, #40]	; 0x28
 8005054:	2300      	movs	r3, #0
 8005056:	637b      	str	r3, [r7, #52]	; 0x34
 8005058:	2300      	movs	r3, #0
 800505a:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t sysclockfreq = 0U;
 800505c:	2300      	movs	r3, #0
 800505e:	633b      	str	r3, [r7, #48]	; 0x30
  
  tmpreg = RCC->CFGR;
 8005060:	4b22      	ldr	r3, [pc, #136]	; (80050ec <HAL_RCC_GetSysClockFreq+0xc0>)
 8005062:	685b      	ldr	r3, [r3, #4]
 8005064:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8005066:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005068:	220c      	movs	r2, #12
 800506a:	4013      	ands	r3, r2
 800506c:	2b04      	cmp	r3, #4
 800506e:	d002      	beq.n	8005076 <HAL_RCC_GetSysClockFreq+0x4a>
 8005070:	2b08      	cmp	r3, #8
 8005072:	d003      	beq.n	800507c <HAL_RCC_GetSysClockFreq+0x50>
 8005074:	e02d      	b.n	80050d2 <HAL_RCC_GetSysClockFreq+0xa6>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8005076:	4b1e      	ldr	r3, [pc, #120]	; (80050f0 <HAL_RCC_GetSysClockFreq+0xc4>)
 8005078:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 800507a:	e02d      	b.n	80050d8 <HAL_RCC_GetSysClockFreq+0xac>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 800507c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800507e:	0c9b      	lsrs	r3, r3, #18
 8005080:	220f      	movs	r2, #15
 8005082:	4013      	ands	r3, r2
 8005084:	2214      	movs	r2, #20
 8005086:	18ba      	adds	r2, r7, r2
 8005088:	5cd3      	ldrb	r3, [r2, r3]
 800508a:	627b      	str	r3, [r7, #36]	; 0x24
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 800508c:	4b17      	ldr	r3, [pc, #92]	; (80050ec <HAL_RCC_GetSysClockFreq+0xc0>)
 800508e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005090:	220f      	movs	r2, #15
 8005092:	4013      	ands	r3, r2
 8005094:	1d3a      	adds	r2, r7, #4
 8005096:	5cd3      	ldrb	r3, [r2, r3]
 8005098:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 800509a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800509c:	2380      	movs	r3, #128	; 0x80
 800509e:	025b      	lsls	r3, r3, #9
 80050a0:	4013      	ands	r3, r2
 80050a2:	d009      	beq.n	80050b8 <HAL_RCC_GetSysClockFreq+0x8c>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80050a4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80050a6:	4812      	ldr	r0, [pc, #72]	; (80050f0 <HAL_RCC_GetSysClockFreq+0xc4>)
 80050a8:	f7fb f82e 	bl	8000108 <__udivsi3>
 80050ac:	0003      	movs	r3, r0
 80050ae:	001a      	movs	r2, r3
 80050b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050b2:	4353      	muls	r3, r2
 80050b4:	637b      	str	r3, [r7, #52]	; 0x34
 80050b6:	e009      	b.n	80050cc <HAL_RCC_GetSysClockFreq+0xa0>
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 80050b8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80050ba:	000a      	movs	r2, r1
 80050bc:	0152      	lsls	r2, r2, #5
 80050be:	1a52      	subs	r2, r2, r1
 80050c0:	0193      	lsls	r3, r2, #6
 80050c2:	1a9b      	subs	r3, r3, r2
 80050c4:	00db      	lsls	r3, r3, #3
 80050c6:	185b      	adds	r3, r3, r1
 80050c8:	021b      	lsls	r3, r3, #8
 80050ca:	637b      	str	r3, [r7, #52]	; 0x34
#endif
      }
      sysclockfreq = pllclk;
 80050cc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80050ce:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 80050d0:	e002      	b.n	80050d8 <HAL_RCC_GetSysClockFreq+0xac>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80050d2:	4b07      	ldr	r3, [pc, #28]	; (80050f0 <HAL_RCC_GetSysClockFreq+0xc4>)
 80050d4:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 80050d6:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 80050d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 80050da:	0018      	movs	r0, r3
 80050dc:	46bd      	mov	sp, r7
 80050de:	b00f      	add	sp, #60	; 0x3c
 80050e0:	bd90      	pop	{r4, r7, pc}
 80050e2:	46c0      	nop			; (mov r8, r8)
 80050e4:	08005e90 	.word	0x08005e90
 80050e8:	08005ea0 	.word	0x08005ea0
 80050ec:	40021000 	.word	0x40021000
 80050f0:	007a1200 	.word	0x007a1200

080050f4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80050f4:	b580      	push	{r7, lr}
 80050f6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80050f8:	4b02      	ldr	r3, [pc, #8]	; (8005104 <HAL_RCC_GetHCLKFreq+0x10>)
 80050fa:	681b      	ldr	r3, [r3, #0]
}
 80050fc:	0018      	movs	r0, r3
 80050fe:	46bd      	mov	sp, r7
 8005100:	bd80      	pop	{r7, pc}
 8005102:	46c0      	nop			; (mov r8, r8)
 8005104:	20000004 	.word	0x20000004

08005108 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005108:	b580      	push	{r7, lr}
 800510a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_BITNUMBER]);
 800510c:	f7ff fff2 	bl	80050f4 <HAL_RCC_GetHCLKFreq>
 8005110:	0001      	movs	r1, r0
 8005112:	4b06      	ldr	r3, [pc, #24]	; (800512c <HAL_RCC_GetPCLK1Freq+0x24>)
 8005114:	685b      	ldr	r3, [r3, #4]
 8005116:	0a1b      	lsrs	r3, r3, #8
 8005118:	2207      	movs	r2, #7
 800511a:	4013      	ands	r3, r2
 800511c:	4a04      	ldr	r2, [pc, #16]	; (8005130 <HAL_RCC_GetPCLK1Freq+0x28>)
 800511e:	5cd3      	ldrb	r3, [r2, r3]
 8005120:	40d9      	lsrs	r1, r3
 8005122:	000b      	movs	r3, r1
}    
 8005124:	0018      	movs	r0, r3
 8005126:	46bd      	mov	sp, r7
 8005128:	bd80      	pop	{r7, pc}
 800512a:	46c0      	nop			; (mov r8, r8)
 800512c:	40021000 	.word	0x40021000
 8005130:	08005f40 	.word	0x08005f40

08005134 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005134:	b580      	push	{r7, lr}
 8005136:	b086      	sub	sp, #24
 8005138:	af00      	add	r7, sp, #0
 800513a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800513c:	2300      	movs	r3, #0
 800513e:	613b      	str	r3, [r7, #16]
  uint32_t temp_reg = 0U;
 8005140:	2300      	movs	r3, #0
 8005142:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	681a      	ldr	r2, [r3, #0]
 8005148:	2380      	movs	r3, #128	; 0x80
 800514a:	025b      	lsls	r3, r3, #9
 800514c:	4013      	ands	r3, r2
 800514e:	d100      	bne.n	8005152 <HAL_RCCEx_PeriphCLKConfig+0x1e>
 8005150:	e08f      	b.n	8005272 <HAL_RCCEx_PeriphCLKConfig+0x13e>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
    
    FlagStatus       pwrclkchanged = RESET;
 8005152:	2317      	movs	r3, #23
 8005154:	18fb      	adds	r3, r7, r3
 8005156:	2200      	movs	r2, #0
 8005158:	701a      	strb	r2, [r3, #0]

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800515a:	4b57      	ldr	r3, [pc, #348]	; (80052b8 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 800515c:	69da      	ldr	r2, [r3, #28]
 800515e:	2380      	movs	r3, #128	; 0x80
 8005160:	055b      	lsls	r3, r3, #21
 8005162:	4013      	ands	r3, r2
 8005164:	d111      	bne.n	800518a <HAL_RCCEx_PeriphCLKConfig+0x56>
    {
    __HAL_RCC_PWR_CLK_ENABLE();
 8005166:	4b54      	ldr	r3, [pc, #336]	; (80052b8 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8005168:	69da      	ldr	r2, [r3, #28]
 800516a:	4b53      	ldr	r3, [pc, #332]	; (80052b8 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 800516c:	2180      	movs	r1, #128	; 0x80
 800516e:	0549      	lsls	r1, r1, #21
 8005170:	430a      	orrs	r2, r1
 8005172:	61da      	str	r2, [r3, #28]
 8005174:	4b50      	ldr	r3, [pc, #320]	; (80052b8 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8005176:	69da      	ldr	r2, [r3, #28]
 8005178:	2380      	movs	r3, #128	; 0x80
 800517a:	055b      	lsls	r3, r3, #21
 800517c:	4013      	ands	r3, r2
 800517e:	60bb      	str	r3, [r7, #8]
 8005180:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005182:	2317      	movs	r3, #23
 8005184:	18fb      	adds	r3, r7, r3
 8005186:	2201      	movs	r2, #1
 8005188:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800518a:	4b4c      	ldr	r3, [pc, #304]	; (80052bc <HAL_RCCEx_PeriphCLKConfig+0x188>)
 800518c:	681a      	ldr	r2, [r3, #0]
 800518e:	2380      	movs	r3, #128	; 0x80
 8005190:	005b      	lsls	r3, r3, #1
 8005192:	4013      	ands	r3, r2
 8005194:	d11a      	bne.n	80051cc <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005196:	4b49      	ldr	r3, [pc, #292]	; (80052bc <HAL_RCCEx_PeriphCLKConfig+0x188>)
 8005198:	681a      	ldr	r2, [r3, #0]
 800519a:	4b48      	ldr	r3, [pc, #288]	; (80052bc <HAL_RCCEx_PeriphCLKConfig+0x188>)
 800519c:	2180      	movs	r1, #128	; 0x80
 800519e:	0049      	lsls	r1, r1, #1
 80051a0:	430a      	orrs	r2, r1
 80051a2:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80051a4:	f7fd fefe 	bl	8002fa4 <HAL_GetTick>
 80051a8:	0003      	movs	r3, r0
 80051aa:	613b      	str	r3, [r7, #16]
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80051ac:	e008      	b.n	80051c0 <HAL_RCCEx_PeriphCLKConfig+0x8c>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80051ae:	f7fd fef9 	bl	8002fa4 <HAL_GetTick>
 80051b2:	0002      	movs	r2, r0
 80051b4:	693b      	ldr	r3, [r7, #16]
 80051b6:	1ad3      	subs	r3, r2, r3
 80051b8:	2b64      	cmp	r3, #100	; 0x64
 80051ba:	d901      	bls.n	80051c0 <HAL_RCCEx_PeriphCLKConfig+0x8c>
        {
          return HAL_TIMEOUT;
 80051bc:	2303      	movs	r3, #3
 80051be:	e077      	b.n	80052b0 <HAL_RCCEx_PeriphCLKConfig+0x17c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80051c0:	4b3e      	ldr	r3, [pc, #248]	; (80052bc <HAL_RCCEx_PeriphCLKConfig+0x188>)
 80051c2:	681a      	ldr	r2, [r3, #0]
 80051c4:	2380      	movs	r3, #128	; 0x80
 80051c6:	005b      	lsls	r3, r3, #1
 80051c8:	4013      	ands	r3, r2
 80051ca:	d0f0      	beq.n	80051ae <HAL_RCCEx_PeriphCLKConfig+0x7a>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80051cc:	4b3a      	ldr	r3, [pc, #232]	; (80052b8 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 80051ce:	6a1a      	ldr	r2, [r3, #32]
 80051d0:	23c0      	movs	r3, #192	; 0xc0
 80051d2:	009b      	lsls	r3, r3, #2
 80051d4:	4013      	ands	r3, r2
 80051d6:	60fb      	str	r3, [r7, #12]
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80051d8:	68fb      	ldr	r3, [r7, #12]
 80051da:	2b00      	cmp	r3, #0
 80051dc:	d034      	beq.n	8005248 <HAL_RCCEx_PeriphCLKConfig+0x114>
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	685a      	ldr	r2, [r3, #4]
 80051e2:	23c0      	movs	r3, #192	; 0xc0
 80051e4:	009b      	lsls	r3, r3, #2
 80051e6:	4013      	ands	r3, r2
 80051e8:	68fa      	ldr	r2, [r7, #12]
 80051ea:	429a      	cmp	r2, r3
 80051ec:	d02c      	beq.n	8005248 <HAL_RCCEx_PeriphCLKConfig+0x114>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80051ee:	4b32      	ldr	r3, [pc, #200]	; (80052b8 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 80051f0:	6a1b      	ldr	r3, [r3, #32]
 80051f2:	4a33      	ldr	r2, [pc, #204]	; (80052c0 <HAL_RCCEx_PeriphCLKConfig+0x18c>)
 80051f4:	4013      	ands	r3, r2
 80051f6:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80051f8:	4b2f      	ldr	r3, [pc, #188]	; (80052b8 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 80051fa:	6a1a      	ldr	r2, [r3, #32]
 80051fc:	4b2e      	ldr	r3, [pc, #184]	; (80052b8 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 80051fe:	2180      	movs	r1, #128	; 0x80
 8005200:	0249      	lsls	r1, r1, #9
 8005202:	430a      	orrs	r2, r1
 8005204:	621a      	str	r2, [r3, #32]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8005206:	4b2c      	ldr	r3, [pc, #176]	; (80052b8 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8005208:	6a1a      	ldr	r2, [r3, #32]
 800520a:	4b2b      	ldr	r3, [pc, #172]	; (80052b8 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 800520c:	492d      	ldr	r1, [pc, #180]	; (80052c4 <HAL_RCCEx_PeriphCLKConfig+0x190>)
 800520e:	400a      	ands	r2, r1
 8005210:	621a      	str	r2, [r3, #32]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8005212:	4b29      	ldr	r3, [pc, #164]	; (80052b8 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8005214:	68fa      	ldr	r2, [r7, #12]
 8005216:	621a      	str	r2, [r3, #32]
      
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8005218:	68fb      	ldr	r3, [r7, #12]
 800521a:	2201      	movs	r2, #1
 800521c:	4013      	ands	r3, r2
 800521e:	d013      	beq.n	8005248 <HAL_RCCEx_PeriphCLKConfig+0x114>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005220:	f7fd fec0 	bl	8002fa4 <HAL_GetTick>
 8005224:	0003      	movs	r3, r0
 8005226:	613b      	str	r3, [r7, #16]
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005228:	e009      	b.n	800523e <HAL_RCCEx_PeriphCLKConfig+0x10a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800522a:	f7fd febb 	bl	8002fa4 <HAL_GetTick>
 800522e:	0002      	movs	r2, r0
 8005230:	693b      	ldr	r3, [r7, #16]
 8005232:	1ad3      	subs	r3, r2, r3
 8005234:	4a24      	ldr	r2, [pc, #144]	; (80052c8 <HAL_RCCEx_PeriphCLKConfig+0x194>)
 8005236:	4293      	cmp	r3, r2
 8005238:	d901      	bls.n	800523e <HAL_RCCEx_PeriphCLKConfig+0x10a>
          {
            return HAL_TIMEOUT;
 800523a:	2303      	movs	r3, #3
 800523c:	e038      	b.n	80052b0 <HAL_RCCEx_PeriphCLKConfig+0x17c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800523e:	4b1e      	ldr	r3, [pc, #120]	; (80052b8 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8005240:	6a1b      	ldr	r3, [r3, #32]
 8005242:	2202      	movs	r2, #2
 8005244:	4013      	ands	r3, r2
 8005246:	d0f0      	beq.n	800522a <HAL_RCCEx_PeriphCLKConfig+0xf6>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005248:	4b1b      	ldr	r3, [pc, #108]	; (80052b8 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 800524a:	6a1b      	ldr	r3, [r3, #32]
 800524c:	4a1c      	ldr	r2, [pc, #112]	; (80052c0 <HAL_RCCEx_PeriphCLKConfig+0x18c>)
 800524e:	4013      	ands	r3, r2
 8005250:	0019      	movs	r1, r3
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	685a      	ldr	r2, [r3, #4]
 8005256:	4b18      	ldr	r3, [pc, #96]	; (80052b8 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8005258:	430a      	orrs	r2, r1
 800525a:	621a      	str	r2, [r3, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800525c:	2317      	movs	r3, #23
 800525e:	18fb      	adds	r3, r7, r3
 8005260:	781b      	ldrb	r3, [r3, #0]
 8005262:	2b01      	cmp	r3, #1
 8005264:	d105      	bne.n	8005272 <HAL_RCCEx_PeriphCLKConfig+0x13e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005266:	4b14      	ldr	r3, [pc, #80]	; (80052b8 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8005268:	69da      	ldr	r2, [r3, #28]
 800526a:	4b13      	ldr	r3, [pc, #76]	; (80052b8 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 800526c:	4917      	ldr	r1, [pc, #92]	; (80052cc <HAL_RCCEx_PeriphCLKConfig+0x198>)
 800526e:	400a      	ands	r2, r1
 8005270:	61da      	str	r2, [r3, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	681b      	ldr	r3, [r3, #0]
 8005276:	2201      	movs	r2, #1
 8005278:	4013      	ands	r3, r2
 800527a:	d009      	beq.n	8005290 <HAL_RCCEx_PeriphCLKConfig+0x15c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800527c:	4b0e      	ldr	r3, [pc, #56]	; (80052b8 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 800527e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005280:	2203      	movs	r2, #3
 8005282:	4393      	bics	r3, r2
 8005284:	0019      	movs	r1, r3
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	689a      	ldr	r2, [r3, #8]
 800528a:	4b0b      	ldr	r3, [pc, #44]	; (80052b8 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 800528c:	430a      	orrs	r2, r1
 800528e:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* STM32F091xC || STM32F098xx */  

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	681b      	ldr	r3, [r3, #0]
 8005294:	2220      	movs	r2, #32
 8005296:	4013      	ands	r3, r2
 8005298:	d009      	beq.n	80052ae <HAL_RCCEx_PeriphCLKConfig+0x17a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800529a:	4b07      	ldr	r3, [pc, #28]	; (80052b8 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 800529c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800529e:	2210      	movs	r2, #16
 80052a0:	4393      	bics	r3, r2
 80052a2:	0019      	movs	r1, r3
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	68da      	ldr	r2, [r3, #12]
 80052a8:	4b03      	ldr	r3, [pc, #12]	; (80052b8 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 80052aa:	430a      	orrs	r2, r1
 80052ac:	631a      	str	r2, [r3, #48]	; 0x30
#endif /* STM32F042x6 || STM32F048xx ||                */
       /* STM32F051x8 || STM32F058xx ||                */
       /* STM32F071xB || STM32F072xB || STM32F078xx || */
       /* STM32F091xC || STM32F098xx */
  
  return HAL_OK;
 80052ae:	2300      	movs	r3, #0
}
 80052b0:	0018      	movs	r0, r3
 80052b2:	46bd      	mov	sp, r7
 80052b4:	b006      	add	sp, #24
 80052b6:	bd80      	pop	{r7, pc}
 80052b8:	40021000 	.word	0x40021000
 80052bc:	40007000 	.word	0x40007000
 80052c0:	fffffcff 	.word	0xfffffcff
 80052c4:	fffeffff 	.word	0xfffeffff
 80052c8:	00001388 	.word	0x00001388
 80052cc:	efffffff 	.word	0xefffffff

080052d0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80052d0:	b580      	push	{r7, lr}
 80052d2:	b082      	sub	sp, #8
 80052d4:	af00      	add	r7, sp, #0
 80052d6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	2b00      	cmp	r3, #0
 80052dc:	d101      	bne.n	80052e2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80052de:	2301      	movs	r3, #1
 80052e0:	e01e      	b.n	8005320 <HAL_TIM_Base_Init+0x50>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	223d      	movs	r2, #61	; 0x3d
 80052e6:	5c9b      	ldrb	r3, [r3, r2]
 80052e8:	b2db      	uxtb	r3, r3
 80052ea:	2b00      	cmp	r3, #0
 80052ec:	d107      	bne.n	80052fe <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	223c      	movs	r2, #60	; 0x3c
 80052f2:	2100      	movs	r1, #0
 80052f4:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	0018      	movs	r0, r3
 80052fa:	f7fd fd21 	bl	8002d40 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	223d      	movs	r2, #61	; 0x3d
 8005302:	2102      	movs	r1, #2
 8005304:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	681a      	ldr	r2, [r3, #0]
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	3304      	adds	r3, #4
 800530e:	0019      	movs	r1, r3
 8005310:	0010      	movs	r0, r2
 8005312:	f000 f8e9 	bl	80054e8 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	223d      	movs	r2, #61	; 0x3d
 800531a:	2101      	movs	r1, #1
 800531c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800531e:	2300      	movs	r3, #0
}
 8005320:	0018      	movs	r0, r3
 8005322:	46bd      	mov	sp, r7
 8005324:	b002      	add	sp, #8
 8005326:	bd80      	pop	{r7, pc}

08005328 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8005328:	b580      	push	{r7, lr}
 800532a:	b084      	sub	sp, #16
 800532c:	af00      	add	r7, sp, #0
 800532e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	223d      	movs	r2, #61	; 0x3d
 8005334:	2102      	movs	r1, #2
 8005336:	5499      	strb	r1, [r3, r2]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	681b      	ldr	r3, [r3, #0]
 800533c:	689b      	ldr	r3, [r3, #8]
 800533e:	2207      	movs	r2, #7
 8005340:	4013      	ands	r3, r2
 8005342:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005344:	68fb      	ldr	r3, [r7, #12]
 8005346:	2b06      	cmp	r3, #6
 8005348:	d007      	beq.n	800535a <HAL_TIM_Base_Start+0x32>
  {
    __HAL_TIM_ENABLE(htim);
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	681b      	ldr	r3, [r3, #0]
 800534e:	681a      	ldr	r2, [r3, #0]
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	681b      	ldr	r3, [r3, #0]
 8005354:	2101      	movs	r1, #1
 8005356:	430a      	orrs	r2, r1
 8005358:	601a      	str	r2, [r3, #0]
  }

  /* Change the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	223d      	movs	r2, #61	; 0x3d
 800535e:	2101      	movs	r1, #1
 8005360:	5499      	strb	r1, [r3, r2]

  /* Return function status */
  return HAL_OK;
 8005362:	2300      	movs	r3, #0
}
 8005364:	0018      	movs	r0, r3
 8005366:	46bd      	mov	sp, r7
 8005368:	b004      	add	sp, #16
 800536a:	bd80      	pop	{r7, pc}

0800536c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800536c:	b580      	push	{r7, lr}
 800536e:	b084      	sub	sp, #16
 8005370:	af00      	add	r7, sp, #0
 8005372:	6078      	str	r0, [r7, #4]
 8005374:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	223c      	movs	r2, #60	; 0x3c
 800537a:	5c9b      	ldrb	r3, [r3, r2]
 800537c:	2b01      	cmp	r3, #1
 800537e:	d101      	bne.n	8005384 <HAL_TIM_ConfigClockSource+0x18>
 8005380:	2302      	movs	r3, #2
 8005382:	e0ab      	b.n	80054dc <HAL_TIM_ConfigClockSource+0x170>
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	223c      	movs	r2, #60	; 0x3c
 8005388:	2101      	movs	r1, #1
 800538a:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	223d      	movs	r2, #61	; 0x3d
 8005390:	2102      	movs	r1, #2
 8005392:	5499      	strb	r1, [r3, r2]

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	681b      	ldr	r3, [r3, #0]
 8005398:	689b      	ldr	r3, [r3, #8]
 800539a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800539c:	68fb      	ldr	r3, [r7, #12]
 800539e:	2277      	movs	r2, #119	; 0x77
 80053a0:	4393      	bics	r3, r2
 80053a2:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80053a4:	68fb      	ldr	r3, [r7, #12]
 80053a6:	4a4f      	ldr	r2, [pc, #316]	; (80054e4 <HAL_TIM_ConfigClockSource+0x178>)
 80053a8:	4013      	ands	r3, r2
 80053aa:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	681b      	ldr	r3, [r3, #0]
 80053b0:	68fa      	ldr	r2, [r7, #12]
 80053b2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80053b4:	683b      	ldr	r3, [r7, #0]
 80053b6:	681b      	ldr	r3, [r3, #0]
 80053b8:	2b40      	cmp	r3, #64	; 0x40
 80053ba:	d100      	bne.n	80053be <HAL_TIM_ConfigClockSource+0x52>
 80053bc:	e06b      	b.n	8005496 <HAL_TIM_ConfigClockSource+0x12a>
 80053be:	d80e      	bhi.n	80053de <HAL_TIM_ConfigClockSource+0x72>
 80053c0:	2b10      	cmp	r3, #16
 80053c2:	d100      	bne.n	80053c6 <HAL_TIM_ConfigClockSource+0x5a>
 80053c4:	e077      	b.n	80054b6 <HAL_TIM_ConfigClockSource+0x14a>
 80053c6:	d803      	bhi.n	80053d0 <HAL_TIM_ConfigClockSource+0x64>
 80053c8:	2b00      	cmp	r3, #0
 80053ca:	d100      	bne.n	80053ce <HAL_TIM_ConfigClockSource+0x62>
 80053cc:	e073      	b.n	80054b6 <HAL_TIM_ConfigClockSource+0x14a>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 80053ce:	e07c      	b.n	80054ca <HAL_TIM_ConfigClockSource+0x15e>
  switch (sClockSourceConfig->ClockSource)
 80053d0:	2b20      	cmp	r3, #32
 80053d2:	d100      	bne.n	80053d6 <HAL_TIM_ConfigClockSource+0x6a>
 80053d4:	e06f      	b.n	80054b6 <HAL_TIM_ConfigClockSource+0x14a>
 80053d6:	2b30      	cmp	r3, #48	; 0x30
 80053d8:	d100      	bne.n	80053dc <HAL_TIM_ConfigClockSource+0x70>
 80053da:	e06c      	b.n	80054b6 <HAL_TIM_ConfigClockSource+0x14a>
      break;
 80053dc:	e075      	b.n	80054ca <HAL_TIM_ConfigClockSource+0x15e>
  switch (sClockSourceConfig->ClockSource)
 80053de:	2b70      	cmp	r3, #112	; 0x70
 80053e0:	d00e      	beq.n	8005400 <HAL_TIM_ConfigClockSource+0x94>
 80053e2:	d804      	bhi.n	80053ee <HAL_TIM_ConfigClockSource+0x82>
 80053e4:	2b50      	cmp	r3, #80	; 0x50
 80053e6:	d036      	beq.n	8005456 <HAL_TIM_ConfigClockSource+0xea>
 80053e8:	2b60      	cmp	r3, #96	; 0x60
 80053ea:	d044      	beq.n	8005476 <HAL_TIM_ConfigClockSource+0x10a>
      break;
 80053ec:	e06d      	b.n	80054ca <HAL_TIM_ConfigClockSource+0x15e>
  switch (sClockSourceConfig->ClockSource)
 80053ee:	2280      	movs	r2, #128	; 0x80
 80053f0:	0152      	lsls	r2, r2, #5
 80053f2:	4293      	cmp	r3, r2
 80053f4:	d068      	beq.n	80054c8 <HAL_TIM_ConfigClockSource+0x15c>
 80053f6:	2280      	movs	r2, #128	; 0x80
 80053f8:	0192      	lsls	r2, r2, #6
 80053fa:	4293      	cmp	r3, r2
 80053fc:	d017      	beq.n	800542e <HAL_TIM_ConfigClockSource+0xc2>
      break;
 80053fe:	e064      	b.n	80054ca <HAL_TIM_ConfigClockSource+0x15e>
      TIM_ETR_SetConfig(htim->Instance,
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	6818      	ldr	r0, [r3, #0]
 8005404:	683b      	ldr	r3, [r7, #0]
 8005406:	6899      	ldr	r1, [r3, #8]
 8005408:	683b      	ldr	r3, [r7, #0]
 800540a:	685a      	ldr	r2, [r3, #4]
 800540c:	683b      	ldr	r3, [r7, #0]
 800540e:	68db      	ldr	r3, [r3, #12]
 8005410:	f000 f950 	bl	80056b4 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	681b      	ldr	r3, [r3, #0]
 8005418:	689b      	ldr	r3, [r3, #8]
 800541a:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800541c:	68fb      	ldr	r3, [r7, #12]
 800541e:	2277      	movs	r2, #119	; 0x77
 8005420:	4313      	orrs	r3, r2
 8005422:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	681b      	ldr	r3, [r3, #0]
 8005428:	68fa      	ldr	r2, [r7, #12]
 800542a:	609a      	str	r2, [r3, #8]
      break;
 800542c:	e04d      	b.n	80054ca <HAL_TIM_ConfigClockSource+0x15e>
      TIM_ETR_SetConfig(htim->Instance,
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	6818      	ldr	r0, [r3, #0]
 8005432:	683b      	ldr	r3, [r7, #0]
 8005434:	6899      	ldr	r1, [r3, #8]
 8005436:	683b      	ldr	r3, [r7, #0]
 8005438:	685a      	ldr	r2, [r3, #4]
 800543a:	683b      	ldr	r3, [r7, #0]
 800543c:	68db      	ldr	r3, [r3, #12]
 800543e:	f000 f939 	bl	80056b4 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	681b      	ldr	r3, [r3, #0]
 8005446:	689a      	ldr	r2, [r3, #8]
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	681b      	ldr	r3, [r3, #0]
 800544c:	2180      	movs	r1, #128	; 0x80
 800544e:	01c9      	lsls	r1, r1, #7
 8005450:	430a      	orrs	r2, r1
 8005452:	609a      	str	r2, [r3, #8]
      break;
 8005454:	e039      	b.n	80054ca <HAL_TIM_ConfigClockSource+0x15e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	6818      	ldr	r0, [r3, #0]
 800545a:	683b      	ldr	r3, [r7, #0]
 800545c:	6859      	ldr	r1, [r3, #4]
 800545e:	683b      	ldr	r3, [r7, #0]
 8005460:	68db      	ldr	r3, [r3, #12]
 8005462:	001a      	movs	r2, r3
 8005464:	f000 f8ac 	bl	80055c0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	681b      	ldr	r3, [r3, #0]
 800546c:	2150      	movs	r1, #80	; 0x50
 800546e:	0018      	movs	r0, r3
 8005470:	f000 f906 	bl	8005680 <TIM_ITRx_SetConfig>
      break;
 8005474:	e029      	b.n	80054ca <HAL_TIM_ConfigClockSource+0x15e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	6818      	ldr	r0, [r3, #0]
 800547a:	683b      	ldr	r3, [r7, #0]
 800547c:	6859      	ldr	r1, [r3, #4]
 800547e:	683b      	ldr	r3, [r7, #0]
 8005480:	68db      	ldr	r3, [r3, #12]
 8005482:	001a      	movs	r2, r3
 8005484:	f000 f8ca 	bl	800561c <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	681b      	ldr	r3, [r3, #0]
 800548c:	2160      	movs	r1, #96	; 0x60
 800548e:	0018      	movs	r0, r3
 8005490:	f000 f8f6 	bl	8005680 <TIM_ITRx_SetConfig>
      break;
 8005494:	e019      	b.n	80054ca <HAL_TIM_ConfigClockSource+0x15e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	6818      	ldr	r0, [r3, #0]
 800549a:	683b      	ldr	r3, [r7, #0]
 800549c:	6859      	ldr	r1, [r3, #4]
 800549e:	683b      	ldr	r3, [r7, #0]
 80054a0:	68db      	ldr	r3, [r3, #12]
 80054a2:	001a      	movs	r2, r3
 80054a4:	f000 f88c 	bl	80055c0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	681b      	ldr	r3, [r3, #0]
 80054ac:	2140      	movs	r1, #64	; 0x40
 80054ae:	0018      	movs	r0, r3
 80054b0:	f000 f8e6 	bl	8005680 <TIM_ITRx_SetConfig>
      break;
 80054b4:	e009      	b.n	80054ca <HAL_TIM_ConfigClockSource+0x15e>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	681a      	ldr	r2, [r3, #0]
 80054ba:	683b      	ldr	r3, [r7, #0]
 80054bc:	681b      	ldr	r3, [r3, #0]
 80054be:	0019      	movs	r1, r3
 80054c0:	0010      	movs	r0, r2
 80054c2:	f000 f8dd 	bl	8005680 <TIM_ITRx_SetConfig>
      break;
 80054c6:	e000      	b.n	80054ca <HAL_TIM_ConfigClockSource+0x15e>
      break;
 80054c8:	46c0      	nop			; (mov r8, r8)
  }
  htim->State = HAL_TIM_STATE_READY;
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	223d      	movs	r2, #61	; 0x3d
 80054ce:	2101      	movs	r1, #1
 80054d0:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	223c      	movs	r2, #60	; 0x3c
 80054d6:	2100      	movs	r1, #0
 80054d8:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80054da:	2300      	movs	r3, #0
}
 80054dc:	0018      	movs	r0, r3
 80054de:	46bd      	mov	sp, r7
 80054e0:	b004      	add	sp, #16
 80054e2:	bd80      	pop	{r7, pc}
 80054e4:	ffff00ff 	.word	0xffff00ff

080054e8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80054e8:	b580      	push	{r7, lr}
 80054ea:	b084      	sub	sp, #16
 80054ec:	af00      	add	r7, sp, #0
 80054ee:	6078      	str	r0, [r7, #4]
 80054f0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	681b      	ldr	r3, [r3, #0]
 80054f6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	4a2b      	ldr	r2, [pc, #172]	; (80055a8 <TIM_Base_SetConfig+0xc0>)
 80054fc:	4293      	cmp	r3, r2
 80054fe:	d003      	beq.n	8005508 <TIM_Base_SetConfig+0x20>
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	4a2a      	ldr	r2, [pc, #168]	; (80055ac <TIM_Base_SetConfig+0xc4>)
 8005504:	4293      	cmp	r3, r2
 8005506:	d108      	bne.n	800551a <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005508:	68fb      	ldr	r3, [r7, #12]
 800550a:	2270      	movs	r2, #112	; 0x70
 800550c:	4393      	bics	r3, r2
 800550e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005510:	683b      	ldr	r3, [r7, #0]
 8005512:	685b      	ldr	r3, [r3, #4]
 8005514:	68fa      	ldr	r2, [r7, #12]
 8005516:	4313      	orrs	r3, r2
 8005518:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	4a22      	ldr	r2, [pc, #136]	; (80055a8 <TIM_Base_SetConfig+0xc0>)
 800551e:	4293      	cmp	r3, r2
 8005520:	d00f      	beq.n	8005542 <TIM_Base_SetConfig+0x5a>
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	4a21      	ldr	r2, [pc, #132]	; (80055ac <TIM_Base_SetConfig+0xc4>)
 8005526:	4293      	cmp	r3, r2
 8005528:	d00b      	beq.n	8005542 <TIM_Base_SetConfig+0x5a>
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	4a20      	ldr	r2, [pc, #128]	; (80055b0 <TIM_Base_SetConfig+0xc8>)
 800552e:	4293      	cmp	r3, r2
 8005530:	d007      	beq.n	8005542 <TIM_Base_SetConfig+0x5a>
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	4a1f      	ldr	r2, [pc, #124]	; (80055b4 <TIM_Base_SetConfig+0xcc>)
 8005536:	4293      	cmp	r3, r2
 8005538:	d003      	beq.n	8005542 <TIM_Base_SetConfig+0x5a>
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	4a1e      	ldr	r2, [pc, #120]	; (80055b8 <TIM_Base_SetConfig+0xd0>)
 800553e:	4293      	cmp	r3, r2
 8005540:	d108      	bne.n	8005554 <TIM_Base_SetConfig+0x6c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005542:	68fb      	ldr	r3, [r7, #12]
 8005544:	4a1d      	ldr	r2, [pc, #116]	; (80055bc <TIM_Base_SetConfig+0xd4>)
 8005546:	4013      	ands	r3, r2
 8005548:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800554a:	683b      	ldr	r3, [r7, #0]
 800554c:	68db      	ldr	r3, [r3, #12]
 800554e:	68fa      	ldr	r2, [r7, #12]
 8005550:	4313      	orrs	r3, r2
 8005552:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005554:	68fb      	ldr	r3, [r7, #12]
 8005556:	2280      	movs	r2, #128	; 0x80
 8005558:	4393      	bics	r3, r2
 800555a:	001a      	movs	r2, r3
 800555c:	683b      	ldr	r3, [r7, #0]
 800555e:	695b      	ldr	r3, [r3, #20]
 8005560:	4313      	orrs	r3, r2
 8005562:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	68fa      	ldr	r2, [r7, #12]
 8005568:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800556a:	683b      	ldr	r3, [r7, #0]
 800556c:	689a      	ldr	r2, [r3, #8]
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005572:	683b      	ldr	r3, [r7, #0]
 8005574:	681a      	ldr	r2, [r3, #0]
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	4a0a      	ldr	r2, [pc, #40]	; (80055a8 <TIM_Base_SetConfig+0xc0>)
 800557e:	4293      	cmp	r3, r2
 8005580:	d007      	beq.n	8005592 <TIM_Base_SetConfig+0xaa>
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	4a0b      	ldr	r2, [pc, #44]	; (80055b4 <TIM_Base_SetConfig+0xcc>)
 8005586:	4293      	cmp	r3, r2
 8005588:	d003      	beq.n	8005592 <TIM_Base_SetConfig+0xaa>
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	4a0a      	ldr	r2, [pc, #40]	; (80055b8 <TIM_Base_SetConfig+0xd0>)
 800558e:	4293      	cmp	r3, r2
 8005590:	d103      	bne.n	800559a <TIM_Base_SetConfig+0xb2>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005592:	683b      	ldr	r3, [r7, #0]
 8005594:	691a      	ldr	r2, [r3, #16]
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	2201      	movs	r2, #1
 800559e:	615a      	str	r2, [r3, #20]
}
 80055a0:	46c0      	nop			; (mov r8, r8)
 80055a2:	46bd      	mov	sp, r7
 80055a4:	b004      	add	sp, #16
 80055a6:	bd80      	pop	{r7, pc}
 80055a8:	40012c00 	.word	0x40012c00
 80055ac:	40000400 	.word	0x40000400
 80055b0:	40002000 	.word	0x40002000
 80055b4:	40014400 	.word	0x40014400
 80055b8:	40014800 	.word	0x40014800
 80055bc:	fffffcff 	.word	0xfffffcff

080055c0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80055c0:	b580      	push	{r7, lr}
 80055c2:	b086      	sub	sp, #24
 80055c4:	af00      	add	r7, sp, #0
 80055c6:	60f8      	str	r0, [r7, #12]
 80055c8:	60b9      	str	r1, [r7, #8]
 80055ca:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80055cc:	68fb      	ldr	r3, [r7, #12]
 80055ce:	6a1b      	ldr	r3, [r3, #32]
 80055d0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80055d2:	68fb      	ldr	r3, [r7, #12]
 80055d4:	6a1b      	ldr	r3, [r3, #32]
 80055d6:	2201      	movs	r2, #1
 80055d8:	4393      	bics	r3, r2
 80055da:	001a      	movs	r2, r3
 80055dc:	68fb      	ldr	r3, [r7, #12]
 80055de:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80055e0:	68fb      	ldr	r3, [r7, #12]
 80055e2:	699b      	ldr	r3, [r3, #24]
 80055e4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80055e6:	693b      	ldr	r3, [r7, #16]
 80055e8:	22f0      	movs	r2, #240	; 0xf0
 80055ea:	4393      	bics	r3, r2
 80055ec:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	011b      	lsls	r3, r3, #4
 80055f2:	693a      	ldr	r2, [r7, #16]
 80055f4:	4313      	orrs	r3, r2
 80055f6:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80055f8:	697b      	ldr	r3, [r7, #20]
 80055fa:	220a      	movs	r2, #10
 80055fc:	4393      	bics	r3, r2
 80055fe:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005600:	697a      	ldr	r2, [r7, #20]
 8005602:	68bb      	ldr	r3, [r7, #8]
 8005604:	4313      	orrs	r3, r2
 8005606:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005608:	68fb      	ldr	r3, [r7, #12]
 800560a:	693a      	ldr	r2, [r7, #16]
 800560c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800560e:	68fb      	ldr	r3, [r7, #12]
 8005610:	697a      	ldr	r2, [r7, #20]
 8005612:	621a      	str	r2, [r3, #32]
}
 8005614:	46c0      	nop			; (mov r8, r8)
 8005616:	46bd      	mov	sp, r7
 8005618:	b006      	add	sp, #24
 800561a:	bd80      	pop	{r7, pc}

0800561c <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800561c:	b580      	push	{r7, lr}
 800561e:	b086      	sub	sp, #24
 8005620:	af00      	add	r7, sp, #0
 8005622:	60f8      	str	r0, [r7, #12]
 8005624:	60b9      	str	r1, [r7, #8]
 8005626:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005628:	68fb      	ldr	r3, [r7, #12]
 800562a:	6a1b      	ldr	r3, [r3, #32]
 800562c:	2210      	movs	r2, #16
 800562e:	4393      	bics	r3, r2
 8005630:	001a      	movs	r2, r3
 8005632:	68fb      	ldr	r3, [r7, #12]
 8005634:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005636:	68fb      	ldr	r3, [r7, #12]
 8005638:	699b      	ldr	r3, [r3, #24]
 800563a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800563c:	68fb      	ldr	r3, [r7, #12]
 800563e:	6a1b      	ldr	r3, [r3, #32]
 8005640:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005642:	697b      	ldr	r3, [r7, #20]
 8005644:	4a0d      	ldr	r2, [pc, #52]	; (800567c <TIM_TI2_ConfigInputStage+0x60>)
 8005646:	4013      	ands	r3, r2
 8005648:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	031b      	lsls	r3, r3, #12
 800564e:	697a      	ldr	r2, [r7, #20]
 8005650:	4313      	orrs	r3, r2
 8005652:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005654:	693b      	ldr	r3, [r7, #16]
 8005656:	22a0      	movs	r2, #160	; 0xa0
 8005658:	4393      	bics	r3, r2
 800565a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800565c:	68bb      	ldr	r3, [r7, #8]
 800565e:	011b      	lsls	r3, r3, #4
 8005660:	693a      	ldr	r2, [r7, #16]
 8005662:	4313      	orrs	r3, r2
 8005664:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005666:	68fb      	ldr	r3, [r7, #12]
 8005668:	697a      	ldr	r2, [r7, #20]
 800566a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800566c:	68fb      	ldr	r3, [r7, #12]
 800566e:	693a      	ldr	r2, [r7, #16]
 8005670:	621a      	str	r2, [r3, #32]
}
 8005672:	46c0      	nop			; (mov r8, r8)
 8005674:	46bd      	mov	sp, r7
 8005676:	b006      	add	sp, #24
 8005678:	bd80      	pop	{r7, pc}
 800567a:	46c0      	nop			; (mov r8, r8)
 800567c:	ffff0fff 	.word	0xffff0fff

08005680 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005680:	b580      	push	{r7, lr}
 8005682:	b084      	sub	sp, #16
 8005684:	af00      	add	r7, sp, #0
 8005686:	6078      	str	r0, [r7, #4]
 8005688:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	689b      	ldr	r3, [r3, #8]
 800568e:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005690:	68fb      	ldr	r3, [r7, #12]
 8005692:	2270      	movs	r2, #112	; 0x70
 8005694:	4393      	bics	r3, r2
 8005696:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005698:	683a      	ldr	r2, [r7, #0]
 800569a:	68fb      	ldr	r3, [r7, #12]
 800569c:	4313      	orrs	r3, r2
 800569e:	2207      	movs	r2, #7
 80056a0:	4313      	orrs	r3, r2
 80056a2:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	68fa      	ldr	r2, [r7, #12]
 80056a8:	609a      	str	r2, [r3, #8]
}
 80056aa:	46c0      	nop			; (mov r8, r8)
 80056ac:	46bd      	mov	sp, r7
 80056ae:	b004      	add	sp, #16
 80056b0:	bd80      	pop	{r7, pc}
	...

080056b4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80056b4:	b580      	push	{r7, lr}
 80056b6:	b086      	sub	sp, #24
 80056b8:	af00      	add	r7, sp, #0
 80056ba:	60f8      	str	r0, [r7, #12]
 80056bc:	60b9      	str	r1, [r7, #8]
 80056be:	607a      	str	r2, [r7, #4]
 80056c0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80056c2:	68fb      	ldr	r3, [r7, #12]
 80056c4:	689b      	ldr	r3, [r3, #8]
 80056c6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80056c8:	697b      	ldr	r3, [r7, #20]
 80056ca:	4a09      	ldr	r2, [pc, #36]	; (80056f0 <TIM_ETR_SetConfig+0x3c>)
 80056cc:	4013      	ands	r3, r2
 80056ce:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80056d0:	683b      	ldr	r3, [r7, #0]
 80056d2:	021a      	lsls	r2, r3, #8
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	431a      	orrs	r2, r3
 80056d8:	68bb      	ldr	r3, [r7, #8]
 80056da:	4313      	orrs	r3, r2
 80056dc:	697a      	ldr	r2, [r7, #20]
 80056de:	4313      	orrs	r3, r2
 80056e0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80056e2:	68fb      	ldr	r3, [r7, #12]
 80056e4:	697a      	ldr	r2, [r7, #20]
 80056e6:	609a      	str	r2, [r3, #8]
}
 80056e8:	46c0      	nop			; (mov r8, r8)
 80056ea:	46bd      	mov	sp, r7
 80056ec:	b006      	add	sp, #24
 80056ee:	bd80      	pop	{r7, pc}
 80056f0:	ffff00ff 	.word	0xffff00ff

080056f4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80056f4:	b580      	push	{r7, lr}
 80056f6:	b084      	sub	sp, #16
 80056f8:	af00      	add	r7, sp, #0
 80056fa:	6078      	str	r0, [r7, #4]
 80056fc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	223c      	movs	r2, #60	; 0x3c
 8005702:	5c9b      	ldrb	r3, [r3, r2]
 8005704:	2b01      	cmp	r3, #1
 8005706:	d101      	bne.n	800570c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005708:	2302      	movs	r3, #2
 800570a:	e03c      	b.n	8005786 <HAL_TIMEx_MasterConfigSynchronization+0x92>
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	223c      	movs	r2, #60	; 0x3c
 8005710:	2101      	movs	r1, #1
 8005712:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	223d      	movs	r2, #61	; 0x3d
 8005718:	2102      	movs	r1, #2
 800571a:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	681b      	ldr	r3, [r3, #0]
 8005720:	685b      	ldr	r3, [r3, #4]
 8005722:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	681b      	ldr	r3, [r3, #0]
 8005728:	689b      	ldr	r3, [r3, #8]
 800572a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800572c:	68fb      	ldr	r3, [r7, #12]
 800572e:	2270      	movs	r2, #112	; 0x70
 8005730:	4393      	bics	r3, r2
 8005732:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005734:	683b      	ldr	r3, [r7, #0]
 8005736:	681b      	ldr	r3, [r3, #0]
 8005738:	68fa      	ldr	r2, [r7, #12]
 800573a:	4313      	orrs	r3, r2
 800573c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	681b      	ldr	r3, [r3, #0]
 8005742:	68fa      	ldr	r2, [r7, #12]
 8005744:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	681b      	ldr	r3, [r3, #0]
 800574a:	4a11      	ldr	r2, [pc, #68]	; (8005790 <HAL_TIMEx_MasterConfigSynchronization+0x9c>)
 800574c:	4293      	cmp	r3, r2
 800574e:	d004      	beq.n	800575a <HAL_TIMEx_MasterConfigSynchronization+0x66>
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	681b      	ldr	r3, [r3, #0]
 8005754:	4a0f      	ldr	r2, [pc, #60]	; (8005794 <HAL_TIMEx_MasterConfigSynchronization+0xa0>)
 8005756:	4293      	cmp	r3, r2
 8005758:	d10c      	bne.n	8005774 <HAL_TIMEx_MasterConfigSynchronization+0x80>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800575a:	68bb      	ldr	r3, [r7, #8]
 800575c:	2280      	movs	r2, #128	; 0x80
 800575e:	4393      	bics	r3, r2
 8005760:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005762:	683b      	ldr	r3, [r7, #0]
 8005764:	685b      	ldr	r3, [r3, #4]
 8005766:	68ba      	ldr	r2, [r7, #8]
 8005768:	4313      	orrs	r3, r2
 800576a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	681b      	ldr	r3, [r3, #0]
 8005770:	68ba      	ldr	r2, [r7, #8]
 8005772:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	223d      	movs	r2, #61	; 0x3d
 8005778:	2101      	movs	r1, #1
 800577a:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	223c      	movs	r2, #60	; 0x3c
 8005780:	2100      	movs	r1, #0
 8005782:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8005784:	2300      	movs	r3, #0
}
 8005786:	0018      	movs	r0, r3
 8005788:	46bd      	mov	sp, r7
 800578a:	b004      	add	sp, #16
 800578c:	bd80      	pop	{r7, pc}
 800578e:	46c0      	nop			; (mov r8, r8)
 8005790:	40012c00 	.word	0x40012c00
 8005794:	40000400 	.word	0x40000400

08005798 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005798:	b580      	push	{r7, lr}
 800579a:	b082      	sub	sp, #8
 800579c:	af00      	add	r7, sp, #0
 800579e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	2b00      	cmp	r3, #0
 80057a4:	d101      	bne.n	80057aa <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80057a6:	2301      	movs	r3, #1
 80057a8:	e044      	b.n	8005834 <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80057ae:	2b00      	cmp	r3, #0
 80057b0:	d107      	bne.n	80057c2 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	2270      	movs	r2, #112	; 0x70
 80057b6:	2100      	movs	r1, #0
 80057b8:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	0018      	movs	r0, r3
 80057be:	f7fd faf3 	bl	8002da8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	2224      	movs	r2, #36	; 0x24
 80057c6:	675a      	str	r2, [r3, #116]	; 0x74

  __HAL_UART_DISABLE(huart);
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	681b      	ldr	r3, [r3, #0]
 80057cc:	681a      	ldr	r2, [r3, #0]
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	681b      	ldr	r3, [r3, #0]
 80057d2:	2101      	movs	r1, #1
 80057d4:	438a      	bics	r2, r1
 80057d6:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	0018      	movs	r0, r3
 80057dc:	f000 f830 	bl	8005840 <UART_SetConfig>
 80057e0:	0003      	movs	r3, r0
 80057e2:	2b01      	cmp	r3, #1
 80057e4:	d101      	bne.n	80057ea <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 80057e6:	2301      	movs	r3, #1
 80057e8:	e024      	b.n	8005834 <HAL_UART_Init+0x9c>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057ee:	2b00      	cmp	r3, #0
 80057f0:	d003      	beq.n	80057fa <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	0018      	movs	r0, r3
 80057f6:	f000 f991 	bl	8005b1c <UART_AdvFeatureConfig>
  - LINEN (if LIN is supported) and CLKEN bits in the USART_CR2 register,
  - SCEN (if Smartcard is supported), HDSEL and IREN (if IrDA is supported)  bits in the USART_CR3 register.*/
#if defined (USART_CR2_LINEN)
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
#else
  CLEAR_BIT(huart->Instance->CR2, USART_CR2_CLKEN);
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	681b      	ldr	r3, [r3, #0]
 80057fe:	685a      	ldr	r2, [r3, #4]
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	681b      	ldr	r3, [r3, #0]
 8005804:	490d      	ldr	r1, [pc, #52]	; (800583c <HAL_UART_Init+0xa4>)
 8005806:	400a      	ands	r2, r1
 8005808:	605a      	str	r2, [r3, #4]
#endif /* USART_CR3_IREN */
#else
#if defined (USART_CR3_IREN)
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_HDSEL | USART_CR3_IREN));
#else
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	681b      	ldr	r3, [r3, #0]
 800580e:	689a      	ldr	r2, [r3, #8]
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	681b      	ldr	r3, [r3, #0]
 8005814:	2108      	movs	r1, #8
 8005816:	438a      	bics	r2, r1
 8005818:	609a      	str	r2, [r3, #8]
#endif /* USART_CR3_IREN*/
#endif /* USART_CR3_SCEN */

  __HAL_UART_ENABLE(huart);
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	681b      	ldr	r3, [r3, #0]
 800581e:	681a      	ldr	r2, [r3, #0]
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	681b      	ldr	r3, [r3, #0]
 8005824:	2101      	movs	r1, #1
 8005826:	430a      	orrs	r2, r1
 8005828:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	0018      	movs	r0, r3
 800582e:	f000 fa29 	bl	8005c84 <UART_CheckIdleState>
 8005832:	0003      	movs	r3, r0
}
 8005834:	0018      	movs	r0, r3
 8005836:	46bd      	mov	sp, r7
 8005838:	b002      	add	sp, #8
 800583a:	bd80      	pop	{r7, pc}
 800583c:	fffff7ff 	.word	0xfffff7ff

08005840 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005840:	b580      	push	{r7, lr}
 8005842:	b088      	sub	sp, #32
 8005844:	af00      	add	r7, sp, #0
 8005846:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv                   = 0x00000000U;
 8005848:	2300      	movs	r3, #0
 800584a:	61bb      	str	r3, [r7, #24]
  HAL_StatusTypeDef ret               = HAL_OK;
 800584c:	2317      	movs	r3, #23
 800584e:	18fb      	adds	r3, r7, r3
 8005850:	2200      	movs	r2, #0
 8005852:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	689a      	ldr	r2, [r3, #8]
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	691b      	ldr	r3, [r3, #16]
 800585c:	431a      	orrs	r2, r3
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	695b      	ldr	r3, [r3, #20]
 8005862:	431a      	orrs	r2, r3
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	69db      	ldr	r3, [r3, #28]
 8005868:	4313      	orrs	r3, r2
 800586a:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	681b      	ldr	r3, [r3, #0]
 8005870:	681b      	ldr	r3, [r3, #0]
 8005872:	4aa3      	ldr	r2, [pc, #652]	; (8005b00 <UART_SetConfig+0x2c0>)
 8005874:	4013      	ands	r3, r2
 8005876:	0019      	movs	r1, r3
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	681b      	ldr	r3, [r3, #0]
 800587c:	693a      	ldr	r2, [r7, #16]
 800587e:	430a      	orrs	r2, r1
 8005880:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	681b      	ldr	r3, [r3, #0]
 8005886:	685b      	ldr	r3, [r3, #4]
 8005888:	4a9e      	ldr	r2, [pc, #632]	; (8005b04 <UART_SetConfig+0x2c4>)
 800588a:	4013      	ands	r3, r2
 800588c:	0019      	movs	r1, r3
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	68da      	ldr	r2, [r3, #12]
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	681b      	ldr	r3, [r3, #0]
 8005896:	430a      	orrs	r2, r1
 8005898:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	699b      	ldr	r3, [r3, #24]
 800589e:	613b      	str	r3, [r7, #16]

  tmpreg |= huart->Init.OneBitSampling;
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	6a1b      	ldr	r3, [r3, #32]
 80058a4:	693a      	ldr	r2, [r7, #16]
 80058a6:	4313      	orrs	r3, r2
 80058a8:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	681b      	ldr	r3, [r3, #0]
 80058ae:	689b      	ldr	r3, [r3, #8]
 80058b0:	4a95      	ldr	r2, [pc, #596]	; (8005b08 <UART_SetConfig+0x2c8>)
 80058b2:	4013      	ands	r3, r2
 80058b4:	0019      	movs	r1, r3
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	681b      	ldr	r3, [r3, #0]
 80058ba:	693a      	ldr	r2, [r7, #16]
 80058bc:	430a      	orrs	r2, r1
 80058be:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80058c0:	4b92      	ldr	r3, [pc, #584]	; (8005b0c <UART_SetConfig+0x2cc>)
 80058c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80058c4:	2203      	movs	r2, #3
 80058c6:	4013      	ands	r3, r2
 80058c8:	2b01      	cmp	r3, #1
 80058ca:	d00f      	beq.n	80058ec <UART_SetConfig+0xac>
 80058cc:	d304      	bcc.n	80058d8 <UART_SetConfig+0x98>
 80058ce:	2b02      	cmp	r3, #2
 80058d0:	d011      	beq.n	80058f6 <UART_SetConfig+0xb6>
 80058d2:	2b03      	cmp	r3, #3
 80058d4:	d005      	beq.n	80058e2 <UART_SetConfig+0xa2>
 80058d6:	e013      	b.n	8005900 <UART_SetConfig+0xc0>
 80058d8:	231f      	movs	r3, #31
 80058da:	18fb      	adds	r3, r7, r3
 80058dc:	2200      	movs	r2, #0
 80058de:	701a      	strb	r2, [r3, #0]
 80058e0:	e012      	b.n	8005908 <UART_SetConfig+0xc8>
 80058e2:	231f      	movs	r3, #31
 80058e4:	18fb      	adds	r3, r7, r3
 80058e6:	2202      	movs	r2, #2
 80058e8:	701a      	strb	r2, [r3, #0]
 80058ea:	e00d      	b.n	8005908 <UART_SetConfig+0xc8>
 80058ec:	231f      	movs	r3, #31
 80058ee:	18fb      	adds	r3, r7, r3
 80058f0:	2204      	movs	r2, #4
 80058f2:	701a      	strb	r2, [r3, #0]
 80058f4:	e008      	b.n	8005908 <UART_SetConfig+0xc8>
 80058f6:	231f      	movs	r3, #31
 80058f8:	18fb      	adds	r3, r7, r3
 80058fa:	2208      	movs	r2, #8
 80058fc:	701a      	strb	r2, [r3, #0]
 80058fe:	e003      	b.n	8005908 <UART_SetConfig+0xc8>
 8005900:	231f      	movs	r3, #31
 8005902:	18fb      	adds	r3, r7, r3
 8005904:	2210      	movs	r2, #16
 8005906:	701a      	strb	r2, [r3, #0]
 8005908:	46c0      	nop			; (mov r8, r8)

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	69da      	ldr	r2, [r3, #28]
 800590e:	2380      	movs	r3, #128	; 0x80
 8005910:	021b      	lsls	r3, r3, #8
 8005912:	429a      	cmp	r2, r3
 8005914:	d000      	beq.n	8005918 <UART_SetConfig+0xd8>
 8005916:	e07d      	b.n	8005a14 <UART_SetConfig+0x1d4>
  {
    switch (clocksource)
 8005918:	231f      	movs	r3, #31
 800591a:	18fb      	adds	r3, r7, r3
 800591c:	781b      	ldrb	r3, [r3, #0]
 800591e:	2b02      	cmp	r3, #2
 8005920:	d01c      	beq.n	800595c <UART_SetConfig+0x11c>
 8005922:	dc02      	bgt.n	800592a <UART_SetConfig+0xea>
 8005924:	2b00      	cmp	r3, #0
 8005926:	d005      	beq.n	8005934 <UART_SetConfig+0xf4>
 8005928:	e04b      	b.n	80059c2 <UART_SetConfig+0x182>
 800592a:	2b04      	cmp	r3, #4
 800592c:	d025      	beq.n	800597a <UART_SetConfig+0x13a>
 800592e:	2b08      	cmp	r3, #8
 8005930:	d037      	beq.n	80059a2 <UART_SetConfig+0x162>
 8005932:	e046      	b.n	80059c2 <UART_SetConfig+0x182>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005934:	f7ff fbe8 	bl	8005108 <HAL_RCC_GetPCLK1Freq>
 8005938:	0003      	movs	r3, r0
 800593a:	60fb      	str	r3, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800593c:	68fb      	ldr	r3, [r7, #12]
 800593e:	005a      	lsls	r2, r3, #1
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	685b      	ldr	r3, [r3, #4]
 8005944:	085b      	lsrs	r3, r3, #1
 8005946:	18d2      	adds	r2, r2, r3
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	685b      	ldr	r3, [r3, #4]
 800594c:	0019      	movs	r1, r3
 800594e:	0010      	movs	r0, r2
 8005950:	f7fa fbda 	bl	8000108 <__udivsi3>
 8005954:	0003      	movs	r3, r0
 8005956:	b29b      	uxth	r3, r3
 8005958:	61bb      	str	r3, [r7, #24]
        break;
 800595a:	e037      	b.n	80059cc <UART_SetConfig+0x18c>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	685b      	ldr	r3, [r3, #4]
 8005960:	085b      	lsrs	r3, r3, #1
 8005962:	4a6b      	ldr	r2, [pc, #428]	; (8005b10 <UART_SetConfig+0x2d0>)
 8005964:	189a      	adds	r2, r3, r2
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	685b      	ldr	r3, [r3, #4]
 800596a:	0019      	movs	r1, r3
 800596c:	0010      	movs	r0, r2
 800596e:	f7fa fbcb 	bl	8000108 <__udivsi3>
 8005972:	0003      	movs	r3, r0
 8005974:	b29b      	uxth	r3, r3
 8005976:	61bb      	str	r3, [r7, #24]
        break;
 8005978:	e028      	b.n	80059cc <UART_SetConfig+0x18c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800597a:	f7ff fb57 	bl	800502c <HAL_RCC_GetSysClockFreq>
 800597e:	0003      	movs	r3, r0
 8005980:	60fb      	str	r3, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8005982:	68fb      	ldr	r3, [r7, #12]
 8005984:	005a      	lsls	r2, r3, #1
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	685b      	ldr	r3, [r3, #4]
 800598a:	085b      	lsrs	r3, r3, #1
 800598c:	18d2      	adds	r2, r2, r3
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	685b      	ldr	r3, [r3, #4]
 8005992:	0019      	movs	r1, r3
 8005994:	0010      	movs	r0, r2
 8005996:	f7fa fbb7 	bl	8000108 <__udivsi3>
 800599a:	0003      	movs	r3, r0
 800599c:	b29b      	uxth	r3, r3
 800599e:	61bb      	str	r3, [r7, #24]
        break;
 80059a0:	e014      	b.n	80059cc <UART_SetConfig+0x18c>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	685b      	ldr	r3, [r3, #4]
 80059a6:	085b      	lsrs	r3, r3, #1
 80059a8:	2280      	movs	r2, #128	; 0x80
 80059aa:	0252      	lsls	r2, r2, #9
 80059ac:	189a      	adds	r2, r3, r2
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	685b      	ldr	r3, [r3, #4]
 80059b2:	0019      	movs	r1, r3
 80059b4:	0010      	movs	r0, r2
 80059b6:	f7fa fba7 	bl	8000108 <__udivsi3>
 80059ba:	0003      	movs	r3, r0
 80059bc:	b29b      	uxth	r3, r3
 80059be:	61bb      	str	r3, [r7, #24]
        break;
 80059c0:	e004      	b.n	80059cc <UART_SetConfig+0x18c>
      default:
        ret = HAL_ERROR;
 80059c2:	2317      	movs	r3, #23
 80059c4:	18fb      	adds	r3, r7, r3
 80059c6:	2201      	movs	r2, #1
 80059c8:	701a      	strb	r2, [r3, #0]
        break;
 80059ca:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80059cc:	69bb      	ldr	r3, [r7, #24]
 80059ce:	2b0f      	cmp	r3, #15
 80059d0:	d91b      	bls.n	8005a0a <UART_SetConfig+0x1ca>
 80059d2:	69bb      	ldr	r3, [r7, #24]
 80059d4:	4a4f      	ldr	r2, [pc, #316]	; (8005b14 <UART_SetConfig+0x2d4>)
 80059d6:	4293      	cmp	r3, r2
 80059d8:	d817      	bhi.n	8005a0a <UART_SetConfig+0x1ca>
    {
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80059da:	69bb      	ldr	r3, [r7, #24]
 80059dc:	b29a      	uxth	r2, r3
 80059de:	200a      	movs	r0, #10
 80059e0:	183b      	adds	r3, r7, r0
 80059e2:	210f      	movs	r1, #15
 80059e4:	438a      	bics	r2, r1
 80059e6:	801a      	strh	r2, [r3, #0]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80059e8:	69bb      	ldr	r3, [r7, #24]
 80059ea:	085b      	lsrs	r3, r3, #1
 80059ec:	b29b      	uxth	r3, r3
 80059ee:	2207      	movs	r2, #7
 80059f0:	4013      	ands	r3, r2
 80059f2:	b299      	uxth	r1, r3
 80059f4:	183b      	adds	r3, r7, r0
 80059f6:	183a      	adds	r2, r7, r0
 80059f8:	8812      	ldrh	r2, [r2, #0]
 80059fa:	430a      	orrs	r2, r1
 80059fc:	801a      	strh	r2, [r3, #0]
      huart->Instance->BRR = brrtemp;
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	681b      	ldr	r3, [r3, #0]
 8005a02:	183a      	adds	r2, r7, r0
 8005a04:	8812      	ldrh	r2, [r2, #0]
 8005a06:	60da      	str	r2, [r3, #12]
 8005a08:	e06c      	b.n	8005ae4 <UART_SetConfig+0x2a4>
    }
    else
    {
      ret = HAL_ERROR;
 8005a0a:	2317      	movs	r3, #23
 8005a0c:	18fb      	adds	r3, r7, r3
 8005a0e:	2201      	movs	r2, #1
 8005a10:	701a      	strb	r2, [r3, #0]
 8005a12:	e067      	b.n	8005ae4 <UART_SetConfig+0x2a4>
    }
  }
  else
  {
    switch (clocksource)
 8005a14:	231f      	movs	r3, #31
 8005a16:	18fb      	adds	r3, r7, r3
 8005a18:	781b      	ldrb	r3, [r3, #0]
 8005a1a:	2b02      	cmp	r3, #2
 8005a1c:	d01b      	beq.n	8005a56 <UART_SetConfig+0x216>
 8005a1e:	dc02      	bgt.n	8005a26 <UART_SetConfig+0x1e6>
 8005a20:	2b00      	cmp	r3, #0
 8005a22:	d005      	beq.n	8005a30 <UART_SetConfig+0x1f0>
 8005a24:	e049      	b.n	8005aba <UART_SetConfig+0x27a>
 8005a26:	2b04      	cmp	r3, #4
 8005a28:	d024      	beq.n	8005a74 <UART_SetConfig+0x234>
 8005a2a:	2b08      	cmp	r3, #8
 8005a2c:	d035      	beq.n	8005a9a <UART_SetConfig+0x25a>
 8005a2e:	e044      	b.n	8005aba <UART_SetConfig+0x27a>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005a30:	f7ff fb6a 	bl	8005108 <HAL_RCC_GetPCLK1Freq>
 8005a34:	0003      	movs	r3, r0
 8005a36:	60fb      	str	r3, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	685b      	ldr	r3, [r3, #4]
 8005a3c:	085a      	lsrs	r2, r3, #1
 8005a3e:	68fb      	ldr	r3, [r7, #12]
 8005a40:	18d2      	adds	r2, r2, r3
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	685b      	ldr	r3, [r3, #4]
 8005a46:	0019      	movs	r1, r3
 8005a48:	0010      	movs	r0, r2
 8005a4a:	f7fa fb5d 	bl	8000108 <__udivsi3>
 8005a4e:	0003      	movs	r3, r0
 8005a50:	b29b      	uxth	r3, r3
 8005a52:	61bb      	str	r3, [r7, #24]
        break;
 8005a54:	e036      	b.n	8005ac4 <UART_SetConfig+0x284>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	685b      	ldr	r3, [r3, #4]
 8005a5a:	085b      	lsrs	r3, r3, #1
 8005a5c:	4a2e      	ldr	r2, [pc, #184]	; (8005b18 <UART_SetConfig+0x2d8>)
 8005a5e:	189a      	adds	r2, r3, r2
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	685b      	ldr	r3, [r3, #4]
 8005a64:	0019      	movs	r1, r3
 8005a66:	0010      	movs	r0, r2
 8005a68:	f7fa fb4e 	bl	8000108 <__udivsi3>
 8005a6c:	0003      	movs	r3, r0
 8005a6e:	b29b      	uxth	r3, r3
 8005a70:	61bb      	str	r3, [r7, #24]
        break;
 8005a72:	e027      	b.n	8005ac4 <UART_SetConfig+0x284>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005a74:	f7ff fada 	bl	800502c <HAL_RCC_GetSysClockFreq>
 8005a78:	0003      	movs	r3, r0
 8005a7a:	60fb      	str	r3, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	685b      	ldr	r3, [r3, #4]
 8005a80:	085a      	lsrs	r2, r3, #1
 8005a82:	68fb      	ldr	r3, [r7, #12]
 8005a84:	18d2      	adds	r2, r2, r3
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	685b      	ldr	r3, [r3, #4]
 8005a8a:	0019      	movs	r1, r3
 8005a8c:	0010      	movs	r0, r2
 8005a8e:	f7fa fb3b 	bl	8000108 <__udivsi3>
 8005a92:	0003      	movs	r3, r0
 8005a94:	b29b      	uxth	r3, r3
 8005a96:	61bb      	str	r3, [r7, #24]
        break;
 8005a98:	e014      	b.n	8005ac4 <UART_SetConfig+0x284>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	685b      	ldr	r3, [r3, #4]
 8005a9e:	085b      	lsrs	r3, r3, #1
 8005aa0:	2280      	movs	r2, #128	; 0x80
 8005aa2:	0212      	lsls	r2, r2, #8
 8005aa4:	189a      	adds	r2, r3, r2
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	685b      	ldr	r3, [r3, #4]
 8005aaa:	0019      	movs	r1, r3
 8005aac:	0010      	movs	r0, r2
 8005aae:	f7fa fb2b 	bl	8000108 <__udivsi3>
 8005ab2:	0003      	movs	r3, r0
 8005ab4:	b29b      	uxth	r3, r3
 8005ab6:	61bb      	str	r3, [r7, #24]
        break;
 8005ab8:	e004      	b.n	8005ac4 <UART_SetConfig+0x284>
      default:
        ret = HAL_ERROR;
 8005aba:	2317      	movs	r3, #23
 8005abc:	18fb      	adds	r3, r7, r3
 8005abe:	2201      	movs	r2, #1
 8005ac0:	701a      	strb	r2, [r3, #0]
        break;
 8005ac2:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005ac4:	69bb      	ldr	r3, [r7, #24]
 8005ac6:	2b0f      	cmp	r3, #15
 8005ac8:	d908      	bls.n	8005adc <UART_SetConfig+0x29c>
 8005aca:	69bb      	ldr	r3, [r7, #24]
 8005acc:	4a11      	ldr	r2, [pc, #68]	; (8005b14 <UART_SetConfig+0x2d4>)
 8005ace:	4293      	cmp	r3, r2
 8005ad0:	d804      	bhi.n	8005adc <UART_SetConfig+0x29c>
    {
      huart->Instance->BRR = usartdiv;
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	681b      	ldr	r3, [r3, #0]
 8005ad6:	69ba      	ldr	r2, [r7, #24]
 8005ad8:	60da      	str	r2, [r3, #12]
 8005ada:	e003      	b.n	8005ae4 <UART_SetConfig+0x2a4>
    }
    else
    {
      ret = HAL_ERROR;
 8005adc:	2317      	movs	r3, #23
 8005ade:	18fb      	adds	r3, r7, r3
 8005ae0:	2201      	movs	r2, #1
 8005ae2:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	2200      	movs	r2, #0
 8005ae8:	661a      	str	r2, [r3, #96]	; 0x60
  huart->TxISR = NULL;
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	2200      	movs	r2, #0
 8005aee:	665a      	str	r2, [r3, #100]	; 0x64

  return ret;
 8005af0:	2317      	movs	r3, #23
 8005af2:	18fb      	adds	r3, r7, r3
 8005af4:	781b      	ldrb	r3, [r3, #0]
}
 8005af6:	0018      	movs	r0, r3
 8005af8:	46bd      	mov	sp, r7
 8005afa:	b008      	add	sp, #32
 8005afc:	bd80      	pop	{r7, pc}
 8005afe:	46c0      	nop			; (mov r8, r8)
 8005b00:	ffff69f3 	.word	0xffff69f3
 8005b04:	ffffcfff 	.word	0xffffcfff
 8005b08:	fffff4ff 	.word	0xfffff4ff
 8005b0c:	40021000 	.word	0x40021000
 8005b10:	00f42400 	.word	0x00f42400
 8005b14:	0000ffff 	.word	0x0000ffff
 8005b18:	007a1200 	.word	0x007a1200

08005b1c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005b1c:	b580      	push	{r7, lr}
 8005b1e:	b082      	sub	sp, #8
 8005b20:	af00      	add	r7, sp, #0
 8005b22:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b28:	2201      	movs	r2, #1
 8005b2a:	4013      	ands	r3, r2
 8005b2c:	d00b      	beq.n	8005b46 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	681b      	ldr	r3, [r3, #0]
 8005b32:	685b      	ldr	r3, [r3, #4]
 8005b34:	4a4a      	ldr	r2, [pc, #296]	; (8005c60 <UART_AdvFeatureConfig+0x144>)
 8005b36:	4013      	ands	r3, r2
 8005b38:	0019      	movs	r1, r3
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	681b      	ldr	r3, [r3, #0]
 8005b42:	430a      	orrs	r2, r1
 8005b44:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b4a:	2202      	movs	r2, #2
 8005b4c:	4013      	ands	r3, r2
 8005b4e:	d00b      	beq.n	8005b68 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	681b      	ldr	r3, [r3, #0]
 8005b54:	685b      	ldr	r3, [r3, #4]
 8005b56:	4a43      	ldr	r2, [pc, #268]	; (8005c64 <UART_AdvFeatureConfig+0x148>)
 8005b58:	4013      	ands	r3, r2
 8005b5a:	0019      	movs	r1, r3
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	681b      	ldr	r3, [r3, #0]
 8005b64:	430a      	orrs	r2, r1
 8005b66:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b6c:	2204      	movs	r2, #4
 8005b6e:	4013      	ands	r3, r2
 8005b70:	d00b      	beq.n	8005b8a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	681b      	ldr	r3, [r3, #0]
 8005b76:	685b      	ldr	r3, [r3, #4]
 8005b78:	4a3b      	ldr	r2, [pc, #236]	; (8005c68 <UART_AdvFeatureConfig+0x14c>)
 8005b7a:	4013      	ands	r3, r2
 8005b7c:	0019      	movs	r1, r3
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	681b      	ldr	r3, [r3, #0]
 8005b86:	430a      	orrs	r2, r1
 8005b88:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b8e:	2208      	movs	r2, #8
 8005b90:	4013      	ands	r3, r2
 8005b92:	d00b      	beq.n	8005bac <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	681b      	ldr	r3, [r3, #0]
 8005b98:	685b      	ldr	r3, [r3, #4]
 8005b9a:	4a34      	ldr	r2, [pc, #208]	; (8005c6c <UART_AdvFeatureConfig+0x150>)
 8005b9c:	4013      	ands	r3, r2
 8005b9e:	0019      	movs	r1, r3
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	681b      	ldr	r3, [r3, #0]
 8005ba8:	430a      	orrs	r2, r1
 8005baa:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005bb0:	2210      	movs	r2, #16
 8005bb2:	4013      	ands	r3, r2
 8005bb4:	d00b      	beq.n	8005bce <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	681b      	ldr	r3, [r3, #0]
 8005bba:	689b      	ldr	r3, [r3, #8]
 8005bbc:	4a2c      	ldr	r2, [pc, #176]	; (8005c70 <UART_AdvFeatureConfig+0x154>)
 8005bbe:	4013      	ands	r3, r2
 8005bc0:	0019      	movs	r1, r3
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	681b      	ldr	r3, [r3, #0]
 8005bca:	430a      	orrs	r2, r1
 8005bcc:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005bd2:	2220      	movs	r2, #32
 8005bd4:	4013      	ands	r3, r2
 8005bd6:	d00b      	beq.n	8005bf0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	681b      	ldr	r3, [r3, #0]
 8005bdc:	689b      	ldr	r3, [r3, #8]
 8005bde:	4a25      	ldr	r2, [pc, #148]	; (8005c74 <UART_AdvFeatureConfig+0x158>)
 8005be0:	4013      	ands	r3, r2
 8005be2:	0019      	movs	r1, r3
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	681b      	ldr	r3, [r3, #0]
 8005bec:	430a      	orrs	r2, r1
 8005bee:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005bf4:	2240      	movs	r2, #64	; 0x40
 8005bf6:	4013      	ands	r3, r2
 8005bf8:	d01d      	beq.n	8005c36 <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	681b      	ldr	r3, [r3, #0]
 8005bfe:	685b      	ldr	r3, [r3, #4]
 8005c00:	4a1d      	ldr	r2, [pc, #116]	; (8005c78 <UART_AdvFeatureConfig+0x15c>)
 8005c02:	4013      	ands	r3, r2
 8005c04:	0019      	movs	r1, r3
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	681b      	ldr	r3, [r3, #0]
 8005c0e:	430a      	orrs	r2, r1
 8005c10:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005c16:	2380      	movs	r3, #128	; 0x80
 8005c18:	035b      	lsls	r3, r3, #13
 8005c1a:	429a      	cmp	r2, r3
 8005c1c:	d10b      	bne.n	8005c36 <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	681b      	ldr	r3, [r3, #0]
 8005c22:	685b      	ldr	r3, [r3, #4]
 8005c24:	4a15      	ldr	r2, [pc, #84]	; (8005c7c <UART_AdvFeatureConfig+0x160>)
 8005c26:	4013      	ands	r3, r2
 8005c28:	0019      	movs	r1, r3
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	681b      	ldr	r3, [r3, #0]
 8005c32:	430a      	orrs	r2, r1
 8005c34:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c3a:	2280      	movs	r2, #128	; 0x80
 8005c3c:	4013      	ands	r3, r2
 8005c3e:	d00b      	beq.n	8005c58 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	681b      	ldr	r3, [r3, #0]
 8005c44:	685b      	ldr	r3, [r3, #4]
 8005c46:	4a0e      	ldr	r2, [pc, #56]	; (8005c80 <UART_AdvFeatureConfig+0x164>)
 8005c48:	4013      	ands	r3, r2
 8005c4a:	0019      	movs	r1, r3
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	681b      	ldr	r3, [r3, #0]
 8005c54:	430a      	orrs	r2, r1
 8005c56:	605a      	str	r2, [r3, #4]
  }
}
 8005c58:	46c0      	nop			; (mov r8, r8)
 8005c5a:	46bd      	mov	sp, r7
 8005c5c:	b002      	add	sp, #8
 8005c5e:	bd80      	pop	{r7, pc}
 8005c60:	fffdffff 	.word	0xfffdffff
 8005c64:	fffeffff 	.word	0xfffeffff
 8005c68:	fffbffff 	.word	0xfffbffff
 8005c6c:	ffff7fff 	.word	0xffff7fff
 8005c70:	ffffefff 	.word	0xffffefff
 8005c74:	ffffdfff 	.word	0xffffdfff
 8005c78:	ffefffff 	.word	0xffefffff
 8005c7c:	ff9fffff 	.word	0xff9fffff
 8005c80:	fff7ffff 	.word	0xfff7ffff

08005c84 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005c84:	b580      	push	{r7, lr}
 8005c86:	b086      	sub	sp, #24
 8005c88:	af02      	add	r7, sp, #8
 8005c8a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	2200      	movs	r2, #0
 8005c90:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 8005c92:	f7fd f987 	bl	8002fa4 <HAL_GetTick>
 8005c96:	0003      	movs	r3, r0
 8005c98:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	681b      	ldr	r3, [r3, #0]
 8005c9e:	681b      	ldr	r3, [r3, #0]
 8005ca0:	2208      	movs	r2, #8
 8005ca2:	4013      	ands	r3, r2
 8005ca4:	2b08      	cmp	r3, #8
 8005ca6:	d10d      	bne.n	8005cc4 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005ca8:	68fa      	ldr	r2, [r7, #12]
 8005caa:	2380      	movs	r3, #128	; 0x80
 8005cac:	0399      	lsls	r1, r3, #14
 8005cae:	6878      	ldr	r0, [r7, #4]
 8005cb0:	4b16      	ldr	r3, [pc, #88]	; (8005d0c <UART_CheckIdleState+0x88>)
 8005cb2:	9300      	str	r3, [sp, #0]
 8005cb4:	0013      	movs	r3, r2
 8005cb6:	2200      	movs	r2, #0
 8005cb8:	f000 f82a 	bl	8005d10 <UART_WaitOnFlagUntilTimeout>
 8005cbc:	1e03      	subs	r3, r0, #0
 8005cbe:	d001      	beq.n	8005cc4 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005cc0:	2303      	movs	r3, #3
 8005cc2:	e01f      	b.n	8005d04 <UART_CheckIdleState+0x80>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	681b      	ldr	r3, [r3, #0]
 8005cc8:	681b      	ldr	r3, [r3, #0]
 8005cca:	2204      	movs	r2, #4
 8005ccc:	4013      	ands	r3, r2
 8005cce:	2b04      	cmp	r3, #4
 8005cd0:	d10d      	bne.n	8005cee <UART_CheckIdleState+0x6a>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005cd2:	68fa      	ldr	r2, [r7, #12]
 8005cd4:	2380      	movs	r3, #128	; 0x80
 8005cd6:	03d9      	lsls	r1, r3, #15
 8005cd8:	6878      	ldr	r0, [r7, #4]
 8005cda:	4b0c      	ldr	r3, [pc, #48]	; (8005d0c <UART_CheckIdleState+0x88>)
 8005cdc:	9300      	str	r3, [sp, #0]
 8005cde:	0013      	movs	r3, r2
 8005ce0:	2200      	movs	r2, #0
 8005ce2:	f000 f815 	bl	8005d10 <UART_WaitOnFlagUntilTimeout>
 8005ce6:	1e03      	subs	r3, r0, #0
 8005ce8:	d001      	beq.n	8005cee <UART_CheckIdleState+0x6a>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005cea:	2303      	movs	r3, #3
 8005cec:	e00a      	b.n	8005d04 <UART_CheckIdleState+0x80>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	2220      	movs	r2, #32
 8005cf2:	675a      	str	r2, [r3, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	2220      	movs	r2, #32
 8005cf8:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UNLOCK(huart);
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	2270      	movs	r2, #112	; 0x70
 8005cfe:	2100      	movs	r1, #0
 8005d00:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8005d02:	2300      	movs	r3, #0
}
 8005d04:	0018      	movs	r0, r3
 8005d06:	46bd      	mov	sp, r7
 8005d08:	b004      	add	sp, #16
 8005d0a:	bd80      	pop	{r7, pc}
 8005d0c:	01ffffff 	.word	0x01ffffff

08005d10 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005d10:	b580      	push	{r7, lr}
 8005d12:	b084      	sub	sp, #16
 8005d14:	af00      	add	r7, sp, #0
 8005d16:	60f8      	str	r0, [r7, #12]
 8005d18:	60b9      	str	r1, [r7, #8]
 8005d1a:	603b      	str	r3, [r7, #0]
 8005d1c:	1dfb      	adds	r3, r7, #7
 8005d1e:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005d20:	e05d      	b.n	8005dde <UART_WaitOnFlagUntilTimeout+0xce>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005d22:	69bb      	ldr	r3, [r7, #24]
 8005d24:	3301      	adds	r3, #1
 8005d26:	d05a      	beq.n	8005dde <UART_WaitOnFlagUntilTimeout+0xce>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005d28:	f7fd f93c 	bl	8002fa4 <HAL_GetTick>
 8005d2c:	0002      	movs	r2, r0
 8005d2e:	683b      	ldr	r3, [r7, #0]
 8005d30:	1ad3      	subs	r3, r2, r3
 8005d32:	69ba      	ldr	r2, [r7, #24]
 8005d34:	429a      	cmp	r2, r3
 8005d36:	d302      	bcc.n	8005d3e <UART_WaitOnFlagUntilTimeout+0x2e>
 8005d38:	69bb      	ldr	r3, [r7, #24]
 8005d3a:	2b00      	cmp	r3, #0
 8005d3c:	d11b      	bne.n	8005d76 <UART_WaitOnFlagUntilTimeout+0x66>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005d3e:	68fb      	ldr	r3, [r7, #12]
 8005d40:	681b      	ldr	r3, [r3, #0]
 8005d42:	681a      	ldr	r2, [r3, #0]
 8005d44:	68fb      	ldr	r3, [r7, #12]
 8005d46:	681b      	ldr	r3, [r3, #0]
 8005d48:	492f      	ldr	r1, [pc, #188]	; (8005e08 <UART_WaitOnFlagUntilTimeout+0xf8>)
 8005d4a:	400a      	ands	r2, r1
 8005d4c:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005d4e:	68fb      	ldr	r3, [r7, #12]
 8005d50:	681b      	ldr	r3, [r3, #0]
 8005d52:	689a      	ldr	r2, [r3, #8]
 8005d54:	68fb      	ldr	r3, [r7, #12]
 8005d56:	681b      	ldr	r3, [r3, #0]
 8005d58:	2101      	movs	r1, #1
 8005d5a:	438a      	bics	r2, r1
 8005d5c:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8005d5e:	68fb      	ldr	r3, [r7, #12]
 8005d60:	2220      	movs	r2, #32
 8005d62:	675a      	str	r2, [r3, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 8005d64:	68fb      	ldr	r3, [r7, #12]
 8005d66:	2220      	movs	r2, #32
 8005d68:	679a      	str	r2, [r3, #120]	; 0x78

        __HAL_UNLOCK(huart);
 8005d6a:	68fb      	ldr	r3, [r7, #12]
 8005d6c:	2270      	movs	r2, #112	; 0x70
 8005d6e:	2100      	movs	r1, #0
 8005d70:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8005d72:	2303      	movs	r3, #3
 8005d74:	e043      	b.n	8005dfe <UART_WaitOnFlagUntilTimeout+0xee>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8005d76:	68fb      	ldr	r3, [r7, #12]
 8005d78:	681b      	ldr	r3, [r3, #0]
 8005d7a:	681b      	ldr	r3, [r3, #0]
 8005d7c:	2204      	movs	r2, #4
 8005d7e:	4013      	ands	r3, r2
 8005d80:	d02d      	beq.n	8005dde <UART_WaitOnFlagUntilTimeout+0xce>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005d82:	68fb      	ldr	r3, [r7, #12]
 8005d84:	681b      	ldr	r3, [r3, #0]
 8005d86:	69da      	ldr	r2, [r3, #28]
 8005d88:	2380      	movs	r3, #128	; 0x80
 8005d8a:	011b      	lsls	r3, r3, #4
 8005d8c:	401a      	ands	r2, r3
 8005d8e:	2380      	movs	r3, #128	; 0x80
 8005d90:	011b      	lsls	r3, r3, #4
 8005d92:	429a      	cmp	r2, r3
 8005d94:	d123      	bne.n	8005dde <UART_WaitOnFlagUntilTimeout+0xce>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005d96:	68fb      	ldr	r3, [r7, #12]
 8005d98:	681b      	ldr	r3, [r3, #0]
 8005d9a:	2280      	movs	r2, #128	; 0x80
 8005d9c:	0112      	lsls	r2, r2, #4
 8005d9e:	621a      	str	r2, [r3, #32]
          
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005da0:	68fb      	ldr	r3, [r7, #12]
 8005da2:	681b      	ldr	r3, [r3, #0]
 8005da4:	681a      	ldr	r2, [r3, #0]
 8005da6:	68fb      	ldr	r3, [r7, #12]
 8005da8:	681b      	ldr	r3, [r3, #0]
 8005daa:	4917      	ldr	r1, [pc, #92]	; (8005e08 <UART_WaitOnFlagUntilTimeout+0xf8>)
 8005dac:	400a      	ands	r2, r1
 8005dae:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005db0:	68fb      	ldr	r3, [r7, #12]
 8005db2:	681b      	ldr	r3, [r3, #0]
 8005db4:	689a      	ldr	r2, [r3, #8]
 8005db6:	68fb      	ldr	r3, [r7, #12]
 8005db8:	681b      	ldr	r3, [r3, #0]
 8005dba:	2101      	movs	r1, #1
 8005dbc:	438a      	bics	r2, r1
 8005dbe:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8005dc0:	68fb      	ldr	r3, [r7, #12]
 8005dc2:	2220      	movs	r2, #32
 8005dc4:	675a      	str	r2, [r3, #116]	; 0x74
          huart->RxState = HAL_UART_STATE_READY;
 8005dc6:	68fb      	ldr	r3, [r7, #12]
 8005dc8:	2220      	movs	r2, #32
 8005dca:	679a      	str	r2, [r3, #120]	; 0x78
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005dcc:	68fb      	ldr	r3, [r7, #12]
 8005dce:	2220      	movs	r2, #32
 8005dd0:	67da      	str	r2, [r3, #124]	; 0x7c
          
          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005dd2:	68fb      	ldr	r3, [r7, #12]
 8005dd4:	2270      	movs	r2, #112	; 0x70
 8005dd6:	2100      	movs	r1, #0
 8005dd8:	5499      	strb	r1, [r3, r2]
          
          return HAL_TIMEOUT;
 8005dda:	2303      	movs	r3, #3
 8005ddc:	e00f      	b.n	8005dfe <UART_WaitOnFlagUntilTimeout+0xee>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005dde:	68fb      	ldr	r3, [r7, #12]
 8005de0:	681b      	ldr	r3, [r3, #0]
 8005de2:	69db      	ldr	r3, [r3, #28]
 8005de4:	68ba      	ldr	r2, [r7, #8]
 8005de6:	4013      	ands	r3, r2
 8005de8:	68ba      	ldr	r2, [r7, #8]
 8005dea:	1ad3      	subs	r3, r2, r3
 8005dec:	425a      	negs	r2, r3
 8005dee:	4153      	adcs	r3, r2
 8005df0:	b2db      	uxtb	r3, r3
 8005df2:	001a      	movs	r2, r3
 8005df4:	1dfb      	adds	r3, r7, #7
 8005df6:	781b      	ldrb	r3, [r3, #0]
 8005df8:	429a      	cmp	r2, r3
 8005dfa:	d092      	beq.n	8005d22 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005dfc:	2300      	movs	r3, #0
}
 8005dfe:	0018      	movs	r0, r3
 8005e00:	46bd      	mov	sp, r7
 8005e02:	b004      	add	sp, #16
 8005e04:	bd80      	pop	{r7, pc}
 8005e06:	46c0      	nop			; (mov r8, r8)
 8005e08:	fffffe5f 	.word	0xfffffe5f

08005e0c <__libc_init_array>:
 8005e0c:	b570      	push	{r4, r5, r6, lr}
 8005e0e:	2600      	movs	r6, #0
 8005e10:	4d0c      	ldr	r5, [pc, #48]	; (8005e44 <__libc_init_array+0x38>)
 8005e12:	4c0d      	ldr	r4, [pc, #52]	; (8005e48 <__libc_init_array+0x3c>)
 8005e14:	1b64      	subs	r4, r4, r5
 8005e16:	10a4      	asrs	r4, r4, #2
 8005e18:	42a6      	cmp	r6, r4
 8005e1a:	d109      	bne.n	8005e30 <__libc_init_array+0x24>
 8005e1c:	2600      	movs	r6, #0
 8005e1e:	f000 f82b 	bl	8005e78 <_init>
 8005e22:	4d0a      	ldr	r5, [pc, #40]	; (8005e4c <__libc_init_array+0x40>)
 8005e24:	4c0a      	ldr	r4, [pc, #40]	; (8005e50 <__libc_init_array+0x44>)
 8005e26:	1b64      	subs	r4, r4, r5
 8005e28:	10a4      	asrs	r4, r4, #2
 8005e2a:	42a6      	cmp	r6, r4
 8005e2c:	d105      	bne.n	8005e3a <__libc_init_array+0x2e>
 8005e2e:	bd70      	pop	{r4, r5, r6, pc}
 8005e30:	00b3      	lsls	r3, r6, #2
 8005e32:	58eb      	ldr	r3, [r5, r3]
 8005e34:	4798      	blx	r3
 8005e36:	3601      	adds	r6, #1
 8005e38:	e7ee      	b.n	8005e18 <__libc_init_array+0xc>
 8005e3a:	00b3      	lsls	r3, r6, #2
 8005e3c:	58eb      	ldr	r3, [r5, r3]
 8005e3e:	4798      	blx	r3
 8005e40:	3601      	adds	r6, #1
 8005e42:	e7f2      	b.n	8005e2a <__libc_init_array+0x1e>
 8005e44:	08005f48 	.word	0x08005f48
 8005e48:	08005f48 	.word	0x08005f48
 8005e4c:	08005f48 	.word	0x08005f48
 8005e50:	08005f4c 	.word	0x08005f4c

08005e54 <memcpy>:
 8005e54:	2300      	movs	r3, #0
 8005e56:	b510      	push	{r4, lr}
 8005e58:	429a      	cmp	r2, r3
 8005e5a:	d100      	bne.n	8005e5e <memcpy+0xa>
 8005e5c:	bd10      	pop	{r4, pc}
 8005e5e:	5ccc      	ldrb	r4, [r1, r3]
 8005e60:	54c4      	strb	r4, [r0, r3]
 8005e62:	3301      	adds	r3, #1
 8005e64:	e7f8      	b.n	8005e58 <memcpy+0x4>

08005e66 <memset>:
 8005e66:	0003      	movs	r3, r0
 8005e68:	1812      	adds	r2, r2, r0
 8005e6a:	4293      	cmp	r3, r2
 8005e6c:	d100      	bne.n	8005e70 <memset+0xa>
 8005e6e:	4770      	bx	lr
 8005e70:	7019      	strb	r1, [r3, #0]
 8005e72:	3301      	adds	r3, #1
 8005e74:	e7f9      	b.n	8005e6a <memset+0x4>
	...

08005e78 <_init>:
 8005e78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005e7a:	46c0      	nop			; (mov r8, r8)
 8005e7c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005e7e:	bc08      	pop	{r3}
 8005e80:	469e      	mov	lr, r3
 8005e82:	4770      	bx	lr

08005e84 <_fini>:
 8005e84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005e86:	46c0      	nop			; (mov r8, r8)
 8005e88:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005e8a:	bc08      	pop	{r3}
 8005e8c:	469e      	mov	lr, r3
 8005e8e:	4770      	bx	lr
