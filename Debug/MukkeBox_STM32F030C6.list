
MukkeBox_STM32F030C6.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000077ac  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000748  0800786c  0800786c  0001786c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007fb4  08007fb4  0002001c  2**0
                  CONTENTS
  4 .ARM          00000000  08007fb4  08007fb4  0002001c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08007fb4  08007fb4  0002001c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007fb4  08007fb4  00017fb4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007fb8  08007fb8  00017fb8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000001c  20000000  08007fbc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000006dc  20000020  08007fd8  00020020  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  200006fc  08007fd8  000206fc  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0002001c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000fd91  00000000  00000000  00020044  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 0000258f  00000000  00000000  0002fdd5  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001080  00000000  00000000  00032368  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000f30  00000000  00000000  000333e8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0000e3e0  00000000  00000000  00034318  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000d534  00000000  00000000  000426f8  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0004fc00  00000000  00000000  0004fc2c  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0009f82c  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003e00  00000000  00000000  0009f8a8  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000020 	.word	0x20000020
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08007854 	.word	0x08007854

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000024 	.word	0x20000024
 8000104:	08007854 	.word	0x08007854

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	; 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f8f0 	bl	80003f0 <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			; (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__divsi3>:
 800021c:	4603      	mov	r3, r0
 800021e:	430b      	orrs	r3, r1
 8000220:	d47f      	bmi.n	8000322 <__divsi3+0x106>
 8000222:	2200      	movs	r2, #0
 8000224:	0843      	lsrs	r3, r0, #1
 8000226:	428b      	cmp	r3, r1
 8000228:	d374      	bcc.n	8000314 <__divsi3+0xf8>
 800022a:	0903      	lsrs	r3, r0, #4
 800022c:	428b      	cmp	r3, r1
 800022e:	d35f      	bcc.n	80002f0 <__divsi3+0xd4>
 8000230:	0a03      	lsrs	r3, r0, #8
 8000232:	428b      	cmp	r3, r1
 8000234:	d344      	bcc.n	80002c0 <__divsi3+0xa4>
 8000236:	0b03      	lsrs	r3, r0, #12
 8000238:	428b      	cmp	r3, r1
 800023a:	d328      	bcc.n	800028e <__divsi3+0x72>
 800023c:	0c03      	lsrs	r3, r0, #16
 800023e:	428b      	cmp	r3, r1
 8000240:	d30d      	bcc.n	800025e <__divsi3+0x42>
 8000242:	22ff      	movs	r2, #255	; 0xff
 8000244:	0209      	lsls	r1, r1, #8
 8000246:	ba12      	rev	r2, r2
 8000248:	0c03      	lsrs	r3, r0, #16
 800024a:	428b      	cmp	r3, r1
 800024c:	d302      	bcc.n	8000254 <__divsi3+0x38>
 800024e:	1212      	asrs	r2, r2, #8
 8000250:	0209      	lsls	r1, r1, #8
 8000252:	d065      	beq.n	8000320 <__divsi3+0x104>
 8000254:	0b03      	lsrs	r3, r0, #12
 8000256:	428b      	cmp	r3, r1
 8000258:	d319      	bcc.n	800028e <__divsi3+0x72>
 800025a:	e000      	b.n	800025e <__divsi3+0x42>
 800025c:	0a09      	lsrs	r1, r1, #8
 800025e:	0bc3      	lsrs	r3, r0, #15
 8000260:	428b      	cmp	r3, r1
 8000262:	d301      	bcc.n	8000268 <__divsi3+0x4c>
 8000264:	03cb      	lsls	r3, r1, #15
 8000266:	1ac0      	subs	r0, r0, r3
 8000268:	4152      	adcs	r2, r2
 800026a:	0b83      	lsrs	r3, r0, #14
 800026c:	428b      	cmp	r3, r1
 800026e:	d301      	bcc.n	8000274 <__divsi3+0x58>
 8000270:	038b      	lsls	r3, r1, #14
 8000272:	1ac0      	subs	r0, r0, r3
 8000274:	4152      	adcs	r2, r2
 8000276:	0b43      	lsrs	r3, r0, #13
 8000278:	428b      	cmp	r3, r1
 800027a:	d301      	bcc.n	8000280 <__divsi3+0x64>
 800027c:	034b      	lsls	r3, r1, #13
 800027e:	1ac0      	subs	r0, r0, r3
 8000280:	4152      	adcs	r2, r2
 8000282:	0b03      	lsrs	r3, r0, #12
 8000284:	428b      	cmp	r3, r1
 8000286:	d301      	bcc.n	800028c <__divsi3+0x70>
 8000288:	030b      	lsls	r3, r1, #12
 800028a:	1ac0      	subs	r0, r0, r3
 800028c:	4152      	adcs	r2, r2
 800028e:	0ac3      	lsrs	r3, r0, #11
 8000290:	428b      	cmp	r3, r1
 8000292:	d301      	bcc.n	8000298 <__divsi3+0x7c>
 8000294:	02cb      	lsls	r3, r1, #11
 8000296:	1ac0      	subs	r0, r0, r3
 8000298:	4152      	adcs	r2, r2
 800029a:	0a83      	lsrs	r3, r0, #10
 800029c:	428b      	cmp	r3, r1
 800029e:	d301      	bcc.n	80002a4 <__divsi3+0x88>
 80002a0:	028b      	lsls	r3, r1, #10
 80002a2:	1ac0      	subs	r0, r0, r3
 80002a4:	4152      	adcs	r2, r2
 80002a6:	0a43      	lsrs	r3, r0, #9
 80002a8:	428b      	cmp	r3, r1
 80002aa:	d301      	bcc.n	80002b0 <__divsi3+0x94>
 80002ac:	024b      	lsls	r3, r1, #9
 80002ae:	1ac0      	subs	r0, r0, r3
 80002b0:	4152      	adcs	r2, r2
 80002b2:	0a03      	lsrs	r3, r0, #8
 80002b4:	428b      	cmp	r3, r1
 80002b6:	d301      	bcc.n	80002bc <__divsi3+0xa0>
 80002b8:	020b      	lsls	r3, r1, #8
 80002ba:	1ac0      	subs	r0, r0, r3
 80002bc:	4152      	adcs	r2, r2
 80002be:	d2cd      	bcs.n	800025c <__divsi3+0x40>
 80002c0:	09c3      	lsrs	r3, r0, #7
 80002c2:	428b      	cmp	r3, r1
 80002c4:	d301      	bcc.n	80002ca <__divsi3+0xae>
 80002c6:	01cb      	lsls	r3, r1, #7
 80002c8:	1ac0      	subs	r0, r0, r3
 80002ca:	4152      	adcs	r2, r2
 80002cc:	0983      	lsrs	r3, r0, #6
 80002ce:	428b      	cmp	r3, r1
 80002d0:	d301      	bcc.n	80002d6 <__divsi3+0xba>
 80002d2:	018b      	lsls	r3, r1, #6
 80002d4:	1ac0      	subs	r0, r0, r3
 80002d6:	4152      	adcs	r2, r2
 80002d8:	0943      	lsrs	r3, r0, #5
 80002da:	428b      	cmp	r3, r1
 80002dc:	d301      	bcc.n	80002e2 <__divsi3+0xc6>
 80002de:	014b      	lsls	r3, r1, #5
 80002e0:	1ac0      	subs	r0, r0, r3
 80002e2:	4152      	adcs	r2, r2
 80002e4:	0903      	lsrs	r3, r0, #4
 80002e6:	428b      	cmp	r3, r1
 80002e8:	d301      	bcc.n	80002ee <__divsi3+0xd2>
 80002ea:	010b      	lsls	r3, r1, #4
 80002ec:	1ac0      	subs	r0, r0, r3
 80002ee:	4152      	adcs	r2, r2
 80002f0:	08c3      	lsrs	r3, r0, #3
 80002f2:	428b      	cmp	r3, r1
 80002f4:	d301      	bcc.n	80002fa <__divsi3+0xde>
 80002f6:	00cb      	lsls	r3, r1, #3
 80002f8:	1ac0      	subs	r0, r0, r3
 80002fa:	4152      	adcs	r2, r2
 80002fc:	0883      	lsrs	r3, r0, #2
 80002fe:	428b      	cmp	r3, r1
 8000300:	d301      	bcc.n	8000306 <__divsi3+0xea>
 8000302:	008b      	lsls	r3, r1, #2
 8000304:	1ac0      	subs	r0, r0, r3
 8000306:	4152      	adcs	r2, r2
 8000308:	0843      	lsrs	r3, r0, #1
 800030a:	428b      	cmp	r3, r1
 800030c:	d301      	bcc.n	8000312 <__divsi3+0xf6>
 800030e:	004b      	lsls	r3, r1, #1
 8000310:	1ac0      	subs	r0, r0, r3
 8000312:	4152      	adcs	r2, r2
 8000314:	1a41      	subs	r1, r0, r1
 8000316:	d200      	bcs.n	800031a <__divsi3+0xfe>
 8000318:	4601      	mov	r1, r0
 800031a:	4152      	adcs	r2, r2
 800031c:	4610      	mov	r0, r2
 800031e:	4770      	bx	lr
 8000320:	e05d      	b.n	80003de <__divsi3+0x1c2>
 8000322:	0fca      	lsrs	r2, r1, #31
 8000324:	d000      	beq.n	8000328 <__divsi3+0x10c>
 8000326:	4249      	negs	r1, r1
 8000328:	1003      	asrs	r3, r0, #32
 800032a:	d300      	bcc.n	800032e <__divsi3+0x112>
 800032c:	4240      	negs	r0, r0
 800032e:	4053      	eors	r3, r2
 8000330:	2200      	movs	r2, #0
 8000332:	469c      	mov	ip, r3
 8000334:	0903      	lsrs	r3, r0, #4
 8000336:	428b      	cmp	r3, r1
 8000338:	d32d      	bcc.n	8000396 <__divsi3+0x17a>
 800033a:	0a03      	lsrs	r3, r0, #8
 800033c:	428b      	cmp	r3, r1
 800033e:	d312      	bcc.n	8000366 <__divsi3+0x14a>
 8000340:	22fc      	movs	r2, #252	; 0xfc
 8000342:	0189      	lsls	r1, r1, #6
 8000344:	ba12      	rev	r2, r2
 8000346:	0a03      	lsrs	r3, r0, #8
 8000348:	428b      	cmp	r3, r1
 800034a:	d30c      	bcc.n	8000366 <__divsi3+0x14a>
 800034c:	0189      	lsls	r1, r1, #6
 800034e:	1192      	asrs	r2, r2, #6
 8000350:	428b      	cmp	r3, r1
 8000352:	d308      	bcc.n	8000366 <__divsi3+0x14a>
 8000354:	0189      	lsls	r1, r1, #6
 8000356:	1192      	asrs	r2, r2, #6
 8000358:	428b      	cmp	r3, r1
 800035a:	d304      	bcc.n	8000366 <__divsi3+0x14a>
 800035c:	0189      	lsls	r1, r1, #6
 800035e:	d03a      	beq.n	80003d6 <__divsi3+0x1ba>
 8000360:	1192      	asrs	r2, r2, #6
 8000362:	e000      	b.n	8000366 <__divsi3+0x14a>
 8000364:	0989      	lsrs	r1, r1, #6
 8000366:	09c3      	lsrs	r3, r0, #7
 8000368:	428b      	cmp	r3, r1
 800036a:	d301      	bcc.n	8000370 <__divsi3+0x154>
 800036c:	01cb      	lsls	r3, r1, #7
 800036e:	1ac0      	subs	r0, r0, r3
 8000370:	4152      	adcs	r2, r2
 8000372:	0983      	lsrs	r3, r0, #6
 8000374:	428b      	cmp	r3, r1
 8000376:	d301      	bcc.n	800037c <__divsi3+0x160>
 8000378:	018b      	lsls	r3, r1, #6
 800037a:	1ac0      	subs	r0, r0, r3
 800037c:	4152      	adcs	r2, r2
 800037e:	0943      	lsrs	r3, r0, #5
 8000380:	428b      	cmp	r3, r1
 8000382:	d301      	bcc.n	8000388 <__divsi3+0x16c>
 8000384:	014b      	lsls	r3, r1, #5
 8000386:	1ac0      	subs	r0, r0, r3
 8000388:	4152      	adcs	r2, r2
 800038a:	0903      	lsrs	r3, r0, #4
 800038c:	428b      	cmp	r3, r1
 800038e:	d301      	bcc.n	8000394 <__divsi3+0x178>
 8000390:	010b      	lsls	r3, r1, #4
 8000392:	1ac0      	subs	r0, r0, r3
 8000394:	4152      	adcs	r2, r2
 8000396:	08c3      	lsrs	r3, r0, #3
 8000398:	428b      	cmp	r3, r1
 800039a:	d301      	bcc.n	80003a0 <__divsi3+0x184>
 800039c:	00cb      	lsls	r3, r1, #3
 800039e:	1ac0      	subs	r0, r0, r3
 80003a0:	4152      	adcs	r2, r2
 80003a2:	0883      	lsrs	r3, r0, #2
 80003a4:	428b      	cmp	r3, r1
 80003a6:	d301      	bcc.n	80003ac <__divsi3+0x190>
 80003a8:	008b      	lsls	r3, r1, #2
 80003aa:	1ac0      	subs	r0, r0, r3
 80003ac:	4152      	adcs	r2, r2
 80003ae:	d2d9      	bcs.n	8000364 <__divsi3+0x148>
 80003b0:	0843      	lsrs	r3, r0, #1
 80003b2:	428b      	cmp	r3, r1
 80003b4:	d301      	bcc.n	80003ba <__divsi3+0x19e>
 80003b6:	004b      	lsls	r3, r1, #1
 80003b8:	1ac0      	subs	r0, r0, r3
 80003ba:	4152      	adcs	r2, r2
 80003bc:	1a41      	subs	r1, r0, r1
 80003be:	d200      	bcs.n	80003c2 <__divsi3+0x1a6>
 80003c0:	4601      	mov	r1, r0
 80003c2:	4663      	mov	r3, ip
 80003c4:	4152      	adcs	r2, r2
 80003c6:	105b      	asrs	r3, r3, #1
 80003c8:	4610      	mov	r0, r2
 80003ca:	d301      	bcc.n	80003d0 <__divsi3+0x1b4>
 80003cc:	4240      	negs	r0, r0
 80003ce:	2b00      	cmp	r3, #0
 80003d0:	d500      	bpl.n	80003d4 <__divsi3+0x1b8>
 80003d2:	4249      	negs	r1, r1
 80003d4:	4770      	bx	lr
 80003d6:	4663      	mov	r3, ip
 80003d8:	105b      	asrs	r3, r3, #1
 80003da:	d300      	bcc.n	80003de <__divsi3+0x1c2>
 80003dc:	4240      	negs	r0, r0
 80003de:	b501      	push	{r0, lr}
 80003e0:	2000      	movs	r0, #0
 80003e2:	f000 f805 	bl	80003f0 <__aeabi_idiv0>
 80003e6:	bd02      	pop	{r1, pc}

080003e8 <__aeabi_idivmod>:
 80003e8:	2900      	cmp	r1, #0
 80003ea:	d0f8      	beq.n	80003de <__divsi3+0x1c2>
 80003ec:	e716      	b.n	800021c <__divsi3>
 80003ee:	4770      	bx	lr

080003f0 <__aeabi_idiv0>:
 80003f0:	4770      	bx	lr
 80003f2:	46c0      	nop			; (mov r8, r8)

080003f4 <__aeabi_cdrcmple>:
 80003f4:	4684      	mov	ip, r0
 80003f6:	1c10      	adds	r0, r2, #0
 80003f8:	4662      	mov	r2, ip
 80003fa:	468c      	mov	ip, r1
 80003fc:	1c19      	adds	r1, r3, #0
 80003fe:	4663      	mov	r3, ip
 8000400:	e000      	b.n	8000404 <__aeabi_cdcmpeq>
 8000402:	46c0      	nop			; (mov r8, r8)

08000404 <__aeabi_cdcmpeq>:
 8000404:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8000406:	f000 fef1 	bl	80011ec <__ledf2>
 800040a:	2800      	cmp	r0, #0
 800040c:	d401      	bmi.n	8000412 <__aeabi_cdcmpeq+0xe>
 800040e:	2100      	movs	r1, #0
 8000410:	42c8      	cmn	r0, r1
 8000412:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

08000414 <__aeabi_dcmpeq>:
 8000414:	b510      	push	{r4, lr}
 8000416:	f000 fe49 	bl	80010ac <__eqdf2>
 800041a:	4240      	negs	r0, r0
 800041c:	3001      	adds	r0, #1
 800041e:	bd10      	pop	{r4, pc}

08000420 <__aeabi_dcmplt>:
 8000420:	b510      	push	{r4, lr}
 8000422:	f000 fee3 	bl	80011ec <__ledf2>
 8000426:	2800      	cmp	r0, #0
 8000428:	db01      	blt.n	800042e <__aeabi_dcmplt+0xe>
 800042a:	2000      	movs	r0, #0
 800042c:	bd10      	pop	{r4, pc}
 800042e:	2001      	movs	r0, #1
 8000430:	bd10      	pop	{r4, pc}
 8000432:	46c0      	nop			; (mov r8, r8)

08000434 <__aeabi_dcmple>:
 8000434:	b510      	push	{r4, lr}
 8000436:	f000 fed9 	bl	80011ec <__ledf2>
 800043a:	2800      	cmp	r0, #0
 800043c:	dd01      	ble.n	8000442 <__aeabi_dcmple+0xe>
 800043e:	2000      	movs	r0, #0
 8000440:	bd10      	pop	{r4, pc}
 8000442:	2001      	movs	r0, #1
 8000444:	bd10      	pop	{r4, pc}
 8000446:	46c0      	nop			; (mov r8, r8)

08000448 <__aeabi_dcmpgt>:
 8000448:	b510      	push	{r4, lr}
 800044a:	f000 fe6b 	bl	8001124 <__gedf2>
 800044e:	2800      	cmp	r0, #0
 8000450:	dc01      	bgt.n	8000456 <__aeabi_dcmpgt+0xe>
 8000452:	2000      	movs	r0, #0
 8000454:	bd10      	pop	{r4, pc}
 8000456:	2001      	movs	r0, #1
 8000458:	bd10      	pop	{r4, pc}
 800045a:	46c0      	nop			; (mov r8, r8)

0800045c <__aeabi_dcmpge>:
 800045c:	b510      	push	{r4, lr}
 800045e:	f000 fe61 	bl	8001124 <__gedf2>
 8000462:	2800      	cmp	r0, #0
 8000464:	da01      	bge.n	800046a <__aeabi_dcmpge+0xe>
 8000466:	2000      	movs	r0, #0
 8000468:	bd10      	pop	{r4, pc}
 800046a:	2001      	movs	r0, #1
 800046c:	bd10      	pop	{r4, pc}
 800046e:	46c0      	nop			; (mov r8, r8)

08000470 <__aeabi_dadd>:
 8000470:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000472:	464f      	mov	r7, r9
 8000474:	4646      	mov	r6, r8
 8000476:	46d6      	mov	lr, sl
 8000478:	000c      	movs	r4, r1
 800047a:	0309      	lsls	r1, r1, #12
 800047c:	b5c0      	push	{r6, r7, lr}
 800047e:	0a49      	lsrs	r1, r1, #9
 8000480:	0f47      	lsrs	r7, r0, #29
 8000482:	005e      	lsls	r6, r3, #1
 8000484:	4339      	orrs	r1, r7
 8000486:	031f      	lsls	r7, r3, #12
 8000488:	0fdb      	lsrs	r3, r3, #31
 800048a:	469c      	mov	ip, r3
 800048c:	0065      	lsls	r5, r4, #1
 800048e:	0a7b      	lsrs	r3, r7, #9
 8000490:	0f57      	lsrs	r7, r2, #29
 8000492:	431f      	orrs	r7, r3
 8000494:	0d6d      	lsrs	r5, r5, #21
 8000496:	0fe4      	lsrs	r4, r4, #31
 8000498:	0d76      	lsrs	r6, r6, #21
 800049a:	46a1      	mov	r9, r4
 800049c:	00c0      	lsls	r0, r0, #3
 800049e:	46b8      	mov	r8, r7
 80004a0:	00d2      	lsls	r2, r2, #3
 80004a2:	1bab      	subs	r3, r5, r6
 80004a4:	4564      	cmp	r4, ip
 80004a6:	d07b      	beq.n	80005a0 <__aeabi_dadd+0x130>
 80004a8:	2b00      	cmp	r3, #0
 80004aa:	dd5f      	ble.n	800056c <__aeabi_dadd+0xfc>
 80004ac:	2e00      	cmp	r6, #0
 80004ae:	d000      	beq.n	80004b2 <__aeabi_dadd+0x42>
 80004b0:	e0a4      	b.n	80005fc <__aeabi_dadd+0x18c>
 80004b2:	003e      	movs	r6, r7
 80004b4:	4316      	orrs	r6, r2
 80004b6:	d100      	bne.n	80004ba <__aeabi_dadd+0x4a>
 80004b8:	e112      	b.n	80006e0 <__aeabi_dadd+0x270>
 80004ba:	1e5e      	subs	r6, r3, #1
 80004bc:	2e00      	cmp	r6, #0
 80004be:	d000      	beq.n	80004c2 <__aeabi_dadd+0x52>
 80004c0:	e19e      	b.n	8000800 <__aeabi_dadd+0x390>
 80004c2:	1a87      	subs	r7, r0, r2
 80004c4:	4643      	mov	r3, r8
 80004c6:	42b8      	cmp	r0, r7
 80004c8:	4180      	sbcs	r0, r0
 80004ca:	2501      	movs	r5, #1
 80004cc:	1ac9      	subs	r1, r1, r3
 80004ce:	4240      	negs	r0, r0
 80004d0:	1a09      	subs	r1, r1, r0
 80004d2:	020b      	lsls	r3, r1, #8
 80004d4:	d400      	bmi.n	80004d8 <__aeabi_dadd+0x68>
 80004d6:	e131      	b.n	800073c <__aeabi_dadd+0x2cc>
 80004d8:	0249      	lsls	r1, r1, #9
 80004da:	0a4e      	lsrs	r6, r1, #9
 80004dc:	2e00      	cmp	r6, #0
 80004de:	d100      	bne.n	80004e2 <__aeabi_dadd+0x72>
 80004e0:	e16e      	b.n	80007c0 <__aeabi_dadd+0x350>
 80004e2:	0030      	movs	r0, r6
 80004e4:	f001 fd14 	bl	8001f10 <__clzsi2>
 80004e8:	0003      	movs	r3, r0
 80004ea:	3b08      	subs	r3, #8
 80004ec:	2b1f      	cmp	r3, #31
 80004ee:	dd00      	ble.n	80004f2 <__aeabi_dadd+0x82>
 80004f0:	e161      	b.n	80007b6 <__aeabi_dadd+0x346>
 80004f2:	2220      	movs	r2, #32
 80004f4:	0039      	movs	r1, r7
 80004f6:	1ad2      	subs	r2, r2, r3
 80004f8:	409e      	lsls	r6, r3
 80004fa:	40d1      	lsrs	r1, r2
 80004fc:	409f      	lsls	r7, r3
 80004fe:	430e      	orrs	r6, r1
 8000500:	429d      	cmp	r5, r3
 8000502:	dd00      	ble.n	8000506 <__aeabi_dadd+0x96>
 8000504:	e151      	b.n	80007aa <__aeabi_dadd+0x33a>
 8000506:	1b5d      	subs	r5, r3, r5
 8000508:	1c6b      	adds	r3, r5, #1
 800050a:	2b1f      	cmp	r3, #31
 800050c:	dd00      	ble.n	8000510 <__aeabi_dadd+0xa0>
 800050e:	e17c      	b.n	800080a <__aeabi_dadd+0x39a>
 8000510:	2120      	movs	r1, #32
 8000512:	1ac9      	subs	r1, r1, r3
 8000514:	003d      	movs	r5, r7
 8000516:	0030      	movs	r0, r6
 8000518:	408f      	lsls	r7, r1
 800051a:	4088      	lsls	r0, r1
 800051c:	40dd      	lsrs	r5, r3
 800051e:	1e79      	subs	r1, r7, #1
 8000520:	418f      	sbcs	r7, r1
 8000522:	0031      	movs	r1, r6
 8000524:	2207      	movs	r2, #7
 8000526:	4328      	orrs	r0, r5
 8000528:	40d9      	lsrs	r1, r3
 800052a:	2500      	movs	r5, #0
 800052c:	4307      	orrs	r7, r0
 800052e:	403a      	ands	r2, r7
 8000530:	2a00      	cmp	r2, #0
 8000532:	d009      	beq.n	8000548 <__aeabi_dadd+0xd8>
 8000534:	230f      	movs	r3, #15
 8000536:	403b      	ands	r3, r7
 8000538:	2b04      	cmp	r3, #4
 800053a:	d005      	beq.n	8000548 <__aeabi_dadd+0xd8>
 800053c:	1d3b      	adds	r3, r7, #4
 800053e:	42bb      	cmp	r3, r7
 8000540:	41bf      	sbcs	r7, r7
 8000542:	427f      	negs	r7, r7
 8000544:	19c9      	adds	r1, r1, r7
 8000546:	001f      	movs	r7, r3
 8000548:	020b      	lsls	r3, r1, #8
 800054a:	d400      	bmi.n	800054e <__aeabi_dadd+0xde>
 800054c:	e226      	b.n	800099c <__aeabi_dadd+0x52c>
 800054e:	1c6a      	adds	r2, r5, #1
 8000550:	4bc6      	ldr	r3, [pc, #792]	; (800086c <__aeabi_dadd+0x3fc>)
 8000552:	0555      	lsls	r5, r2, #21
 8000554:	0d6d      	lsrs	r5, r5, #21
 8000556:	429a      	cmp	r2, r3
 8000558:	d100      	bne.n	800055c <__aeabi_dadd+0xec>
 800055a:	e106      	b.n	800076a <__aeabi_dadd+0x2fa>
 800055c:	4ac4      	ldr	r2, [pc, #784]	; (8000870 <__aeabi_dadd+0x400>)
 800055e:	08ff      	lsrs	r7, r7, #3
 8000560:	400a      	ands	r2, r1
 8000562:	0753      	lsls	r3, r2, #29
 8000564:	0252      	lsls	r2, r2, #9
 8000566:	433b      	orrs	r3, r7
 8000568:	0b12      	lsrs	r2, r2, #12
 800056a:	e08e      	b.n	800068a <__aeabi_dadd+0x21a>
 800056c:	2b00      	cmp	r3, #0
 800056e:	d000      	beq.n	8000572 <__aeabi_dadd+0x102>
 8000570:	e0b8      	b.n	80006e4 <__aeabi_dadd+0x274>
 8000572:	1c6b      	adds	r3, r5, #1
 8000574:	055b      	lsls	r3, r3, #21
 8000576:	0d5b      	lsrs	r3, r3, #21
 8000578:	2b01      	cmp	r3, #1
 800057a:	dc00      	bgt.n	800057e <__aeabi_dadd+0x10e>
 800057c:	e130      	b.n	80007e0 <__aeabi_dadd+0x370>
 800057e:	1a87      	subs	r7, r0, r2
 8000580:	4643      	mov	r3, r8
 8000582:	42b8      	cmp	r0, r7
 8000584:	41b6      	sbcs	r6, r6
 8000586:	1acb      	subs	r3, r1, r3
 8000588:	4276      	negs	r6, r6
 800058a:	1b9e      	subs	r6, r3, r6
 800058c:	0233      	lsls	r3, r6, #8
 800058e:	d500      	bpl.n	8000592 <__aeabi_dadd+0x122>
 8000590:	e14c      	b.n	800082c <__aeabi_dadd+0x3bc>
 8000592:	003b      	movs	r3, r7
 8000594:	4333      	orrs	r3, r6
 8000596:	d1a1      	bne.n	80004dc <__aeabi_dadd+0x6c>
 8000598:	2200      	movs	r2, #0
 800059a:	2400      	movs	r4, #0
 800059c:	2500      	movs	r5, #0
 800059e:	e070      	b.n	8000682 <__aeabi_dadd+0x212>
 80005a0:	2b00      	cmp	r3, #0
 80005a2:	dc00      	bgt.n	80005a6 <__aeabi_dadd+0x136>
 80005a4:	e0e5      	b.n	8000772 <__aeabi_dadd+0x302>
 80005a6:	2e00      	cmp	r6, #0
 80005a8:	d100      	bne.n	80005ac <__aeabi_dadd+0x13c>
 80005aa:	e083      	b.n	80006b4 <__aeabi_dadd+0x244>
 80005ac:	4eaf      	ldr	r6, [pc, #700]	; (800086c <__aeabi_dadd+0x3fc>)
 80005ae:	42b5      	cmp	r5, r6
 80005b0:	d060      	beq.n	8000674 <__aeabi_dadd+0x204>
 80005b2:	2680      	movs	r6, #128	; 0x80
 80005b4:	0436      	lsls	r6, r6, #16
 80005b6:	4337      	orrs	r7, r6
 80005b8:	46b8      	mov	r8, r7
 80005ba:	2b38      	cmp	r3, #56	; 0x38
 80005bc:	dc00      	bgt.n	80005c0 <__aeabi_dadd+0x150>
 80005be:	e13e      	b.n	800083e <__aeabi_dadd+0x3ce>
 80005c0:	4643      	mov	r3, r8
 80005c2:	4313      	orrs	r3, r2
 80005c4:	001f      	movs	r7, r3
 80005c6:	1e7a      	subs	r2, r7, #1
 80005c8:	4197      	sbcs	r7, r2
 80005ca:	183f      	adds	r7, r7, r0
 80005cc:	4287      	cmp	r7, r0
 80005ce:	4180      	sbcs	r0, r0
 80005d0:	4240      	negs	r0, r0
 80005d2:	1809      	adds	r1, r1, r0
 80005d4:	020b      	lsls	r3, r1, #8
 80005d6:	d400      	bmi.n	80005da <__aeabi_dadd+0x16a>
 80005d8:	e0b0      	b.n	800073c <__aeabi_dadd+0x2cc>
 80005da:	4ba4      	ldr	r3, [pc, #656]	; (800086c <__aeabi_dadd+0x3fc>)
 80005dc:	3501      	adds	r5, #1
 80005de:	429d      	cmp	r5, r3
 80005e0:	d100      	bne.n	80005e4 <__aeabi_dadd+0x174>
 80005e2:	e0c3      	b.n	800076c <__aeabi_dadd+0x2fc>
 80005e4:	4aa2      	ldr	r2, [pc, #648]	; (8000870 <__aeabi_dadd+0x400>)
 80005e6:	087b      	lsrs	r3, r7, #1
 80005e8:	400a      	ands	r2, r1
 80005ea:	2101      	movs	r1, #1
 80005ec:	400f      	ands	r7, r1
 80005ee:	431f      	orrs	r7, r3
 80005f0:	0851      	lsrs	r1, r2, #1
 80005f2:	07d3      	lsls	r3, r2, #31
 80005f4:	2207      	movs	r2, #7
 80005f6:	431f      	orrs	r7, r3
 80005f8:	403a      	ands	r2, r7
 80005fa:	e799      	b.n	8000530 <__aeabi_dadd+0xc0>
 80005fc:	4e9b      	ldr	r6, [pc, #620]	; (800086c <__aeabi_dadd+0x3fc>)
 80005fe:	42b5      	cmp	r5, r6
 8000600:	d038      	beq.n	8000674 <__aeabi_dadd+0x204>
 8000602:	2680      	movs	r6, #128	; 0x80
 8000604:	0436      	lsls	r6, r6, #16
 8000606:	4337      	orrs	r7, r6
 8000608:	46b8      	mov	r8, r7
 800060a:	2b38      	cmp	r3, #56	; 0x38
 800060c:	dd00      	ble.n	8000610 <__aeabi_dadd+0x1a0>
 800060e:	e0dc      	b.n	80007ca <__aeabi_dadd+0x35a>
 8000610:	2b1f      	cmp	r3, #31
 8000612:	dc00      	bgt.n	8000616 <__aeabi_dadd+0x1a6>
 8000614:	e130      	b.n	8000878 <__aeabi_dadd+0x408>
 8000616:	001e      	movs	r6, r3
 8000618:	4647      	mov	r7, r8
 800061a:	3e20      	subs	r6, #32
 800061c:	40f7      	lsrs	r7, r6
 800061e:	46bc      	mov	ip, r7
 8000620:	2b20      	cmp	r3, #32
 8000622:	d004      	beq.n	800062e <__aeabi_dadd+0x1be>
 8000624:	2640      	movs	r6, #64	; 0x40
 8000626:	1af3      	subs	r3, r6, r3
 8000628:	4646      	mov	r6, r8
 800062a:	409e      	lsls	r6, r3
 800062c:	4332      	orrs	r2, r6
 800062e:	0017      	movs	r7, r2
 8000630:	4663      	mov	r3, ip
 8000632:	1e7a      	subs	r2, r7, #1
 8000634:	4197      	sbcs	r7, r2
 8000636:	431f      	orrs	r7, r3
 8000638:	e0cc      	b.n	80007d4 <__aeabi_dadd+0x364>
 800063a:	2b00      	cmp	r3, #0
 800063c:	d100      	bne.n	8000640 <__aeabi_dadd+0x1d0>
 800063e:	e204      	b.n	8000a4a <__aeabi_dadd+0x5da>
 8000640:	4643      	mov	r3, r8
 8000642:	4313      	orrs	r3, r2
 8000644:	d100      	bne.n	8000648 <__aeabi_dadd+0x1d8>
 8000646:	e159      	b.n	80008fc <__aeabi_dadd+0x48c>
 8000648:	074b      	lsls	r3, r1, #29
 800064a:	08c0      	lsrs	r0, r0, #3
 800064c:	4318      	orrs	r0, r3
 800064e:	2380      	movs	r3, #128	; 0x80
 8000650:	08c9      	lsrs	r1, r1, #3
 8000652:	031b      	lsls	r3, r3, #12
 8000654:	4219      	tst	r1, r3
 8000656:	d008      	beq.n	800066a <__aeabi_dadd+0x1fa>
 8000658:	4645      	mov	r5, r8
 800065a:	08ed      	lsrs	r5, r5, #3
 800065c:	421d      	tst	r5, r3
 800065e:	d104      	bne.n	800066a <__aeabi_dadd+0x1fa>
 8000660:	4643      	mov	r3, r8
 8000662:	08d0      	lsrs	r0, r2, #3
 8000664:	0759      	lsls	r1, r3, #29
 8000666:	4308      	orrs	r0, r1
 8000668:	0029      	movs	r1, r5
 800066a:	0f42      	lsrs	r2, r0, #29
 800066c:	00c9      	lsls	r1, r1, #3
 800066e:	4d7f      	ldr	r5, [pc, #508]	; (800086c <__aeabi_dadd+0x3fc>)
 8000670:	4311      	orrs	r1, r2
 8000672:	00c0      	lsls	r0, r0, #3
 8000674:	074b      	lsls	r3, r1, #29
 8000676:	08ca      	lsrs	r2, r1, #3
 8000678:	497c      	ldr	r1, [pc, #496]	; (800086c <__aeabi_dadd+0x3fc>)
 800067a:	08c0      	lsrs	r0, r0, #3
 800067c:	4303      	orrs	r3, r0
 800067e:	428d      	cmp	r5, r1
 8000680:	d068      	beq.n	8000754 <__aeabi_dadd+0x2e4>
 8000682:	0312      	lsls	r2, r2, #12
 8000684:	056d      	lsls	r5, r5, #21
 8000686:	0b12      	lsrs	r2, r2, #12
 8000688:	0d6d      	lsrs	r5, r5, #21
 800068a:	2100      	movs	r1, #0
 800068c:	0312      	lsls	r2, r2, #12
 800068e:	0018      	movs	r0, r3
 8000690:	0b13      	lsrs	r3, r2, #12
 8000692:	0d0a      	lsrs	r2, r1, #20
 8000694:	0512      	lsls	r2, r2, #20
 8000696:	431a      	orrs	r2, r3
 8000698:	4b76      	ldr	r3, [pc, #472]	; (8000874 <__aeabi_dadd+0x404>)
 800069a:	052d      	lsls	r5, r5, #20
 800069c:	4013      	ands	r3, r2
 800069e:	432b      	orrs	r3, r5
 80006a0:	005b      	lsls	r3, r3, #1
 80006a2:	07e4      	lsls	r4, r4, #31
 80006a4:	085b      	lsrs	r3, r3, #1
 80006a6:	4323      	orrs	r3, r4
 80006a8:	0019      	movs	r1, r3
 80006aa:	bc1c      	pop	{r2, r3, r4}
 80006ac:	4690      	mov	r8, r2
 80006ae:	4699      	mov	r9, r3
 80006b0:	46a2      	mov	sl, r4
 80006b2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80006b4:	003e      	movs	r6, r7
 80006b6:	4316      	orrs	r6, r2
 80006b8:	d012      	beq.n	80006e0 <__aeabi_dadd+0x270>
 80006ba:	1e5e      	subs	r6, r3, #1
 80006bc:	2e00      	cmp	r6, #0
 80006be:	d000      	beq.n	80006c2 <__aeabi_dadd+0x252>
 80006c0:	e100      	b.n	80008c4 <__aeabi_dadd+0x454>
 80006c2:	1887      	adds	r7, r0, r2
 80006c4:	4287      	cmp	r7, r0
 80006c6:	4180      	sbcs	r0, r0
 80006c8:	4441      	add	r1, r8
 80006ca:	4240      	negs	r0, r0
 80006cc:	1809      	adds	r1, r1, r0
 80006ce:	2501      	movs	r5, #1
 80006d0:	020b      	lsls	r3, r1, #8
 80006d2:	d533      	bpl.n	800073c <__aeabi_dadd+0x2cc>
 80006d4:	2502      	movs	r5, #2
 80006d6:	e785      	b.n	80005e4 <__aeabi_dadd+0x174>
 80006d8:	4664      	mov	r4, ip
 80006da:	0033      	movs	r3, r6
 80006dc:	4641      	mov	r1, r8
 80006de:	0010      	movs	r0, r2
 80006e0:	001d      	movs	r5, r3
 80006e2:	e7c7      	b.n	8000674 <__aeabi_dadd+0x204>
 80006e4:	2d00      	cmp	r5, #0
 80006e6:	d000      	beq.n	80006ea <__aeabi_dadd+0x27a>
 80006e8:	e0da      	b.n	80008a0 <__aeabi_dadd+0x430>
 80006ea:	000c      	movs	r4, r1
 80006ec:	4304      	orrs	r4, r0
 80006ee:	d0f3      	beq.n	80006d8 <__aeabi_dadd+0x268>
 80006f0:	1c5c      	adds	r4, r3, #1
 80006f2:	d100      	bne.n	80006f6 <__aeabi_dadd+0x286>
 80006f4:	e19f      	b.n	8000a36 <__aeabi_dadd+0x5c6>
 80006f6:	4c5d      	ldr	r4, [pc, #372]	; (800086c <__aeabi_dadd+0x3fc>)
 80006f8:	42a6      	cmp	r6, r4
 80006fa:	d100      	bne.n	80006fe <__aeabi_dadd+0x28e>
 80006fc:	e12f      	b.n	800095e <__aeabi_dadd+0x4ee>
 80006fe:	43db      	mvns	r3, r3
 8000700:	2b38      	cmp	r3, #56	; 0x38
 8000702:	dd00      	ble.n	8000706 <__aeabi_dadd+0x296>
 8000704:	e166      	b.n	80009d4 <__aeabi_dadd+0x564>
 8000706:	2b1f      	cmp	r3, #31
 8000708:	dd00      	ble.n	800070c <__aeabi_dadd+0x29c>
 800070a:	e183      	b.n	8000a14 <__aeabi_dadd+0x5a4>
 800070c:	2420      	movs	r4, #32
 800070e:	0005      	movs	r5, r0
 8000710:	1ae4      	subs	r4, r4, r3
 8000712:	000f      	movs	r7, r1
 8000714:	40dd      	lsrs	r5, r3
 8000716:	40d9      	lsrs	r1, r3
 8000718:	40a0      	lsls	r0, r4
 800071a:	4643      	mov	r3, r8
 800071c:	40a7      	lsls	r7, r4
 800071e:	1a5b      	subs	r3, r3, r1
 8000720:	1e44      	subs	r4, r0, #1
 8000722:	41a0      	sbcs	r0, r4
 8000724:	4698      	mov	r8, r3
 8000726:	432f      	orrs	r7, r5
 8000728:	4338      	orrs	r0, r7
 800072a:	1a17      	subs	r7, r2, r0
 800072c:	42ba      	cmp	r2, r7
 800072e:	4192      	sbcs	r2, r2
 8000730:	4643      	mov	r3, r8
 8000732:	4252      	negs	r2, r2
 8000734:	1a99      	subs	r1, r3, r2
 8000736:	4664      	mov	r4, ip
 8000738:	0035      	movs	r5, r6
 800073a:	e6ca      	b.n	80004d2 <__aeabi_dadd+0x62>
 800073c:	2207      	movs	r2, #7
 800073e:	403a      	ands	r2, r7
 8000740:	2a00      	cmp	r2, #0
 8000742:	d000      	beq.n	8000746 <__aeabi_dadd+0x2d6>
 8000744:	e6f6      	b.n	8000534 <__aeabi_dadd+0xc4>
 8000746:	074b      	lsls	r3, r1, #29
 8000748:	08ca      	lsrs	r2, r1, #3
 800074a:	4948      	ldr	r1, [pc, #288]	; (800086c <__aeabi_dadd+0x3fc>)
 800074c:	08ff      	lsrs	r7, r7, #3
 800074e:	433b      	orrs	r3, r7
 8000750:	428d      	cmp	r5, r1
 8000752:	d196      	bne.n	8000682 <__aeabi_dadd+0x212>
 8000754:	0019      	movs	r1, r3
 8000756:	4311      	orrs	r1, r2
 8000758:	d100      	bne.n	800075c <__aeabi_dadd+0x2ec>
 800075a:	e19e      	b.n	8000a9a <__aeabi_dadd+0x62a>
 800075c:	2180      	movs	r1, #128	; 0x80
 800075e:	0309      	lsls	r1, r1, #12
 8000760:	430a      	orrs	r2, r1
 8000762:	0312      	lsls	r2, r2, #12
 8000764:	0b12      	lsrs	r2, r2, #12
 8000766:	4d41      	ldr	r5, [pc, #260]	; (800086c <__aeabi_dadd+0x3fc>)
 8000768:	e78f      	b.n	800068a <__aeabi_dadd+0x21a>
 800076a:	0015      	movs	r5, r2
 800076c:	2200      	movs	r2, #0
 800076e:	2300      	movs	r3, #0
 8000770:	e78b      	b.n	800068a <__aeabi_dadd+0x21a>
 8000772:	2b00      	cmp	r3, #0
 8000774:	d000      	beq.n	8000778 <__aeabi_dadd+0x308>
 8000776:	e0c7      	b.n	8000908 <__aeabi_dadd+0x498>
 8000778:	1c6b      	adds	r3, r5, #1
 800077a:	055f      	lsls	r7, r3, #21
 800077c:	0d7f      	lsrs	r7, r7, #21
 800077e:	2f01      	cmp	r7, #1
 8000780:	dc00      	bgt.n	8000784 <__aeabi_dadd+0x314>
 8000782:	e0f1      	b.n	8000968 <__aeabi_dadd+0x4f8>
 8000784:	4d39      	ldr	r5, [pc, #228]	; (800086c <__aeabi_dadd+0x3fc>)
 8000786:	42ab      	cmp	r3, r5
 8000788:	d100      	bne.n	800078c <__aeabi_dadd+0x31c>
 800078a:	e0b9      	b.n	8000900 <__aeabi_dadd+0x490>
 800078c:	1885      	adds	r5, r0, r2
 800078e:	000a      	movs	r2, r1
 8000790:	4285      	cmp	r5, r0
 8000792:	4189      	sbcs	r1, r1
 8000794:	4442      	add	r2, r8
 8000796:	4249      	negs	r1, r1
 8000798:	1851      	adds	r1, r2, r1
 800079a:	2207      	movs	r2, #7
 800079c:	07cf      	lsls	r7, r1, #31
 800079e:	086d      	lsrs	r5, r5, #1
 80007a0:	432f      	orrs	r7, r5
 80007a2:	0849      	lsrs	r1, r1, #1
 80007a4:	403a      	ands	r2, r7
 80007a6:	001d      	movs	r5, r3
 80007a8:	e6c2      	b.n	8000530 <__aeabi_dadd+0xc0>
 80007aa:	2207      	movs	r2, #7
 80007ac:	4930      	ldr	r1, [pc, #192]	; (8000870 <__aeabi_dadd+0x400>)
 80007ae:	1aed      	subs	r5, r5, r3
 80007b0:	4031      	ands	r1, r6
 80007b2:	403a      	ands	r2, r7
 80007b4:	e6bc      	b.n	8000530 <__aeabi_dadd+0xc0>
 80007b6:	003e      	movs	r6, r7
 80007b8:	3828      	subs	r0, #40	; 0x28
 80007ba:	4086      	lsls	r6, r0
 80007bc:	2700      	movs	r7, #0
 80007be:	e69f      	b.n	8000500 <__aeabi_dadd+0x90>
 80007c0:	0038      	movs	r0, r7
 80007c2:	f001 fba5 	bl	8001f10 <__clzsi2>
 80007c6:	3020      	adds	r0, #32
 80007c8:	e68e      	b.n	80004e8 <__aeabi_dadd+0x78>
 80007ca:	4643      	mov	r3, r8
 80007cc:	4313      	orrs	r3, r2
 80007ce:	001f      	movs	r7, r3
 80007d0:	1e7a      	subs	r2, r7, #1
 80007d2:	4197      	sbcs	r7, r2
 80007d4:	1bc7      	subs	r7, r0, r7
 80007d6:	42b8      	cmp	r0, r7
 80007d8:	4180      	sbcs	r0, r0
 80007da:	4240      	negs	r0, r0
 80007dc:	1a09      	subs	r1, r1, r0
 80007de:	e678      	b.n	80004d2 <__aeabi_dadd+0x62>
 80007e0:	000e      	movs	r6, r1
 80007e2:	003b      	movs	r3, r7
 80007e4:	4306      	orrs	r6, r0
 80007e6:	4313      	orrs	r3, r2
 80007e8:	2d00      	cmp	r5, #0
 80007ea:	d161      	bne.n	80008b0 <__aeabi_dadd+0x440>
 80007ec:	2e00      	cmp	r6, #0
 80007ee:	d000      	beq.n	80007f2 <__aeabi_dadd+0x382>
 80007f0:	e0f4      	b.n	80009dc <__aeabi_dadd+0x56c>
 80007f2:	2b00      	cmp	r3, #0
 80007f4:	d100      	bne.n	80007f8 <__aeabi_dadd+0x388>
 80007f6:	e11b      	b.n	8000a30 <__aeabi_dadd+0x5c0>
 80007f8:	4664      	mov	r4, ip
 80007fa:	0039      	movs	r1, r7
 80007fc:	0010      	movs	r0, r2
 80007fe:	e739      	b.n	8000674 <__aeabi_dadd+0x204>
 8000800:	4f1a      	ldr	r7, [pc, #104]	; (800086c <__aeabi_dadd+0x3fc>)
 8000802:	42bb      	cmp	r3, r7
 8000804:	d07a      	beq.n	80008fc <__aeabi_dadd+0x48c>
 8000806:	0033      	movs	r3, r6
 8000808:	e6ff      	b.n	800060a <__aeabi_dadd+0x19a>
 800080a:	0030      	movs	r0, r6
 800080c:	3d1f      	subs	r5, #31
 800080e:	40e8      	lsrs	r0, r5
 8000810:	2b20      	cmp	r3, #32
 8000812:	d003      	beq.n	800081c <__aeabi_dadd+0x3ac>
 8000814:	2140      	movs	r1, #64	; 0x40
 8000816:	1acb      	subs	r3, r1, r3
 8000818:	409e      	lsls	r6, r3
 800081a:	4337      	orrs	r7, r6
 800081c:	1e7b      	subs	r3, r7, #1
 800081e:	419f      	sbcs	r7, r3
 8000820:	2207      	movs	r2, #7
 8000822:	4307      	orrs	r7, r0
 8000824:	403a      	ands	r2, r7
 8000826:	2100      	movs	r1, #0
 8000828:	2500      	movs	r5, #0
 800082a:	e789      	b.n	8000740 <__aeabi_dadd+0x2d0>
 800082c:	1a17      	subs	r7, r2, r0
 800082e:	4643      	mov	r3, r8
 8000830:	42ba      	cmp	r2, r7
 8000832:	41b6      	sbcs	r6, r6
 8000834:	1a59      	subs	r1, r3, r1
 8000836:	4276      	negs	r6, r6
 8000838:	1b8e      	subs	r6, r1, r6
 800083a:	4664      	mov	r4, ip
 800083c:	e64e      	b.n	80004dc <__aeabi_dadd+0x6c>
 800083e:	2b1f      	cmp	r3, #31
 8000840:	dd00      	ble.n	8000844 <__aeabi_dadd+0x3d4>
 8000842:	e0ad      	b.n	80009a0 <__aeabi_dadd+0x530>
 8000844:	2620      	movs	r6, #32
 8000846:	4647      	mov	r7, r8
 8000848:	1af6      	subs	r6, r6, r3
 800084a:	40b7      	lsls	r7, r6
 800084c:	46b9      	mov	r9, r7
 800084e:	0017      	movs	r7, r2
 8000850:	46b2      	mov	sl, r6
 8000852:	40df      	lsrs	r7, r3
 8000854:	464e      	mov	r6, r9
 8000856:	433e      	orrs	r6, r7
 8000858:	0037      	movs	r7, r6
 800085a:	4656      	mov	r6, sl
 800085c:	40b2      	lsls	r2, r6
 800085e:	1e56      	subs	r6, r2, #1
 8000860:	41b2      	sbcs	r2, r6
 8000862:	4317      	orrs	r7, r2
 8000864:	4642      	mov	r2, r8
 8000866:	40da      	lsrs	r2, r3
 8000868:	1889      	adds	r1, r1, r2
 800086a:	e6ae      	b.n	80005ca <__aeabi_dadd+0x15a>
 800086c:	000007ff 	.word	0x000007ff
 8000870:	ff7fffff 	.word	0xff7fffff
 8000874:	800fffff 	.word	0x800fffff
 8000878:	2620      	movs	r6, #32
 800087a:	4647      	mov	r7, r8
 800087c:	1af6      	subs	r6, r6, r3
 800087e:	40b7      	lsls	r7, r6
 8000880:	46b9      	mov	r9, r7
 8000882:	0017      	movs	r7, r2
 8000884:	46b2      	mov	sl, r6
 8000886:	40df      	lsrs	r7, r3
 8000888:	464e      	mov	r6, r9
 800088a:	433e      	orrs	r6, r7
 800088c:	0037      	movs	r7, r6
 800088e:	4656      	mov	r6, sl
 8000890:	40b2      	lsls	r2, r6
 8000892:	1e56      	subs	r6, r2, #1
 8000894:	41b2      	sbcs	r2, r6
 8000896:	4317      	orrs	r7, r2
 8000898:	4642      	mov	r2, r8
 800089a:	40da      	lsrs	r2, r3
 800089c:	1a89      	subs	r1, r1, r2
 800089e:	e799      	b.n	80007d4 <__aeabi_dadd+0x364>
 80008a0:	4c7f      	ldr	r4, [pc, #508]	; (8000aa0 <__aeabi_dadd+0x630>)
 80008a2:	42a6      	cmp	r6, r4
 80008a4:	d05b      	beq.n	800095e <__aeabi_dadd+0x4ee>
 80008a6:	2480      	movs	r4, #128	; 0x80
 80008a8:	0424      	lsls	r4, r4, #16
 80008aa:	425b      	negs	r3, r3
 80008ac:	4321      	orrs	r1, r4
 80008ae:	e727      	b.n	8000700 <__aeabi_dadd+0x290>
 80008b0:	2e00      	cmp	r6, #0
 80008b2:	d10c      	bne.n	80008ce <__aeabi_dadd+0x45e>
 80008b4:	2b00      	cmp	r3, #0
 80008b6:	d100      	bne.n	80008ba <__aeabi_dadd+0x44a>
 80008b8:	e0cb      	b.n	8000a52 <__aeabi_dadd+0x5e2>
 80008ba:	4664      	mov	r4, ip
 80008bc:	0039      	movs	r1, r7
 80008be:	0010      	movs	r0, r2
 80008c0:	4d77      	ldr	r5, [pc, #476]	; (8000aa0 <__aeabi_dadd+0x630>)
 80008c2:	e6d7      	b.n	8000674 <__aeabi_dadd+0x204>
 80008c4:	4f76      	ldr	r7, [pc, #472]	; (8000aa0 <__aeabi_dadd+0x630>)
 80008c6:	42bb      	cmp	r3, r7
 80008c8:	d018      	beq.n	80008fc <__aeabi_dadd+0x48c>
 80008ca:	0033      	movs	r3, r6
 80008cc:	e675      	b.n	80005ba <__aeabi_dadd+0x14a>
 80008ce:	2b00      	cmp	r3, #0
 80008d0:	d014      	beq.n	80008fc <__aeabi_dadd+0x48c>
 80008d2:	074b      	lsls	r3, r1, #29
 80008d4:	08c0      	lsrs	r0, r0, #3
 80008d6:	4318      	orrs	r0, r3
 80008d8:	2380      	movs	r3, #128	; 0x80
 80008da:	08c9      	lsrs	r1, r1, #3
 80008dc:	031b      	lsls	r3, r3, #12
 80008de:	4219      	tst	r1, r3
 80008e0:	d007      	beq.n	80008f2 <__aeabi_dadd+0x482>
 80008e2:	08fc      	lsrs	r4, r7, #3
 80008e4:	421c      	tst	r4, r3
 80008e6:	d104      	bne.n	80008f2 <__aeabi_dadd+0x482>
 80008e8:	0779      	lsls	r1, r7, #29
 80008ea:	08d0      	lsrs	r0, r2, #3
 80008ec:	4308      	orrs	r0, r1
 80008ee:	46e1      	mov	r9, ip
 80008f0:	0021      	movs	r1, r4
 80008f2:	464c      	mov	r4, r9
 80008f4:	0f42      	lsrs	r2, r0, #29
 80008f6:	00c9      	lsls	r1, r1, #3
 80008f8:	4311      	orrs	r1, r2
 80008fa:	00c0      	lsls	r0, r0, #3
 80008fc:	4d68      	ldr	r5, [pc, #416]	; (8000aa0 <__aeabi_dadd+0x630>)
 80008fe:	e6b9      	b.n	8000674 <__aeabi_dadd+0x204>
 8000900:	001d      	movs	r5, r3
 8000902:	2200      	movs	r2, #0
 8000904:	2300      	movs	r3, #0
 8000906:	e6c0      	b.n	800068a <__aeabi_dadd+0x21a>
 8000908:	2d00      	cmp	r5, #0
 800090a:	d15b      	bne.n	80009c4 <__aeabi_dadd+0x554>
 800090c:	000d      	movs	r5, r1
 800090e:	4305      	orrs	r5, r0
 8000910:	d100      	bne.n	8000914 <__aeabi_dadd+0x4a4>
 8000912:	e6e2      	b.n	80006da <__aeabi_dadd+0x26a>
 8000914:	1c5d      	adds	r5, r3, #1
 8000916:	d100      	bne.n	800091a <__aeabi_dadd+0x4aa>
 8000918:	e0b0      	b.n	8000a7c <__aeabi_dadd+0x60c>
 800091a:	4d61      	ldr	r5, [pc, #388]	; (8000aa0 <__aeabi_dadd+0x630>)
 800091c:	42ae      	cmp	r6, r5
 800091e:	d01f      	beq.n	8000960 <__aeabi_dadd+0x4f0>
 8000920:	43db      	mvns	r3, r3
 8000922:	2b38      	cmp	r3, #56	; 0x38
 8000924:	dc71      	bgt.n	8000a0a <__aeabi_dadd+0x59a>
 8000926:	2b1f      	cmp	r3, #31
 8000928:	dd00      	ble.n	800092c <__aeabi_dadd+0x4bc>
 800092a:	e096      	b.n	8000a5a <__aeabi_dadd+0x5ea>
 800092c:	2520      	movs	r5, #32
 800092e:	000f      	movs	r7, r1
 8000930:	1aed      	subs	r5, r5, r3
 8000932:	40af      	lsls	r7, r5
 8000934:	46b9      	mov	r9, r7
 8000936:	0007      	movs	r7, r0
 8000938:	46aa      	mov	sl, r5
 800093a:	40df      	lsrs	r7, r3
 800093c:	464d      	mov	r5, r9
 800093e:	433d      	orrs	r5, r7
 8000940:	002f      	movs	r7, r5
 8000942:	4655      	mov	r5, sl
 8000944:	40a8      	lsls	r0, r5
 8000946:	40d9      	lsrs	r1, r3
 8000948:	1e45      	subs	r5, r0, #1
 800094a:	41a8      	sbcs	r0, r5
 800094c:	4488      	add	r8, r1
 800094e:	4307      	orrs	r7, r0
 8000950:	18bf      	adds	r7, r7, r2
 8000952:	4297      	cmp	r7, r2
 8000954:	4192      	sbcs	r2, r2
 8000956:	4251      	negs	r1, r2
 8000958:	4441      	add	r1, r8
 800095a:	0035      	movs	r5, r6
 800095c:	e63a      	b.n	80005d4 <__aeabi_dadd+0x164>
 800095e:	4664      	mov	r4, ip
 8000960:	0035      	movs	r5, r6
 8000962:	4641      	mov	r1, r8
 8000964:	0010      	movs	r0, r2
 8000966:	e685      	b.n	8000674 <__aeabi_dadd+0x204>
 8000968:	000b      	movs	r3, r1
 800096a:	4303      	orrs	r3, r0
 800096c:	2d00      	cmp	r5, #0
 800096e:	d000      	beq.n	8000972 <__aeabi_dadd+0x502>
 8000970:	e663      	b.n	800063a <__aeabi_dadd+0x1ca>
 8000972:	2b00      	cmp	r3, #0
 8000974:	d0f5      	beq.n	8000962 <__aeabi_dadd+0x4f2>
 8000976:	4643      	mov	r3, r8
 8000978:	4313      	orrs	r3, r2
 800097a:	d100      	bne.n	800097e <__aeabi_dadd+0x50e>
 800097c:	e67a      	b.n	8000674 <__aeabi_dadd+0x204>
 800097e:	1887      	adds	r7, r0, r2
 8000980:	4287      	cmp	r7, r0
 8000982:	4180      	sbcs	r0, r0
 8000984:	2207      	movs	r2, #7
 8000986:	4441      	add	r1, r8
 8000988:	4240      	negs	r0, r0
 800098a:	1809      	adds	r1, r1, r0
 800098c:	403a      	ands	r2, r7
 800098e:	020b      	lsls	r3, r1, #8
 8000990:	d400      	bmi.n	8000994 <__aeabi_dadd+0x524>
 8000992:	e6d5      	b.n	8000740 <__aeabi_dadd+0x2d0>
 8000994:	4b43      	ldr	r3, [pc, #268]	; (8000aa4 <__aeabi_dadd+0x634>)
 8000996:	3501      	adds	r5, #1
 8000998:	4019      	ands	r1, r3
 800099a:	e5c9      	b.n	8000530 <__aeabi_dadd+0xc0>
 800099c:	0038      	movs	r0, r7
 800099e:	e669      	b.n	8000674 <__aeabi_dadd+0x204>
 80009a0:	001e      	movs	r6, r3
 80009a2:	4647      	mov	r7, r8
 80009a4:	3e20      	subs	r6, #32
 80009a6:	40f7      	lsrs	r7, r6
 80009a8:	46bc      	mov	ip, r7
 80009aa:	2b20      	cmp	r3, #32
 80009ac:	d004      	beq.n	80009b8 <__aeabi_dadd+0x548>
 80009ae:	2640      	movs	r6, #64	; 0x40
 80009b0:	1af3      	subs	r3, r6, r3
 80009b2:	4646      	mov	r6, r8
 80009b4:	409e      	lsls	r6, r3
 80009b6:	4332      	orrs	r2, r6
 80009b8:	0017      	movs	r7, r2
 80009ba:	4663      	mov	r3, ip
 80009bc:	1e7a      	subs	r2, r7, #1
 80009be:	4197      	sbcs	r7, r2
 80009c0:	431f      	orrs	r7, r3
 80009c2:	e602      	b.n	80005ca <__aeabi_dadd+0x15a>
 80009c4:	4d36      	ldr	r5, [pc, #216]	; (8000aa0 <__aeabi_dadd+0x630>)
 80009c6:	42ae      	cmp	r6, r5
 80009c8:	d0ca      	beq.n	8000960 <__aeabi_dadd+0x4f0>
 80009ca:	2580      	movs	r5, #128	; 0x80
 80009cc:	042d      	lsls	r5, r5, #16
 80009ce:	425b      	negs	r3, r3
 80009d0:	4329      	orrs	r1, r5
 80009d2:	e7a6      	b.n	8000922 <__aeabi_dadd+0x4b2>
 80009d4:	4308      	orrs	r0, r1
 80009d6:	1e41      	subs	r1, r0, #1
 80009d8:	4188      	sbcs	r0, r1
 80009da:	e6a6      	b.n	800072a <__aeabi_dadd+0x2ba>
 80009dc:	2b00      	cmp	r3, #0
 80009de:	d100      	bne.n	80009e2 <__aeabi_dadd+0x572>
 80009e0:	e648      	b.n	8000674 <__aeabi_dadd+0x204>
 80009e2:	1a87      	subs	r7, r0, r2
 80009e4:	4643      	mov	r3, r8
 80009e6:	42b8      	cmp	r0, r7
 80009e8:	41b6      	sbcs	r6, r6
 80009ea:	1acb      	subs	r3, r1, r3
 80009ec:	4276      	negs	r6, r6
 80009ee:	1b9e      	subs	r6, r3, r6
 80009f0:	0233      	lsls	r3, r6, #8
 80009f2:	d54b      	bpl.n	8000a8c <__aeabi_dadd+0x61c>
 80009f4:	1a17      	subs	r7, r2, r0
 80009f6:	4643      	mov	r3, r8
 80009f8:	42ba      	cmp	r2, r7
 80009fa:	4192      	sbcs	r2, r2
 80009fc:	1a59      	subs	r1, r3, r1
 80009fe:	4252      	negs	r2, r2
 8000a00:	1a89      	subs	r1, r1, r2
 8000a02:	2207      	movs	r2, #7
 8000a04:	4664      	mov	r4, ip
 8000a06:	403a      	ands	r2, r7
 8000a08:	e592      	b.n	8000530 <__aeabi_dadd+0xc0>
 8000a0a:	4301      	orrs	r1, r0
 8000a0c:	000f      	movs	r7, r1
 8000a0e:	1e79      	subs	r1, r7, #1
 8000a10:	418f      	sbcs	r7, r1
 8000a12:	e79d      	b.n	8000950 <__aeabi_dadd+0x4e0>
 8000a14:	001c      	movs	r4, r3
 8000a16:	000f      	movs	r7, r1
 8000a18:	3c20      	subs	r4, #32
 8000a1a:	40e7      	lsrs	r7, r4
 8000a1c:	2b20      	cmp	r3, #32
 8000a1e:	d003      	beq.n	8000a28 <__aeabi_dadd+0x5b8>
 8000a20:	2440      	movs	r4, #64	; 0x40
 8000a22:	1ae3      	subs	r3, r4, r3
 8000a24:	4099      	lsls	r1, r3
 8000a26:	4308      	orrs	r0, r1
 8000a28:	1e41      	subs	r1, r0, #1
 8000a2a:	4188      	sbcs	r0, r1
 8000a2c:	4338      	orrs	r0, r7
 8000a2e:	e67c      	b.n	800072a <__aeabi_dadd+0x2ba>
 8000a30:	2200      	movs	r2, #0
 8000a32:	2400      	movs	r4, #0
 8000a34:	e625      	b.n	8000682 <__aeabi_dadd+0x212>
 8000a36:	1a17      	subs	r7, r2, r0
 8000a38:	4643      	mov	r3, r8
 8000a3a:	42ba      	cmp	r2, r7
 8000a3c:	4192      	sbcs	r2, r2
 8000a3e:	1a59      	subs	r1, r3, r1
 8000a40:	4252      	negs	r2, r2
 8000a42:	1a89      	subs	r1, r1, r2
 8000a44:	4664      	mov	r4, ip
 8000a46:	0035      	movs	r5, r6
 8000a48:	e543      	b.n	80004d2 <__aeabi_dadd+0x62>
 8000a4a:	4641      	mov	r1, r8
 8000a4c:	0010      	movs	r0, r2
 8000a4e:	4d14      	ldr	r5, [pc, #80]	; (8000aa0 <__aeabi_dadd+0x630>)
 8000a50:	e610      	b.n	8000674 <__aeabi_dadd+0x204>
 8000a52:	2280      	movs	r2, #128	; 0x80
 8000a54:	2400      	movs	r4, #0
 8000a56:	0312      	lsls	r2, r2, #12
 8000a58:	e680      	b.n	800075c <__aeabi_dadd+0x2ec>
 8000a5a:	001d      	movs	r5, r3
 8000a5c:	000f      	movs	r7, r1
 8000a5e:	3d20      	subs	r5, #32
 8000a60:	40ef      	lsrs	r7, r5
 8000a62:	46bc      	mov	ip, r7
 8000a64:	2b20      	cmp	r3, #32
 8000a66:	d003      	beq.n	8000a70 <__aeabi_dadd+0x600>
 8000a68:	2540      	movs	r5, #64	; 0x40
 8000a6a:	1aeb      	subs	r3, r5, r3
 8000a6c:	4099      	lsls	r1, r3
 8000a6e:	4308      	orrs	r0, r1
 8000a70:	0007      	movs	r7, r0
 8000a72:	4663      	mov	r3, ip
 8000a74:	1e78      	subs	r0, r7, #1
 8000a76:	4187      	sbcs	r7, r0
 8000a78:	431f      	orrs	r7, r3
 8000a7a:	e769      	b.n	8000950 <__aeabi_dadd+0x4e0>
 8000a7c:	1887      	adds	r7, r0, r2
 8000a7e:	4297      	cmp	r7, r2
 8000a80:	419b      	sbcs	r3, r3
 8000a82:	4441      	add	r1, r8
 8000a84:	425b      	negs	r3, r3
 8000a86:	18c9      	adds	r1, r1, r3
 8000a88:	0035      	movs	r5, r6
 8000a8a:	e5a3      	b.n	80005d4 <__aeabi_dadd+0x164>
 8000a8c:	003b      	movs	r3, r7
 8000a8e:	4333      	orrs	r3, r6
 8000a90:	d0ce      	beq.n	8000a30 <__aeabi_dadd+0x5c0>
 8000a92:	2207      	movs	r2, #7
 8000a94:	0031      	movs	r1, r6
 8000a96:	403a      	ands	r2, r7
 8000a98:	e652      	b.n	8000740 <__aeabi_dadd+0x2d0>
 8000a9a:	2300      	movs	r3, #0
 8000a9c:	001a      	movs	r2, r3
 8000a9e:	e5f4      	b.n	800068a <__aeabi_dadd+0x21a>
 8000aa0:	000007ff 	.word	0x000007ff
 8000aa4:	ff7fffff 	.word	0xff7fffff

08000aa8 <__aeabi_ddiv>:
 8000aa8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000aaa:	4657      	mov	r7, sl
 8000aac:	46de      	mov	lr, fp
 8000aae:	464e      	mov	r6, r9
 8000ab0:	4645      	mov	r5, r8
 8000ab2:	b5e0      	push	{r5, r6, r7, lr}
 8000ab4:	4683      	mov	fp, r0
 8000ab6:	0007      	movs	r7, r0
 8000ab8:	030e      	lsls	r6, r1, #12
 8000aba:	0048      	lsls	r0, r1, #1
 8000abc:	b085      	sub	sp, #20
 8000abe:	4692      	mov	sl, r2
 8000ac0:	001c      	movs	r4, r3
 8000ac2:	0b36      	lsrs	r6, r6, #12
 8000ac4:	0d40      	lsrs	r0, r0, #21
 8000ac6:	0fcd      	lsrs	r5, r1, #31
 8000ac8:	2800      	cmp	r0, #0
 8000aca:	d100      	bne.n	8000ace <__aeabi_ddiv+0x26>
 8000acc:	e09d      	b.n	8000c0a <__aeabi_ddiv+0x162>
 8000ace:	4b95      	ldr	r3, [pc, #596]	; (8000d24 <__aeabi_ddiv+0x27c>)
 8000ad0:	4298      	cmp	r0, r3
 8000ad2:	d039      	beq.n	8000b48 <__aeabi_ddiv+0xa0>
 8000ad4:	2380      	movs	r3, #128	; 0x80
 8000ad6:	00f6      	lsls	r6, r6, #3
 8000ad8:	041b      	lsls	r3, r3, #16
 8000ada:	431e      	orrs	r6, r3
 8000adc:	4a92      	ldr	r2, [pc, #584]	; (8000d28 <__aeabi_ddiv+0x280>)
 8000ade:	0f7b      	lsrs	r3, r7, #29
 8000ae0:	4333      	orrs	r3, r6
 8000ae2:	4699      	mov	r9, r3
 8000ae4:	4694      	mov	ip, r2
 8000ae6:	0003      	movs	r3, r0
 8000ae8:	4463      	add	r3, ip
 8000aea:	9300      	str	r3, [sp, #0]
 8000aec:	2300      	movs	r3, #0
 8000aee:	2600      	movs	r6, #0
 8000af0:	00ff      	lsls	r7, r7, #3
 8000af2:	9302      	str	r3, [sp, #8]
 8000af4:	0323      	lsls	r3, r4, #12
 8000af6:	0b1b      	lsrs	r3, r3, #12
 8000af8:	4698      	mov	r8, r3
 8000afa:	0063      	lsls	r3, r4, #1
 8000afc:	0fe4      	lsrs	r4, r4, #31
 8000afe:	4652      	mov	r2, sl
 8000b00:	0d5b      	lsrs	r3, r3, #21
 8000b02:	9401      	str	r4, [sp, #4]
 8000b04:	d100      	bne.n	8000b08 <__aeabi_ddiv+0x60>
 8000b06:	e0b3      	b.n	8000c70 <__aeabi_ddiv+0x1c8>
 8000b08:	4986      	ldr	r1, [pc, #536]	; (8000d24 <__aeabi_ddiv+0x27c>)
 8000b0a:	428b      	cmp	r3, r1
 8000b0c:	d100      	bne.n	8000b10 <__aeabi_ddiv+0x68>
 8000b0e:	e09e      	b.n	8000c4e <__aeabi_ddiv+0x1a6>
 8000b10:	4642      	mov	r2, r8
 8000b12:	00d1      	lsls	r1, r2, #3
 8000b14:	2280      	movs	r2, #128	; 0x80
 8000b16:	0412      	lsls	r2, r2, #16
 8000b18:	430a      	orrs	r2, r1
 8000b1a:	4651      	mov	r1, sl
 8000b1c:	0f49      	lsrs	r1, r1, #29
 8000b1e:	4311      	orrs	r1, r2
 8000b20:	468b      	mov	fp, r1
 8000b22:	4981      	ldr	r1, [pc, #516]	; (8000d28 <__aeabi_ddiv+0x280>)
 8000b24:	4652      	mov	r2, sl
 8000b26:	468c      	mov	ip, r1
 8000b28:	9900      	ldr	r1, [sp, #0]
 8000b2a:	4463      	add	r3, ip
 8000b2c:	1acb      	subs	r3, r1, r3
 8000b2e:	2100      	movs	r1, #0
 8000b30:	00d2      	lsls	r2, r2, #3
 8000b32:	9300      	str	r3, [sp, #0]
 8000b34:	002b      	movs	r3, r5
 8000b36:	4063      	eors	r3, r4
 8000b38:	469a      	mov	sl, r3
 8000b3a:	2e0f      	cmp	r6, #15
 8000b3c:	d900      	bls.n	8000b40 <__aeabi_ddiv+0x98>
 8000b3e:	e105      	b.n	8000d4c <__aeabi_ddiv+0x2a4>
 8000b40:	4b7a      	ldr	r3, [pc, #488]	; (8000d2c <__aeabi_ddiv+0x284>)
 8000b42:	00b6      	lsls	r6, r6, #2
 8000b44:	599b      	ldr	r3, [r3, r6]
 8000b46:	469f      	mov	pc, r3
 8000b48:	465b      	mov	r3, fp
 8000b4a:	4333      	orrs	r3, r6
 8000b4c:	4699      	mov	r9, r3
 8000b4e:	d000      	beq.n	8000b52 <__aeabi_ddiv+0xaa>
 8000b50:	e0b8      	b.n	8000cc4 <__aeabi_ddiv+0x21c>
 8000b52:	2302      	movs	r3, #2
 8000b54:	2608      	movs	r6, #8
 8000b56:	2700      	movs	r7, #0
 8000b58:	9000      	str	r0, [sp, #0]
 8000b5a:	9302      	str	r3, [sp, #8]
 8000b5c:	e7ca      	b.n	8000af4 <__aeabi_ddiv+0x4c>
 8000b5e:	46cb      	mov	fp, r9
 8000b60:	003a      	movs	r2, r7
 8000b62:	9902      	ldr	r1, [sp, #8]
 8000b64:	9501      	str	r5, [sp, #4]
 8000b66:	9b01      	ldr	r3, [sp, #4]
 8000b68:	469a      	mov	sl, r3
 8000b6a:	2902      	cmp	r1, #2
 8000b6c:	d027      	beq.n	8000bbe <__aeabi_ddiv+0x116>
 8000b6e:	2903      	cmp	r1, #3
 8000b70:	d100      	bne.n	8000b74 <__aeabi_ddiv+0xcc>
 8000b72:	e280      	b.n	8001076 <__aeabi_ddiv+0x5ce>
 8000b74:	2901      	cmp	r1, #1
 8000b76:	d044      	beq.n	8000c02 <__aeabi_ddiv+0x15a>
 8000b78:	496d      	ldr	r1, [pc, #436]	; (8000d30 <__aeabi_ddiv+0x288>)
 8000b7a:	9b00      	ldr	r3, [sp, #0]
 8000b7c:	468c      	mov	ip, r1
 8000b7e:	4463      	add	r3, ip
 8000b80:	001c      	movs	r4, r3
 8000b82:	2c00      	cmp	r4, #0
 8000b84:	dd38      	ble.n	8000bf8 <__aeabi_ddiv+0x150>
 8000b86:	0753      	lsls	r3, r2, #29
 8000b88:	d000      	beq.n	8000b8c <__aeabi_ddiv+0xe4>
 8000b8a:	e213      	b.n	8000fb4 <__aeabi_ddiv+0x50c>
 8000b8c:	08d2      	lsrs	r2, r2, #3
 8000b8e:	465b      	mov	r3, fp
 8000b90:	01db      	lsls	r3, r3, #7
 8000b92:	d509      	bpl.n	8000ba8 <__aeabi_ddiv+0x100>
 8000b94:	4659      	mov	r1, fp
 8000b96:	4b67      	ldr	r3, [pc, #412]	; (8000d34 <__aeabi_ddiv+0x28c>)
 8000b98:	4019      	ands	r1, r3
 8000b9a:	468b      	mov	fp, r1
 8000b9c:	2180      	movs	r1, #128	; 0x80
 8000b9e:	00c9      	lsls	r1, r1, #3
 8000ba0:	468c      	mov	ip, r1
 8000ba2:	9b00      	ldr	r3, [sp, #0]
 8000ba4:	4463      	add	r3, ip
 8000ba6:	001c      	movs	r4, r3
 8000ba8:	4b63      	ldr	r3, [pc, #396]	; (8000d38 <__aeabi_ddiv+0x290>)
 8000baa:	429c      	cmp	r4, r3
 8000bac:	dc07      	bgt.n	8000bbe <__aeabi_ddiv+0x116>
 8000bae:	465b      	mov	r3, fp
 8000bb0:	0564      	lsls	r4, r4, #21
 8000bb2:	075f      	lsls	r7, r3, #29
 8000bb4:	025b      	lsls	r3, r3, #9
 8000bb6:	4317      	orrs	r7, r2
 8000bb8:	0b1b      	lsrs	r3, r3, #12
 8000bba:	0d62      	lsrs	r2, r4, #21
 8000bbc:	e002      	b.n	8000bc4 <__aeabi_ddiv+0x11c>
 8000bbe:	2300      	movs	r3, #0
 8000bc0:	2700      	movs	r7, #0
 8000bc2:	4a58      	ldr	r2, [pc, #352]	; (8000d24 <__aeabi_ddiv+0x27c>)
 8000bc4:	2100      	movs	r1, #0
 8000bc6:	031b      	lsls	r3, r3, #12
 8000bc8:	0b1c      	lsrs	r4, r3, #12
 8000bca:	0d0b      	lsrs	r3, r1, #20
 8000bcc:	051b      	lsls	r3, r3, #20
 8000bce:	4323      	orrs	r3, r4
 8000bd0:	0514      	lsls	r4, r2, #20
 8000bd2:	4a5a      	ldr	r2, [pc, #360]	; (8000d3c <__aeabi_ddiv+0x294>)
 8000bd4:	0038      	movs	r0, r7
 8000bd6:	4013      	ands	r3, r2
 8000bd8:	431c      	orrs	r4, r3
 8000bda:	4653      	mov	r3, sl
 8000bdc:	0064      	lsls	r4, r4, #1
 8000bde:	07db      	lsls	r3, r3, #31
 8000be0:	0864      	lsrs	r4, r4, #1
 8000be2:	431c      	orrs	r4, r3
 8000be4:	0021      	movs	r1, r4
 8000be6:	b005      	add	sp, #20
 8000be8:	bc3c      	pop	{r2, r3, r4, r5}
 8000bea:	4690      	mov	r8, r2
 8000bec:	4699      	mov	r9, r3
 8000bee:	46a2      	mov	sl, r4
 8000bf0:	46ab      	mov	fp, r5
 8000bf2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000bf4:	2201      	movs	r2, #1
 8000bf6:	4252      	negs	r2, r2
 8000bf8:	2301      	movs	r3, #1
 8000bfa:	1b1b      	subs	r3, r3, r4
 8000bfc:	2b38      	cmp	r3, #56	; 0x38
 8000bfe:	dc00      	bgt.n	8000c02 <__aeabi_ddiv+0x15a>
 8000c00:	e1ad      	b.n	8000f5e <__aeabi_ddiv+0x4b6>
 8000c02:	2200      	movs	r2, #0
 8000c04:	2300      	movs	r3, #0
 8000c06:	2700      	movs	r7, #0
 8000c08:	e7dc      	b.n	8000bc4 <__aeabi_ddiv+0x11c>
 8000c0a:	465b      	mov	r3, fp
 8000c0c:	4333      	orrs	r3, r6
 8000c0e:	4699      	mov	r9, r3
 8000c10:	d05e      	beq.n	8000cd0 <__aeabi_ddiv+0x228>
 8000c12:	2e00      	cmp	r6, #0
 8000c14:	d100      	bne.n	8000c18 <__aeabi_ddiv+0x170>
 8000c16:	e18a      	b.n	8000f2e <__aeabi_ddiv+0x486>
 8000c18:	0030      	movs	r0, r6
 8000c1a:	f001 f979 	bl	8001f10 <__clzsi2>
 8000c1e:	0003      	movs	r3, r0
 8000c20:	3b0b      	subs	r3, #11
 8000c22:	2b1c      	cmp	r3, #28
 8000c24:	dd00      	ble.n	8000c28 <__aeabi_ddiv+0x180>
 8000c26:	e17b      	b.n	8000f20 <__aeabi_ddiv+0x478>
 8000c28:	221d      	movs	r2, #29
 8000c2a:	1ad3      	subs	r3, r2, r3
 8000c2c:	465a      	mov	r2, fp
 8000c2e:	0001      	movs	r1, r0
 8000c30:	40da      	lsrs	r2, r3
 8000c32:	3908      	subs	r1, #8
 8000c34:	408e      	lsls	r6, r1
 8000c36:	0013      	movs	r3, r2
 8000c38:	465f      	mov	r7, fp
 8000c3a:	4333      	orrs	r3, r6
 8000c3c:	4699      	mov	r9, r3
 8000c3e:	408f      	lsls	r7, r1
 8000c40:	4b3f      	ldr	r3, [pc, #252]	; (8000d40 <__aeabi_ddiv+0x298>)
 8000c42:	2600      	movs	r6, #0
 8000c44:	1a1b      	subs	r3, r3, r0
 8000c46:	9300      	str	r3, [sp, #0]
 8000c48:	2300      	movs	r3, #0
 8000c4a:	9302      	str	r3, [sp, #8]
 8000c4c:	e752      	b.n	8000af4 <__aeabi_ddiv+0x4c>
 8000c4e:	4641      	mov	r1, r8
 8000c50:	4653      	mov	r3, sl
 8000c52:	430b      	orrs	r3, r1
 8000c54:	493b      	ldr	r1, [pc, #236]	; (8000d44 <__aeabi_ddiv+0x29c>)
 8000c56:	469b      	mov	fp, r3
 8000c58:	468c      	mov	ip, r1
 8000c5a:	9b00      	ldr	r3, [sp, #0]
 8000c5c:	4463      	add	r3, ip
 8000c5e:	9300      	str	r3, [sp, #0]
 8000c60:	465b      	mov	r3, fp
 8000c62:	2b00      	cmp	r3, #0
 8000c64:	d13b      	bne.n	8000cde <__aeabi_ddiv+0x236>
 8000c66:	2302      	movs	r3, #2
 8000c68:	2200      	movs	r2, #0
 8000c6a:	431e      	orrs	r6, r3
 8000c6c:	2102      	movs	r1, #2
 8000c6e:	e761      	b.n	8000b34 <__aeabi_ddiv+0x8c>
 8000c70:	4643      	mov	r3, r8
 8000c72:	4313      	orrs	r3, r2
 8000c74:	469b      	mov	fp, r3
 8000c76:	d037      	beq.n	8000ce8 <__aeabi_ddiv+0x240>
 8000c78:	4643      	mov	r3, r8
 8000c7a:	2b00      	cmp	r3, #0
 8000c7c:	d100      	bne.n	8000c80 <__aeabi_ddiv+0x1d8>
 8000c7e:	e162      	b.n	8000f46 <__aeabi_ddiv+0x49e>
 8000c80:	4640      	mov	r0, r8
 8000c82:	f001 f945 	bl	8001f10 <__clzsi2>
 8000c86:	0003      	movs	r3, r0
 8000c88:	3b0b      	subs	r3, #11
 8000c8a:	2b1c      	cmp	r3, #28
 8000c8c:	dd00      	ble.n	8000c90 <__aeabi_ddiv+0x1e8>
 8000c8e:	e153      	b.n	8000f38 <__aeabi_ddiv+0x490>
 8000c90:	0002      	movs	r2, r0
 8000c92:	4641      	mov	r1, r8
 8000c94:	3a08      	subs	r2, #8
 8000c96:	4091      	lsls	r1, r2
 8000c98:	4688      	mov	r8, r1
 8000c9a:	211d      	movs	r1, #29
 8000c9c:	1acb      	subs	r3, r1, r3
 8000c9e:	4651      	mov	r1, sl
 8000ca0:	40d9      	lsrs	r1, r3
 8000ca2:	000b      	movs	r3, r1
 8000ca4:	4641      	mov	r1, r8
 8000ca6:	430b      	orrs	r3, r1
 8000ca8:	469b      	mov	fp, r3
 8000caa:	4653      	mov	r3, sl
 8000cac:	4093      	lsls	r3, r2
 8000cae:	001a      	movs	r2, r3
 8000cb0:	9b00      	ldr	r3, [sp, #0]
 8000cb2:	4925      	ldr	r1, [pc, #148]	; (8000d48 <__aeabi_ddiv+0x2a0>)
 8000cb4:	469c      	mov	ip, r3
 8000cb6:	4460      	add	r0, ip
 8000cb8:	0003      	movs	r3, r0
 8000cba:	468c      	mov	ip, r1
 8000cbc:	4463      	add	r3, ip
 8000cbe:	9300      	str	r3, [sp, #0]
 8000cc0:	2100      	movs	r1, #0
 8000cc2:	e737      	b.n	8000b34 <__aeabi_ddiv+0x8c>
 8000cc4:	2303      	movs	r3, #3
 8000cc6:	46b1      	mov	r9, r6
 8000cc8:	9000      	str	r0, [sp, #0]
 8000cca:	260c      	movs	r6, #12
 8000ccc:	9302      	str	r3, [sp, #8]
 8000cce:	e711      	b.n	8000af4 <__aeabi_ddiv+0x4c>
 8000cd0:	2300      	movs	r3, #0
 8000cd2:	9300      	str	r3, [sp, #0]
 8000cd4:	3301      	adds	r3, #1
 8000cd6:	2604      	movs	r6, #4
 8000cd8:	2700      	movs	r7, #0
 8000cda:	9302      	str	r3, [sp, #8]
 8000cdc:	e70a      	b.n	8000af4 <__aeabi_ddiv+0x4c>
 8000cde:	2303      	movs	r3, #3
 8000ce0:	46c3      	mov	fp, r8
 8000ce2:	431e      	orrs	r6, r3
 8000ce4:	2103      	movs	r1, #3
 8000ce6:	e725      	b.n	8000b34 <__aeabi_ddiv+0x8c>
 8000ce8:	3301      	adds	r3, #1
 8000cea:	431e      	orrs	r6, r3
 8000cec:	2200      	movs	r2, #0
 8000cee:	2101      	movs	r1, #1
 8000cf0:	e720      	b.n	8000b34 <__aeabi_ddiv+0x8c>
 8000cf2:	2300      	movs	r3, #0
 8000cf4:	469a      	mov	sl, r3
 8000cf6:	2380      	movs	r3, #128	; 0x80
 8000cf8:	2700      	movs	r7, #0
 8000cfa:	031b      	lsls	r3, r3, #12
 8000cfc:	4a09      	ldr	r2, [pc, #36]	; (8000d24 <__aeabi_ddiv+0x27c>)
 8000cfe:	e761      	b.n	8000bc4 <__aeabi_ddiv+0x11c>
 8000d00:	2380      	movs	r3, #128	; 0x80
 8000d02:	4649      	mov	r1, r9
 8000d04:	031b      	lsls	r3, r3, #12
 8000d06:	4219      	tst	r1, r3
 8000d08:	d100      	bne.n	8000d0c <__aeabi_ddiv+0x264>
 8000d0a:	e0e2      	b.n	8000ed2 <__aeabi_ddiv+0x42a>
 8000d0c:	4659      	mov	r1, fp
 8000d0e:	4219      	tst	r1, r3
 8000d10:	d000      	beq.n	8000d14 <__aeabi_ddiv+0x26c>
 8000d12:	e0de      	b.n	8000ed2 <__aeabi_ddiv+0x42a>
 8000d14:	430b      	orrs	r3, r1
 8000d16:	031b      	lsls	r3, r3, #12
 8000d18:	0017      	movs	r7, r2
 8000d1a:	0b1b      	lsrs	r3, r3, #12
 8000d1c:	46a2      	mov	sl, r4
 8000d1e:	4a01      	ldr	r2, [pc, #4]	; (8000d24 <__aeabi_ddiv+0x27c>)
 8000d20:	e750      	b.n	8000bc4 <__aeabi_ddiv+0x11c>
 8000d22:	46c0      	nop			; (mov r8, r8)
 8000d24:	000007ff 	.word	0x000007ff
 8000d28:	fffffc01 	.word	0xfffffc01
 8000d2c:	08007904 	.word	0x08007904
 8000d30:	000003ff 	.word	0x000003ff
 8000d34:	feffffff 	.word	0xfeffffff
 8000d38:	000007fe 	.word	0x000007fe
 8000d3c:	800fffff 	.word	0x800fffff
 8000d40:	fffffc0d 	.word	0xfffffc0d
 8000d44:	fffff801 	.word	0xfffff801
 8000d48:	000003f3 	.word	0x000003f3
 8000d4c:	45d9      	cmp	r9, fp
 8000d4e:	d900      	bls.n	8000d52 <__aeabi_ddiv+0x2aa>
 8000d50:	e0cb      	b.n	8000eea <__aeabi_ddiv+0x442>
 8000d52:	d100      	bne.n	8000d56 <__aeabi_ddiv+0x2ae>
 8000d54:	e0c6      	b.n	8000ee4 <__aeabi_ddiv+0x43c>
 8000d56:	003c      	movs	r4, r7
 8000d58:	4648      	mov	r0, r9
 8000d5a:	2700      	movs	r7, #0
 8000d5c:	9b00      	ldr	r3, [sp, #0]
 8000d5e:	3b01      	subs	r3, #1
 8000d60:	9300      	str	r3, [sp, #0]
 8000d62:	465b      	mov	r3, fp
 8000d64:	0e16      	lsrs	r6, r2, #24
 8000d66:	021b      	lsls	r3, r3, #8
 8000d68:	431e      	orrs	r6, r3
 8000d6a:	0213      	lsls	r3, r2, #8
 8000d6c:	4698      	mov	r8, r3
 8000d6e:	0433      	lsls	r3, r6, #16
 8000d70:	0c1b      	lsrs	r3, r3, #16
 8000d72:	4699      	mov	r9, r3
 8000d74:	0c31      	lsrs	r1, r6, #16
 8000d76:	9101      	str	r1, [sp, #4]
 8000d78:	f7ff fa4c 	bl	8000214 <__aeabi_uidivmod>
 8000d7c:	464a      	mov	r2, r9
 8000d7e:	4342      	muls	r2, r0
 8000d80:	040b      	lsls	r3, r1, #16
 8000d82:	0c21      	lsrs	r1, r4, #16
 8000d84:	0005      	movs	r5, r0
 8000d86:	4319      	orrs	r1, r3
 8000d88:	428a      	cmp	r2, r1
 8000d8a:	d907      	bls.n	8000d9c <__aeabi_ddiv+0x2f4>
 8000d8c:	1989      	adds	r1, r1, r6
 8000d8e:	3d01      	subs	r5, #1
 8000d90:	428e      	cmp	r6, r1
 8000d92:	d803      	bhi.n	8000d9c <__aeabi_ddiv+0x2f4>
 8000d94:	428a      	cmp	r2, r1
 8000d96:	d901      	bls.n	8000d9c <__aeabi_ddiv+0x2f4>
 8000d98:	1e85      	subs	r5, r0, #2
 8000d9a:	1989      	adds	r1, r1, r6
 8000d9c:	1a88      	subs	r0, r1, r2
 8000d9e:	9901      	ldr	r1, [sp, #4]
 8000da0:	f7ff fa38 	bl	8000214 <__aeabi_uidivmod>
 8000da4:	0409      	lsls	r1, r1, #16
 8000da6:	468c      	mov	ip, r1
 8000da8:	464a      	mov	r2, r9
 8000daa:	0421      	lsls	r1, r4, #16
 8000dac:	4664      	mov	r4, ip
 8000dae:	4342      	muls	r2, r0
 8000db0:	0c09      	lsrs	r1, r1, #16
 8000db2:	0003      	movs	r3, r0
 8000db4:	4321      	orrs	r1, r4
 8000db6:	428a      	cmp	r2, r1
 8000db8:	d904      	bls.n	8000dc4 <__aeabi_ddiv+0x31c>
 8000dba:	1989      	adds	r1, r1, r6
 8000dbc:	3b01      	subs	r3, #1
 8000dbe:	428e      	cmp	r6, r1
 8000dc0:	d800      	bhi.n	8000dc4 <__aeabi_ddiv+0x31c>
 8000dc2:	e0f1      	b.n	8000fa8 <__aeabi_ddiv+0x500>
 8000dc4:	042d      	lsls	r5, r5, #16
 8000dc6:	431d      	orrs	r5, r3
 8000dc8:	46ab      	mov	fp, r5
 8000dca:	4643      	mov	r3, r8
 8000dcc:	1a89      	subs	r1, r1, r2
 8000dce:	4642      	mov	r2, r8
 8000dd0:	0c28      	lsrs	r0, r5, #16
 8000dd2:	0412      	lsls	r2, r2, #16
 8000dd4:	0c1d      	lsrs	r5, r3, #16
 8000dd6:	465b      	mov	r3, fp
 8000dd8:	0c14      	lsrs	r4, r2, #16
 8000dda:	0022      	movs	r2, r4
 8000ddc:	041b      	lsls	r3, r3, #16
 8000dde:	0c1b      	lsrs	r3, r3, #16
 8000de0:	435a      	muls	r2, r3
 8000de2:	9403      	str	r4, [sp, #12]
 8000de4:	436b      	muls	r3, r5
 8000de6:	4344      	muls	r4, r0
 8000de8:	9502      	str	r5, [sp, #8]
 8000dea:	4368      	muls	r0, r5
 8000dec:	191b      	adds	r3, r3, r4
 8000dee:	0c15      	lsrs	r5, r2, #16
 8000df0:	18eb      	adds	r3, r5, r3
 8000df2:	429c      	cmp	r4, r3
 8000df4:	d903      	bls.n	8000dfe <__aeabi_ddiv+0x356>
 8000df6:	2480      	movs	r4, #128	; 0x80
 8000df8:	0264      	lsls	r4, r4, #9
 8000dfa:	46a4      	mov	ip, r4
 8000dfc:	4460      	add	r0, ip
 8000dfe:	0c1c      	lsrs	r4, r3, #16
 8000e00:	0415      	lsls	r5, r2, #16
 8000e02:	041b      	lsls	r3, r3, #16
 8000e04:	0c2d      	lsrs	r5, r5, #16
 8000e06:	1820      	adds	r0, r4, r0
 8000e08:	195d      	adds	r5, r3, r5
 8000e0a:	4281      	cmp	r1, r0
 8000e0c:	d377      	bcc.n	8000efe <__aeabi_ddiv+0x456>
 8000e0e:	d073      	beq.n	8000ef8 <__aeabi_ddiv+0x450>
 8000e10:	1a0c      	subs	r4, r1, r0
 8000e12:	4aa2      	ldr	r2, [pc, #648]	; (800109c <__aeabi_ddiv+0x5f4>)
 8000e14:	1b7d      	subs	r5, r7, r5
 8000e16:	42af      	cmp	r7, r5
 8000e18:	41bf      	sbcs	r7, r7
 8000e1a:	4694      	mov	ip, r2
 8000e1c:	9b00      	ldr	r3, [sp, #0]
 8000e1e:	427f      	negs	r7, r7
 8000e20:	4463      	add	r3, ip
 8000e22:	1be0      	subs	r0, r4, r7
 8000e24:	001c      	movs	r4, r3
 8000e26:	4286      	cmp	r6, r0
 8000e28:	d100      	bne.n	8000e2c <__aeabi_ddiv+0x384>
 8000e2a:	e0db      	b.n	8000fe4 <__aeabi_ddiv+0x53c>
 8000e2c:	9901      	ldr	r1, [sp, #4]
 8000e2e:	f7ff f9f1 	bl	8000214 <__aeabi_uidivmod>
 8000e32:	464a      	mov	r2, r9
 8000e34:	4342      	muls	r2, r0
 8000e36:	040b      	lsls	r3, r1, #16
 8000e38:	0c29      	lsrs	r1, r5, #16
 8000e3a:	0007      	movs	r7, r0
 8000e3c:	4319      	orrs	r1, r3
 8000e3e:	428a      	cmp	r2, r1
 8000e40:	d907      	bls.n	8000e52 <__aeabi_ddiv+0x3aa>
 8000e42:	1989      	adds	r1, r1, r6
 8000e44:	3f01      	subs	r7, #1
 8000e46:	428e      	cmp	r6, r1
 8000e48:	d803      	bhi.n	8000e52 <__aeabi_ddiv+0x3aa>
 8000e4a:	428a      	cmp	r2, r1
 8000e4c:	d901      	bls.n	8000e52 <__aeabi_ddiv+0x3aa>
 8000e4e:	1e87      	subs	r7, r0, #2
 8000e50:	1989      	adds	r1, r1, r6
 8000e52:	1a88      	subs	r0, r1, r2
 8000e54:	9901      	ldr	r1, [sp, #4]
 8000e56:	f7ff f9dd 	bl	8000214 <__aeabi_uidivmod>
 8000e5a:	0409      	lsls	r1, r1, #16
 8000e5c:	464a      	mov	r2, r9
 8000e5e:	4689      	mov	r9, r1
 8000e60:	0429      	lsls	r1, r5, #16
 8000e62:	464d      	mov	r5, r9
 8000e64:	4342      	muls	r2, r0
 8000e66:	0c09      	lsrs	r1, r1, #16
 8000e68:	0003      	movs	r3, r0
 8000e6a:	4329      	orrs	r1, r5
 8000e6c:	428a      	cmp	r2, r1
 8000e6e:	d907      	bls.n	8000e80 <__aeabi_ddiv+0x3d8>
 8000e70:	1989      	adds	r1, r1, r6
 8000e72:	3b01      	subs	r3, #1
 8000e74:	428e      	cmp	r6, r1
 8000e76:	d803      	bhi.n	8000e80 <__aeabi_ddiv+0x3d8>
 8000e78:	428a      	cmp	r2, r1
 8000e7a:	d901      	bls.n	8000e80 <__aeabi_ddiv+0x3d8>
 8000e7c:	1e83      	subs	r3, r0, #2
 8000e7e:	1989      	adds	r1, r1, r6
 8000e80:	043f      	lsls	r7, r7, #16
 8000e82:	1a89      	subs	r1, r1, r2
 8000e84:	003a      	movs	r2, r7
 8000e86:	9f03      	ldr	r7, [sp, #12]
 8000e88:	431a      	orrs	r2, r3
 8000e8a:	0038      	movs	r0, r7
 8000e8c:	0413      	lsls	r3, r2, #16
 8000e8e:	0c1b      	lsrs	r3, r3, #16
 8000e90:	4358      	muls	r0, r3
 8000e92:	4681      	mov	r9, r0
 8000e94:	9802      	ldr	r0, [sp, #8]
 8000e96:	0c15      	lsrs	r5, r2, #16
 8000e98:	436f      	muls	r7, r5
 8000e9a:	4343      	muls	r3, r0
 8000e9c:	4345      	muls	r5, r0
 8000e9e:	4648      	mov	r0, r9
 8000ea0:	0c00      	lsrs	r0, r0, #16
 8000ea2:	4684      	mov	ip, r0
 8000ea4:	19db      	adds	r3, r3, r7
 8000ea6:	4463      	add	r3, ip
 8000ea8:	429f      	cmp	r7, r3
 8000eaa:	d903      	bls.n	8000eb4 <__aeabi_ddiv+0x40c>
 8000eac:	2080      	movs	r0, #128	; 0x80
 8000eae:	0240      	lsls	r0, r0, #9
 8000eb0:	4684      	mov	ip, r0
 8000eb2:	4465      	add	r5, ip
 8000eb4:	4648      	mov	r0, r9
 8000eb6:	0c1f      	lsrs	r7, r3, #16
 8000eb8:	0400      	lsls	r0, r0, #16
 8000eba:	041b      	lsls	r3, r3, #16
 8000ebc:	0c00      	lsrs	r0, r0, #16
 8000ebe:	197d      	adds	r5, r7, r5
 8000ec0:	1818      	adds	r0, r3, r0
 8000ec2:	42a9      	cmp	r1, r5
 8000ec4:	d200      	bcs.n	8000ec8 <__aeabi_ddiv+0x420>
 8000ec6:	e084      	b.n	8000fd2 <__aeabi_ddiv+0x52a>
 8000ec8:	d100      	bne.n	8000ecc <__aeabi_ddiv+0x424>
 8000eca:	e07f      	b.n	8000fcc <__aeabi_ddiv+0x524>
 8000ecc:	2301      	movs	r3, #1
 8000ece:	431a      	orrs	r2, r3
 8000ed0:	e657      	b.n	8000b82 <__aeabi_ddiv+0xda>
 8000ed2:	2380      	movs	r3, #128	; 0x80
 8000ed4:	464a      	mov	r2, r9
 8000ed6:	031b      	lsls	r3, r3, #12
 8000ed8:	4313      	orrs	r3, r2
 8000eda:	031b      	lsls	r3, r3, #12
 8000edc:	0b1b      	lsrs	r3, r3, #12
 8000ede:	46aa      	mov	sl, r5
 8000ee0:	4a6f      	ldr	r2, [pc, #444]	; (80010a0 <__aeabi_ddiv+0x5f8>)
 8000ee2:	e66f      	b.n	8000bc4 <__aeabi_ddiv+0x11c>
 8000ee4:	42ba      	cmp	r2, r7
 8000ee6:	d900      	bls.n	8000eea <__aeabi_ddiv+0x442>
 8000ee8:	e735      	b.n	8000d56 <__aeabi_ddiv+0x2ae>
 8000eea:	464b      	mov	r3, r9
 8000eec:	07dc      	lsls	r4, r3, #31
 8000eee:	0858      	lsrs	r0, r3, #1
 8000ef0:	087b      	lsrs	r3, r7, #1
 8000ef2:	431c      	orrs	r4, r3
 8000ef4:	07ff      	lsls	r7, r7, #31
 8000ef6:	e734      	b.n	8000d62 <__aeabi_ddiv+0x2ba>
 8000ef8:	2400      	movs	r4, #0
 8000efa:	42af      	cmp	r7, r5
 8000efc:	d289      	bcs.n	8000e12 <__aeabi_ddiv+0x36a>
 8000efe:	4447      	add	r7, r8
 8000f00:	4547      	cmp	r7, r8
 8000f02:	41a4      	sbcs	r4, r4
 8000f04:	465b      	mov	r3, fp
 8000f06:	4264      	negs	r4, r4
 8000f08:	19a4      	adds	r4, r4, r6
 8000f0a:	1864      	adds	r4, r4, r1
 8000f0c:	3b01      	subs	r3, #1
 8000f0e:	42a6      	cmp	r6, r4
 8000f10:	d21e      	bcs.n	8000f50 <__aeabi_ddiv+0x4a8>
 8000f12:	42a0      	cmp	r0, r4
 8000f14:	d86d      	bhi.n	8000ff2 <__aeabi_ddiv+0x54a>
 8000f16:	d100      	bne.n	8000f1a <__aeabi_ddiv+0x472>
 8000f18:	e0b6      	b.n	8001088 <__aeabi_ddiv+0x5e0>
 8000f1a:	1a24      	subs	r4, r4, r0
 8000f1c:	469b      	mov	fp, r3
 8000f1e:	e778      	b.n	8000e12 <__aeabi_ddiv+0x36a>
 8000f20:	0003      	movs	r3, r0
 8000f22:	465a      	mov	r2, fp
 8000f24:	3b28      	subs	r3, #40	; 0x28
 8000f26:	409a      	lsls	r2, r3
 8000f28:	2700      	movs	r7, #0
 8000f2a:	4691      	mov	r9, r2
 8000f2c:	e688      	b.n	8000c40 <__aeabi_ddiv+0x198>
 8000f2e:	4658      	mov	r0, fp
 8000f30:	f000 ffee 	bl	8001f10 <__clzsi2>
 8000f34:	3020      	adds	r0, #32
 8000f36:	e672      	b.n	8000c1e <__aeabi_ddiv+0x176>
 8000f38:	0003      	movs	r3, r0
 8000f3a:	4652      	mov	r2, sl
 8000f3c:	3b28      	subs	r3, #40	; 0x28
 8000f3e:	409a      	lsls	r2, r3
 8000f40:	4693      	mov	fp, r2
 8000f42:	2200      	movs	r2, #0
 8000f44:	e6b4      	b.n	8000cb0 <__aeabi_ddiv+0x208>
 8000f46:	4650      	mov	r0, sl
 8000f48:	f000 ffe2 	bl	8001f10 <__clzsi2>
 8000f4c:	3020      	adds	r0, #32
 8000f4e:	e69a      	b.n	8000c86 <__aeabi_ddiv+0x1de>
 8000f50:	42a6      	cmp	r6, r4
 8000f52:	d1e2      	bne.n	8000f1a <__aeabi_ddiv+0x472>
 8000f54:	45b8      	cmp	r8, r7
 8000f56:	d9dc      	bls.n	8000f12 <__aeabi_ddiv+0x46a>
 8000f58:	1a34      	subs	r4, r6, r0
 8000f5a:	469b      	mov	fp, r3
 8000f5c:	e759      	b.n	8000e12 <__aeabi_ddiv+0x36a>
 8000f5e:	2b1f      	cmp	r3, #31
 8000f60:	dc65      	bgt.n	800102e <__aeabi_ddiv+0x586>
 8000f62:	4c50      	ldr	r4, [pc, #320]	; (80010a4 <__aeabi_ddiv+0x5fc>)
 8000f64:	9900      	ldr	r1, [sp, #0]
 8000f66:	46a4      	mov	ip, r4
 8000f68:	465c      	mov	r4, fp
 8000f6a:	4461      	add	r1, ip
 8000f6c:	0008      	movs	r0, r1
 8000f6e:	408c      	lsls	r4, r1
 8000f70:	0011      	movs	r1, r2
 8000f72:	4082      	lsls	r2, r0
 8000f74:	40d9      	lsrs	r1, r3
 8000f76:	1e50      	subs	r0, r2, #1
 8000f78:	4182      	sbcs	r2, r0
 8000f7a:	430c      	orrs	r4, r1
 8000f7c:	4314      	orrs	r4, r2
 8000f7e:	465a      	mov	r2, fp
 8000f80:	40da      	lsrs	r2, r3
 8000f82:	0013      	movs	r3, r2
 8000f84:	0762      	lsls	r2, r4, #29
 8000f86:	d009      	beq.n	8000f9c <__aeabi_ddiv+0x4f4>
 8000f88:	220f      	movs	r2, #15
 8000f8a:	4022      	ands	r2, r4
 8000f8c:	2a04      	cmp	r2, #4
 8000f8e:	d005      	beq.n	8000f9c <__aeabi_ddiv+0x4f4>
 8000f90:	0022      	movs	r2, r4
 8000f92:	1d14      	adds	r4, r2, #4
 8000f94:	4294      	cmp	r4, r2
 8000f96:	4189      	sbcs	r1, r1
 8000f98:	4249      	negs	r1, r1
 8000f9a:	185b      	adds	r3, r3, r1
 8000f9c:	021a      	lsls	r2, r3, #8
 8000f9e:	d562      	bpl.n	8001066 <__aeabi_ddiv+0x5be>
 8000fa0:	2201      	movs	r2, #1
 8000fa2:	2300      	movs	r3, #0
 8000fa4:	2700      	movs	r7, #0
 8000fa6:	e60d      	b.n	8000bc4 <__aeabi_ddiv+0x11c>
 8000fa8:	428a      	cmp	r2, r1
 8000faa:	d800      	bhi.n	8000fae <__aeabi_ddiv+0x506>
 8000fac:	e70a      	b.n	8000dc4 <__aeabi_ddiv+0x31c>
 8000fae:	1e83      	subs	r3, r0, #2
 8000fb0:	1989      	adds	r1, r1, r6
 8000fb2:	e707      	b.n	8000dc4 <__aeabi_ddiv+0x31c>
 8000fb4:	230f      	movs	r3, #15
 8000fb6:	4013      	ands	r3, r2
 8000fb8:	2b04      	cmp	r3, #4
 8000fba:	d100      	bne.n	8000fbe <__aeabi_ddiv+0x516>
 8000fbc:	e5e6      	b.n	8000b8c <__aeabi_ddiv+0xe4>
 8000fbe:	1d17      	adds	r7, r2, #4
 8000fc0:	4297      	cmp	r7, r2
 8000fc2:	4192      	sbcs	r2, r2
 8000fc4:	4253      	negs	r3, r2
 8000fc6:	449b      	add	fp, r3
 8000fc8:	08fa      	lsrs	r2, r7, #3
 8000fca:	e5e0      	b.n	8000b8e <__aeabi_ddiv+0xe6>
 8000fcc:	2800      	cmp	r0, #0
 8000fce:	d100      	bne.n	8000fd2 <__aeabi_ddiv+0x52a>
 8000fd0:	e5d7      	b.n	8000b82 <__aeabi_ddiv+0xda>
 8000fd2:	1871      	adds	r1, r6, r1
 8000fd4:	1e53      	subs	r3, r2, #1
 8000fd6:	42b1      	cmp	r1, r6
 8000fd8:	d327      	bcc.n	800102a <__aeabi_ddiv+0x582>
 8000fda:	42a9      	cmp	r1, r5
 8000fdc:	d315      	bcc.n	800100a <__aeabi_ddiv+0x562>
 8000fde:	d058      	beq.n	8001092 <__aeabi_ddiv+0x5ea>
 8000fe0:	001a      	movs	r2, r3
 8000fe2:	e773      	b.n	8000ecc <__aeabi_ddiv+0x424>
 8000fe4:	2b00      	cmp	r3, #0
 8000fe6:	dc00      	bgt.n	8000fea <__aeabi_ddiv+0x542>
 8000fe8:	e604      	b.n	8000bf4 <__aeabi_ddiv+0x14c>
 8000fea:	2301      	movs	r3, #1
 8000fec:	2200      	movs	r2, #0
 8000fee:	449b      	add	fp, r3
 8000ff0:	e5cd      	b.n	8000b8e <__aeabi_ddiv+0xe6>
 8000ff2:	2302      	movs	r3, #2
 8000ff4:	4447      	add	r7, r8
 8000ff6:	4547      	cmp	r7, r8
 8000ff8:	4189      	sbcs	r1, r1
 8000ffa:	425b      	negs	r3, r3
 8000ffc:	469c      	mov	ip, r3
 8000ffe:	4249      	negs	r1, r1
 8001000:	1989      	adds	r1, r1, r6
 8001002:	190c      	adds	r4, r1, r4
 8001004:	44e3      	add	fp, ip
 8001006:	1a24      	subs	r4, r4, r0
 8001008:	e703      	b.n	8000e12 <__aeabi_ddiv+0x36a>
 800100a:	4643      	mov	r3, r8
 800100c:	005f      	lsls	r7, r3, #1
 800100e:	4547      	cmp	r7, r8
 8001010:	419b      	sbcs	r3, r3
 8001012:	46b8      	mov	r8, r7
 8001014:	425b      	negs	r3, r3
 8001016:	199e      	adds	r6, r3, r6
 8001018:	3a02      	subs	r2, #2
 800101a:	1989      	adds	r1, r1, r6
 800101c:	42a9      	cmp	r1, r5
 800101e:	d000      	beq.n	8001022 <__aeabi_ddiv+0x57a>
 8001020:	e754      	b.n	8000ecc <__aeabi_ddiv+0x424>
 8001022:	4540      	cmp	r0, r8
 8001024:	d000      	beq.n	8001028 <__aeabi_ddiv+0x580>
 8001026:	e751      	b.n	8000ecc <__aeabi_ddiv+0x424>
 8001028:	e5ab      	b.n	8000b82 <__aeabi_ddiv+0xda>
 800102a:	001a      	movs	r2, r3
 800102c:	e7f6      	b.n	800101c <__aeabi_ddiv+0x574>
 800102e:	211f      	movs	r1, #31
 8001030:	465f      	mov	r7, fp
 8001032:	4249      	negs	r1, r1
 8001034:	1b0c      	subs	r4, r1, r4
 8001036:	40e7      	lsrs	r7, r4
 8001038:	2b20      	cmp	r3, #32
 800103a:	d007      	beq.n	800104c <__aeabi_ddiv+0x5a4>
 800103c:	491a      	ldr	r1, [pc, #104]	; (80010a8 <__aeabi_ddiv+0x600>)
 800103e:	9b00      	ldr	r3, [sp, #0]
 8001040:	468c      	mov	ip, r1
 8001042:	4463      	add	r3, ip
 8001044:	0018      	movs	r0, r3
 8001046:	465b      	mov	r3, fp
 8001048:	4083      	lsls	r3, r0
 800104a:	431a      	orrs	r2, r3
 800104c:	1e50      	subs	r0, r2, #1
 800104e:	4182      	sbcs	r2, r0
 8001050:	433a      	orrs	r2, r7
 8001052:	2707      	movs	r7, #7
 8001054:	2300      	movs	r3, #0
 8001056:	4017      	ands	r7, r2
 8001058:	d009      	beq.n	800106e <__aeabi_ddiv+0x5c6>
 800105a:	210f      	movs	r1, #15
 800105c:	2300      	movs	r3, #0
 800105e:	4011      	ands	r1, r2
 8001060:	0014      	movs	r4, r2
 8001062:	2904      	cmp	r1, #4
 8001064:	d195      	bne.n	8000f92 <__aeabi_ddiv+0x4ea>
 8001066:	0022      	movs	r2, r4
 8001068:	075f      	lsls	r7, r3, #29
 800106a:	025b      	lsls	r3, r3, #9
 800106c:	0b1b      	lsrs	r3, r3, #12
 800106e:	08d2      	lsrs	r2, r2, #3
 8001070:	4317      	orrs	r7, r2
 8001072:	2200      	movs	r2, #0
 8001074:	e5a6      	b.n	8000bc4 <__aeabi_ddiv+0x11c>
 8001076:	2380      	movs	r3, #128	; 0x80
 8001078:	4659      	mov	r1, fp
 800107a:	031b      	lsls	r3, r3, #12
 800107c:	430b      	orrs	r3, r1
 800107e:	031b      	lsls	r3, r3, #12
 8001080:	0017      	movs	r7, r2
 8001082:	0b1b      	lsrs	r3, r3, #12
 8001084:	4a06      	ldr	r2, [pc, #24]	; (80010a0 <__aeabi_ddiv+0x5f8>)
 8001086:	e59d      	b.n	8000bc4 <__aeabi_ddiv+0x11c>
 8001088:	42bd      	cmp	r5, r7
 800108a:	d8b2      	bhi.n	8000ff2 <__aeabi_ddiv+0x54a>
 800108c:	469b      	mov	fp, r3
 800108e:	2400      	movs	r4, #0
 8001090:	e6bf      	b.n	8000e12 <__aeabi_ddiv+0x36a>
 8001092:	4580      	cmp	r8, r0
 8001094:	d3b9      	bcc.n	800100a <__aeabi_ddiv+0x562>
 8001096:	001a      	movs	r2, r3
 8001098:	e7c3      	b.n	8001022 <__aeabi_ddiv+0x57a>
 800109a:	46c0      	nop			; (mov r8, r8)
 800109c:	000003ff 	.word	0x000003ff
 80010a0:	000007ff 	.word	0x000007ff
 80010a4:	0000041e 	.word	0x0000041e
 80010a8:	0000043e 	.word	0x0000043e

080010ac <__eqdf2>:
 80010ac:	b5f0      	push	{r4, r5, r6, r7, lr}
 80010ae:	464f      	mov	r7, r9
 80010b0:	4646      	mov	r6, r8
 80010b2:	46d6      	mov	lr, sl
 80010b4:	4684      	mov	ip, r0
 80010b6:	b5c0      	push	{r6, r7, lr}
 80010b8:	4680      	mov	r8, r0
 80010ba:	4e19      	ldr	r6, [pc, #100]	; (8001120 <__eqdf2+0x74>)
 80010bc:	0318      	lsls	r0, r3, #12
 80010be:	030f      	lsls	r7, r1, #12
 80010c0:	004d      	lsls	r5, r1, #1
 80010c2:	0b00      	lsrs	r0, r0, #12
 80010c4:	005c      	lsls	r4, r3, #1
 80010c6:	4682      	mov	sl, r0
 80010c8:	0b3f      	lsrs	r7, r7, #12
 80010ca:	0d6d      	lsrs	r5, r5, #21
 80010cc:	0fc9      	lsrs	r1, r1, #31
 80010ce:	4691      	mov	r9, r2
 80010d0:	0d64      	lsrs	r4, r4, #21
 80010d2:	0fdb      	lsrs	r3, r3, #31
 80010d4:	2001      	movs	r0, #1
 80010d6:	42b5      	cmp	r5, r6
 80010d8:	d00a      	beq.n	80010f0 <__eqdf2+0x44>
 80010da:	42b4      	cmp	r4, r6
 80010dc:	d003      	beq.n	80010e6 <__eqdf2+0x3a>
 80010de:	42a5      	cmp	r5, r4
 80010e0:	d101      	bne.n	80010e6 <__eqdf2+0x3a>
 80010e2:	4557      	cmp	r7, sl
 80010e4:	d00c      	beq.n	8001100 <__eqdf2+0x54>
 80010e6:	bc1c      	pop	{r2, r3, r4}
 80010e8:	4690      	mov	r8, r2
 80010ea:	4699      	mov	r9, r3
 80010ec:	46a2      	mov	sl, r4
 80010ee:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80010f0:	4666      	mov	r6, ip
 80010f2:	433e      	orrs	r6, r7
 80010f4:	d1f7      	bne.n	80010e6 <__eqdf2+0x3a>
 80010f6:	42ac      	cmp	r4, r5
 80010f8:	d1f5      	bne.n	80010e6 <__eqdf2+0x3a>
 80010fa:	4654      	mov	r4, sl
 80010fc:	4314      	orrs	r4, r2
 80010fe:	d1f2      	bne.n	80010e6 <__eqdf2+0x3a>
 8001100:	2001      	movs	r0, #1
 8001102:	45c8      	cmp	r8, r9
 8001104:	d1ef      	bne.n	80010e6 <__eqdf2+0x3a>
 8001106:	4299      	cmp	r1, r3
 8001108:	d007      	beq.n	800111a <__eqdf2+0x6e>
 800110a:	2d00      	cmp	r5, #0
 800110c:	d1eb      	bne.n	80010e6 <__eqdf2+0x3a>
 800110e:	4663      	mov	r3, ip
 8001110:	431f      	orrs	r7, r3
 8001112:	0038      	movs	r0, r7
 8001114:	1e47      	subs	r7, r0, #1
 8001116:	41b8      	sbcs	r0, r7
 8001118:	e7e5      	b.n	80010e6 <__eqdf2+0x3a>
 800111a:	2000      	movs	r0, #0
 800111c:	e7e3      	b.n	80010e6 <__eqdf2+0x3a>
 800111e:	46c0      	nop			; (mov r8, r8)
 8001120:	000007ff 	.word	0x000007ff

08001124 <__gedf2>:
 8001124:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001126:	464f      	mov	r7, r9
 8001128:	4646      	mov	r6, r8
 800112a:	46d6      	mov	lr, sl
 800112c:	004d      	lsls	r5, r1, #1
 800112e:	b5c0      	push	{r6, r7, lr}
 8001130:	030e      	lsls	r6, r1, #12
 8001132:	0fc9      	lsrs	r1, r1, #31
 8001134:	468a      	mov	sl, r1
 8001136:	492c      	ldr	r1, [pc, #176]	; (80011e8 <__gedf2+0xc4>)
 8001138:	031f      	lsls	r7, r3, #12
 800113a:	005c      	lsls	r4, r3, #1
 800113c:	4680      	mov	r8, r0
 800113e:	0b36      	lsrs	r6, r6, #12
 8001140:	0d6d      	lsrs	r5, r5, #21
 8001142:	4691      	mov	r9, r2
 8001144:	0b3f      	lsrs	r7, r7, #12
 8001146:	0d64      	lsrs	r4, r4, #21
 8001148:	0fdb      	lsrs	r3, r3, #31
 800114a:	428d      	cmp	r5, r1
 800114c:	d01e      	beq.n	800118c <__gedf2+0x68>
 800114e:	428c      	cmp	r4, r1
 8001150:	d016      	beq.n	8001180 <__gedf2+0x5c>
 8001152:	2d00      	cmp	r5, #0
 8001154:	d11e      	bne.n	8001194 <__gedf2+0x70>
 8001156:	4330      	orrs	r0, r6
 8001158:	4684      	mov	ip, r0
 800115a:	2c00      	cmp	r4, #0
 800115c:	d101      	bne.n	8001162 <__gedf2+0x3e>
 800115e:	433a      	orrs	r2, r7
 8001160:	d023      	beq.n	80011aa <__gedf2+0x86>
 8001162:	4662      	mov	r2, ip
 8001164:	2a00      	cmp	r2, #0
 8001166:	d01a      	beq.n	800119e <__gedf2+0x7a>
 8001168:	459a      	cmp	sl, r3
 800116a:	d029      	beq.n	80011c0 <__gedf2+0x9c>
 800116c:	4651      	mov	r1, sl
 800116e:	2002      	movs	r0, #2
 8001170:	3901      	subs	r1, #1
 8001172:	4008      	ands	r0, r1
 8001174:	3801      	subs	r0, #1
 8001176:	bc1c      	pop	{r2, r3, r4}
 8001178:	4690      	mov	r8, r2
 800117a:	4699      	mov	r9, r3
 800117c:	46a2      	mov	sl, r4
 800117e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001180:	0039      	movs	r1, r7
 8001182:	4311      	orrs	r1, r2
 8001184:	d0e5      	beq.n	8001152 <__gedf2+0x2e>
 8001186:	2002      	movs	r0, #2
 8001188:	4240      	negs	r0, r0
 800118a:	e7f4      	b.n	8001176 <__gedf2+0x52>
 800118c:	4330      	orrs	r0, r6
 800118e:	d1fa      	bne.n	8001186 <__gedf2+0x62>
 8001190:	42ac      	cmp	r4, r5
 8001192:	d00f      	beq.n	80011b4 <__gedf2+0x90>
 8001194:	2c00      	cmp	r4, #0
 8001196:	d10f      	bne.n	80011b8 <__gedf2+0x94>
 8001198:	433a      	orrs	r2, r7
 800119a:	d0e7      	beq.n	800116c <__gedf2+0x48>
 800119c:	e00c      	b.n	80011b8 <__gedf2+0x94>
 800119e:	2201      	movs	r2, #1
 80011a0:	3b01      	subs	r3, #1
 80011a2:	4393      	bics	r3, r2
 80011a4:	0018      	movs	r0, r3
 80011a6:	3001      	adds	r0, #1
 80011a8:	e7e5      	b.n	8001176 <__gedf2+0x52>
 80011aa:	4663      	mov	r3, ip
 80011ac:	2000      	movs	r0, #0
 80011ae:	2b00      	cmp	r3, #0
 80011b0:	d0e1      	beq.n	8001176 <__gedf2+0x52>
 80011b2:	e7db      	b.n	800116c <__gedf2+0x48>
 80011b4:	433a      	orrs	r2, r7
 80011b6:	d1e6      	bne.n	8001186 <__gedf2+0x62>
 80011b8:	459a      	cmp	sl, r3
 80011ba:	d1d7      	bne.n	800116c <__gedf2+0x48>
 80011bc:	42a5      	cmp	r5, r4
 80011be:	dcd5      	bgt.n	800116c <__gedf2+0x48>
 80011c0:	42a5      	cmp	r5, r4
 80011c2:	db05      	blt.n	80011d0 <__gedf2+0xac>
 80011c4:	42be      	cmp	r6, r7
 80011c6:	d8d1      	bhi.n	800116c <__gedf2+0x48>
 80011c8:	d008      	beq.n	80011dc <__gedf2+0xb8>
 80011ca:	2000      	movs	r0, #0
 80011cc:	42be      	cmp	r6, r7
 80011ce:	d2d2      	bcs.n	8001176 <__gedf2+0x52>
 80011d0:	4650      	mov	r0, sl
 80011d2:	2301      	movs	r3, #1
 80011d4:	3801      	subs	r0, #1
 80011d6:	4398      	bics	r0, r3
 80011d8:	3001      	adds	r0, #1
 80011da:	e7cc      	b.n	8001176 <__gedf2+0x52>
 80011dc:	45c8      	cmp	r8, r9
 80011de:	d8c5      	bhi.n	800116c <__gedf2+0x48>
 80011e0:	2000      	movs	r0, #0
 80011e2:	45c8      	cmp	r8, r9
 80011e4:	d3f4      	bcc.n	80011d0 <__gedf2+0xac>
 80011e6:	e7c6      	b.n	8001176 <__gedf2+0x52>
 80011e8:	000007ff 	.word	0x000007ff

080011ec <__ledf2>:
 80011ec:	b5f0      	push	{r4, r5, r6, r7, lr}
 80011ee:	464f      	mov	r7, r9
 80011f0:	4646      	mov	r6, r8
 80011f2:	46d6      	mov	lr, sl
 80011f4:	004d      	lsls	r5, r1, #1
 80011f6:	b5c0      	push	{r6, r7, lr}
 80011f8:	030e      	lsls	r6, r1, #12
 80011fa:	0fc9      	lsrs	r1, r1, #31
 80011fc:	468a      	mov	sl, r1
 80011fe:	492e      	ldr	r1, [pc, #184]	; (80012b8 <__ledf2+0xcc>)
 8001200:	031f      	lsls	r7, r3, #12
 8001202:	005c      	lsls	r4, r3, #1
 8001204:	4680      	mov	r8, r0
 8001206:	0b36      	lsrs	r6, r6, #12
 8001208:	0d6d      	lsrs	r5, r5, #21
 800120a:	4691      	mov	r9, r2
 800120c:	0b3f      	lsrs	r7, r7, #12
 800120e:	0d64      	lsrs	r4, r4, #21
 8001210:	0fdb      	lsrs	r3, r3, #31
 8001212:	428d      	cmp	r5, r1
 8001214:	d018      	beq.n	8001248 <__ledf2+0x5c>
 8001216:	428c      	cmp	r4, r1
 8001218:	d011      	beq.n	800123e <__ledf2+0x52>
 800121a:	2d00      	cmp	r5, #0
 800121c:	d118      	bne.n	8001250 <__ledf2+0x64>
 800121e:	4330      	orrs	r0, r6
 8001220:	4684      	mov	ip, r0
 8001222:	2c00      	cmp	r4, #0
 8001224:	d11e      	bne.n	8001264 <__ledf2+0x78>
 8001226:	433a      	orrs	r2, r7
 8001228:	d11c      	bne.n	8001264 <__ledf2+0x78>
 800122a:	4663      	mov	r3, ip
 800122c:	2000      	movs	r0, #0
 800122e:	2b00      	cmp	r3, #0
 8001230:	d030      	beq.n	8001294 <__ledf2+0xa8>
 8001232:	4651      	mov	r1, sl
 8001234:	2002      	movs	r0, #2
 8001236:	3901      	subs	r1, #1
 8001238:	4008      	ands	r0, r1
 800123a:	3801      	subs	r0, #1
 800123c:	e02a      	b.n	8001294 <__ledf2+0xa8>
 800123e:	0039      	movs	r1, r7
 8001240:	4311      	orrs	r1, r2
 8001242:	d0ea      	beq.n	800121a <__ledf2+0x2e>
 8001244:	2002      	movs	r0, #2
 8001246:	e025      	b.n	8001294 <__ledf2+0xa8>
 8001248:	4330      	orrs	r0, r6
 800124a:	d1fb      	bne.n	8001244 <__ledf2+0x58>
 800124c:	42ac      	cmp	r4, r5
 800124e:	d026      	beq.n	800129e <__ledf2+0xb2>
 8001250:	2c00      	cmp	r4, #0
 8001252:	d126      	bne.n	80012a2 <__ledf2+0xb6>
 8001254:	433a      	orrs	r2, r7
 8001256:	d124      	bne.n	80012a2 <__ledf2+0xb6>
 8001258:	4651      	mov	r1, sl
 800125a:	2002      	movs	r0, #2
 800125c:	3901      	subs	r1, #1
 800125e:	4008      	ands	r0, r1
 8001260:	3801      	subs	r0, #1
 8001262:	e017      	b.n	8001294 <__ledf2+0xa8>
 8001264:	4662      	mov	r2, ip
 8001266:	2a00      	cmp	r2, #0
 8001268:	d00f      	beq.n	800128a <__ledf2+0x9e>
 800126a:	459a      	cmp	sl, r3
 800126c:	d1e1      	bne.n	8001232 <__ledf2+0x46>
 800126e:	42a5      	cmp	r5, r4
 8001270:	db05      	blt.n	800127e <__ledf2+0x92>
 8001272:	42be      	cmp	r6, r7
 8001274:	d8dd      	bhi.n	8001232 <__ledf2+0x46>
 8001276:	d019      	beq.n	80012ac <__ledf2+0xc0>
 8001278:	2000      	movs	r0, #0
 800127a:	42be      	cmp	r6, r7
 800127c:	d20a      	bcs.n	8001294 <__ledf2+0xa8>
 800127e:	4650      	mov	r0, sl
 8001280:	2301      	movs	r3, #1
 8001282:	3801      	subs	r0, #1
 8001284:	4398      	bics	r0, r3
 8001286:	3001      	adds	r0, #1
 8001288:	e004      	b.n	8001294 <__ledf2+0xa8>
 800128a:	2201      	movs	r2, #1
 800128c:	3b01      	subs	r3, #1
 800128e:	4393      	bics	r3, r2
 8001290:	0018      	movs	r0, r3
 8001292:	3001      	adds	r0, #1
 8001294:	bc1c      	pop	{r2, r3, r4}
 8001296:	4690      	mov	r8, r2
 8001298:	4699      	mov	r9, r3
 800129a:	46a2      	mov	sl, r4
 800129c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800129e:	433a      	orrs	r2, r7
 80012a0:	d1d0      	bne.n	8001244 <__ledf2+0x58>
 80012a2:	459a      	cmp	sl, r3
 80012a4:	d1c5      	bne.n	8001232 <__ledf2+0x46>
 80012a6:	42a5      	cmp	r5, r4
 80012a8:	dcc3      	bgt.n	8001232 <__ledf2+0x46>
 80012aa:	e7e0      	b.n	800126e <__ledf2+0x82>
 80012ac:	45c8      	cmp	r8, r9
 80012ae:	d8c0      	bhi.n	8001232 <__ledf2+0x46>
 80012b0:	2000      	movs	r0, #0
 80012b2:	45c8      	cmp	r8, r9
 80012b4:	d3e3      	bcc.n	800127e <__ledf2+0x92>
 80012b6:	e7ed      	b.n	8001294 <__ledf2+0xa8>
 80012b8:	000007ff 	.word	0x000007ff

080012bc <__aeabi_dmul>:
 80012bc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80012be:	4657      	mov	r7, sl
 80012c0:	46de      	mov	lr, fp
 80012c2:	464e      	mov	r6, r9
 80012c4:	4645      	mov	r5, r8
 80012c6:	b5e0      	push	{r5, r6, r7, lr}
 80012c8:	4683      	mov	fp, r0
 80012ca:	0006      	movs	r6, r0
 80012cc:	030f      	lsls	r7, r1, #12
 80012ce:	0048      	lsls	r0, r1, #1
 80012d0:	b087      	sub	sp, #28
 80012d2:	4692      	mov	sl, r2
 80012d4:	001d      	movs	r5, r3
 80012d6:	0b3f      	lsrs	r7, r7, #12
 80012d8:	0d40      	lsrs	r0, r0, #21
 80012da:	0fcc      	lsrs	r4, r1, #31
 80012dc:	2800      	cmp	r0, #0
 80012de:	d100      	bne.n	80012e2 <__aeabi_dmul+0x26>
 80012e0:	e06f      	b.n	80013c2 <__aeabi_dmul+0x106>
 80012e2:	4bde      	ldr	r3, [pc, #888]	; (800165c <__aeabi_dmul+0x3a0>)
 80012e4:	4298      	cmp	r0, r3
 80012e6:	d038      	beq.n	800135a <__aeabi_dmul+0x9e>
 80012e8:	2380      	movs	r3, #128	; 0x80
 80012ea:	00ff      	lsls	r7, r7, #3
 80012ec:	041b      	lsls	r3, r3, #16
 80012ee:	431f      	orrs	r7, r3
 80012f0:	0f73      	lsrs	r3, r6, #29
 80012f2:	433b      	orrs	r3, r7
 80012f4:	9301      	str	r3, [sp, #4]
 80012f6:	4bda      	ldr	r3, [pc, #872]	; (8001660 <__aeabi_dmul+0x3a4>)
 80012f8:	2700      	movs	r7, #0
 80012fa:	4699      	mov	r9, r3
 80012fc:	2300      	movs	r3, #0
 80012fe:	469b      	mov	fp, r3
 8001300:	00f6      	lsls	r6, r6, #3
 8001302:	4481      	add	r9, r0
 8001304:	032b      	lsls	r3, r5, #12
 8001306:	0069      	lsls	r1, r5, #1
 8001308:	0b1b      	lsrs	r3, r3, #12
 800130a:	4652      	mov	r2, sl
 800130c:	4698      	mov	r8, r3
 800130e:	0d49      	lsrs	r1, r1, #21
 8001310:	0fed      	lsrs	r5, r5, #31
 8001312:	2900      	cmp	r1, #0
 8001314:	d100      	bne.n	8001318 <__aeabi_dmul+0x5c>
 8001316:	e085      	b.n	8001424 <__aeabi_dmul+0x168>
 8001318:	4bd0      	ldr	r3, [pc, #832]	; (800165c <__aeabi_dmul+0x3a0>)
 800131a:	4299      	cmp	r1, r3
 800131c:	d100      	bne.n	8001320 <__aeabi_dmul+0x64>
 800131e:	e073      	b.n	8001408 <__aeabi_dmul+0x14c>
 8001320:	4643      	mov	r3, r8
 8001322:	00da      	lsls	r2, r3, #3
 8001324:	2380      	movs	r3, #128	; 0x80
 8001326:	041b      	lsls	r3, r3, #16
 8001328:	4313      	orrs	r3, r2
 800132a:	4652      	mov	r2, sl
 800132c:	48cc      	ldr	r0, [pc, #816]	; (8001660 <__aeabi_dmul+0x3a4>)
 800132e:	0f52      	lsrs	r2, r2, #29
 8001330:	4684      	mov	ip, r0
 8001332:	4313      	orrs	r3, r2
 8001334:	4652      	mov	r2, sl
 8001336:	2000      	movs	r0, #0
 8001338:	4461      	add	r1, ip
 800133a:	00d2      	lsls	r2, r2, #3
 800133c:	4489      	add	r9, r1
 800133e:	0021      	movs	r1, r4
 8001340:	4069      	eors	r1, r5
 8001342:	9100      	str	r1, [sp, #0]
 8001344:	468c      	mov	ip, r1
 8001346:	2101      	movs	r1, #1
 8001348:	4449      	add	r1, r9
 800134a:	468a      	mov	sl, r1
 800134c:	2f0f      	cmp	r7, #15
 800134e:	d900      	bls.n	8001352 <__aeabi_dmul+0x96>
 8001350:	e090      	b.n	8001474 <__aeabi_dmul+0x1b8>
 8001352:	49c4      	ldr	r1, [pc, #784]	; (8001664 <__aeabi_dmul+0x3a8>)
 8001354:	00bf      	lsls	r7, r7, #2
 8001356:	59cf      	ldr	r7, [r1, r7]
 8001358:	46bf      	mov	pc, r7
 800135a:	465b      	mov	r3, fp
 800135c:	433b      	orrs	r3, r7
 800135e:	9301      	str	r3, [sp, #4]
 8001360:	d000      	beq.n	8001364 <__aeabi_dmul+0xa8>
 8001362:	e16a      	b.n	800163a <__aeabi_dmul+0x37e>
 8001364:	2302      	movs	r3, #2
 8001366:	2708      	movs	r7, #8
 8001368:	2600      	movs	r6, #0
 800136a:	4681      	mov	r9, r0
 800136c:	469b      	mov	fp, r3
 800136e:	e7c9      	b.n	8001304 <__aeabi_dmul+0x48>
 8001370:	0032      	movs	r2, r6
 8001372:	4658      	mov	r0, fp
 8001374:	9b01      	ldr	r3, [sp, #4]
 8001376:	4661      	mov	r1, ip
 8001378:	9100      	str	r1, [sp, #0]
 800137a:	2802      	cmp	r0, #2
 800137c:	d100      	bne.n	8001380 <__aeabi_dmul+0xc4>
 800137e:	e075      	b.n	800146c <__aeabi_dmul+0x1b0>
 8001380:	2803      	cmp	r0, #3
 8001382:	d100      	bne.n	8001386 <__aeabi_dmul+0xca>
 8001384:	e1fe      	b.n	8001784 <__aeabi_dmul+0x4c8>
 8001386:	2801      	cmp	r0, #1
 8001388:	d000      	beq.n	800138c <__aeabi_dmul+0xd0>
 800138a:	e12c      	b.n	80015e6 <__aeabi_dmul+0x32a>
 800138c:	2300      	movs	r3, #0
 800138e:	2700      	movs	r7, #0
 8001390:	2600      	movs	r6, #0
 8001392:	2500      	movs	r5, #0
 8001394:	033f      	lsls	r7, r7, #12
 8001396:	0d2a      	lsrs	r2, r5, #20
 8001398:	0b3f      	lsrs	r7, r7, #12
 800139a:	48b3      	ldr	r0, [pc, #716]	; (8001668 <__aeabi_dmul+0x3ac>)
 800139c:	0512      	lsls	r2, r2, #20
 800139e:	433a      	orrs	r2, r7
 80013a0:	4002      	ands	r2, r0
 80013a2:	051b      	lsls	r3, r3, #20
 80013a4:	4313      	orrs	r3, r2
 80013a6:	9a00      	ldr	r2, [sp, #0]
 80013a8:	005b      	lsls	r3, r3, #1
 80013aa:	07d1      	lsls	r1, r2, #31
 80013ac:	085b      	lsrs	r3, r3, #1
 80013ae:	430b      	orrs	r3, r1
 80013b0:	0030      	movs	r0, r6
 80013b2:	0019      	movs	r1, r3
 80013b4:	b007      	add	sp, #28
 80013b6:	bc3c      	pop	{r2, r3, r4, r5}
 80013b8:	4690      	mov	r8, r2
 80013ba:	4699      	mov	r9, r3
 80013bc:	46a2      	mov	sl, r4
 80013be:	46ab      	mov	fp, r5
 80013c0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80013c2:	465b      	mov	r3, fp
 80013c4:	433b      	orrs	r3, r7
 80013c6:	9301      	str	r3, [sp, #4]
 80013c8:	d100      	bne.n	80013cc <__aeabi_dmul+0x110>
 80013ca:	e12f      	b.n	800162c <__aeabi_dmul+0x370>
 80013cc:	2f00      	cmp	r7, #0
 80013ce:	d100      	bne.n	80013d2 <__aeabi_dmul+0x116>
 80013d0:	e1a5      	b.n	800171e <__aeabi_dmul+0x462>
 80013d2:	0038      	movs	r0, r7
 80013d4:	f000 fd9c 	bl	8001f10 <__clzsi2>
 80013d8:	0003      	movs	r3, r0
 80013da:	3b0b      	subs	r3, #11
 80013dc:	2b1c      	cmp	r3, #28
 80013de:	dd00      	ble.n	80013e2 <__aeabi_dmul+0x126>
 80013e0:	e196      	b.n	8001710 <__aeabi_dmul+0x454>
 80013e2:	221d      	movs	r2, #29
 80013e4:	1ad3      	subs	r3, r2, r3
 80013e6:	465a      	mov	r2, fp
 80013e8:	0001      	movs	r1, r0
 80013ea:	40da      	lsrs	r2, r3
 80013ec:	465e      	mov	r6, fp
 80013ee:	3908      	subs	r1, #8
 80013f0:	408f      	lsls	r7, r1
 80013f2:	0013      	movs	r3, r2
 80013f4:	408e      	lsls	r6, r1
 80013f6:	433b      	orrs	r3, r7
 80013f8:	9301      	str	r3, [sp, #4]
 80013fa:	4b9c      	ldr	r3, [pc, #624]	; (800166c <__aeabi_dmul+0x3b0>)
 80013fc:	2700      	movs	r7, #0
 80013fe:	1a1b      	subs	r3, r3, r0
 8001400:	4699      	mov	r9, r3
 8001402:	2300      	movs	r3, #0
 8001404:	469b      	mov	fp, r3
 8001406:	e77d      	b.n	8001304 <__aeabi_dmul+0x48>
 8001408:	4641      	mov	r1, r8
 800140a:	4653      	mov	r3, sl
 800140c:	430b      	orrs	r3, r1
 800140e:	4993      	ldr	r1, [pc, #588]	; (800165c <__aeabi_dmul+0x3a0>)
 8001410:	468c      	mov	ip, r1
 8001412:	44e1      	add	r9, ip
 8001414:	2b00      	cmp	r3, #0
 8001416:	d000      	beq.n	800141a <__aeabi_dmul+0x15e>
 8001418:	e11a      	b.n	8001650 <__aeabi_dmul+0x394>
 800141a:	2202      	movs	r2, #2
 800141c:	2002      	movs	r0, #2
 800141e:	4317      	orrs	r7, r2
 8001420:	2200      	movs	r2, #0
 8001422:	e78c      	b.n	800133e <__aeabi_dmul+0x82>
 8001424:	4313      	orrs	r3, r2
 8001426:	d100      	bne.n	800142a <__aeabi_dmul+0x16e>
 8001428:	e10d      	b.n	8001646 <__aeabi_dmul+0x38a>
 800142a:	4643      	mov	r3, r8
 800142c:	2b00      	cmp	r3, #0
 800142e:	d100      	bne.n	8001432 <__aeabi_dmul+0x176>
 8001430:	e181      	b.n	8001736 <__aeabi_dmul+0x47a>
 8001432:	4640      	mov	r0, r8
 8001434:	f000 fd6c 	bl	8001f10 <__clzsi2>
 8001438:	0002      	movs	r2, r0
 800143a:	3a0b      	subs	r2, #11
 800143c:	2a1c      	cmp	r2, #28
 800143e:	dd00      	ble.n	8001442 <__aeabi_dmul+0x186>
 8001440:	e172      	b.n	8001728 <__aeabi_dmul+0x46c>
 8001442:	0001      	movs	r1, r0
 8001444:	4643      	mov	r3, r8
 8001446:	3908      	subs	r1, #8
 8001448:	408b      	lsls	r3, r1
 800144a:	4698      	mov	r8, r3
 800144c:	231d      	movs	r3, #29
 800144e:	1a9a      	subs	r2, r3, r2
 8001450:	4653      	mov	r3, sl
 8001452:	40d3      	lsrs	r3, r2
 8001454:	001a      	movs	r2, r3
 8001456:	4643      	mov	r3, r8
 8001458:	4313      	orrs	r3, r2
 800145a:	4652      	mov	r2, sl
 800145c:	408a      	lsls	r2, r1
 800145e:	4649      	mov	r1, r9
 8001460:	1a08      	subs	r0, r1, r0
 8001462:	4982      	ldr	r1, [pc, #520]	; (800166c <__aeabi_dmul+0x3b0>)
 8001464:	4689      	mov	r9, r1
 8001466:	4481      	add	r9, r0
 8001468:	2000      	movs	r0, #0
 800146a:	e768      	b.n	800133e <__aeabi_dmul+0x82>
 800146c:	4b7b      	ldr	r3, [pc, #492]	; (800165c <__aeabi_dmul+0x3a0>)
 800146e:	2700      	movs	r7, #0
 8001470:	2600      	movs	r6, #0
 8001472:	e78e      	b.n	8001392 <__aeabi_dmul+0xd6>
 8001474:	0c14      	lsrs	r4, r2, #16
 8001476:	0412      	lsls	r2, r2, #16
 8001478:	0c12      	lsrs	r2, r2, #16
 800147a:	0011      	movs	r1, r2
 800147c:	0c37      	lsrs	r7, r6, #16
 800147e:	0436      	lsls	r6, r6, #16
 8001480:	0c35      	lsrs	r5, r6, #16
 8001482:	4379      	muls	r1, r7
 8001484:	0028      	movs	r0, r5
 8001486:	468c      	mov	ip, r1
 8001488:	002e      	movs	r6, r5
 800148a:	4360      	muls	r0, r4
 800148c:	4460      	add	r0, ip
 800148e:	4683      	mov	fp, r0
 8001490:	4356      	muls	r6, r2
 8001492:	0021      	movs	r1, r4
 8001494:	0c30      	lsrs	r0, r6, #16
 8001496:	4680      	mov	r8, r0
 8001498:	4658      	mov	r0, fp
 800149a:	4379      	muls	r1, r7
 800149c:	4440      	add	r0, r8
 800149e:	9102      	str	r1, [sp, #8]
 80014a0:	4584      	cmp	ip, r0
 80014a2:	d906      	bls.n	80014b2 <__aeabi_dmul+0x1f6>
 80014a4:	4688      	mov	r8, r1
 80014a6:	2180      	movs	r1, #128	; 0x80
 80014a8:	0249      	lsls	r1, r1, #9
 80014aa:	468c      	mov	ip, r1
 80014ac:	44e0      	add	r8, ip
 80014ae:	4641      	mov	r1, r8
 80014b0:	9102      	str	r1, [sp, #8]
 80014b2:	0436      	lsls	r6, r6, #16
 80014b4:	0c01      	lsrs	r1, r0, #16
 80014b6:	0c36      	lsrs	r6, r6, #16
 80014b8:	0400      	lsls	r0, r0, #16
 80014ba:	468b      	mov	fp, r1
 80014bc:	1981      	adds	r1, r0, r6
 80014be:	0c1e      	lsrs	r6, r3, #16
 80014c0:	041b      	lsls	r3, r3, #16
 80014c2:	0c1b      	lsrs	r3, r3, #16
 80014c4:	9103      	str	r1, [sp, #12]
 80014c6:	0019      	movs	r1, r3
 80014c8:	4379      	muls	r1, r7
 80014ca:	468c      	mov	ip, r1
 80014cc:	0028      	movs	r0, r5
 80014ce:	4375      	muls	r5, r6
 80014d0:	4465      	add	r5, ip
 80014d2:	46a8      	mov	r8, r5
 80014d4:	4358      	muls	r0, r3
 80014d6:	0c05      	lsrs	r5, r0, #16
 80014d8:	4445      	add	r5, r8
 80014da:	4377      	muls	r7, r6
 80014dc:	42a9      	cmp	r1, r5
 80014de:	d903      	bls.n	80014e8 <__aeabi_dmul+0x22c>
 80014e0:	2180      	movs	r1, #128	; 0x80
 80014e2:	0249      	lsls	r1, r1, #9
 80014e4:	468c      	mov	ip, r1
 80014e6:	4467      	add	r7, ip
 80014e8:	0c29      	lsrs	r1, r5, #16
 80014ea:	468c      	mov	ip, r1
 80014ec:	0039      	movs	r1, r7
 80014ee:	0400      	lsls	r0, r0, #16
 80014f0:	0c00      	lsrs	r0, r0, #16
 80014f2:	042d      	lsls	r5, r5, #16
 80014f4:	182d      	adds	r5, r5, r0
 80014f6:	4461      	add	r1, ip
 80014f8:	44ab      	add	fp, r5
 80014fa:	9105      	str	r1, [sp, #20]
 80014fc:	4659      	mov	r1, fp
 80014fe:	9104      	str	r1, [sp, #16]
 8001500:	9901      	ldr	r1, [sp, #4]
 8001502:	040f      	lsls	r7, r1, #16
 8001504:	0c3f      	lsrs	r7, r7, #16
 8001506:	0c08      	lsrs	r0, r1, #16
 8001508:	0039      	movs	r1, r7
 800150a:	4351      	muls	r1, r2
 800150c:	4342      	muls	r2, r0
 800150e:	4690      	mov	r8, r2
 8001510:	0002      	movs	r2, r0
 8001512:	468c      	mov	ip, r1
 8001514:	0c09      	lsrs	r1, r1, #16
 8001516:	468b      	mov	fp, r1
 8001518:	4362      	muls	r2, r4
 800151a:	437c      	muls	r4, r7
 800151c:	4444      	add	r4, r8
 800151e:	445c      	add	r4, fp
 8001520:	45a0      	cmp	r8, r4
 8001522:	d903      	bls.n	800152c <__aeabi_dmul+0x270>
 8001524:	2180      	movs	r1, #128	; 0x80
 8001526:	0249      	lsls	r1, r1, #9
 8001528:	4688      	mov	r8, r1
 800152a:	4442      	add	r2, r8
 800152c:	0c21      	lsrs	r1, r4, #16
 800152e:	4688      	mov	r8, r1
 8001530:	4661      	mov	r1, ip
 8001532:	0409      	lsls	r1, r1, #16
 8001534:	0c09      	lsrs	r1, r1, #16
 8001536:	468c      	mov	ip, r1
 8001538:	0039      	movs	r1, r7
 800153a:	4359      	muls	r1, r3
 800153c:	4343      	muls	r3, r0
 800153e:	4370      	muls	r0, r6
 8001540:	437e      	muls	r6, r7
 8001542:	0c0f      	lsrs	r7, r1, #16
 8001544:	18f6      	adds	r6, r6, r3
 8001546:	0424      	lsls	r4, r4, #16
 8001548:	19be      	adds	r6, r7, r6
 800154a:	4464      	add	r4, ip
 800154c:	4442      	add	r2, r8
 800154e:	468c      	mov	ip, r1
 8001550:	42b3      	cmp	r3, r6
 8001552:	d903      	bls.n	800155c <__aeabi_dmul+0x2a0>
 8001554:	2380      	movs	r3, #128	; 0x80
 8001556:	025b      	lsls	r3, r3, #9
 8001558:	4698      	mov	r8, r3
 800155a:	4440      	add	r0, r8
 800155c:	9b02      	ldr	r3, [sp, #8]
 800155e:	4661      	mov	r1, ip
 8001560:	4698      	mov	r8, r3
 8001562:	9b04      	ldr	r3, [sp, #16]
 8001564:	0437      	lsls	r7, r6, #16
 8001566:	4443      	add	r3, r8
 8001568:	469b      	mov	fp, r3
 800156a:	45ab      	cmp	fp, r5
 800156c:	41ad      	sbcs	r5, r5
 800156e:	426b      	negs	r3, r5
 8001570:	040d      	lsls	r5, r1, #16
 8001572:	9905      	ldr	r1, [sp, #20]
 8001574:	0c2d      	lsrs	r5, r5, #16
 8001576:	468c      	mov	ip, r1
 8001578:	197f      	adds	r7, r7, r5
 800157a:	4467      	add	r7, ip
 800157c:	18fd      	adds	r5, r7, r3
 800157e:	46a8      	mov	r8, r5
 8001580:	465d      	mov	r5, fp
 8001582:	192d      	adds	r5, r5, r4
 8001584:	42a5      	cmp	r5, r4
 8001586:	41a4      	sbcs	r4, r4
 8001588:	4693      	mov	fp, r2
 800158a:	4264      	negs	r4, r4
 800158c:	46a4      	mov	ip, r4
 800158e:	44c3      	add	fp, r8
 8001590:	44dc      	add	ip, fp
 8001592:	428f      	cmp	r7, r1
 8001594:	41bf      	sbcs	r7, r7
 8001596:	4598      	cmp	r8, r3
 8001598:	419b      	sbcs	r3, r3
 800159a:	4593      	cmp	fp, r2
 800159c:	4192      	sbcs	r2, r2
 800159e:	45a4      	cmp	ip, r4
 80015a0:	41a4      	sbcs	r4, r4
 80015a2:	425b      	negs	r3, r3
 80015a4:	427f      	negs	r7, r7
 80015a6:	431f      	orrs	r7, r3
 80015a8:	0c36      	lsrs	r6, r6, #16
 80015aa:	4252      	negs	r2, r2
 80015ac:	4264      	negs	r4, r4
 80015ae:	19bf      	adds	r7, r7, r6
 80015b0:	4322      	orrs	r2, r4
 80015b2:	18bf      	adds	r7, r7, r2
 80015b4:	4662      	mov	r2, ip
 80015b6:	1838      	adds	r0, r7, r0
 80015b8:	0243      	lsls	r3, r0, #9
 80015ba:	0dd2      	lsrs	r2, r2, #23
 80015bc:	9903      	ldr	r1, [sp, #12]
 80015be:	4313      	orrs	r3, r2
 80015c0:	026a      	lsls	r2, r5, #9
 80015c2:	430a      	orrs	r2, r1
 80015c4:	1e50      	subs	r0, r2, #1
 80015c6:	4182      	sbcs	r2, r0
 80015c8:	4661      	mov	r1, ip
 80015ca:	0ded      	lsrs	r5, r5, #23
 80015cc:	432a      	orrs	r2, r5
 80015ce:	024e      	lsls	r6, r1, #9
 80015d0:	4332      	orrs	r2, r6
 80015d2:	01d9      	lsls	r1, r3, #7
 80015d4:	d400      	bmi.n	80015d8 <__aeabi_dmul+0x31c>
 80015d6:	e0b3      	b.n	8001740 <__aeabi_dmul+0x484>
 80015d8:	2601      	movs	r6, #1
 80015da:	0850      	lsrs	r0, r2, #1
 80015dc:	4032      	ands	r2, r6
 80015de:	4302      	orrs	r2, r0
 80015e0:	07de      	lsls	r6, r3, #31
 80015e2:	4332      	orrs	r2, r6
 80015e4:	085b      	lsrs	r3, r3, #1
 80015e6:	4c22      	ldr	r4, [pc, #136]	; (8001670 <__aeabi_dmul+0x3b4>)
 80015e8:	4454      	add	r4, sl
 80015ea:	2c00      	cmp	r4, #0
 80015ec:	dd62      	ble.n	80016b4 <__aeabi_dmul+0x3f8>
 80015ee:	0751      	lsls	r1, r2, #29
 80015f0:	d009      	beq.n	8001606 <__aeabi_dmul+0x34a>
 80015f2:	200f      	movs	r0, #15
 80015f4:	4010      	ands	r0, r2
 80015f6:	2804      	cmp	r0, #4
 80015f8:	d005      	beq.n	8001606 <__aeabi_dmul+0x34a>
 80015fa:	1d10      	adds	r0, r2, #4
 80015fc:	4290      	cmp	r0, r2
 80015fe:	4192      	sbcs	r2, r2
 8001600:	4252      	negs	r2, r2
 8001602:	189b      	adds	r3, r3, r2
 8001604:	0002      	movs	r2, r0
 8001606:	01d9      	lsls	r1, r3, #7
 8001608:	d504      	bpl.n	8001614 <__aeabi_dmul+0x358>
 800160a:	2480      	movs	r4, #128	; 0x80
 800160c:	4819      	ldr	r0, [pc, #100]	; (8001674 <__aeabi_dmul+0x3b8>)
 800160e:	00e4      	lsls	r4, r4, #3
 8001610:	4003      	ands	r3, r0
 8001612:	4454      	add	r4, sl
 8001614:	4818      	ldr	r0, [pc, #96]	; (8001678 <__aeabi_dmul+0x3bc>)
 8001616:	4284      	cmp	r4, r0
 8001618:	dd00      	ble.n	800161c <__aeabi_dmul+0x360>
 800161a:	e727      	b.n	800146c <__aeabi_dmul+0x1b0>
 800161c:	075e      	lsls	r6, r3, #29
 800161e:	025b      	lsls	r3, r3, #9
 8001620:	08d2      	lsrs	r2, r2, #3
 8001622:	0b1f      	lsrs	r7, r3, #12
 8001624:	0563      	lsls	r3, r4, #21
 8001626:	4316      	orrs	r6, r2
 8001628:	0d5b      	lsrs	r3, r3, #21
 800162a:	e6b2      	b.n	8001392 <__aeabi_dmul+0xd6>
 800162c:	2300      	movs	r3, #0
 800162e:	4699      	mov	r9, r3
 8001630:	3301      	adds	r3, #1
 8001632:	2704      	movs	r7, #4
 8001634:	2600      	movs	r6, #0
 8001636:	469b      	mov	fp, r3
 8001638:	e664      	b.n	8001304 <__aeabi_dmul+0x48>
 800163a:	2303      	movs	r3, #3
 800163c:	9701      	str	r7, [sp, #4]
 800163e:	4681      	mov	r9, r0
 8001640:	270c      	movs	r7, #12
 8001642:	469b      	mov	fp, r3
 8001644:	e65e      	b.n	8001304 <__aeabi_dmul+0x48>
 8001646:	2201      	movs	r2, #1
 8001648:	2001      	movs	r0, #1
 800164a:	4317      	orrs	r7, r2
 800164c:	2200      	movs	r2, #0
 800164e:	e676      	b.n	800133e <__aeabi_dmul+0x82>
 8001650:	2303      	movs	r3, #3
 8001652:	2003      	movs	r0, #3
 8001654:	431f      	orrs	r7, r3
 8001656:	4643      	mov	r3, r8
 8001658:	e671      	b.n	800133e <__aeabi_dmul+0x82>
 800165a:	46c0      	nop			; (mov r8, r8)
 800165c:	000007ff 	.word	0x000007ff
 8001660:	fffffc01 	.word	0xfffffc01
 8001664:	08007944 	.word	0x08007944
 8001668:	800fffff 	.word	0x800fffff
 800166c:	fffffc0d 	.word	0xfffffc0d
 8001670:	000003ff 	.word	0x000003ff
 8001674:	feffffff 	.word	0xfeffffff
 8001678:	000007fe 	.word	0x000007fe
 800167c:	2300      	movs	r3, #0
 800167e:	2780      	movs	r7, #128	; 0x80
 8001680:	9300      	str	r3, [sp, #0]
 8001682:	033f      	lsls	r7, r7, #12
 8001684:	2600      	movs	r6, #0
 8001686:	4b43      	ldr	r3, [pc, #268]	; (8001794 <__aeabi_dmul+0x4d8>)
 8001688:	e683      	b.n	8001392 <__aeabi_dmul+0xd6>
 800168a:	9b01      	ldr	r3, [sp, #4]
 800168c:	0032      	movs	r2, r6
 800168e:	46a4      	mov	ip, r4
 8001690:	4658      	mov	r0, fp
 8001692:	e670      	b.n	8001376 <__aeabi_dmul+0xba>
 8001694:	46ac      	mov	ip, r5
 8001696:	e66e      	b.n	8001376 <__aeabi_dmul+0xba>
 8001698:	2780      	movs	r7, #128	; 0x80
 800169a:	9901      	ldr	r1, [sp, #4]
 800169c:	033f      	lsls	r7, r7, #12
 800169e:	4239      	tst	r1, r7
 80016a0:	d02d      	beq.n	80016fe <__aeabi_dmul+0x442>
 80016a2:	423b      	tst	r3, r7
 80016a4:	d12b      	bne.n	80016fe <__aeabi_dmul+0x442>
 80016a6:	431f      	orrs	r7, r3
 80016a8:	033f      	lsls	r7, r7, #12
 80016aa:	0b3f      	lsrs	r7, r7, #12
 80016ac:	9500      	str	r5, [sp, #0]
 80016ae:	0016      	movs	r6, r2
 80016b0:	4b38      	ldr	r3, [pc, #224]	; (8001794 <__aeabi_dmul+0x4d8>)
 80016b2:	e66e      	b.n	8001392 <__aeabi_dmul+0xd6>
 80016b4:	2501      	movs	r5, #1
 80016b6:	1b2d      	subs	r5, r5, r4
 80016b8:	2d38      	cmp	r5, #56	; 0x38
 80016ba:	dd00      	ble.n	80016be <__aeabi_dmul+0x402>
 80016bc:	e666      	b.n	800138c <__aeabi_dmul+0xd0>
 80016be:	2d1f      	cmp	r5, #31
 80016c0:	dc40      	bgt.n	8001744 <__aeabi_dmul+0x488>
 80016c2:	4835      	ldr	r0, [pc, #212]	; (8001798 <__aeabi_dmul+0x4dc>)
 80016c4:	001c      	movs	r4, r3
 80016c6:	4450      	add	r0, sl
 80016c8:	0016      	movs	r6, r2
 80016ca:	4082      	lsls	r2, r0
 80016cc:	4084      	lsls	r4, r0
 80016ce:	40ee      	lsrs	r6, r5
 80016d0:	1e50      	subs	r0, r2, #1
 80016d2:	4182      	sbcs	r2, r0
 80016d4:	4334      	orrs	r4, r6
 80016d6:	4314      	orrs	r4, r2
 80016d8:	40eb      	lsrs	r3, r5
 80016da:	0762      	lsls	r2, r4, #29
 80016dc:	d009      	beq.n	80016f2 <__aeabi_dmul+0x436>
 80016de:	220f      	movs	r2, #15
 80016e0:	4022      	ands	r2, r4
 80016e2:	2a04      	cmp	r2, #4
 80016e4:	d005      	beq.n	80016f2 <__aeabi_dmul+0x436>
 80016e6:	0022      	movs	r2, r4
 80016e8:	1d14      	adds	r4, r2, #4
 80016ea:	4294      	cmp	r4, r2
 80016ec:	4180      	sbcs	r0, r0
 80016ee:	4240      	negs	r0, r0
 80016f0:	181b      	adds	r3, r3, r0
 80016f2:	021a      	lsls	r2, r3, #8
 80016f4:	d53e      	bpl.n	8001774 <__aeabi_dmul+0x4b8>
 80016f6:	2301      	movs	r3, #1
 80016f8:	2700      	movs	r7, #0
 80016fa:	2600      	movs	r6, #0
 80016fc:	e649      	b.n	8001392 <__aeabi_dmul+0xd6>
 80016fe:	2780      	movs	r7, #128	; 0x80
 8001700:	9b01      	ldr	r3, [sp, #4]
 8001702:	033f      	lsls	r7, r7, #12
 8001704:	431f      	orrs	r7, r3
 8001706:	033f      	lsls	r7, r7, #12
 8001708:	0b3f      	lsrs	r7, r7, #12
 800170a:	9400      	str	r4, [sp, #0]
 800170c:	4b21      	ldr	r3, [pc, #132]	; (8001794 <__aeabi_dmul+0x4d8>)
 800170e:	e640      	b.n	8001392 <__aeabi_dmul+0xd6>
 8001710:	0003      	movs	r3, r0
 8001712:	465a      	mov	r2, fp
 8001714:	3b28      	subs	r3, #40	; 0x28
 8001716:	409a      	lsls	r2, r3
 8001718:	2600      	movs	r6, #0
 800171a:	9201      	str	r2, [sp, #4]
 800171c:	e66d      	b.n	80013fa <__aeabi_dmul+0x13e>
 800171e:	4658      	mov	r0, fp
 8001720:	f000 fbf6 	bl	8001f10 <__clzsi2>
 8001724:	3020      	adds	r0, #32
 8001726:	e657      	b.n	80013d8 <__aeabi_dmul+0x11c>
 8001728:	0003      	movs	r3, r0
 800172a:	4652      	mov	r2, sl
 800172c:	3b28      	subs	r3, #40	; 0x28
 800172e:	409a      	lsls	r2, r3
 8001730:	0013      	movs	r3, r2
 8001732:	2200      	movs	r2, #0
 8001734:	e693      	b.n	800145e <__aeabi_dmul+0x1a2>
 8001736:	4650      	mov	r0, sl
 8001738:	f000 fbea 	bl	8001f10 <__clzsi2>
 800173c:	3020      	adds	r0, #32
 800173e:	e67b      	b.n	8001438 <__aeabi_dmul+0x17c>
 8001740:	46ca      	mov	sl, r9
 8001742:	e750      	b.n	80015e6 <__aeabi_dmul+0x32a>
 8001744:	201f      	movs	r0, #31
 8001746:	001e      	movs	r6, r3
 8001748:	4240      	negs	r0, r0
 800174a:	1b04      	subs	r4, r0, r4
 800174c:	40e6      	lsrs	r6, r4
 800174e:	2d20      	cmp	r5, #32
 8001750:	d003      	beq.n	800175a <__aeabi_dmul+0x49e>
 8001752:	4c12      	ldr	r4, [pc, #72]	; (800179c <__aeabi_dmul+0x4e0>)
 8001754:	4454      	add	r4, sl
 8001756:	40a3      	lsls	r3, r4
 8001758:	431a      	orrs	r2, r3
 800175a:	1e50      	subs	r0, r2, #1
 800175c:	4182      	sbcs	r2, r0
 800175e:	4332      	orrs	r2, r6
 8001760:	2607      	movs	r6, #7
 8001762:	2700      	movs	r7, #0
 8001764:	4016      	ands	r6, r2
 8001766:	d009      	beq.n	800177c <__aeabi_dmul+0x4c0>
 8001768:	200f      	movs	r0, #15
 800176a:	2300      	movs	r3, #0
 800176c:	4010      	ands	r0, r2
 800176e:	0014      	movs	r4, r2
 8001770:	2804      	cmp	r0, #4
 8001772:	d1b9      	bne.n	80016e8 <__aeabi_dmul+0x42c>
 8001774:	0022      	movs	r2, r4
 8001776:	075e      	lsls	r6, r3, #29
 8001778:	025b      	lsls	r3, r3, #9
 800177a:	0b1f      	lsrs	r7, r3, #12
 800177c:	08d2      	lsrs	r2, r2, #3
 800177e:	4316      	orrs	r6, r2
 8001780:	2300      	movs	r3, #0
 8001782:	e606      	b.n	8001392 <__aeabi_dmul+0xd6>
 8001784:	2780      	movs	r7, #128	; 0x80
 8001786:	033f      	lsls	r7, r7, #12
 8001788:	431f      	orrs	r7, r3
 800178a:	033f      	lsls	r7, r7, #12
 800178c:	0b3f      	lsrs	r7, r7, #12
 800178e:	0016      	movs	r6, r2
 8001790:	4b00      	ldr	r3, [pc, #0]	; (8001794 <__aeabi_dmul+0x4d8>)
 8001792:	e5fe      	b.n	8001392 <__aeabi_dmul+0xd6>
 8001794:	000007ff 	.word	0x000007ff
 8001798:	0000041e 	.word	0x0000041e
 800179c:	0000043e 	.word	0x0000043e

080017a0 <__aeabi_dsub>:
 80017a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80017a2:	4657      	mov	r7, sl
 80017a4:	464e      	mov	r6, r9
 80017a6:	4645      	mov	r5, r8
 80017a8:	46de      	mov	lr, fp
 80017aa:	000c      	movs	r4, r1
 80017ac:	0309      	lsls	r1, r1, #12
 80017ae:	b5e0      	push	{r5, r6, r7, lr}
 80017b0:	0a49      	lsrs	r1, r1, #9
 80017b2:	0f46      	lsrs	r6, r0, #29
 80017b4:	005f      	lsls	r7, r3, #1
 80017b6:	4331      	orrs	r1, r6
 80017b8:	031e      	lsls	r6, r3, #12
 80017ba:	0fdb      	lsrs	r3, r3, #31
 80017bc:	0a76      	lsrs	r6, r6, #9
 80017be:	469b      	mov	fp, r3
 80017c0:	0f53      	lsrs	r3, r2, #29
 80017c2:	4333      	orrs	r3, r6
 80017c4:	4ec8      	ldr	r6, [pc, #800]	; (8001ae8 <__aeabi_dsub+0x348>)
 80017c6:	0065      	lsls	r5, r4, #1
 80017c8:	00c0      	lsls	r0, r0, #3
 80017ca:	0fe4      	lsrs	r4, r4, #31
 80017cc:	00d2      	lsls	r2, r2, #3
 80017ce:	0d6d      	lsrs	r5, r5, #21
 80017d0:	46a2      	mov	sl, r4
 80017d2:	4681      	mov	r9, r0
 80017d4:	0d7f      	lsrs	r7, r7, #21
 80017d6:	469c      	mov	ip, r3
 80017d8:	4690      	mov	r8, r2
 80017da:	42b7      	cmp	r7, r6
 80017dc:	d100      	bne.n	80017e0 <__aeabi_dsub+0x40>
 80017de:	e0b9      	b.n	8001954 <__aeabi_dsub+0x1b4>
 80017e0:	465b      	mov	r3, fp
 80017e2:	2601      	movs	r6, #1
 80017e4:	4073      	eors	r3, r6
 80017e6:	469b      	mov	fp, r3
 80017e8:	1bee      	subs	r6, r5, r7
 80017ea:	45a3      	cmp	fp, r4
 80017ec:	d100      	bne.n	80017f0 <__aeabi_dsub+0x50>
 80017ee:	e083      	b.n	80018f8 <__aeabi_dsub+0x158>
 80017f0:	2e00      	cmp	r6, #0
 80017f2:	dd63      	ble.n	80018bc <__aeabi_dsub+0x11c>
 80017f4:	2f00      	cmp	r7, #0
 80017f6:	d000      	beq.n	80017fa <__aeabi_dsub+0x5a>
 80017f8:	e0b1      	b.n	800195e <__aeabi_dsub+0x1be>
 80017fa:	4663      	mov	r3, ip
 80017fc:	4313      	orrs	r3, r2
 80017fe:	d100      	bne.n	8001802 <__aeabi_dsub+0x62>
 8001800:	e123      	b.n	8001a4a <__aeabi_dsub+0x2aa>
 8001802:	1e73      	subs	r3, r6, #1
 8001804:	2b00      	cmp	r3, #0
 8001806:	d000      	beq.n	800180a <__aeabi_dsub+0x6a>
 8001808:	e1ba      	b.n	8001b80 <__aeabi_dsub+0x3e0>
 800180a:	1a86      	subs	r6, r0, r2
 800180c:	4663      	mov	r3, ip
 800180e:	42b0      	cmp	r0, r6
 8001810:	4180      	sbcs	r0, r0
 8001812:	2501      	movs	r5, #1
 8001814:	1ac9      	subs	r1, r1, r3
 8001816:	4240      	negs	r0, r0
 8001818:	1a09      	subs	r1, r1, r0
 800181a:	020b      	lsls	r3, r1, #8
 800181c:	d400      	bmi.n	8001820 <__aeabi_dsub+0x80>
 800181e:	e147      	b.n	8001ab0 <__aeabi_dsub+0x310>
 8001820:	0249      	lsls	r1, r1, #9
 8001822:	0a4b      	lsrs	r3, r1, #9
 8001824:	4698      	mov	r8, r3
 8001826:	4643      	mov	r3, r8
 8001828:	2b00      	cmp	r3, #0
 800182a:	d100      	bne.n	800182e <__aeabi_dsub+0x8e>
 800182c:	e189      	b.n	8001b42 <__aeabi_dsub+0x3a2>
 800182e:	4640      	mov	r0, r8
 8001830:	f000 fb6e 	bl	8001f10 <__clzsi2>
 8001834:	0003      	movs	r3, r0
 8001836:	3b08      	subs	r3, #8
 8001838:	2b1f      	cmp	r3, #31
 800183a:	dd00      	ble.n	800183e <__aeabi_dsub+0x9e>
 800183c:	e17c      	b.n	8001b38 <__aeabi_dsub+0x398>
 800183e:	2220      	movs	r2, #32
 8001840:	0030      	movs	r0, r6
 8001842:	1ad2      	subs	r2, r2, r3
 8001844:	4641      	mov	r1, r8
 8001846:	40d0      	lsrs	r0, r2
 8001848:	4099      	lsls	r1, r3
 800184a:	0002      	movs	r2, r0
 800184c:	409e      	lsls	r6, r3
 800184e:	430a      	orrs	r2, r1
 8001850:	429d      	cmp	r5, r3
 8001852:	dd00      	ble.n	8001856 <__aeabi_dsub+0xb6>
 8001854:	e16a      	b.n	8001b2c <__aeabi_dsub+0x38c>
 8001856:	1b5d      	subs	r5, r3, r5
 8001858:	1c6b      	adds	r3, r5, #1
 800185a:	2b1f      	cmp	r3, #31
 800185c:	dd00      	ble.n	8001860 <__aeabi_dsub+0xc0>
 800185e:	e194      	b.n	8001b8a <__aeabi_dsub+0x3ea>
 8001860:	2120      	movs	r1, #32
 8001862:	0010      	movs	r0, r2
 8001864:	0035      	movs	r5, r6
 8001866:	1ac9      	subs	r1, r1, r3
 8001868:	408e      	lsls	r6, r1
 800186a:	40da      	lsrs	r2, r3
 800186c:	4088      	lsls	r0, r1
 800186e:	40dd      	lsrs	r5, r3
 8001870:	1e71      	subs	r1, r6, #1
 8001872:	418e      	sbcs	r6, r1
 8001874:	0011      	movs	r1, r2
 8001876:	2207      	movs	r2, #7
 8001878:	4328      	orrs	r0, r5
 800187a:	2500      	movs	r5, #0
 800187c:	4306      	orrs	r6, r0
 800187e:	4032      	ands	r2, r6
 8001880:	2a00      	cmp	r2, #0
 8001882:	d009      	beq.n	8001898 <__aeabi_dsub+0xf8>
 8001884:	230f      	movs	r3, #15
 8001886:	4033      	ands	r3, r6
 8001888:	2b04      	cmp	r3, #4
 800188a:	d005      	beq.n	8001898 <__aeabi_dsub+0xf8>
 800188c:	1d33      	adds	r3, r6, #4
 800188e:	42b3      	cmp	r3, r6
 8001890:	41b6      	sbcs	r6, r6
 8001892:	4276      	negs	r6, r6
 8001894:	1989      	adds	r1, r1, r6
 8001896:	001e      	movs	r6, r3
 8001898:	020b      	lsls	r3, r1, #8
 800189a:	d400      	bmi.n	800189e <__aeabi_dsub+0xfe>
 800189c:	e23d      	b.n	8001d1a <__aeabi_dsub+0x57a>
 800189e:	1c6a      	adds	r2, r5, #1
 80018a0:	4b91      	ldr	r3, [pc, #580]	; (8001ae8 <__aeabi_dsub+0x348>)
 80018a2:	0555      	lsls	r5, r2, #21
 80018a4:	0d6d      	lsrs	r5, r5, #21
 80018a6:	429a      	cmp	r2, r3
 80018a8:	d100      	bne.n	80018ac <__aeabi_dsub+0x10c>
 80018aa:	e119      	b.n	8001ae0 <__aeabi_dsub+0x340>
 80018ac:	4a8f      	ldr	r2, [pc, #572]	; (8001aec <__aeabi_dsub+0x34c>)
 80018ae:	08f6      	lsrs	r6, r6, #3
 80018b0:	400a      	ands	r2, r1
 80018b2:	0757      	lsls	r7, r2, #29
 80018b4:	0252      	lsls	r2, r2, #9
 80018b6:	4337      	orrs	r7, r6
 80018b8:	0b12      	lsrs	r2, r2, #12
 80018ba:	e09b      	b.n	80019f4 <__aeabi_dsub+0x254>
 80018bc:	2e00      	cmp	r6, #0
 80018be:	d000      	beq.n	80018c2 <__aeabi_dsub+0x122>
 80018c0:	e0c5      	b.n	8001a4e <__aeabi_dsub+0x2ae>
 80018c2:	1c6e      	adds	r6, r5, #1
 80018c4:	0576      	lsls	r6, r6, #21
 80018c6:	0d76      	lsrs	r6, r6, #21
 80018c8:	2e01      	cmp	r6, #1
 80018ca:	dc00      	bgt.n	80018ce <__aeabi_dsub+0x12e>
 80018cc:	e148      	b.n	8001b60 <__aeabi_dsub+0x3c0>
 80018ce:	4667      	mov	r7, ip
 80018d0:	1a86      	subs	r6, r0, r2
 80018d2:	1bcb      	subs	r3, r1, r7
 80018d4:	42b0      	cmp	r0, r6
 80018d6:	41bf      	sbcs	r7, r7
 80018d8:	427f      	negs	r7, r7
 80018da:	46b8      	mov	r8, r7
 80018dc:	001f      	movs	r7, r3
 80018de:	4643      	mov	r3, r8
 80018e0:	1aff      	subs	r7, r7, r3
 80018e2:	003b      	movs	r3, r7
 80018e4:	46b8      	mov	r8, r7
 80018e6:	021b      	lsls	r3, r3, #8
 80018e8:	d500      	bpl.n	80018ec <__aeabi_dsub+0x14c>
 80018ea:	e15f      	b.n	8001bac <__aeabi_dsub+0x40c>
 80018ec:	4337      	orrs	r7, r6
 80018ee:	d19a      	bne.n	8001826 <__aeabi_dsub+0x86>
 80018f0:	2200      	movs	r2, #0
 80018f2:	2400      	movs	r4, #0
 80018f4:	2500      	movs	r5, #0
 80018f6:	e079      	b.n	80019ec <__aeabi_dsub+0x24c>
 80018f8:	2e00      	cmp	r6, #0
 80018fa:	dc00      	bgt.n	80018fe <__aeabi_dsub+0x15e>
 80018fc:	e0fa      	b.n	8001af4 <__aeabi_dsub+0x354>
 80018fe:	2f00      	cmp	r7, #0
 8001900:	d100      	bne.n	8001904 <__aeabi_dsub+0x164>
 8001902:	e08d      	b.n	8001a20 <__aeabi_dsub+0x280>
 8001904:	4b78      	ldr	r3, [pc, #480]	; (8001ae8 <__aeabi_dsub+0x348>)
 8001906:	429d      	cmp	r5, r3
 8001908:	d067      	beq.n	80019da <__aeabi_dsub+0x23a>
 800190a:	2380      	movs	r3, #128	; 0x80
 800190c:	4667      	mov	r7, ip
 800190e:	041b      	lsls	r3, r3, #16
 8001910:	431f      	orrs	r7, r3
 8001912:	46bc      	mov	ip, r7
 8001914:	2e38      	cmp	r6, #56	; 0x38
 8001916:	dc00      	bgt.n	800191a <__aeabi_dsub+0x17a>
 8001918:	e152      	b.n	8001bc0 <__aeabi_dsub+0x420>
 800191a:	4663      	mov	r3, ip
 800191c:	4313      	orrs	r3, r2
 800191e:	1e5a      	subs	r2, r3, #1
 8001920:	4193      	sbcs	r3, r2
 8001922:	181e      	adds	r6, r3, r0
 8001924:	4286      	cmp	r6, r0
 8001926:	4180      	sbcs	r0, r0
 8001928:	4240      	negs	r0, r0
 800192a:	1809      	adds	r1, r1, r0
 800192c:	020b      	lsls	r3, r1, #8
 800192e:	d400      	bmi.n	8001932 <__aeabi_dsub+0x192>
 8001930:	e0be      	b.n	8001ab0 <__aeabi_dsub+0x310>
 8001932:	4b6d      	ldr	r3, [pc, #436]	; (8001ae8 <__aeabi_dsub+0x348>)
 8001934:	3501      	adds	r5, #1
 8001936:	429d      	cmp	r5, r3
 8001938:	d100      	bne.n	800193c <__aeabi_dsub+0x19c>
 800193a:	e0d2      	b.n	8001ae2 <__aeabi_dsub+0x342>
 800193c:	4a6b      	ldr	r2, [pc, #428]	; (8001aec <__aeabi_dsub+0x34c>)
 800193e:	0873      	lsrs	r3, r6, #1
 8001940:	400a      	ands	r2, r1
 8001942:	2101      	movs	r1, #1
 8001944:	400e      	ands	r6, r1
 8001946:	431e      	orrs	r6, r3
 8001948:	0851      	lsrs	r1, r2, #1
 800194a:	07d3      	lsls	r3, r2, #31
 800194c:	2207      	movs	r2, #7
 800194e:	431e      	orrs	r6, r3
 8001950:	4032      	ands	r2, r6
 8001952:	e795      	b.n	8001880 <__aeabi_dsub+0xe0>
 8001954:	001e      	movs	r6, r3
 8001956:	4316      	orrs	r6, r2
 8001958:	d000      	beq.n	800195c <__aeabi_dsub+0x1bc>
 800195a:	e745      	b.n	80017e8 <__aeabi_dsub+0x48>
 800195c:	e740      	b.n	80017e0 <__aeabi_dsub+0x40>
 800195e:	4b62      	ldr	r3, [pc, #392]	; (8001ae8 <__aeabi_dsub+0x348>)
 8001960:	429d      	cmp	r5, r3
 8001962:	d03a      	beq.n	80019da <__aeabi_dsub+0x23a>
 8001964:	2380      	movs	r3, #128	; 0x80
 8001966:	4667      	mov	r7, ip
 8001968:	041b      	lsls	r3, r3, #16
 800196a:	431f      	orrs	r7, r3
 800196c:	46bc      	mov	ip, r7
 800196e:	2e38      	cmp	r6, #56	; 0x38
 8001970:	dd00      	ble.n	8001974 <__aeabi_dsub+0x1d4>
 8001972:	e0eb      	b.n	8001b4c <__aeabi_dsub+0x3ac>
 8001974:	2e1f      	cmp	r6, #31
 8001976:	dc00      	bgt.n	800197a <__aeabi_dsub+0x1da>
 8001978:	e13a      	b.n	8001bf0 <__aeabi_dsub+0x450>
 800197a:	0033      	movs	r3, r6
 800197c:	4667      	mov	r7, ip
 800197e:	3b20      	subs	r3, #32
 8001980:	40df      	lsrs	r7, r3
 8001982:	003b      	movs	r3, r7
 8001984:	2e20      	cmp	r6, #32
 8001986:	d005      	beq.n	8001994 <__aeabi_dsub+0x1f4>
 8001988:	2740      	movs	r7, #64	; 0x40
 800198a:	1bbf      	subs	r7, r7, r6
 800198c:	4666      	mov	r6, ip
 800198e:	40be      	lsls	r6, r7
 8001990:	4332      	orrs	r2, r6
 8001992:	4690      	mov	r8, r2
 8001994:	4646      	mov	r6, r8
 8001996:	1e72      	subs	r2, r6, #1
 8001998:	4196      	sbcs	r6, r2
 800199a:	4333      	orrs	r3, r6
 800199c:	e0da      	b.n	8001b54 <__aeabi_dsub+0x3b4>
 800199e:	2b00      	cmp	r3, #0
 80019a0:	d100      	bne.n	80019a4 <__aeabi_dsub+0x204>
 80019a2:	e214      	b.n	8001dce <__aeabi_dsub+0x62e>
 80019a4:	4663      	mov	r3, ip
 80019a6:	4313      	orrs	r3, r2
 80019a8:	d100      	bne.n	80019ac <__aeabi_dsub+0x20c>
 80019aa:	e168      	b.n	8001c7e <__aeabi_dsub+0x4de>
 80019ac:	2380      	movs	r3, #128	; 0x80
 80019ae:	074e      	lsls	r6, r1, #29
 80019b0:	08c0      	lsrs	r0, r0, #3
 80019b2:	08c9      	lsrs	r1, r1, #3
 80019b4:	031b      	lsls	r3, r3, #12
 80019b6:	4306      	orrs	r6, r0
 80019b8:	4219      	tst	r1, r3
 80019ba:	d008      	beq.n	80019ce <__aeabi_dsub+0x22e>
 80019bc:	4660      	mov	r0, ip
 80019be:	08c0      	lsrs	r0, r0, #3
 80019c0:	4218      	tst	r0, r3
 80019c2:	d104      	bne.n	80019ce <__aeabi_dsub+0x22e>
 80019c4:	4663      	mov	r3, ip
 80019c6:	0001      	movs	r1, r0
 80019c8:	08d2      	lsrs	r2, r2, #3
 80019ca:	075e      	lsls	r6, r3, #29
 80019cc:	4316      	orrs	r6, r2
 80019ce:	00f3      	lsls	r3, r6, #3
 80019d0:	4699      	mov	r9, r3
 80019d2:	00c9      	lsls	r1, r1, #3
 80019d4:	0f72      	lsrs	r2, r6, #29
 80019d6:	4d44      	ldr	r5, [pc, #272]	; (8001ae8 <__aeabi_dsub+0x348>)
 80019d8:	4311      	orrs	r1, r2
 80019da:	464b      	mov	r3, r9
 80019dc:	08de      	lsrs	r6, r3, #3
 80019de:	4b42      	ldr	r3, [pc, #264]	; (8001ae8 <__aeabi_dsub+0x348>)
 80019e0:	074f      	lsls	r7, r1, #29
 80019e2:	4337      	orrs	r7, r6
 80019e4:	08ca      	lsrs	r2, r1, #3
 80019e6:	429d      	cmp	r5, r3
 80019e8:	d100      	bne.n	80019ec <__aeabi_dsub+0x24c>
 80019ea:	e06e      	b.n	8001aca <__aeabi_dsub+0x32a>
 80019ec:	0312      	lsls	r2, r2, #12
 80019ee:	056d      	lsls	r5, r5, #21
 80019f0:	0b12      	lsrs	r2, r2, #12
 80019f2:	0d6d      	lsrs	r5, r5, #21
 80019f4:	2100      	movs	r1, #0
 80019f6:	0312      	lsls	r2, r2, #12
 80019f8:	0b13      	lsrs	r3, r2, #12
 80019fa:	0d0a      	lsrs	r2, r1, #20
 80019fc:	0512      	lsls	r2, r2, #20
 80019fe:	431a      	orrs	r2, r3
 8001a00:	4b3b      	ldr	r3, [pc, #236]	; (8001af0 <__aeabi_dsub+0x350>)
 8001a02:	052d      	lsls	r5, r5, #20
 8001a04:	4013      	ands	r3, r2
 8001a06:	432b      	orrs	r3, r5
 8001a08:	005b      	lsls	r3, r3, #1
 8001a0a:	07e4      	lsls	r4, r4, #31
 8001a0c:	085b      	lsrs	r3, r3, #1
 8001a0e:	4323      	orrs	r3, r4
 8001a10:	0038      	movs	r0, r7
 8001a12:	0019      	movs	r1, r3
 8001a14:	bc3c      	pop	{r2, r3, r4, r5}
 8001a16:	4690      	mov	r8, r2
 8001a18:	4699      	mov	r9, r3
 8001a1a:	46a2      	mov	sl, r4
 8001a1c:	46ab      	mov	fp, r5
 8001a1e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001a20:	4663      	mov	r3, ip
 8001a22:	4313      	orrs	r3, r2
 8001a24:	d011      	beq.n	8001a4a <__aeabi_dsub+0x2aa>
 8001a26:	1e73      	subs	r3, r6, #1
 8001a28:	2b00      	cmp	r3, #0
 8001a2a:	d000      	beq.n	8001a2e <__aeabi_dsub+0x28e>
 8001a2c:	e107      	b.n	8001c3e <__aeabi_dsub+0x49e>
 8001a2e:	1886      	adds	r6, r0, r2
 8001a30:	4286      	cmp	r6, r0
 8001a32:	4180      	sbcs	r0, r0
 8001a34:	4461      	add	r1, ip
 8001a36:	4240      	negs	r0, r0
 8001a38:	1809      	adds	r1, r1, r0
 8001a3a:	2501      	movs	r5, #1
 8001a3c:	020b      	lsls	r3, r1, #8
 8001a3e:	d537      	bpl.n	8001ab0 <__aeabi_dsub+0x310>
 8001a40:	2502      	movs	r5, #2
 8001a42:	e77b      	b.n	800193c <__aeabi_dsub+0x19c>
 8001a44:	003e      	movs	r6, r7
 8001a46:	4661      	mov	r1, ip
 8001a48:	4691      	mov	r9, r2
 8001a4a:	0035      	movs	r5, r6
 8001a4c:	e7c5      	b.n	80019da <__aeabi_dsub+0x23a>
 8001a4e:	465c      	mov	r4, fp
 8001a50:	2d00      	cmp	r5, #0
 8001a52:	d000      	beq.n	8001a56 <__aeabi_dsub+0x2b6>
 8001a54:	e0e1      	b.n	8001c1a <__aeabi_dsub+0x47a>
 8001a56:	000b      	movs	r3, r1
 8001a58:	4303      	orrs	r3, r0
 8001a5a:	d0f3      	beq.n	8001a44 <__aeabi_dsub+0x2a4>
 8001a5c:	1c73      	adds	r3, r6, #1
 8001a5e:	d100      	bne.n	8001a62 <__aeabi_dsub+0x2c2>
 8001a60:	e1ac      	b.n	8001dbc <__aeabi_dsub+0x61c>
 8001a62:	4b21      	ldr	r3, [pc, #132]	; (8001ae8 <__aeabi_dsub+0x348>)
 8001a64:	429f      	cmp	r7, r3
 8001a66:	d100      	bne.n	8001a6a <__aeabi_dsub+0x2ca>
 8001a68:	e13a      	b.n	8001ce0 <__aeabi_dsub+0x540>
 8001a6a:	43f3      	mvns	r3, r6
 8001a6c:	2b38      	cmp	r3, #56	; 0x38
 8001a6e:	dd00      	ble.n	8001a72 <__aeabi_dsub+0x2d2>
 8001a70:	e16f      	b.n	8001d52 <__aeabi_dsub+0x5b2>
 8001a72:	2b1f      	cmp	r3, #31
 8001a74:	dd00      	ble.n	8001a78 <__aeabi_dsub+0x2d8>
 8001a76:	e18c      	b.n	8001d92 <__aeabi_dsub+0x5f2>
 8001a78:	2520      	movs	r5, #32
 8001a7a:	000e      	movs	r6, r1
 8001a7c:	1aed      	subs	r5, r5, r3
 8001a7e:	40ae      	lsls	r6, r5
 8001a80:	46b0      	mov	r8, r6
 8001a82:	0006      	movs	r6, r0
 8001a84:	46aa      	mov	sl, r5
 8001a86:	40de      	lsrs	r6, r3
 8001a88:	4645      	mov	r5, r8
 8001a8a:	4335      	orrs	r5, r6
 8001a8c:	002e      	movs	r6, r5
 8001a8e:	4655      	mov	r5, sl
 8001a90:	40d9      	lsrs	r1, r3
 8001a92:	40a8      	lsls	r0, r5
 8001a94:	4663      	mov	r3, ip
 8001a96:	1e45      	subs	r5, r0, #1
 8001a98:	41a8      	sbcs	r0, r5
 8001a9a:	1a5b      	subs	r3, r3, r1
 8001a9c:	469c      	mov	ip, r3
 8001a9e:	4330      	orrs	r0, r6
 8001aa0:	1a16      	subs	r6, r2, r0
 8001aa2:	42b2      	cmp	r2, r6
 8001aa4:	4192      	sbcs	r2, r2
 8001aa6:	4663      	mov	r3, ip
 8001aa8:	4252      	negs	r2, r2
 8001aaa:	1a99      	subs	r1, r3, r2
 8001aac:	003d      	movs	r5, r7
 8001aae:	e6b4      	b.n	800181a <__aeabi_dsub+0x7a>
 8001ab0:	2207      	movs	r2, #7
 8001ab2:	4032      	ands	r2, r6
 8001ab4:	2a00      	cmp	r2, #0
 8001ab6:	d000      	beq.n	8001aba <__aeabi_dsub+0x31a>
 8001ab8:	e6e4      	b.n	8001884 <__aeabi_dsub+0xe4>
 8001aba:	4b0b      	ldr	r3, [pc, #44]	; (8001ae8 <__aeabi_dsub+0x348>)
 8001abc:	08f6      	lsrs	r6, r6, #3
 8001abe:	074f      	lsls	r7, r1, #29
 8001ac0:	4337      	orrs	r7, r6
 8001ac2:	08ca      	lsrs	r2, r1, #3
 8001ac4:	429d      	cmp	r5, r3
 8001ac6:	d000      	beq.n	8001aca <__aeabi_dsub+0x32a>
 8001ac8:	e790      	b.n	80019ec <__aeabi_dsub+0x24c>
 8001aca:	003b      	movs	r3, r7
 8001acc:	4313      	orrs	r3, r2
 8001ace:	d100      	bne.n	8001ad2 <__aeabi_dsub+0x332>
 8001ad0:	e1a6      	b.n	8001e20 <__aeabi_dsub+0x680>
 8001ad2:	2380      	movs	r3, #128	; 0x80
 8001ad4:	031b      	lsls	r3, r3, #12
 8001ad6:	431a      	orrs	r2, r3
 8001ad8:	0312      	lsls	r2, r2, #12
 8001ada:	0b12      	lsrs	r2, r2, #12
 8001adc:	4d02      	ldr	r5, [pc, #8]	; (8001ae8 <__aeabi_dsub+0x348>)
 8001ade:	e789      	b.n	80019f4 <__aeabi_dsub+0x254>
 8001ae0:	0015      	movs	r5, r2
 8001ae2:	2200      	movs	r2, #0
 8001ae4:	2700      	movs	r7, #0
 8001ae6:	e785      	b.n	80019f4 <__aeabi_dsub+0x254>
 8001ae8:	000007ff 	.word	0x000007ff
 8001aec:	ff7fffff 	.word	0xff7fffff
 8001af0:	800fffff 	.word	0x800fffff
 8001af4:	2e00      	cmp	r6, #0
 8001af6:	d000      	beq.n	8001afa <__aeabi_dsub+0x35a>
 8001af8:	e0c7      	b.n	8001c8a <__aeabi_dsub+0x4ea>
 8001afa:	1c6b      	adds	r3, r5, #1
 8001afc:	055e      	lsls	r6, r3, #21
 8001afe:	0d76      	lsrs	r6, r6, #21
 8001b00:	2e01      	cmp	r6, #1
 8001b02:	dc00      	bgt.n	8001b06 <__aeabi_dsub+0x366>
 8001b04:	e0f0      	b.n	8001ce8 <__aeabi_dsub+0x548>
 8001b06:	4dc8      	ldr	r5, [pc, #800]	; (8001e28 <__aeabi_dsub+0x688>)
 8001b08:	42ab      	cmp	r3, r5
 8001b0a:	d100      	bne.n	8001b0e <__aeabi_dsub+0x36e>
 8001b0c:	e0b9      	b.n	8001c82 <__aeabi_dsub+0x4e2>
 8001b0e:	1885      	adds	r5, r0, r2
 8001b10:	000a      	movs	r2, r1
 8001b12:	4285      	cmp	r5, r0
 8001b14:	4189      	sbcs	r1, r1
 8001b16:	4462      	add	r2, ip
 8001b18:	4249      	negs	r1, r1
 8001b1a:	1851      	adds	r1, r2, r1
 8001b1c:	2207      	movs	r2, #7
 8001b1e:	07ce      	lsls	r6, r1, #31
 8001b20:	086d      	lsrs	r5, r5, #1
 8001b22:	432e      	orrs	r6, r5
 8001b24:	0849      	lsrs	r1, r1, #1
 8001b26:	4032      	ands	r2, r6
 8001b28:	001d      	movs	r5, r3
 8001b2a:	e6a9      	b.n	8001880 <__aeabi_dsub+0xe0>
 8001b2c:	49bf      	ldr	r1, [pc, #764]	; (8001e2c <__aeabi_dsub+0x68c>)
 8001b2e:	1aed      	subs	r5, r5, r3
 8001b30:	4011      	ands	r1, r2
 8001b32:	2207      	movs	r2, #7
 8001b34:	4032      	ands	r2, r6
 8001b36:	e6a3      	b.n	8001880 <__aeabi_dsub+0xe0>
 8001b38:	0032      	movs	r2, r6
 8001b3a:	3828      	subs	r0, #40	; 0x28
 8001b3c:	4082      	lsls	r2, r0
 8001b3e:	2600      	movs	r6, #0
 8001b40:	e686      	b.n	8001850 <__aeabi_dsub+0xb0>
 8001b42:	0030      	movs	r0, r6
 8001b44:	f000 f9e4 	bl	8001f10 <__clzsi2>
 8001b48:	3020      	adds	r0, #32
 8001b4a:	e673      	b.n	8001834 <__aeabi_dsub+0x94>
 8001b4c:	4663      	mov	r3, ip
 8001b4e:	4313      	orrs	r3, r2
 8001b50:	1e5a      	subs	r2, r3, #1
 8001b52:	4193      	sbcs	r3, r2
 8001b54:	1ac6      	subs	r6, r0, r3
 8001b56:	42b0      	cmp	r0, r6
 8001b58:	4180      	sbcs	r0, r0
 8001b5a:	4240      	negs	r0, r0
 8001b5c:	1a09      	subs	r1, r1, r0
 8001b5e:	e65c      	b.n	800181a <__aeabi_dsub+0x7a>
 8001b60:	000e      	movs	r6, r1
 8001b62:	4667      	mov	r7, ip
 8001b64:	4306      	orrs	r6, r0
 8001b66:	4317      	orrs	r7, r2
 8001b68:	2d00      	cmp	r5, #0
 8001b6a:	d15e      	bne.n	8001c2a <__aeabi_dsub+0x48a>
 8001b6c:	2e00      	cmp	r6, #0
 8001b6e:	d000      	beq.n	8001b72 <__aeabi_dsub+0x3d2>
 8001b70:	e0f3      	b.n	8001d5a <__aeabi_dsub+0x5ba>
 8001b72:	2f00      	cmp	r7, #0
 8001b74:	d100      	bne.n	8001b78 <__aeabi_dsub+0x3d8>
 8001b76:	e11e      	b.n	8001db6 <__aeabi_dsub+0x616>
 8001b78:	465c      	mov	r4, fp
 8001b7a:	4661      	mov	r1, ip
 8001b7c:	4691      	mov	r9, r2
 8001b7e:	e72c      	b.n	80019da <__aeabi_dsub+0x23a>
 8001b80:	4fa9      	ldr	r7, [pc, #676]	; (8001e28 <__aeabi_dsub+0x688>)
 8001b82:	42be      	cmp	r6, r7
 8001b84:	d07b      	beq.n	8001c7e <__aeabi_dsub+0x4de>
 8001b86:	001e      	movs	r6, r3
 8001b88:	e6f1      	b.n	800196e <__aeabi_dsub+0x1ce>
 8001b8a:	0010      	movs	r0, r2
 8001b8c:	3d1f      	subs	r5, #31
 8001b8e:	40e8      	lsrs	r0, r5
 8001b90:	2b20      	cmp	r3, #32
 8001b92:	d003      	beq.n	8001b9c <__aeabi_dsub+0x3fc>
 8001b94:	2140      	movs	r1, #64	; 0x40
 8001b96:	1acb      	subs	r3, r1, r3
 8001b98:	409a      	lsls	r2, r3
 8001b9a:	4316      	orrs	r6, r2
 8001b9c:	1e73      	subs	r3, r6, #1
 8001b9e:	419e      	sbcs	r6, r3
 8001ba0:	2207      	movs	r2, #7
 8001ba2:	4306      	orrs	r6, r0
 8001ba4:	4032      	ands	r2, r6
 8001ba6:	2100      	movs	r1, #0
 8001ba8:	2500      	movs	r5, #0
 8001baa:	e783      	b.n	8001ab4 <__aeabi_dsub+0x314>
 8001bac:	1a16      	subs	r6, r2, r0
 8001bae:	4663      	mov	r3, ip
 8001bb0:	42b2      	cmp	r2, r6
 8001bb2:	4180      	sbcs	r0, r0
 8001bb4:	1a59      	subs	r1, r3, r1
 8001bb6:	4240      	negs	r0, r0
 8001bb8:	1a0b      	subs	r3, r1, r0
 8001bba:	4698      	mov	r8, r3
 8001bbc:	465c      	mov	r4, fp
 8001bbe:	e632      	b.n	8001826 <__aeabi_dsub+0x86>
 8001bc0:	2e1f      	cmp	r6, #31
 8001bc2:	dd00      	ble.n	8001bc6 <__aeabi_dsub+0x426>
 8001bc4:	e0ab      	b.n	8001d1e <__aeabi_dsub+0x57e>
 8001bc6:	2720      	movs	r7, #32
 8001bc8:	1bbb      	subs	r3, r7, r6
 8001bca:	469a      	mov	sl, r3
 8001bcc:	4663      	mov	r3, ip
 8001bce:	4657      	mov	r7, sl
 8001bd0:	40bb      	lsls	r3, r7
 8001bd2:	4699      	mov	r9, r3
 8001bd4:	0013      	movs	r3, r2
 8001bd6:	464f      	mov	r7, r9
 8001bd8:	40f3      	lsrs	r3, r6
 8001bda:	431f      	orrs	r7, r3
 8001bdc:	003b      	movs	r3, r7
 8001bde:	4657      	mov	r7, sl
 8001be0:	40ba      	lsls	r2, r7
 8001be2:	1e57      	subs	r7, r2, #1
 8001be4:	41ba      	sbcs	r2, r7
 8001be6:	4313      	orrs	r3, r2
 8001be8:	4662      	mov	r2, ip
 8001bea:	40f2      	lsrs	r2, r6
 8001bec:	1889      	adds	r1, r1, r2
 8001bee:	e698      	b.n	8001922 <__aeabi_dsub+0x182>
 8001bf0:	2720      	movs	r7, #32
 8001bf2:	1bbb      	subs	r3, r7, r6
 8001bf4:	469a      	mov	sl, r3
 8001bf6:	4663      	mov	r3, ip
 8001bf8:	4657      	mov	r7, sl
 8001bfa:	40bb      	lsls	r3, r7
 8001bfc:	4699      	mov	r9, r3
 8001bfe:	0013      	movs	r3, r2
 8001c00:	464f      	mov	r7, r9
 8001c02:	40f3      	lsrs	r3, r6
 8001c04:	431f      	orrs	r7, r3
 8001c06:	003b      	movs	r3, r7
 8001c08:	4657      	mov	r7, sl
 8001c0a:	40ba      	lsls	r2, r7
 8001c0c:	1e57      	subs	r7, r2, #1
 8001c0e:	41ba      	sbcs	r2, r7
 8001c10:	4313      	orrs	r3, r2
 8001c12:	4662      	mov	r2, ip
 8001c14:	40f2      	lsrs	r2, r6
 8001c16:	1a89      	subs	r1, r1, r2
 8001c18:	e79c      	b.n	8001b54 <__aeabi_dsub+0x3b4>
 8001c1a:	4b83      	ldr	r3, [pc, #524]	; (8001e28 <__aeabi_dsub+0x688>)
 8001c1c:	429f      	cmp	r7, r3
 8001c1e:	d05f      	beq.n	8001ce0 <__aeabi_dsub+0x540>
 8001c20:	2580      	movs	r5, #128	; 0x80
 8001c22:	042d      	lsls	r5, r5, #16
 8001c24:	4273      	negs	r3, r6
 8001c26:	4329      	orrs	r1, r5
 8001c28:	e720      	b.n	8001a6c <__aeabi_dsub+0x2cc>
 8001c2a:	2e00      	cmp	r6, #0
 8001c2c:	d10c      	bne.n	8001c48 <__aeabi_dsub+0x4a8>
 8001c2e:	2f00      	cmp	r7, #0
 8001c30:	d100      	bne.n	8001c34 <__aeabi_dsub+0x494>
 8001c32:	e0d0      	b.n	8001dd6 <__aeabi_dsub+0x636>
 8001c34:	465c      	mov	r4, fp
 8001c36:	4661      	mov	r1, ip
 8001c38:	4691      	mov	r9, r2
 8001c3a:	4d7b      	ldr	r5, [pc, #492]	; (8001e28 <__aeabi_dsub+0x688>)
 8001c3c:	e6cd      	b.n	80019da <__aeabi_dsub+0x23a>
 8001c3e:	4f7a      	ldr	r7, [pc, #488]	; (8001e28 <__aeabi_dsub+0x688>)
 8001c40:	42be      	cmp	r6, r7
 8001c42:	d01c      	beq.n	8001c7e <__aeabi_dsub+0x4de>
 8001c44:	001e      	movs	r6, r3
 8001c46:	e665      	b.n	8001914 <__aeabi_dsub+0x174>
 8001c48:	2f00      	cmp	r7, #0
 8001c4a:	d018      	beq.n	8001c7e <__aeabi_dsub+0x4de>
 8001c4c:	08c0      	lsrs	r0, r0, #3
 8001c4e:	074e      	lsls	r6, r1, #29
 8001c50:	4306      	orrs	r6, r0
 8001c52:	2080      	movs	r0, #128	; 0x80
 8001c54:	08c9      	lsrs	r1, r1, #3
 8001c56:	0300      	lsls	r0, r0, #12
 8001c58:	4201      	tst	r1, r0
 8001c5a:	d008      	beq.n	8001c6e <__aeabi_dsub+0x4ce>
 8001c5c:	4663      	mov	r3, ip
 8001c5e:	08dc      	lsrs	r4, r3, #3
 8001c60:	4204      	tst	r4, r0
 8001c62:	d104      	bne.n	8001c6e <__aeabi_dsub+0x4ce>
 8001c64:	0021      	movs	r1, r4
 8001c66:	46da      	mov	sl, fp
 8001c68:	08d2      	lsrs	r2, r2, #3
 8001c6a:	075e      	lsls	r6, r3, #29
 8001c6c:	4316      	orrs	r6, r2
 8001c6e:	00f3      	lsls	r3, r6, #3
 8001c70:	4699      	mov	r9, r3
 8001c72:	2401      	movs	r4, #1
 8001c74:	4653      	mov	r3, sl
 8001c76:	00c9      	lsls	r1, r1, #3
 8001c78:	0f72      	lsrs	r2, r6, #29
 8001c7a:	4311      	orrs	r1, r2
 8001c7c:	401c      	ands	r4, r3
 8001c7e:	4d6a      	ldr	r5, [pc, #424]	; (8001e28 <__aeabi_dsub+0x688>)
 8001c80:	e6ab      	b.n	80019da <__aeabi_dsub+0x23a>
 8001c82:	001d      	movs	r5, r3
 8001c84:	2200      	movs	r2, #0
 8001c86:	2700      	movs	r7, #0
 8001c88:	e6b4      	b.n	80019f4 <__aeabi_dsub+0x254>
 8001c8a:	2d00      	cmp	r5, #0
 8001c8c:	d159      	bne.n	8001d42 <__aeabi_dsub+0x5a2>
 8001c8e:	000b      	movs	r3, r1
 8001c90:	4303      	orrs	r3, r0
 8001c92:	d100      	bne.n	8001c96 <__aeabi_dsub+0x4f6>
 8001c94:	e6d6      	b.n	8001a44 <__aeabi_dsub+0x2a4>
 8001c96:	1c73      	adds	r3, r6, #1
 8001c98:	d100      	bne.n	8001c9c <__aeabi_dsub+0x4fc>
 8001c9a:	e0b2      	b.n	8001e02 <__aeabi_dsub+0x662>
 8001c9c:	4b62      	ldr	r3, [pc, #392]	; (8001e28 <__aeabi_dsub+0x688>)
 8001c9e:	429f      	cmp	r7, r3
 8001ca0:	d01e      	beq.n	8001ce0 <__aeabi_dsub+0x540>
 8001ca2:	43f3      	mvns	r3, r6
 8001ca4:	2b38      	cmp	r3, #56	; 0x38
 8001ca6:	dc6f      	bgt.n	8001d88 <__aeabi_dsub+0x5e8>
 8001ca8:	2b1f      	cmp	r3, #31
 8001caa:	dd00      	ble.n	8001cae <__aeabi_dsub+0x50e>
 8001cac:	e097      	b.n	8001dde <__aeabi_dsub+0x63e>
 8001cae:	2520      	movs	r5, #32
 8001cb0:	000e      	movs	r6, r1
 8001cb2:	1aed      	subs	r5, r5, r3
 8001cb4:	40ae      	lsls	r6, r5
 8001cb6:	46b0      	mov	r8, r6
 8001cb8:	0006      	movs	r6, r0
 8001cba:	46aa      	mov	sl, r5
 8001cbc:	40de      	lsrs	r6, r3
 8001cbe:	4645      	mov	r5, r8
 8001cc0:	4335      	orrs	r5, r6
 8001cc2:	002e      	movs	r6, r5
 8001cc4:	4655      	mov	r5, sl
 8001cc6:	40a8      	lsls	r0, r5
 8001cc8:	40d9      	lsrs	r1, r3
 8001cca:	1e45      	subs	r5, r0, #1
 8001ccc:	41a8      	sbcs	r0, r5
 8001cce:	448c      	add	ip, r1
 8001cd0:	4306      	orrs	r6, r0
 8001cd2:	18b6      	adds	r6, r6, r2
 8001cd4:	4296      	cmp	r6, r2
 8001cd6:	4192      	sbcs	r2, r2
 8001cd8:	4251      	negs	r1, r2
 8001cda:	4461      	add	r1, ip
 8001cdc:	003d      	movs	r5, r7
 8001cde:	e625      	b.n	800192c <__aeabi_dsub+0x18c>
 8001ce0:	003d      	movs	r5, r7
 8001ce2:	4661      	mov	r1, ip
 8001ce4:	4691      	mov	r9, r2
 8001ce6:	e678      	b.n	80019da <__aeabi_dsub+0x23a>
 8001ce8:	000b      	movs	r3, r1
 8001cea:	4303      	orrs	r3, r0
 8001cec:	2d00      	cmp	r5, #0
 8001cee:	d000      	beq.n	8001cf2 <__aeabi_dsub+0x552>
 8001cf0:	e655      	b.n	800199e <__aeabi_dsub+0x1fe>
 8001cf2:	2b00      	cmp	r3, #0
 8001cf4:	d0f5      	beq.n	8001ce2 <__aeabi_dsub+0x542>
 8001cf6:	4663      	mov	r3, ip
 8001cf8:	4313      	orrs	r3, r2
 8001cfa:	d100      	bne.n	8001cfe <__aeabi_dsub+0x55e>
 8001cfc:	e66d      	b.n	80019da <__aeabi_dsub+0x23a>
 8001cfe:	1886      	adds	r6, r0, r2
 8001d00:	4286      	cmp	r6, r0
 8001d02:	4180      	sbcs	r0, r0
 8001d04:	4461      	add	r1, ip
 8001d06:	4240      	negs	r0, r0
 8001d08:	1809      	adds	r1, r1, r0
 8001d0a:	2200      	movs	r2, #0
 8001d0c:	020b      	lsls	r3, r1, #8
 8001d0e:	d400      	bmi.n	8001d12 <__aeabi_dsub+0x572>
 8001d10:	e6d0      	b.n	8001ab4 <__aeabi_dsub+0x314>
 8001d12:	4b46      	ldr	r3, [pc, #280]	; (8001e2c <__aeabi_dsub+0x68c>)
 8001d14:	3501      	adds	r5, #1
 8001d16:	4019      	ands	r1, r3
 8001d18:	e5b2      	b.n	8001880 <__aeabi_dsub+0xe0>
 8001d1a:	46b1      	mov	r9, r6
 8001d1c:	e65d      	b.n	80019da <__aeabi_dsub+0x23a>
 8001d1e:	0033      	movs	r3, r6
 8001d20:	4667      	mov	r7, ip
 8001d22:	3b20      	subs	r3, #32
 8001d24:	40df      	lsrs	r7, r3
 8001d26:	003b      	movs	r3, r7
 8001d28:	2e20      	cmp	r6, #32
 8001d2a:	d005      	beq.n	8001d38 <__aeabi_dsub+0x598>
 8001d2c:	2740      	movs	r7, #64	; 0x40
 8001d2e:	1bbf      	subs	r7, r7, r6
 8001d30:	4666      	mov	r6, ip
 8001d32:	40be      	lsls	r6, r7
 8001d34:	4332      	orrs	r2, r6
 8001d36:	4690      	mov	r8, r2
 8001d38:	4646      	mov	r6, r8
 8001d3a:	1e72      	subs	r2, r6, #1
 8001d3c:	4196      	sbcs	r6, r2
 8001d3e:	4333      	orrs	r3, r6
 8001d40:	e5ef      	b.n	8001922 <__aeabi_dsub+0x182>
 8001d42:	4b39      	ldr	r3, [pc, #228]	; (8001e28 <__aeabi_dsub+0x688>)
 8001d44:	429f      	cmp	r7, r3
 8001d46:	d0cb      	beq.n	8001ce0 <__aeabi_dsub+0x540>
 8001d48:	2580      	movs	r5, #128	; 0x80
 8001d4a:	042d      	lsls	r5, r5, #16
 8001d4c:	4273      	negs	r3, r6
 8001d4e:	4329      	orrs	r1, r5
 8001d50:	e7a8      	b.n	8001ca4 <__aeabi_dsub+0x504>
 8001d52:	4308      	orrs	r0, r1
 8001d54:	1e41      	subs	r1, r0, #1
 8001d56:	4188      	sbcs	r0, r1
 8001d58:	e6a2      	b.n	8001aa0 <__aeabi_dsub+0x300>
 8001d5a:	2f00      	cmp	r7, #0
 8001d5c:	d100      	bne.n	8001d60 <__aeabi_dsub+0x5c0>
 8001d5e:	e63c      	b.n	80019da <__aeabi_dsub+0x23a>
 8001d60:	4663      	mov	r3, ip
 8001d62:	1a86      	subs	r6, r0, r2
 8001d64:	1acf      	subs	r7, r1, r3
 8001d66:	42b0      	cmp	r0, r6
 8001d68:	419b      	sbcs	r3, r3
 8001d6a:	425b      	negs	r3, r3
 8001d6c:	1afb      	subs	r3, r7, r3
 8001d6e:	4698      	mov	r8, r3
 8001d70:	021b      	lsls	r3, r3, #8
 8001d72:	d54e      	bpl.n	8001e12 <__aeabi_dsub+0x672>
 8001d74:	1a16      	subs	r6, r2, r0
 8001d76:	4663      	mov	r3, ip
 8001d78:	42b2      	cmp	r2, r6
 8001d7a:	4192      	sbcs	r2, r2
 8001d7c:	1a59      	subs	r1, r3, r1
 8001d7e:	4252      	negs	r2, r2
 8001d80:	1a89      	subs	r1, r1, r2
 8001d82:	465c      	mov	r4, fp
 8001d84:	2200      	movs	r2, #0
 8001d86:	e57b      	b.n	8001880 <__aeabi_dsub+0xe0>
 8001d88:	4301      	orrs	r1, r0
 8001d8a:	000e      	movs	r6, r1
 8001d8c:	1e71      	subs	r1, r6, #1
 8001d8e:	418e      	sbcs	r6, r1
 8001d90:	e79f      	b.n	8001cd2 <__aeabi_dsub+0x532>
 8001d92:	001d      	movs	r5, r3
 8001d94:	000e      	movs	r6, r1
 8001d96:	3d20      	subs	r5, #32
 8001d98:	40ee      	lsrs	r6, r5
 8001d9a:	46b0      	mov	r8, r6
 8001d9c:	2b20      	cmp	r3, #32
 8001d9e:	d004      	beq.n	8001daa <__aeabi_dsub+0x60a>
 8001da0:	2540      	movs	r5, #64	; 0x40
 8001da2:	1aeb      	subs	r3, r5, r3
 8001da4:	4099      	lsls	r1, r3
 8001da6:	4308      	orrs	r0, r1
 8001da8:	4681      	mov	r9, r0
 8001daa:	4648      	mov	r0, r9
 8001dac:	4643      	mov	r3, r8
 8001dae:	1e41      	subs	r1, r0, #1
 8001db0:	4188      	sbcs	r0, r1
 8001db2:	4318      	orrs	r0, r3
 8001db4:	e674      	b.n	8001aa0 <__aeabi_dsub+0x300>
 8001db6:	2200      	movs	r2, #0
 8001db8:	2400      	movs	r4, #0
 8001dba:	e617      	b.n	80019ec <__aeabi_dsub+0x24c>
 8001dbc:	1a16      	subs	r6, r2, r0
 8001dbe:	4663      	mov	r3, ip
 8001dc0:	42b2      	cmp	r2, r6
 8001dc2:	4192      	sbcs	r2, r2
 8001dc4:	1a59      	subs	r1, r3, r1
 8001dc6:	4252      	negs	r2, r2
 8001dc8:	1a89      	subs	r1, r1, r2
 8001dca:	003d      	movs	r5, r7
 8001dcc:	e525      	b.n	800181a <__aeabi_dsub+0x7a>
 8001dce:	4661      	mov	r1, ip
 8001dd0:	4691      	mov	r9, r2
 8001dd2:	4d15      	ldr	r5, [pc, #84]	; (8001e28 <__aeabi_dsub+0x688>)
 8001dd4:	e601      	b.n	80019da <__aeabi_dsub+0x23a>
 8001dd6:	2280      	movs	r2, #128	; 0x80
 8001dd8:	2400      	movs	r4, #0
 8001dda:	0312      	lsls	r2, r2, #12
 8001ddc:	e679      	b.n	8001ad2 <__aeabi_dsub+0x332>
 8001dde:	001d      	movs	r5, r3
 8001de0:	000e      	movs	r6, r1
 8001de2:	3d20      	subs	r5, #32
 8001de4:	40ee      	lsrs	r6, r5
 8001de6:	46b0      	mov	r8, r6
 8001de8:	2b20      	cmp	r3, #32
 8001dea:	d004      	beq.n	8001df6 <__aeabi_dsub+0x656>
 8001dec:	2540      	movs	r5, #64	; 0x40
 8001dee:	1aeb      	subs	r3, r5, r3
 8001df0:	4099      	lsls	r1, r3
 8001df2:	4308      	orrs	r0, r1
 8001df4:	4681      	mov	r9, r0
 8001df6:	464e      	mov	r6, r9
 8001df8:	4643      	mov	r3, r8
 8001dfa:	1e71      	subs	r1, r6, #1
 8001dfc:	418e      	sbcs	r6, r1
 8001dfe:	431e      	orrs	r6, r3
 8001e00:	e767      	b.n	8001cd2 <__aeabi_dsub+0x532>
 8001e02:	1886      	adds	r6, r0, r2
 8001e04:	4296      	cmp	r6, r2
 8001e06:	419b      	sbcs	r3, r3
 8001e08:	4461      	add	r1, ip
 8001e0a:	425b      	negs	r3, r3
 8001e0c:	18c9      	adds	r1, r1, r3
 8001e0e:	003d      	movs	r5, r7
 8001e10:	e58c      	b.n	800192c <__aeabi_dsub+0x18c>
 8001e12:	4647      	mov	r7, r8
 8001e14:	4337      	orrs	r7, r6
 8001e16:	d0ce      	beq.n	8001db6 <__aeabi_dsub+0x616>
 8001e18:	2207      	movs	r2, #7
 8001e1a:	4641      	mov	r1, r8
 8001e1c:	4032      	ands	r2, r6
 8001e1e:	e649      	b.n	8001ab4 <__aeabi_dsub+0x314>
 8001e20:	2700      	movs	r7, #0
 8001e22:	003a      	movs	r2, r7
 8001e24:	e5e6      	b.n	80019f4 <__aeabi_dsub+0x254>
 8001e26:	46c0      	nop			; (mov r8, r8)
 8001e28:	000007ff 	.word	0x000007ff
 8001e2c:	ff7fffff 	.word	0xff7fffff

08001e30 <__aeabi_d2iz>:
 8001e30:	b530      	push	{r4, r5, lr}
 8001e32:	4d14      	ldr	r5, [pc, #80]	; (8001e84 <__aeabi_d2iz+0x54>)
 8001e34:	030a      	lsls	r2, r1, #12
 8001e36:	004b      	lsls	r3, r1, #1
 8001e38:	0b12      	lsrs	r2, r2, #12
 8001e3a:	0d5b      	lsrs	r3, r3, #21
 8001e3c:	0fc9      	lsrs	r1, r1, #31
 8001e3e:	2400      	movs	r4, #0
 8001e40:	42ab      	cmp	r3, r5
 8001e42:	dd11      	ble.n	8001e68 <__aeabi_d2iz+0x38>
 8001e44:	4c10      	ldr	r4, [pc, #64]	; (8001e88 <__aeabi_d2iz+0x58>)
 8001e46:	42a3      	cmp	r3, r4
 8001e48:	dc10      	bgt.n	8001e6c <__aeabi_d2iz+0x3c>
 8001e4a:	2480      	movs	r4, #128	; 0x80
 8001e4c:	0364      	lsls	r4, r4, #13
 8001e4e:	4322      	orrs	r2, r4
 8001e50:	4c0e      	ldr	r4, [pc, #56]	; (8001e8c <__aeabi_d2iz+0x5c>)
 8001e52:	1ae4      	subs	r4, r4, r3
 8001e54:	2c1f      	cmp	r4, #31
 8001e56:	dd0c      	ble.n	8001e72 <__aeabi_d2iz+0x42>
 8001e58:	480d      	ldr	r0, [pc, #52]	; (8001e90 <__aeabi_d2iz+0x60>)
 8001e5a:	1ac3      	subs	r3, r0, r3
 8001e5c:	40da      	lsrs	r2, r3
 8001e5e:	0013      	movs	r3, r2
 8001e60:	425c      	negs	r4, r3
 8001e62:	2900      	cmp	r1, #0
 8001e64:	d100      	bne.n	8001e68 <__aeabi_d2iz+0x38>
 8001e66:	001c      	movs	r4, r3
 8001e68:	0020      	movs	r0, r4
 8001e6a:	bd30      	pop	{r4, r5, pc}
 8001e6c:	4b09      	ldr	r3, [pc, #36]	; (8001e94 <__aeabi_d2iz+0x64>)
 8001e6e:	18cc      	adds	r4, r1, r3
 8001e70:	e7fa      	b.n	8001e68 <__aeabi_d2iz+0x38>
 8001e72:	4d09      	ldr	r5, [pc, #36]	; (8001e98 <__aeabi_d2iz+0x68>)
 8001e74:	40e0      	lsrs	r0, r4
 8001e76:	46ac      	mov	ip, r5
 8001e78:	4463      	add	r3, ip
 8001e7a:	409a      	lsls	r2, r3
 8001e7c:	0013      	movs	r3, r2
 8001e7e:	4303      	orrs	r3, r0
 8001e80:	e7ee      	b.n	8001e60 <__aeabi_d2iz+0x30>
 8001e82:	46c0      	nop			; (mov r8, r8)
 8001e84:	000003fe 	.word	0x000003fe
 8001e88:	0000041d 	.word	0x0000041d
 8001e8c:	00000433 	.word	0x00000433
 8001e90:	00000413 	.word	0x00000413
 8001e94:	7fffffff 	.word	0x7fffffff
 8001e98:	fffffbed 	.word	0xfffffbed

08001e9c <__aeabi_i2d>:
 8001e9c:	b570      	push	{r4, r5, r6, lr}
 8001e9e:	2800      	cmp	r0, #0
 8001ea0:	d02d      	beq.n	8001efe <__aeabi_i2d+0x62>
 8001ea2:	17c3      	asrs	r3, r0, #31
 8001ea4:	18c5      	adds	r5, r0, r3
 8001ea6:	405d      	eors	r5, r3
 8001ea8:	0fc4      	lsrs	r4, r0, #31
 8001eaa:	0028      	movs	r0, r5
 8001eac:	f000 f830 	bl	8001f10 <__clzsi2>
 8001eb0:	4b15      	ldr	r3, [pc, #84]	; (8001f08 <__aeabi_i2d+0x6c>)
 8001eb2:	1a1b      	subs	r3, r3, r0
 8001eb4:	055b      	lsls	r3, r3, #21
 8001eb6:	0d5b      	lsrs	r3, r3, #21
 8001eb8:	280a      	cmp	r0, #10
 8001eba:	dd15      	ble.n	8001ee8 <__aeabi_i2d+0x4c>
 8001ebc:	380b      	subs	r0, #11
 8001ebe:	4085      	lsls	r5, r0
 8001ec0:	2200      	movs	r2, #0
 8001ec2:	032d      	lsls	r5, r5, #12
 8001ec4:	0b2d      	lsrs	r5, r5, #12
 8001ec6:	2100      	movs	r1, #0
 8001ec8:	0010      	movs	r0, r2
 8001eca:	032d      	lsls	r5, r5, #12
 8001ecc:	0d0a      	lsrs	r2, r1, #20
 8001ece:	0b2d      	lsrs	r5, r5, #12
 8001ed0:	0512      	lsls	r2, r2, #20
 8001ed2:	432a      	orrs	r2, r5
 8001ed4:	4d0d      	ldr	r5, [pc, #52]	; (8001f0c <__aeabi_i2d+0x70>)
 8001ed6:	051b      	lsls	r3, r3, #20
 8001ed8:	402a      	ands	r2, r5
 8001eda:	4313      	orrs	r3, r2
 8001edc:	005b      	lsls	r3, r3, #1
 8001ede:	07e4      	lsls	r4, r4, #31
 8001ee0:	085b      	lsrs	r3, r3, #1
 8001ee2:	4323      	orrs	r3, r4
 8001ee4:	0019      	movs	r1, r3
 8001ee6:	bd70      	pop	{r4, r5, r6, pc}
 8001ee8:	0002      	movs	r2, r0
 8001eea:	0029      	movs	r1, r5
 8001eec:	3215      	adds	r2, #21
 8001eee:	4091      	lsls	r1, r2
 8001ef0:	000a      	movs	r2, r1
 8001ef2:	210b      	movs	r1, #11
 8001ef4:	1a08      	subs	r0, r1, r0
 8001ef6:	40c5      	lsrs	r5, r0
 8001ef8:	032d      	lsls	r5, r5, #12
 8001efa:	0b2d      	lsrs	r5, r5, #12
 8001efc:	e7e3      	b.n	8001ec6 <__aeabi_i2d+0x2a>
 8001efe:	2400      	movs	r4, #0
 8001f00:	2300      	movs	r3, #0
 8001f02:	2500      	movs	r5, #0
 8001f04:	2200      	movs	r2, #0
 8001f06:	e7de      	b.n	8001ec6 <__aeabi_i2d+0x2a>
 8001f08:	0000041e 	.word	0x0000041e
 8001f0c:	800fffff 	.word	0x800fffff

08001f10 <__clzsi2>:
 8001f10:	211c      	movs	r1, #28
 8001f12:	2301      	movs	r3, #1
 8001f14:	041b      	lsls	r3, r3, #16
 8001f16:	4298      	cmp	r0, r3
 8001f18:	d301      	bcc.n	8001f1e <__clzsi2+0xe>
 8001f1a:	0c00      	lsrs	r0, r0, #16
 8001f1c:	3910      	subs	r1, #16
 8001f1e:	0a1b      	lsrs	r3, r3, #8
 8001f20:	4298      	cmp	r0, r3
 8001f22:	d301      	bcc.n	8001f28 <__clzsi2+0x18>
 8001f24:	0a00      	lsrs	r0, r0, #8
 8001f26:	3908      	subs	r1, #8
 8001f28:	091b      	lsrs	r3, r3, #4
 8001f2a:	4298      	cmp	r0, r3
 8001f2c:	d301      	bcc.n	8001f32 <__clzsi2+0x22>
 8001f2e:	0900      	lsrs	r0, r0, #4
 8001f30:	3904      	subs	r1, #4
 8001f32:	a202      	add	r2, pc, #8	; (adr r2, 8001f3c <__clzsi2+0x2c>)
 8001f34:	5c10      	ldrb	r0, [r2, r0]
 8001f36:	1840      	adds	r0, r0, r1
 8001f38:	4770      	bx	lr
 8001f3a:	46c0      	nop			; (mov r8, r8)
 8001f3c:	02020304 	.word	0x02020304
 8001f40:	01010101 	.word	0x01010101
	...

08001f4c <TDA7719_begin>:

uint8_t TDA7418_register_data[REG_SPK_ATT_SUBR + 1];
I2C_HandleTypeDef i2c;


int TDA7719_begin(I2C_HandleTypeDef dev) {
 8001f4c:	b084      	sub	sp, #16
 8001f4e:	b5b0      	push	{r4, r5, r7, lr}
 8001f50:	b086      	sub	sp, #24
 8001f52:	af02      	add	r7, sp, #8
 8001f54:	2520      	movs	r5, #32
 8001f56:	197c      	adds	r4, r7, r5
 8001f58:	6020      	str	r0, [r4, #0]
 8001f5a:	6061      	str	r1, [r4, #4]
 8001f5c:	60a2      	str	r2, [r4, #8]
 8001f5e:	60e3      	str	r3, [r4, #12]
	i2c = dev;
 8001f60:	4b3b      	ldr	r3, [pc, #236]	; (8002050 <TDA7719_begin+0x104>)
 8001f62:	197a      	adds	r2, r7, r5
 8001f64:	0018      	movs	r0, r3
 8001f66:	0011      	movs	r1, r2
 8001f68:	234c      	movs	r3, #76	; 0x4c
 8001f6a:	001a      	movs	r2, r3
 8001f6c:	f005 fc2e 	bl	80077cc <memcpy>
	TDA7418_register_data[REG_SOURCE_SEL ] 	= 0b11100011;
 8001f70:	4b38      	ldr	r3, [pc, #224]	; (8002054 <TDA7719_begin+0x108>)
 8001f72:	22e3      	movs	r2, #227	; 0xe3
 8001f74:	701a      	strb	r2, [r3, #0]
	TDA7418_register_data[REG_2SOURCE_SEL] 	= 0b11101111;
 8001f76:	4b37      	ldr	r3, [pc, #220]	; (8002054 <TDA7719_begin+0x108>)
 8001f78:	22ef      	movs	r2, #239	; 0xef
 8001f7a:	705a      	strb	r2, [r3, #1]
	TDA7418_register_data[REG_MIX_SOURCE ] 	= 0b11111111;
 8001f7c:	4b35      	ldr	r3, [pc, #212]	; (8002054 <TDA7719_begin+0x108>)
 8001f7e:	22ff      	movs	r2, #255	; 0xff
 8001f80:	709a      	strb	r2, [r3, #2]
	TDA7418_register_data[REG_LEVELMETER ] 	= 0b00011111;
 8001f82:	4b34      	ldr	r3, [pc, #208]	; (8002054 <TDA7719_begin+0x108>)
 8001f84:	221f      	movs	r2, #31
 8001f86:	70da      	strb	r2, [r3, #3]
	TDA7418_register_data[REG_SOFTMUTE   ] 	= 0b01010011;
 8001f88:	4b32      	ldr	r3, [pc, #200]	; (8002054 <TDA7719_begin+0x108>)
 8001f8a:	2253      	movs	r2, #83	; 0x53
 8001f8c:	711a      	strb	r2, [r3, #4]
	TDA7418_register_data[REG_SOFT_STEP1 ] 	= 0b11111111;
 8001f8e:	4b31      	ldr	r3, [pc, #196]	; (8002054 <TDA7719_begin+0x108>)
 8001f90:	22ff      	movs	r2, #255	; 0xff
 8001f92:	715a      	strb	r2, [r3, #5]
	TDA7418_register_data[REG_SOFT_STEP2 ] 	= 0b11001111;
 8001f94:	4b2f      	ldr	r3, [pc, #188]	; (8002054 <TDA7719_begin+0x108>)
 8001f96:	22cf      	movs	r2, #207	; 0xcf
 8001f98:	719a      	strb	r2, [r3, #6]

	TDA7418_register_data[REG_LOUDNESS] 	= 0b11110000;
 8001f9a:	4b2e      	ldr	r3, [pc, #184]	; (8002054 <TDA7719_begin+0x108>)
 8001f9c:	22f0      	movs	r2, #240	; 0xf0
 8001f9e:	71da      	strb	r2, [r3, #7]
	TDA7418_register_data[REG_VOLUME] 		= 0b11000000; //-15dB
 8001fa0:	4b2c      	ldr	r3, [pc, #176]	; (8002054 <TDA7719_begin+0x108>)
 8001fa2:	22c0      	movs	r2, #192	; 0xc0
 8001fa4:	721a      	strb	r2, [r3, #8]
	TDA7418_register_data[REG_TREBLE] 		= 0b10011111;
 8001fa6:	4b2b      	ldr	r3, [pc, #172]	; (8002054 <TDA7719_begin+0x108>)
 8001fa8:	229f      	movs	r2, #159	; 0x9f
 8001faa:	725a      	strb	r2, [r3, #9]
	TDA7418_register_data[REG_MIDDLE] 		= 0b11111111;
 8001fac:	4b29      	ldr	r3, [pc, #164]	; (8002054 <TDA7719_begin+0x108>)
 8001fae:	22ff      	movs	r2, #255	; 0xff
 8001fb0:	729a      	strb	r2, [r3, #10]
	TDA7418_register_data[REG_BASS] 		= 0b10011111;	// 0dB
 8001fb2:	4b28      	ldr	r3, [pc, #160]	; (8002054 <TDA7719_begin+0x108>)
 8001fb4:	229f      	movs	r2, #159	; 0x9f
 8001fb6:	72da      	strb	r2, [r3, #11]
	TDA7418_register_data[REG_MID_BAS_FC] 	= 0b11111111;
 8001fb8:	4b26      	ldr	r3, [pc, #152]	; (8002054 <TDA7719_begin+0x108>)
 8001fba:	22ff      	movs	r2, #255	; 0xff
 8001fbc:	731a      	strb	r2, [r3, #12]
	TDA7418_register_data[REG_SPK_ATT_LF] 	= 0b10000000;	// 0dB
 8001fbe:	4b25      	ldr	r3, [pc, #148]	; (8002054 <TDA7719_begin+0x108>)
 8001fc0:	2280      	movs	r2, #128	; 0x80
 8001fc2:	735a      	strb	r2, [r3, #13]
	TDA7418_register_data[REG_SPK_ATT_RF] 	= 0b10010100;	// -20dB
 8001fc4:	4b23      	ldr	r3, [pc, #140]	; (8002054 <TDA7719_begin+0x108>)
 8001fc6:	2294      	movs	r2, #148	; 0x94
 8001fc8:	739a      	strb	r2, [r3, #14]
	TDA7418_register_data[REG_SPK_ATT_LR] 	= 0b11000000;	// Mute
 8001fca:	4b22      	ldr	r3, [pc, #136]	; (8002054 <TDA7719_begin+0x108>)
 8001fcc:	22c0      	movs	r2, #192	; 0xc0
 8001fce:	73da      	strb	r2, [r3, #15]
	TDA7418_register_data[REG_SPK_ATT_RR] 	= 0b11000000;	// Mute
 8001fd0:	4b20      	ldr	r3, [pc, #128]	; (8002054 <TDA7719_begin+0x108>)
 8001fd2:	22c0      	movs	r2, #192	; 0xc0
 8001fd4:	741a      	strb	r2, [r3, #16]
	TDA7418_register_data[REG_SPK_ATT_SUBL] = 0b10010100; // 0b11000000;//	// -20dB
 8001fd6:	4b1f      	ldr	r3, [pc, #124]	; (8002054 <TDA7719_begin+0x108>)
 8001fd8:	2294      	movs	r2, #148	; 0x94
 8001fda:	745a      	strb	r2, [r3, #17]
	TDA7418_register_data[REG_SPK_ATT_SUBR] = 0b10010100;//0b11000000;	// -20dB
 8001fdc:	4b1d      	ldr	r3, [pc, #116]	; (8002054 <TDA7719_begin+0x108>)
 8001fde:	2294      	movs	r2, #148	; 0x94
 8001fe0:	749a      	strb	r2, [r3, #18]

	  char data[2] = {0,0};
 8001fe2:	1d3b      	adds	r3, r7, #4
 8001fe4:	2200      	movs	r2, #0
 8001fe6:	701a      	strb	r2, [r3, #0]
 8001fe8:	1d3b      	adds	r3, r7, #4
 8001fea:	2200      	movs	r2, #0
 8001fec:	705a      	strb	r2, [r3, #1]
	  HAL_StatusTypeDef ret;
	  for(int i = 0; i<= REG_SPK_ATT_SUBR; i++){
 8001fee:	2300      	movs	r3, #0
 8001ff0:	60bb      	str	r3, [r7, #8]
 8001ff2:	e020      	b.n	8002036 <TDA7719_begin+0xea>
		  data[0] = i;
 8001ff4:	68bb      	ldr	r3, [r7, #8]
 8001ff6:	b2da      	uxtb	r2, r3
 8001ff8:	1d3b      	adds	r3, r7, #4
 8001ffa:	701a      	strb	r2, [r3, #0]
		  data[1] = TDA7418_register_data[i];
 8001ffc:	4a15      	ldr	r2, [pc, #84]	; (8002054 <TDA7719_begin+0x108>)
 8001ffe:	68bb      	ldr	r3, [r7, #8]
 8002000:	18d3      	adds	r3, r2, r3
 8002002:	781a      	ldrb	r2, [r3, #0]
 8002004:	1d3b      	adds	r3, r7, #4
 8002006:	705a      	strb	r2, [r3, #1]
		  ret = HAL_I2C_Master_Transmit(&i2c, TDA_ADDR, &data, 2, 1000);
 8002008:	250f      	movs	r5, #15
 800200a:	197c      	adds	r4, r7, r5
 800200c:	1d3a      	adds	r2, r7, #4
 800200e:	4810      	ldr	r0, [pc, #64]	; (8002050 <TDA7719_begin+0x104>)
 8002010:	23fa      	movs	r3, #250	; 0xfa
 8002012:	009b      	lsls	r3, r3, #2
 8002014:	9300      	str	r3, [sp, #0]
 8002016:	2302      	movs	r3, #2
 8002018:	2188      	movs	r1, #136	; 0x88
 800201a:	f003 faf9 	bl	8005610 <HAL_I2C_Master_Transmit>
 800201e:	0003      	movs	r3, r0
 8002020:	7023      	strb	r3, [r4, #0]
		  if(ret != HAL_OK)
 8002022:	197b      	adds	r3, r7, r5
 8002024:	781b      	ldrb	r3, [r3, #0]
 8002026:	2b00      	cmp	r3, #0
 8002028:	d002      	beq.n	8002030 <TDA7719_begin+0xe4>
			  return -1;
 800202a:	2301      	movs	r3, #1
 800202c:	425b      	negs	r3, r3
 800202e:	e008      	b.n	8002042 <TDA7719_begin+0xf6>
	  for(int i = 0; i<= REG_SPK_ATT_SUBR; i++){
 8002030:	68bb      	ldr	r3, [r7, #8]
 8002032:	3301      	adds	r3, #1
 8002034:	60bb      	str	r3, [r7, #8]
 8002036:	68bb      	ldr	r3, [r7, #8]
 8002038:	2b12      	cmp	r3, #18
 800203a:	dddb      	ble.n	8001ff4 <TDA7719_begin+0xa8>
	  }
    return ret;
 800203c:	230f      	movs	r3, #15
 800203e:	18fb      	adds	r3, r7, r3
 8002040:	781b      	ldrb	r3, [r3, #0]
}
 8002042:	0018      	movs	r0, r3
 8002044:	46bd      	mov	sp, r7
 8002046:	b004      	add	sp, #16
 8002048:	bcb0      	pop	{r4, r5, r7}
 800204a:	bc08      	pop	{r3}
 800204c:	b004      	add	sp, #16
 800204e:	4718      	bx	r3
 8002050:	200004d0 	.word	0x200004d0
 8002054:	200004bc 	.word	0x200004bc

08002058 <TDA7719_write_register>:
	TDA7418_register_data[REG_SOURCE_SEL] &= ~MASK_INPUT;
	TDA7418_register_data[REG_SOURCE_SEL] |= _source & MASK_INPUT;
    return TDA7719_write_register(REG_SOURCE_SEL);
}

int TDA7719_write_register(char _register) {
 8002058:	b5b0      	push	{r4, r5, r7, lr}
 800205a:	b086      	sub	sp, #24
 800205c:	af02      	add	r7, sp, #8
 800205e:	0002      	movs	r2, r0
 8002060:	1dfb      	adds	r3, r7, #7
 8002062:	701a      	strb	r2, [r3, #0]

	HAL_StatusTypeDef ret;
	char data[2] = {_register, TDA7418_register_data[_register]};
 8002064:	210c      	movs	r1, #12
 8002066:	187b      	adds	r3, r7, r1
 8002068:	1dfa      	adds	r2, r7, #7
 800206a:	7812      	ldrb	r2, [r2, #0]
 800206c:	701a      	strb	r2, [r3, #0]
 800206e:	1dfb      	adds	r3, r7, #7
 8002070:	781b      	ldrb	r3, [r3, #0]
 8002072:	4a0b      	ldr	r2, [pc, #44]	; (80020a0 <TDA7719_write_register+0x48>)
 8002074:	5cd2      	ldrb	r2, [r2, r3]
 8002076:	187b      	adds	r3, r7, r1
 8002078:	705a      	strb	r2, [r3, #1]
	ret = HAL_I2C_Master_Transmit(&i2c, TDA_ADDR, &data, 2, 1000);
 800207a:	250f      	movs	r5, #15
 800207c:	197c      	adds	r4, r7, r5
 800207e:	187a      	adds	r2, r7, r1
 8002080:	4808      	ldr	r0, [pc, #32]	; (80020a4 <TDA7719_write_register+0x4c>)
 8002082:	23fa      	movs	r3, #250	; 0xfa
 8002084:	009b      	lsls	r3, r3, #2
 8002086:	9300      	str	r3, [sp, #0]
 8002088:	2302      	movs	r3, #2
 800208a:	2188      	movs	r1, #136	; 0x88
 800208c:	f003 fac0 	bl	8005610 <HAL_I2C_Master_Transmit>
 8002090:	0003      	movs	r3, r0
 8002092:	7023      	strb	r3, [r4, #0]
    return ret;
 8002094:	197b      	adds	r3, r7, r5
 8002096:	781b      	ldrb	r3, [r3, #0]
}
 8002098:	0018      	movs	r0, r3
 800209a:	46bd      	mov	sp, r7
 800209c:	b004      	add	sp, #16
 800209e:	bdb0      	pop	{r4, r5, r7, pc}
 80020a0:	200004bc 	.word	0x200004bc
 80020a4:	200004d0 	.word	0x200004d0

080020a8 <TDA7719_volume>:

int TDA7719_volume(int8_t _volume) {
 80020a8:	b580      	push	{r7, lr}
 80020aa:	b084      	sub	sp, #16
 80020ac:	af00      	add	r7, sp, #0
 80020ae:	0002      	movs	r2, r0
 80020b0:	1dfb      	adds	r3, r7, #7
 80020b2:	701a      	strb	r2, [r3, #0]
	HAL_StatusTypeDef ret;
	if((_volume < 0) || (_volume > 30))
 80020b4:	1dfb      	adds	r3, r7, #7
 80020b6:	781b      	ldrb	r3, [r3, #0]
 80020b8:	2b7f      	cmp	r3, #127	; 0x7f
 80020ba:	d804      	bhi.n	80020c6 <TDA7719_volume+0x1e>
 80020bc:	1dfb      	adds	r3, r7, #7
 80020be:	781b      	ldrb	r3, [r3, #0]
 80020c0:	b25b      	sxtb	r3, r3
 80020c2:	2b1e      	cmp	r3, #30
 80020c4:	dd02      	ble.n	80020cc <TDA7719_volume+0x24>
		return -1;
 80020c6:	2301      	movs	r3, #1
 80020c8:	425b      	negs	r3, r3
 80020ca:	e03f      	b.n	800214c <TDA7719_volume+0xa4>
	_volume -= 15;
 80020cc:	1dfb      	adds	r3, r7, #7
 80020ce:	781b      	ldrb	r3, [r3, #0]
 80020d0:	3b0f      	subs	r3, #15
 80020d2:	b2da      	uxtb	r2, r3
 80020d4:	1dfb      	adds	r3, r7, #7
 80020d6:	701a      	strb	r2, [r3, #0]
	TDA7418_register_data[REG_VOLUME] = (1 << VOLUME_OUTPUT_GAIN) | (1 << VOLUME_SOFT_STEP);
 80020d8:	4b1e      	ldr	r3, [pc, #120]	; (8002154 <TDA7719_volume+0xac>)
 80020da:	22c0      	movs	r2, #192	; 0xc0
 80020dc:	721a      	strb	r2, [r3, #8]
	if(_volume > 0 ){
 80020de:	1dfb      	adds	r3, r7, #7
 80020e0:	781b      	ldrb	r3, [r3, #0]
 80020e2:	b25b      	sxtb	r3, r3
 80020e4:	2b00      	cmp	r3, #0
 80020e6:	dd18      	ble.n	800211a <TDA7719_volume+0x72>
		TDA7418_register_data[REG_VOLUME] |= (1<<4);	// Vorzeichen Bit
 80020e8:	4b1a      	ldr	r3, [pc, #104]	; (8002154 <TDA7719_volume+0xac>)
 80020ea:	7a1b      	ldrb	r3, [r3, #8]
 80020ec:	2210      	movs	r2, #16
 80020ee:	4313      	orrs	r3, r2
 80020f0:	b2da      	uxtb	r2, r3
 80020f2:	4b18      	ldr	r3, [pc, #96]	; (8002154 <TDA7719_volume+0xac>)
 80020f4:	721a      	strb	r2, [r3, #8]
		TDA7418_register_data[REG_VOLUME] |= (0x0F & ( 15 - _volume));
 80020f6:	4b17      	ldr	r3, [pc, #92]	; (8002154 <TDA7719_volume+0xac>)
 80020f8:	7a1b      	ldrb	r3, [r3, #8]
 80020fa:	b25a      	sxtb	r2, r3
 80020fc:	1dfb      	adds	r3, r7, #7
 80020fe:	781b      	ldrb	r3, [r3, #0]
 8002100:	210f      	movs	r1, #15
 8002102:	1acb      	subs	r3, r1, r3
 8002104:	b2db      	uxtb	r3, r3
 8002106:	b25b      	sxtb	r3, r3
 8002108:	210f      	movs	r1, #15
 800210a:	400b      	ands	r3, r1
 800210c:	b25b      	sxtb	r3, r3
 800210e:	4313      	orrs	r3, r2
 8002110:	b25b      	sxtb	r3, r3
 8002112:	b2da      	uxtb	r2, r3
 8002114:	4b0f      	ldr	r3, [pc, #60]	; (8002154 <TDA7719_volume+0xac>)
 8002116:	721a      	strb	r2, [r3, #8]
 8002118:	e00f      	b.n	800213a <TDA7719_volume+0x92>
	}
	else{
		TDA7418_register_data[REG_VOLUME] |= (0x0F & ( 15 + _volume));
 800211a:	4b0e      	ldr	r3, [pc, #56]	; (8002154 <TDA7719_volume+0xac>)
 800211c:	7a1b      	ldrb	r3, [r3, #8]
 800211e:	b25a      	sxtb	r2, r3
 8002120:	1dfb      	adds	r3, r7, #7
 8002122:	781b      	ldrb	r3, [r3, #0]
 8002124:	330f      	adds	r3, #15
 8002126:	b2db      	uxtb	r3, r3
 8002128:	b25b      	sxtb	r3, r3
 800212a:	210f      	movs	r1, #15
 800212c:	400b      	ands	r3, r1
 800212e:	b25b      	sxtb	r3, r3
 8002130:	4313      	orrs	r3, r2
 8002132:	b25b      	sxtb	r3, r3
 8002134:	b2da      	uxtb	r2, r3
 8002136:	4b07      	ldr	r3, [pc, #28]	; (8002154 <TDA7719_volume+0xac>)
 8002138:	721a      	strb	r2, [r3, #8]
	}
	ret = TDA7719_write_register(REG_VOLUME);
 800213a:	2008      	movs	r0, #8
 800213c:	f7ff ff8c 	bl	8002058 <TDA7719_write_register>
 8002140:	0002      	movs	r2, r0
 8002142:	210f      	movs	r1, #15
 8002144:	187b      	adds	r3, r7, r1
 8002146:	701a      	strb	r2, [r3, #0]
	return ret;
 8002148:	187b      	adds	r3, r7, r1
 800214a:	781b      	ldrb	r3, [r3, #0]
}
 800214c:	0018      	movs	r0, r3
 800214e:	46bd      	mov	sp, r7
 8002150:	b004      	add	sp, #16
 8002152:	bd80      	pop	{r7, pc}
 8002154:	200004bc 	.word	0x200004bc

08002158 <TDA7719_bass>:

int TDA7719_bass(int8_t _volume){
 8002158:	b580      	push	{r7, lr}
 800215a:	b084      	sub	sp, #16
 800215c:	af00      	add	r7, sp, #0
 800215e:	0002      	movs	r2, r0
 8002160:	1dfb      	adds	r3, r7, #7
 8002162:	701a      	strb	r2, [r3, #0]
	HAL_StatusTypeDef ret;
	if((_volume < 0) || (_volume > 30))
 8002164:	1dfb      	adds	r3, r7, #7
 8002166:	781b      	ldrb	r3, [r3, #0]
 8002168:	2b7f      	cmp	r3, #127	; 0x7f
 800216a:	d804      	bhi.n	8002176 <TDA7719_bass+0x1e>
 800216c:	1dfb      	adds	r3, r7, #7
 800216e:	781b      	ldrb	r3, [r3, #0]
 8002170:	b25b      	sxtb	r3, r3
 8002172:	2b1e      	cmp	r3, #30
 8002174:	dd02      	ble.n	800217c <TDA7719_bass+0x24>
		return -1;
 8002176:	2301      	movs	r3, #1
 8002178:	425b      	negs	r3, r3
 800217a:	e03f      	b.n	80021fc <TDA7719_bass+0xa4>
	_volume -= 15;
 800217c:	1dfb      	adds	r3, r7, #7
 800217e:	781b      	ldrb	r3, [r3, #0]
 8002180:	3b0f      	subs	r3, #15
 8002182:	b2da      	uxtb	r2, r3
 8002184:	1dfb      	adds	r3, r7, #7
 8002186:	701a      	strb	r2, [r3, #0]
	TDA7418_register_data[REG_BASS] = (0 << BASS_Q_1) | (0 << BASS_Q_2) | (1<<BASS_SOFT_STEP);
 8002188:	4b1e      	ldr	r3, [pc, #120]	; (8002204 <TDA7719_bass+0xac>)
 800218a:	2280      	movs	r2, #128	; 0x80
 800218c:	72da      	strb	r2, [r3, #11]
	if(_volume > 0 ){
 800218e:	1dfb      	adds	r3, r7, #7
 8002190:	781b      	ldrb	r3, [r3, #0]
 8002192:	b25b      	sxtb	r3, r3
 8002194:	2b00      	cmp	r3, #0
 8002196:	dd18      	ble.n	80021ca <TDA7719_bass+0x72>
		TDA7418_register_data[REG_BASS] |= (1<<4);	// Vorzeichen Bit
 8002198:	4b1a      	ldr	r3, [pc, #104]	; (8002204 <TDA7719_bass+0xac>)
 800219a:	7adb      	ldrb	r3, [r3, #11]
 800219c:	2210      	movs	r2, #16
 800219e:	4313      	orrs	r3, r2
 80021a0:	b2da      	uxtb	r2, r3
 80021a2:	4b18      	ldr	r3, [pc, #96]	; (8002204 <TDA7719_bass+0xac>)
 80021a4:	72da      	strb	r2, [r3, #11]
		TDA7418_register_data[REG_BASS] |= (0x0F & ( 15 - _volume));
 80021a6:	4b17      	ldr	r3, [pc, #92]	; (8002204 <TDA7719_bass+0xac>)
 80021a8:	7adb      	ldrb	r3, [r3, #11]
 80021aa:	b25a      	sxtb	r2, r3
 80021ac:	1dfb      	adds	r3, r7, #7
 80021ae:	781b      	ldrb	r3, [r3, #0]
 80021b0:	210f      	movs	r1, #15
 80021b2:	1acb      	subs	r3, r1, r3
 80021b4:	b2db      	uxtb	r3, r3
 80021b6:	b25b      	sxtb	r3, r3
 80021b8:	210f      	movs	r1, #15
 80021ba:	400b      	ands	r3, r1
 80021bc:	b25b      	sxtb	r3, r3
 80021be:	4313      	orrs	r3, r2
 80021c0:	b25b      	sxtb	r3, r3
 80021c2:	b2da      	uxtb	r2, r3
 80021c4:	4b0f      	ldr	r3, [pc, #60]	; (8002204 <TDA7719_bass+0xac>)
 80021c6:	72da      	strb	r2, [r3, #11]
 80021c8:	e00f      	b.n	80021ea <TDA7719_bass+0x92>
	}
	else{
		TDA7418_register_data[REG_BASS] |= (0x0F & ( 15 + _volume));
 80021ca:	4b0e      	ldr	r3, [pc, #56]	; (8002204 <TDA7719_bass+0xac>)
 80021cc:	7adb      	ldrb	r3, [r3, #11]
 80021ce:	b25a      	sxtb	r2, r3
 80021d0:	1dfb      	adds	r3, r7, #7
 80021d2:	781b      	ldrb	r3, [r3, #0]
 80021d4:	330f      	adds	r3, #15
 80021d6:	b2db      	uxtb	r3, r3
 80021d8:	b25b      	sxtb	r3, r3
 80021da:	210f      	movs	r1, #15
 80021dc:	400b      	ands	r3, r1
 80021de:	b25b      	sxtb	r3, r3
 80021e0:	4313      	orrs	r3, r2
 80021e2:	b25b      	sxtb	r3, r3
 80021e4:	b2da      	uxtb	r2, r3
 80021e6:	4b07      	ldr	r3, [pc, #28]	; (8002204 <TDA7719_bass+0xac>)
 80021e8:	72da      	strb	r2, [r3, #11]
	}
	ret = TDA7719_write_register(REG_BASS);
 80021ea:	200b      	movs	r0, #11
 80021ec:	f7ff ff34 	bl	8002058 <TDA7719_write_register>
 80021f0:	0002      	movs	r2, r0
 80021f2:	210f      	movs	r1, #15
 80021f4:	187b      	adds	r3, r7, r1
 80021f6:	701a      	strb	r2, [r3, #0]
	return ret;
 80021f8:	187b      	adds	r3, r7, r1
 80021fa:	781b      	ldrb	r3, [r3, #0]
}
 80021fc:	0018      	movs	r0, r3
 80021fe:	46bd      	mov	sp, r7
 8002200:	b004      	add	sp, #16
 8002202:	bd80      	pop	{r7, pc}
 8002204:	200004bc 	.word	0x200004bc

08002208 <TDA7719_middle>:

int TDA7719_middle(int8_t _volume){
 8002208:	b580      	push	{r7, lr}
 800220a:	b084      	sub	sp, #16
 800220c:	af00      	add	r7, sp, #0
 800220e:	0002      	movs	r2, r0
 8002210:	1dfb      	adds	r3, r7, #7
 8002212:	701a      	strb	r2, [r3, #0]
	HAL_StatusTypeDef ret;
	if((_volume < 0) || (_volume > 30))
 8002214:	1dfb      	adds	r3, r7, #7
 8002216:	781b      	ldrb	r3, [r3, #0]
 8002218:	2b7f      	cmp	r3, #127	; 0x7f
 800221a:	d804      	bhi.n	8002226 <TDA7719_middle+0x1e>
 800221c:	1dfb      	adds	r3, r7, #7
 800221e:	781b      	ldrb	r3, [r3, #0]
 8002220:	b25b      	sxtb	r3, r3
 8002222:	2b1e      	cmp	r3, #30
 8002224:	dd02      	ble.n	800222c <TDA7719_middle+0x24>
		return -1;
 8002226:	2301      	movs	r3, #1
 8002228:	425b      	negs	r3, r3
 800222a:	e03f      	b.n	80022ac <TDA7719_middle+0xa4>
	_volume -= 15;
 800222c:	1dfb      	adds	r3, r7, #7
 800222e:	781b      	ldrb	r3, [r3, #0]
 8002230:	3b0f      	subs	r3, #15
 8002232:	b2da      	uxtb	r2, r3
 8002234:	1dfb      	adds	r3, r7, #7
 8002236:	701a      	strb	r2, [r3, #0]
	TDA7418_register_data[REG_MIDDLE] = (1 << MIDDLE_Q_1) | (1 << MIDDLE_Q_2) | (1<<MIDDLE_SOFT_STEP);
 8002238:	4b1e      	ldr	r3, [pc, #120]	; (80022b4 <TDA7719_middle+0xac>)
 800223a:	22e0      	movs	r2, #224	; 0xe0
 800223c:	729a      	strb	r2, [r3, #10]
	if(_volume > 0 ){
 800223e:	1dfb      	adds	r3, r7, #7
 8002240:	781b      	ldrb	r3, [r3, #0]
 8002242:	b25b      	sxtb	r3, r3
 8002244:	2b00      	cmp	r3, #0
 8002246:	dd18      	ble.n	800227a <TDA7719_middle+0x72>
		TDA7418_register_data[REG_MIDDLE] |= (1<<4);	// Vorzeichen Bit
 8002248:	4b1a      	ldr	r3, [pc, #104]	; (80022b4 <TDA7719_middle+0xac>)
 800224a:	7a9b      	ldrb	r3, [r3, #10]
 800224c:	2210      	movs	r2, #16
 800224e:	4313      	orrs	r3, r2
 8002250:	b2da      	uxtb	r2, r3
 8002252:	4b18      	ldr	r3, [pc, #96]	; (80022b4 <TDA7719_middle+0xac>)
 8002254:	729a      	strb	r2, [r3, #10]
		TDA7418_register_data[REG_MIDDLE] |= (0x0F & ( 15 - _volume));
 8002256:	4b17      	ldr	r3, [pc, #92]	; (80022b4 <TDA7719_middle+0xac>)
 8002258:	7a9b      	ldrb	r3, [r3, #10]
 800225a:	b25a      	sxtb	r2, r3
 800225c:	1dfb      	adds	r3, r7, #7
 800225e:	781b      	ldrb	r3, [r3, #0]
 8002260:	210f      	movs	r1, #15
 8002262:	1acb      	subs	r3, r1, r3
 8002264:	b2db      	uxtb	r3, r3
 8002266:	b25b      	sxtb	r3, r3
 8002268:	210f      	movs	r1, #15
 800226a:	400b      	ands	r3, r1
 800226c:	b25b      	sxtb	r3, r3
 800226e:	4313      	orrs	r3, r2
 8002270:	b25b      	sxtb	r3, r3
 8002272:	b2da      	uxtb	r2, r3
 8002274:	4b0f      	ldr	r3, [pc, #60]	; (80022b4 <TDA7719_middle+0xac>)
 8002276:	729a      	strb	r2, [r3, #10]
 8002278:	e00f      	b.n	800229a <TDA7719_middle+0x92>
	}
	else{
		TDA7418_register_data[REG_MIDDLE] |= (0x0F & ( 15 + _volume));
 800227a:	4b0e      	ldr	r3, [pc, #56]	; (80022b4 <TDA7719_middle+0xac>)
 800227c:	7a9b      	ldrb	r3, [r3, #10]
 800227e:	b25a      	sxtb	r2, r3
 8002280:	1dfb      	adds	r3, r7, #7
 8002282:	781b      	ldrb	r3, [r3, #0]
 8002284:	330f      	adds	r3, #15
 8002286:	b2db      	uxtb	r3, r3
 8002288:	b25b      	sxtb	r3, r3
 800228a:	210f      	movs	r1, #15
 800228c:	400b      	ands	r3, r1
 800228e:	b25b      	sxtb	r3, r3
 8002290:	4313      	orrs	r3, r2
 8002292:	b25b      	sxtb	r3, r3
 8002294:	b2da      	uxtb	r2, r3
 8002296:	4b07      	ldr	r3, [pc, #28]	; (80022b4 <TDA7719_middle+0xac>)
 8002298:	729a      	strb	r2, [r3, #10]
	}
	ret = TDA7719_write_register(REG_MIDDLE);
 800229a:	200a      	movs	r0, #10
 800229c:	f7ff fedc 	bl	8002058 <TDA7719_write_register>
 80022a0:	0002      	movs	r2, r0
 80022a2:	210f      	movs	r1, #15
 80022a4:	187b      	adds	r3, r7, r1
 80022a6:	701a      	strb	r2, [r3, #0]
	return ret;
 80022a8:	187b      	adds	r3, r7, r1
 80022aa:	781b      	ldrb	r3, [r3, #0]
}
 80022ac:	0018      	movs	r0, r3
 80022ae:	46bd      	mov	sp, r7
 80022b0:	b004      	add	sp, #16
 80022b2:	bd80      	pop	{r7, pc}
 80022b4:	200004bc 	.word	0x200004bc

080022b8 <TDA7719_treble>:

int TDA7719_treble(int8_t _volume){
 80022b8:	b580      	push	{r7, lr}
 80022ba:	b084      	sub	sp, #16
 80022bc:	af00      	add	r7, sp, #0
 80022be:	0002      	movs	r2, r0
 80022c0:	1dfb      	adds	r3, r7, #7
 80022c2:	701a      	strb	r2, [r3, #0]
	HAL_StatusTypeDef ret;
	if((_volume < 0) || (_volume > 30))
 80022c4:	1dfb      	adds	r3, r7, #7
 80022c6:	781b      	ldrb	r3, [r3, #0]
 80022c8:	2b7f      	cmp	r3, #127	; 0x7f
 80022ca:	d804      	bhi.n	80022d6 <TDA7719_treble+0x1e>
 80022cc:	1dfb      	adds	r3, r7, #7
 80022ce:	781b      	ldrb	r3, [r3, #0]
 80022d0:	b25b      	sxtb	r3, r3
 80022d2:	2b1e      	cmp	r3, #30
 80022d4:	dd02      	ble.n	80022dc <TDA7719_treble+0x24>
		return -1;
 80022d6:	2301      	movs	r3, #1
 80022d8:	425b      	negs	r3, r3
 80022da:	e03f      	b.n	800235c <TDA7719_treble+0xa4>
	_volume -= 15;
 80022dc:	1dfb      	adds	r3, r7, #7
 80022de:	781b      	ldrb	r3, [r3, #0]
 80022e0:	3b0f      	subs	r3, #15
 80022e2:	b2da      	uxtb	r2, r3
 80022e4:	1dfb      	adds	r3, r7, #7
 80022e6:	701a      	strb	r2, [r3, #0]
	TDA7418_register_data[REG_TREBLE] = (1 << TREBLE_Q_1) | (1 << TREBLE_Q_2) | (1<<TREBLE_SOFT_STEP);
 80022e8:	4b1e      	ldr	r3, [pc, #120]	; (8002364 <TDA7719_treble+0xac>)
 80022ea:	22e0      	movs	r2, #224	; 0xe0
 80022ec:	725a      	strb	r2, [r3, #9]
	if(_volume > 0 ){
 80022ee:	1dfb      	adds	r3, r7, #7
 80022f0:	781b      	ldrb	r3, [r3, #0]
 80022f2:	b25b      	sxtb	r3, r3
 80022f4:	2b00      	cmp	r3, #0
 80022f6:	dd18      	ble.n	800232a <TDA7719_treble+0x72>
		TDA7418_register_data[REG_TREBLE] |= (1<<4);	// Vorzeichen Bit
 80022f8:	4b1a      	ldr	r3, [pc, #104]	; (8002364 <TDA7719_treble+0xac>)
 80022fa:	7a5b      	ldrb	r3, [r3, #9]
 80022fc:	2210      	movs	r2, #16
 80022fe:	4313      	orrs	r3, r2
 8002300:	b2da      	uxtb	r2, r3
 8002302:	4b18      	ldr	r3, [pc, #96]	; (8002364 <TDA7719_treble+0xac>)
 8002304:	725a      	strb	r2, [r3, #9]
		TDA7418_register_data[REG_TREBLE] |= (0x0F & ( 15 - _volume));
 8002306:	4b17      	ldr	r3, [pc, #92]	; (8002364 <TDA7719_treble+0xac>)
 8002308:	7a5b      	ldrb	r3, [r3, #9]
 800230a:	b25a      	sxtb	r2, r3
 800230c:	1dfb      	adds	r3, r7, #7
 800230e:	781b      	ldrb	r3, [r3, #0]
 8002310:	210f      	movs	r1, #15
 8002312:	1acb      	subs	r3, r1, r3
 8002314:	b2db      	uxtb	r3, r3
 8002316:	b25b      	sxtb	r3, r3
 8002318:	210f      	movs	r1, #15
 800231a:	400b      	ands	r3, r1
 800231c:	b25b      	sxtb	r3, r3
 800231e:	4313      	orrs	r3, r2
 8002320:	b25b      	sxtb	r3, r3
 8002322:	b2da      	uxtb	r2, r3
 8002324:	4b0f      	ldr	r3, [pc, #60]	; (8002364 <TDA7719_treble+0xac>)
 8002326:	725a      	strb	r2, [r3, #9]
 8002328:	e00f      	b.n	800234a <TDA7719_treble+0x92>
	}
	else{
		TDA7418_register_data[REG_TREBLE] |= (0x0F & ( 15 + _volume));
 800232a:	4b0e      	ldr	r3, [pc, #56]	; (8002364 <TDA7719_treble+0xac>)
 800232c:	7a5b      	ldrb	r3, [r3, #9]
 800232e:	b25a      	sxtb	r2, r3
 8002330:	1dfb      	adds	r3, r7, #7
 8002332:	781b      	ldrb	r3, [r3, #0]
 8002334:	330f      	adds	r3, #15
 8002336:	b2db      	uxtb	r3, r3
 8002338:	b25b      	sxtb	r3, r3
 800233a:	210f      	movs	r1, #15
 800233c:	400b      	ands	r3, r1
 800233e:	b25b      	sxtb	r3, r3
 8002340:	4313      	orrs	r3, r2
 8002342:	b25b      	sxtb	r3, r3
 8002344:	b2da      	uxtb	r2, r3
 8002346:	4b07      	ldr	r3, [pc, #28]	; (8002364 <TDA7719_treble+0xac>)
 8002348:	725a      	strb	r2, [r3, #9]
	}
	ret = TDA7719_write_register(REG_TREBLE);
 800234a:	2009      	movs	r0, #9
 800234c:	f7ff fe84 	bl	8002058 <TDA7719_write_register>
 8002350:	0002      	movs	r2, r0
 8002352:	210f      	movs	r1, #15
 8002354:	187b      	adds	r3, r7, r1
 8002356:	701a      	strb	r2, [r3, #0]
	return ret;
 8002358:	187b      	adds	r3, r7, r1
 800235a:	781b      	ldrb	r3, [r3, #0]
}
 800235c:	0018      	movs	r0, r3
 800235e:	46bd      	mov	sp, r7
 8002360:	b004      	add	sp, #16
 8002362:	bd80      	pop	{r7, pc}
 8002364:	200004bc 	.word	0x200004bc

08002368 <write_screen>:

static int splash_sceen = 0;

static int write_bat = 0;

void write_screen(int bass, int middle, int treble, double battery){
 8002368:	b5f0      	push	{r4, r5, r6, r7, lr}
 800236a:	b08d      	sub	sp, #52	; 0x34
 800236c:	af02      	add	r7, sp, #8
 800236e:	60f8      	str	r0, [r7, #12]
 8002370:	60b9      	str	r1, [r7, #8]
 8002372:	607a      	str	r2, [r7, #4]

#if DISPLAY == 1
	char s[7];
	int vorkomma = 0, nachkomma = 0;
 8002374:	2300      	movs	r3, #0
 8002376:	627b      	str	r3, [r7, #36]	; 0x24
 8002378:	2300      	movs	r3, #0
 800237a:	623b      	str	r3, [r7, #32]
	ssd1306_Fill(Black);
 800237c:	2000      	movs	r0, #0
 800237e:	f001 fba5 	bl	8003acc <ssd1306_Fill>
	ssd1306_SetCursor(0, 0);
 8002382:	2100      	movs	r1, #0
 8002384:	2000      	movs	r0, #0
 8002386:	f001 fd25 	bl	8003dd4 <ssd1306_SetCursor>
	ssd1306_WriteString("GurkiBox   V03", Font_6x8, White);
 800238a:	4acc      	ldr	r2, [pc, #816]	; (80026bc <write_screen+0x354>)
 800238c:	48cc      	ldr	r0, [pc, #816]	; (80026c0 <write_screen+0x358>)
 800238e:	2301      	movs	r3, #1
 8002390:	6811      	ldr	r1, [r2, #0]
 8002392:	6852      	ldr	r2, [r2, #4]
 8002394:	f001 fcf4 	bl	8003d80 <ssd1306_WriteString>
	//bass
	if(state_3v3 == GPIO_PIN_RESET){
 8002398:	4bca      	ldr	r3, [pc, #808]	; (80026c4 <write_screen+0x35c>)
 800239a:	781b      	ldrb	r3, [r3, #0]
 800239c:	2b00      	cmp	r3, #0
 800239e:	d000      	beq.n	80023a2 <write_screen+0x3a>
 80023a0:	e099      	b.n	80024d6 <write_screen+0x16e>
		ssd1306_SetCursor(0, 10);
 80023a2:	210a      	movs	r1, #10
 80023a4:	2000      	movs	r0, #0
 80023a6:	f001 fd15 	bl	8003dd4 <ssd1306_SetCursor>
		ssd1306_WriteString("Bass:", Font_6x8, White);
 80023aa:	4ac4      	ldr	r2, [pc, #784]	; (80026bc <write_screen+0x354>)
 80023ac:	48c6      	ldr	r0, [pc, #792]	; (80026c8 <write_screen+0x360>)
 80023ae:	2301      	movs	r3, #1
 80023b0:	6811      	ldr	r1, [r2, #0]
 80023b2:	6852      	ldr	r2, [r2, #4]
 80023b4:	f001 fce4 	bl	8003d80 <ssd1306_WriteString>
		ssd1306_SetCursor(64, 10);
 80023b8:	210a      	movs	r1, #10
 80023ba:	2040      	movs	r0, #64	; 0x40
 80023bc:	f001 fd0a 	bl	8003dd4 <ssd1306_SetCursor>
		itoa((int16_t)(bass-15), s, 10);
 80023c0:	68fb      	ldr	r3, [r7, #12]
 80023c2:	b29b      	uxth	r3, r3
 80023c4:	3b0f      	subs	r3, #15
 80023c6:	b29b      	uxth	r3, r3
 80023c8:	b21b      	sxth	r3, r3
 80023ca:	0018      	movs	r0, r3
 80023cc:	2314      	movs	r3, #20
 80023ce:	18fb      	adds	r3, r7, r3
 80023d0:	220a      	movs	r2, #10
 80023d2:	0019      	movs	r1, r3
 80023d4:	f005 f9f6 	bl	80077c4 <itoa>
		if(bass>15)ssd1306_WriteString("+", Font_6x8, White);
 80023d8:	68fb      	ldr	r3, [r7, #12]
 80023da:	2b0f      	cmp	r3, #15
 80023dc:	dd06      	ble.n	80023ec <write_screen+0x84>
 80023de:	4ab7      	ldr	r2, [pc, #732]	; (80026bc <write_screen+0x354>)
 80023e0:	48ba      	ldr	r0, [pc, #744]	; (80026cc <write_screen+0x364>)
 80023e2:	2301      	movs	r3, #1
 80023e4:	6811      	ldr	r1, [r2, #0]
 80023e6:	6852      	ldr	r2, [r2, #4]
 80023e8:	f001 fcca 	bl	8003d80 <ssd1306_WriteString>
		ssd1306_WriteString(s, Font_6x8, White);
 80023ec:	4ab3      	ldr	r2, [pc, #716]	; (80026bc <write_screen+0x354>)
 80023ee:	2414      	movs	r4, #20
 80023f0:	1938      	adds	r0, r7, r4
 80023f2:	2301      	movs	r3, #1
 80023f4:	6811      	ldr	r1, [r2, #0]
 80023f6:	6852      	ldr	r2, [r2, #4]
 80023f8:	f001 fcc2 	bl	8003d80 <ssd1306_WriteString>
		ssd1306_WriteString("bB", Font_6x8, White);
 80023fc:	4aaf      	ldr	r2, [pc, #700]	; (80026bc <write_screen+0x354>)
 80023fe:	48b4      	ldr	r0, [pc, #720]	; (80026d0 <write_screen+0x368>)
 8002400:	2301      	movs	r3, #1
 8002402:	6811      	ldr	r1, [r2, #0]
 8002404:	6852      	ldr	r2, [r2, #4]
 8002406:	f001 fcbb 	bl	8003d80 <ssd1306_WriteString>
		//Middle
		ssd1306_SetCursor(0, 20);
 800240a:	2114      	movs	r1, #20
 800240c:	2000      	movs	r0, #0
 800240e:	f001 fce1 	bl	8003dd4 <ssd1306_SetCursor>
		ssd1306_WriteString("Middle:", Font_6x8, White);
 8002412:	4aaa      	ldr	r2, [pc, #680]	; (80026bc <write_screen+0x354>)
 8002414:	48af      	ldr	r0, [pc, #700]	; (80026d4 <write_screen+0x36c>)
 8002416:	2301      	movs	r3, #1
 8002418:	6811      	ldr	r1, [r2, #0]
 800241a:	6852      	ldr	r2, [r2, #4]
 800241c:	f001 fcb0 	bl	8003d80 <ssd1306_WriteString>
		ssd1306_SetCursor(64, 20);
 8002420:	2114      	movs	r1, #20
 8002422:	2040      	movs	r0, #64	; 0x40
 8002424:	f001 fcd6 	bl	8003dd4 <ssd1306_SetCursor>
		itoa((int16_t)(middle-15), s, 10);
 8002428:	68bb      	ldr	r3, [r7, #8]
 800242a:	b29b      	uxth	r3, r3
 800242c:	3b0f      	subs	r3, #15
 800242e:	b29b      	uxth	r3, r3
 8002430:	b21b      	sxth	r3, r3
 8002432:	0018      	movs	r0, r3
 8002434:	193b      	adds	r3, r7, r4
 8002436:	220a      	movs	r2, #10
 8002438:	0019      	movs	r1, r3
 800243a:	f005 f9c3 	bl	80077c4 <itoa>
		if(middle>15)ssd1306_WriteString("+", Font_6x8, White);
 800243e:	68bb      	ldr	r3, [r7, #8]
 8002440:	2b0f      	cmp	r3, #15
 8002442:	dd06      	ble.n	8002452 <write_screen+0xea>
 8002444:	4a9d      	ldr	r2, [pc, #628]	; (80026bc <write_screen+0x354>)
 8002446:	48a1      	ldr	r0, [pc, #644]	; (80026cc <write_screen+0x364>)
 8002448:	2301      	movs	r3, #1
 800244a:	6811      	ldr	r1, [r2, #0]
 800244c:	6852      	ldr	r2, [r2, #4]
 800244e:	f001 fc97 	bl	8003d80 <ssd1306_WriteString>
		ssd1306_WriteString(s, Font_6x8, White);
 8002452:	4a9a      	ldr	r2, [pc, #616]	; (80026bc <write_screen+0x354>)
 8002454:	2414      	movs	r4, #20
 8002456:	1938      	adds	r0, r7, r4
 8002458:	2301      	movs	r3, #1
 800245a:	6811      	ldr	r1, [r2, #0]
 800245c:	6852      	ldr	r2, [r2, #4]
 800245e:	f001 fc8f 	bl	8003d80 <ssd1306_WriteString>
		ssd1306_WriteString("bB", Font_6x8, White);
 8002462:	4a96      	ldr	r2, [pc, #600]	; (80026bc <write_screen+0x354>)
 8002464:	489a      	ldr	r0, [pc, #616]	; (80026d0 <write_screen+0x368>)
 8002466:	2301      	movs	r3, #1
 8002468:	6811      	ldr	r1, [r2, #0]
 800246a:	6852      	ldr	r2, [r2, #4]
 800246c:	f001 fc88 	bl	8003d80 <ssd1306_WriteString>
		// Treble
		ssd1306_SetCursor(0, 30);
 8002470:	211e      	movs	r1, #30
 8002472:	2000      	movs	r0, #0
 8002474:	f001 fcae 	bl	8003dd4 <ssd1306_SetCursor>
		ssd1306_WriteString("Treble:", Font_6x8, White);
 8002478:	4a90      	ldr	r2, [pc, #576]	; (80026bc <write_screen+0x354>)
 800247a:	4897      	ldr	r0, [pc, #604]	; (80026d8 <write_screen+0x370>)
 800247c:	2301      	movs	r3, #1
 800247e:	6811      	ldr	r1, [r2, #0]
 8002480:	6852      	ldr	r2, [r2, #4]
 8002482:	f001 fc7d 	bl	8003d80 <ssd1306_WriteString>
		ssd1306_SetCursor(64, 30);
 8002486:	211e      	movs	r1, #30
 8002488:	2040      	movs	r0, #64	; 0x40
 800248a:	f001 fca3 	bl	8003dd4 <ssd1306_SetCursor>
		itoa((int16_t)(treble-15), s, 10);
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	b29b      	uxth	r3, r3
 8002492:	3b0f      	subs	r3, #15
 8002494:	b29b      	uxth	r3, r3
 8002496:	b21b      	sxth	r3, r3
 8002498:	0018      	movs	r0, r3
 800249a:	193b      	adds	r3, r7, r4
 800249c:	220a      	movs	r2, #10
 800249e:	0019      	movs	r1, r3
 80024a0:	f005 f990 	bl	80077c4 <itoa>
		if(treble>15)ssd1306_WriteString("+", Font_6x8, White);
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	2b0f      	cmp	r3, #15
 80024a8:	dd06      	ble.n	80024b8 <write_screen+0x150>
 80024aa:	4a84      	ldr	r2, [pc, #528]	; (80026bc <write_screen+0x354>)
 80024ac:	4887      	ldr	r0, [pc, #540]	; (80026cc <write_screen+0x364>)
 80024ae:	2301      	movs	r3, #1
 80024b0:	6811      	ldr	r1, [r2, #0]
 80024b2:	6852      	ldr	r2, [r2, #4]
 80024b4:	f001 fc64 	bl	8003d80 <ssd1306_WriteString>
		ssd1306_WriteString(s, Font_6x8, White);
 80024b8:	4a80      	ldr	r2, [pc, #512]	; (80026bc <write_screen+0x354>)
 80024ba:	2314      	movs	r3, #20
 80024bc:	18f8      	adds	r0, r7, r3
 80024be:	2301      	movs	r3, #1
 80024c0:	6811      	ldr	r1, [r2, #0]
 80024c2:	6852      	ldr	r2, [r2, #4]
 80024c4:	f001 fc5c 	bl	8003d80 <ssd1306_WriteString>
		ssd1306_WriteString("bB", Font_6x8, White);
 80024c8:	4a7c      	ldr	r2, [pc, #496]	; (80026bc <write_screen+0x354>)
 80024ca:	4881      	ldr	r0, [pc, #516]	; (80026d0 <write_screen+0x368>)
 80024cc:	2301      	movs	r3, #1
 80024ce:	6811      	ldr	r1, [r2, #0]
 80024d0:	6852      	ldr	r2, [r2, #4]
 80024d2:	f001 fc55 	bl	8003d80 <ssd1306_WriteString>
	}
	// Battery
	vorkomma=(int)battery;
 80024d6:	6c38      	ldr	r0, [r7, #64]	; 0x40
 80024d8:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80024da:	f7ff fca9 	bl	8001e30 <__aeabi_d2iz>
 80024de:	0003      	movs	r3, r0
 80024e0:	627b      	str	r3, [r7, #36]	; 0x24
	nachkomma = (int)((battery-((double)vorkomma))*100);
 80024e2:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80024e4:	f7ff fcda 	bl	8001e9c <__aeabi_i2d>
 80024e8:	0003      	movs	r3, r0
 80024ea:	000c      	movs	r4, r1
 80024ec:	001a      	movs	r2, r3
 80024ee:	0023      	movs	r3, r4
 80024f0:	6c38      	ldr	r0, [r7, #64]	; 0x40
 80024f2:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80024f4:	f7ff f954 	bl	80017a0 <__aeabi_dsub>
 80024f8:	0003      	movs	r3, r0
 80024fa:	000c      	movs	r4, r1
 80024fc:	0018      	movs	r0, r3
 80024fe:	0021      	movs	r1, r4
 8002500:	2200      	movs	r2, #0
 8002502:	4b76      	ldr	r3, [pc, #472]	; (80026dc <write_screen+0x374>)
 8002504:	f7fe feda 	bl	80012bc <__aeabi_dmul>
 8002508:	0003      	movs	r3, r0
 800250a:	000c      	movs	r4, r1
 800250c:	0018      	movs	r0, r3
 800250e:	0021      	movs	r1, r4
 8002510:	f7ff fc8e 	bl	8001e30 <__aeabi_d2iz>
 8002514:	0003      	movs	r3, r0
 8002516:	623b      	str	r3, [r7, #32]
	ssd1306_SetCursor(0, 40);
 8002518:	2128      	movs	r1, #40	; 0x28
 800251a:	2000      	movs	r0, #0
 800251c:	f001 fc5a 	bl	8003dd4 <ssd1306_SetCursor>
	ssd1306_WriteString("Akku:", Font_6x8, White);
 8002520:	4a66      	ldr	r2, [pc, #408]	; (80026bc <write_screen+0x354>)
 8002522:	486f      	ldr	r0, [pc, #444]	; (80026e0 <write_screen+0x378>)
 8002524:	2301      	movs	r3, #1
 8002526:	6811      	ldr	r1, [r2, #0]
 8002528:	6852      	ldr	r2, [r2, #4]
 800252a:	f001 fc29 	bl	8003d80 <ssd1306_WriteString>
	ssd1306_SetCursor(64, 40);
 800252e:	2128      	movs	r1, #40	; 0x28
 8002530:	2040      	movs	r0, #64	; 0x40
 8002532:	f001 fc4f 	bl	8003dd4 <ssd1306_SetCursor>
	itoa((int16_t)vorkomma, s, 10);
 8002536:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002538:	b21b      	sxth	r3, r3
 800253a:	0018      	movs	r0, r3
 800253c:	2414      	movs	r4, #20
 800253e:	193b      	adds	r3, r7, r4
 8002540:	220a      	movs	r2, #10
 8002542:	0019      	movs	r1, r3
 8002544:	f005 f93e 	bl	80077c4 <itoa>
	ssd1306_WriteString(s, Font_6x8, White);
 8002548:	4a5c      	ldr	r2, [pc, #368]	; (80026bc <write_screen+0x354>)
 800254a:	1938      	adds	r0, r7, r4
 800254c:	2301      	movs	r3, #1
 800254e:	6811      	ldr	r1, [r2, #0]
 8002550:	6852      	ldr	r2, [r2, #4]
 8002552:	f001 fc15 	bl	8003d80 <ssd1306_WriteString>
	ssd1306_WriteString(".", Font_6x8, White);
 8002556:	4a59      	ldr	r2, [pc, #356]	; (80026bc <write_screen+0x354>)
 8002558:	4862      	ldr	r0, [pc, #392]	; (80026e4 <write_screen+0x37c>)
 800255a:	2301      	movs	r3, #1
 800255c:	6811      	ldr	r1, [r2, #0]
 800255e:	6852      	ldr	r2, [r2, #4]
 8002560:	f001 fc0e 	bl	8003d80 <ssd1306_WriteString>
	itoa((int16_t)nachkomma, s, 10);
 8002564:	6a3b      	ldr	r3, [r7, #32]
 8002566:	b21b      	sxth	r3, r3
 8002568:	0018      	movs	r0, r3
 800256a:	193b      	adds	r3, r7, r4
 800256c:	220a      	movs	r2, #10
 800256e:	0019      	movs	r1, r3
 8002570:	f005 f928 	bl	80077c4 <itoa>
	ssd1306_WriteString(s, Font_6x8, White);
 8002574:	4a51      	ldr	r2, [pc, #324]	; (80026bc <write_screen+0x354>)
 8002576:	1938      	adds	r0, r7, r4
 8002578:	2301      	movs	r3, #1
 800257a:	6811      	ldr	r1, [r2, #0]
 800257c:	6852      	ldr	r2, [r2, #4]
 800257e:	f001 fbff 	bl	8003d80 <ssd1306_WriteString>
	ssd1306_WriteString("V", Font_6x8, White);
 8002582:	4a4e      	ldr	r2, [pc, #312]	; (80026bc <write_screen+0x354>)
 8002584:	4858      	ldr	r0, [pc, #352]	; (80026e8 <write_screen+0x380>)
 8002586:	2301      	movs	r3, #1
 8002588:	6811      	ldr	r1, [r2, #0]
 800258a:	6852      	ldr	r2, [r2, #4]
 800258c:	f001 fbf8 	bl	8003d80 <ssd1306_WriteString>

	if(charger_plugged == GPIO_PIN_RESET){
 8002590:	4b56      	ldr	r3, [pc, #344]	; (80026ec <write_screen+0x384>)
 8002592:	781b      	ldrb	r3, [r3, #0]
 8002594:	2b00      	cmp	r3, #0
 8002596:	d000      	beq.n	800259a <write_screen+0x232>
 8002598:	e19d      	b.n	80028d6 <write_screen+0x56e>
		uint8_t x = 110, y = 0;
 800259a:	201f      	movs	r0, #31
 800259c:	183b      	adds	r3, r7, r0
 800259e:	226e      	movs	r2, #110	; 0x6e
 80025a0:	701a      	strb	r2, [r3, #0]
 80025a2:	261e      	movs	r6, #30
 80025a4:	19bb      	adds	r3, r7, r6
 80025a6:	2200      	movs	r2, #0
 80025a8:	701a      	strb	r2, [r3, #0]
		//Linker Ramen Akku
		ssd1306_Line(x,y,x,y+6, White);
 80025aa:	19bb      	adds	r3, r7, r6
 80025ac:	781b      	ldrb	r3, [r3, #0]
 80025ae:	3306      	adds	r3, #6
 80025b0:	b2dc      	uxtb	r4, r3
 80025b2:	183b      	adds	r3, r7, r0
 80025b4:	781a      	ldrb	r2, [r3, #0]
 80025b6:	19bb      	adds	r3, r7, r6
 80025b8:	7819      	ldrb	r1, [r3, #0]
 80025ba:	0005      	movs	r5, r0
 80025bc:	183b      	adds	r3, r7, r0
 80025be:	7818      	ldrb	r0, [r3, #0]
 80025c0:	2301      	movs	r3, #1
 80025c2:	9300      	str	r3, [sp, #0]
 80025c4:	0023      	movs	r3, r4
 80025c6:	f001 fc1f 	bl	8003e08 <ssd1306_Line>
		ssd1306_Line(x,y,x+3,y, White);
 80025ca:	0028      	movs	r0, r5
 80025cc:	183b      	adds	r3, r7, r0
 80025ce:	781b      	ldrb	r3, [r3, #0]
 80025d0:	3303      	adds	r3, #3
 80025d2:	b2da      	uxtb	r2, r3
 80025d4:	19bb      	adds	r3, r7, r6
 80025d6:	781c      	ldrb	r4, [r3, #0]
 80025d8:	19bb      	adds	r3, r7, r6
 80025da:	7819      	ldrb	r1, [r3, #0]
 80025dc:	0005      	movs	r5, r0
 80025de:	183b      	adds	r3, r7, r0
 80025e0:	7818      	ldrb	r0, [r3, #0]
 80025e2:	2301      	movs	r3, #1
 80025e4:	9300      	str	r3, [sp, #0]
 80025e6:	0023      	movs	r3, r4
 80025e8:	f001 fc0e 	bl	8003e08 <ssd1306_Line>
		ssd1306_Line(x,y+6,x+3,y+6, White);
 80025ec:	19bb      	adds	r3, r7, r6
 80025ee:	781b      	ldrb	r3, [r3, #0]
 80025f0:	3306      	adds	r3, #6
 80025f2:	b2d9      	uxtb	r1, r3
 80025f4:	0028      	movs	r0, r5
 80025f6:	183b      	adds	r3, r7, r0
 80025f8:	781b      	ldrb	r3, [r3, #0]
 80025fa:	3303      	adds	r3, #3
 80025fc:	b2da      	uxtb	r2, r3
 80025fe:	19bb      	adds	r3, r7, r6
 8002600:	781b      	ldrb	r3, [r3, #0]
 8002602:	3306      	adds	r3, #6
 8002604:	b2dc      	uxtb	r4, r3
 8002606:	0005      	movs	r5, r0
 8002608:	197b      	adds	r3, r7, r5
 800260a:	7818      	ldrb	r0, [r3, #0]
 800260c:	2301      	movs	r3, #1
 800260e:	9300      	str	r3, [sp, #0]
 8002610:	0023      	movs	r3, r4
 8002612:	f001 fbf9 	bl	8003e08 <ssd1306_Line>

		//Rechter Ramen Akku
		ssd1306_Line(x+9,y,x+11,y, White);
 8002616:	197b      	adds	r3, r7, r5
 8002618:	781b      	ldrb	r3, [r3, #0]
 800261a:	3309      	adds	r3, #9
 800261c:	b2d8      	uxtb	r0, r3
 800261e:	197b      	adds	r3, r7, r5
 8002620:	781b      	ldrb	r3, [r3, #0]
 8002622:	330b      	adds	r3, #11
 8002624:	b2da      	uxtb	r2, r3
 8002626:	19bb      	adds	r3, r7, r6
 8002628:	781c      	ldrb	r4, [r3, #0]
 800262a:	19bb      	adds	r3, r7, r6
 800262c:	7819      	ldrb	r1, [r3, #0]
 800262e:	2301      	movs	r3, #1
 8002630:	9300      	str	r3, [sp, #0]
 8002632:	0023      	movs	r3, r4
 8002634:	f001 fbe8 	bl	8003e08 <ssd1306_Line>
		ssd1306_Line(x+9,y+6,x+11,y+6, White);
 8002638:	197b      	adds	r3, r7, r5
 800263a:	781b      	ldrb	r3, [r3, #0]
 800263c:	3309      	adds	r3, #9
 800263e:	b2d8      	uxtb	r0, r3
 8002640:	19bb      	adds	r3, r7, r6
 8002642:	781b      	ldrb	r3, [r3, #0]
 8002644:	3306      	adds	r3, #6
 8002646:	b2d9      	uxtb	r1, r3
 8002648:	197b      	adds	r3, r7, r5
 800264a:	781b      	ldrb	r3, [r3, #0]
 800264c:	330b      	adds	r3, #11
 800264e:	b2da      	uxtb	r2, r3
 8002650:	19bb      	adds	r3, r7, r6
 8002652:	781b      	ldrb	r3, [r3, #0]
 8002654:	3306      	adds	r3, #6
 8002656:	b2dc      	uxtb	r4, r3
 8002658:	2301      	movs	r3, #1
 800265a:	9300      	str	r3, [sp, #0]
 800265c:	0023      	movs	r3, r4
 800265e:	f001 fbd3 	bl	8003e08 <ssd1306_Line>
		ssd1306_Line(x+11,y,x+11,y+6, White);
 8002662:	197b      	adds	r3, r7, r5
 8002664:	781b      	ldrb	r3, [r3, #0]
 8002666:	330b      	adds	r3, #11
 8002668:	b2d8      	uxtb	r0, r3
 800266a:	197b      	adds	r3, r7, r5
 800266c:	781b      	ldrb	r3, [r3, #0]
 800266e:	330b      	adds	r3, #11
 8002670:	b2da      	uxtb	r2, r3
 8002672:	19bb      	adds	r3, r7, r6
 8002674:	781b      	ldrb	r3, [r3, #0]
 8002676:	3306      	adds	r3, #6
 8002678:	b2dc      	uxtb	r4, r3
 800267a:	19bb      	adds	r3, r7, r6
 800267c:	7819      	ldrb	r1, [r3, #0]
 800267e:	2301      	movs	r3, #1
 8002680:	9300      	str	r3, [sp, #0]
 8002682:	0023      	movs	r3, r4
 8002684:	f001 fbc0 	bl	8003e08 <ssd1306_Line>
		ssd1306_Line(x+12,y+2,x+12,y+4, White);
 8002688:	197b      	adds	r3, r7, r5
 800268a:	781b      	ldrb	r3, [r3, #0]
 800268c:	330c      	adds	r3, #12
 800268e:	b2d8      	uxtb	r0, r3
 8002690:	19bb      	adds	r3, r7, r6
 8002692:	781b      	ldrb	r3, [r3, #0]
 8002694:	3302      	adds	r3, #2
 8002696:	b2d9      	uxtb	r1, r3
 8002698:	197b      	adds	r3, r7, r5
 800269a:	781b      	ldrb	r3, [r3, #0]
 800269c:	330c      	adds	r3, #12
 800269e:	b2da      	uxtb	r2, r3
 80026a0:	19bb      	adds	r3, r7, r6
 80026a2:	781b      	ldrb	r3, [r3, #0]
 80026a4:	3304      	adds	r3, #4
 80026a6:	b2dc      	uxtb	r4, r3
 80026a8:	2301      	movs	r3, #1
 80026aa:	9300      	str	r3, [sp, #0]
 80026ac:	0023      	movs	r3, r4
 80026ae:	f001 fbab 	bl	8003e08 <ssd1306_Line>
		//Strom Symbol
		if(pack_full == 0){
 80026b2:	4b0f      	ldr	r3, [pc, #60]	; (80026f0 <write_screen+0x388>)
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	2b00      	cmp	r3, #0
 80026b8:	d176      	bne.n	80027a8 <write_screen+0x440>
 80026ba:	e01b      	b.n	80026f4 <write_screen+0x38c>
 80026bc:	20000008 	.word	0x20000008
 80026c0:	0800786c 	.word	0x0800786c
 80026c4:	20000000 	.word	0x20000000
 80026c8:	0800787c 	.word	0x0800787c
 80026cc:	08007884 	.word	0x08007884
 80026d0:	08007888 	.word	0x08007888
 80026d4:	0800788c 	.word	0x0800788c
 80026d8:	08007894 	.word	0x08007894
 80026dc:	40590000 	.word	0x40590000
 80026e0:	0800789c 	.word	0x0800789c
 80026e4:	080078a4 	.word	0x080078a4
 80026e8:	080078a8 	.word	0x080078a8
 80026ec:	20000001 	.word	0x20000001
 80026f0:	20000080 	.word	0x20000080
			ssd1306_Line(x+6,y,x+4,y+2, White);
 80026f4:	251f      	movs	r5, #31
 80026f6:	197b      	adds	r3, r7, r5
 80026f8:	781b      	ldrb	r3, [r3, #0]
 80026fa:	3306      	adds	r3, #6
 80026fc:	b2d8      	uxtb	r0, r3
 80026fe:	197b      	adds	r3, r7, r5
 8002700:	781b      	ldrb	r3, [r3, #0]
 8002702:	3304      	adds	r3, #4
 8002704:	b2da      	uxtb	r2, r3
 8002706:	261e      	movs	r6, #30
 8002708:	19bb      	adds	r3, r7, r6
 800270a:	781b      	ldrb	r3, [r3, #0]
 800270c:	3302      	adds	r3, #2
 800270e:	b2dc      	uxtb	r4, r3
 8002710:	19bb      	adds	r3, r7, r6
 8002712:	7819      	ldrb	r1, [r3, #0]
 8002714:	2301      	movs	r3, #1
 8002716:	9300      	str	r3, [sp, #0]
 8002718:	0023      	movs	r3, r4
 800271a:	f001 fb75 	bl	8003e08 <ssd1306_Line>
			ssd1306_Line(x+7,y+4,x+5,y+6, White);
 800271e:	197b      	adds	r3, r7, r5
 8002720:	781b      	ldrb	r3, [r3, #0]
 8002722:	3307      	adds	r3, #7
 8002724:	b2d8      	uxtb	r0, r3
 8002726:	19bb      	adds	r3, r7, r6
 8002728:	781b      	ldrb	r3, [r3, #0]
 800272a:	3304      	adds	r3, #4
 800272c:	b2d9      	uxtb	r1, r3
 800272e:	197b      	adds	r3, r7, r5
 8002730:	781b      	ldrb	r3, [r3, #0]
 8002732:	3305      	adds	r3, #5
 8002734:	b2da      	uxtb	r2, r3
 8002736:	19bb      	adds	r3, r7, r6
 8002738:	781b      	ldrb	r3, [r3, #0]
 800273a:	3306      	adds	r3, #6
 800273c:	b2dc      	uxtb	r4, r3
 800273e:	2301      	movs	r3, #1
 8002740:	9300      	str	r3, [sp, #0]
 8002742:	0023      	movs	r3, r4
 8002744:	f001 fb60 	bl	8003e08 <ssd1306_Line>
			ssd1306_Line(x+4,y+3,x+7,y+3, White);
 8002748:	197b      	adds	r3, r7, r5
 800274a:	781b      	ldrb	r3, [r3, #0]
 800274c:	3304      	adds	r3, #4
 800274e:	b2d8      	uxtb	r0, r3
 8002750:	19bb      	adds	r3, r7, r6
 8002752:	781b      	ldrb	r3, [r3, #0]
 8002754:	3303      	adds	r3, #3
 8002756:	b2d9      	uxtb	r1, r3
 8002758:	197b      	adds	r3, r7, r5
 800275a:	781b      	ldrb	r3, [r3, #0]
 800275c:	3307      	adds	r3, #7
 800275e:	b2da      	uxtb	r2, r3
 8002760:	19bb      	adds	r3, r7, r6
 8002762:	781b      	ldrb	r3, [r3, #0]
 8002764:	3303      	adds	r3, #3
 8002766:	b2dc      	uxtb	r4, r3
 8002768:	2301      	movs	r3, #1
 800276a:	9300      	str	r3, [sp, #0]
 800276c:	0023      	movs	r3, r4
 800276e:	f001 fb4b 	bl	8003e08 <ssd1306_Line>
			ssd1306_DrawPixel(x+5,y+2,White);
 8002772:	002c      	movs	r4, r5
 8002774:	193b      	adds	r3, r7, r4
 8002776:	781b      	ldrb	r3, [r3, #0]
 8002778:	3305      	adds	r3, #5
 800277a:	b2d8      	uxtb	r0, r3
 800277c:	0035      	movs	r5, r6
 800277e:	197b      	adds	r3, r7, r5
 8002780:	781b      	ldrb	r3, [r3, #0]
 8002782:	3302      	adds	r3, #2
 8002784:	b2db      	uxtb	r3, r3
 8002786:	2201      	movs	r2, #1
 8002788:	0019      	movs	r1, r3
 800278a:	f001 f9ef 	bl	8003b6c <ssd1306_DrawPixel>
			ssd1306_DrawPixel(x+6,y+4,White);
 800278e:	193b      	adds	r3, r7, r4
 8002790:	781b      	ldrb	r3, [r3, #0]
 8002792:	3306      	adds	r3, #6
 8002794:	b2d8      	uxtb	r0, r3
 8002796:	197b      	adds	r3, r7, r5
 8002798:	781b      	ldrb	r3, [r3, #0]
 800279a:	3304      	adds	r3, #4
 800279c:	b2db      	uxtb	r3, r3
 800279e:	2201      	movs	r2, #1
 80027a0:	0019      	movs	r1, r3
 80027a2:	f001 f9e3 	bl	8003b6c <ssd1306_DrawPixel>
 80027a6:	e096      	b.n	80028d6 <write_screen+0x56e>
		}
		else{
			ssd1306_Line(x+2,y,x+9,y, White);
 80027a8:	251f      	movs	r5, #31
 80027aa:	197b      	adds	r3, r7, r5
 80027ac:	781b      	ldrb	r3, [r3, #0]
 80027ae:	3302      	adds	r3, #2
 80027b0:	b2d8      	uxtb	r0, r3
 80027b2:	197b      	adds	r3, r7, r5
 80027b4:	781b      	ldrb	r3, [r3, #0]
 80027b6:	3309      	adds	r3, #9
 80027b8:	b2da      	uxtb	r2, r3
 80027ba:	261e      	movs	r6, #30
 80027bc:	19bb      	adds	r3, r7, r6
 80027be:	781c      	ldrb	r4, [r3, #0]
 80027c0:	19bb      	adds	r3, r7, r6
 80027c2:	7819      	ldrb	r1, [r3, #0]
 80027c4:	2301      	movs	r3, #1
 80027c6:	9300      	str	r3, [sp, #0]
 80027c8:	0023      	movs	r3, r4
 80027ca:	f001 fb1d 	bl	8003e08 <ssd1306_Line>
			ssd1306_Line(x+2,y+1,x+9,y+1, White);
 80027ce:	197b      	adds	r3, r7, r5
 80027d0:	781b      	ldrb	r3, [r3, #0]
 80027d2:	3302      	adds	r3, #2
 80027d4:	b2d8      	uxtb	r0, r3
 80027d6:	19bb      	adds	r3, r7, r6
 80027d8:	781b      	ldrb	r3, [r3, #0]
 80027da:	3301      	adds	r3, #1
 80027dc:	b2d9      	uxtb	r1, r3
 80027de:	197b      	adds	r3, r7, r5
 80027e0:	781b      	ldrb	r3, [r3, #0]
 80027e2:	3309      	adds	r3, #9
 80027e4:	b2da      	uxtb	r2, r3
 80027e6:	19bb      	adds	r3, r7, r6
 80027e8:	781b      	ldrb	r3, [r3, #0]
 80027ea:	3301      	adds	r3, #1
 80027ec:	b2dc      	uxtb	r4, r3
 80027ee:	2301      	movs	r3, #1
 80027f0:	9300      	str	r3, [sp, #0]
 80027f2:	0023      	movs	r3, r4
 80027f4:	f001 fb08 	bl	8003e08 <ssd1306_Line>
			ssd1306_Line(x+2,y+2,x+9,y+2, White);
 80027f8:	197b      	adds	r3, r7, r5
 80027fa:	781b      	ldrb	r3, [r3, #0]
 80027fc:	3302      	adds	r3, #2
 80027fe:	b2d8      	uxtb	r0, r3
 8002800:	19bb      	adds	r3, r7, r6
 8002802:	781b      	ldrb	r3, [r3, #0]
 8002804:	3302      	adds	r3, #2
 8002806:	b2d9      	uxtb	r1, r3
 8002808:	197b      	adds	r3, r7, r5
 800280a:	781b      	ldrb	r3, [r3, #0]
 800280c:	3309      	adds	r3, #9
 800280e:	b2da      	uxtb	r2, r3
 8002810:	19bb      	adds	r3, r7, r6
 8002812:	781b      	ldrb	r3, [r3, #0]
 8002814:	3302      	adds	r3, #2
 8002816:	b2dc      	uxtb	r4, r3
 8002818:	2301      	movs	r3, #1
 800281a:	9300      	str	r3, [sp, #0]
 800281c:	0023      	movs	r3, r4
 800281e:	f001 faf3 	bl	8003e08 <ssd1306_Line>
			ssd1306_Line(x+2,y+3,x+9,y+3, White);
 8002822:	197b      	adds	r3, r7, r5
 8002824:	781b      	ldrb	r3, [r3, #0]
 8002826:	3302      	adds	r3, #2
 8002828:	b2d8      	uxtb	r0, r3
 800282a:	19bb      	adds	r3, r7, r6
 800282c:	781b      	ldrb	r3, [r3, #0]
 800282e:	3303      	adds	r3, #3
 8002830:	b2d9      	uxtb	r1, r3
 8002832:	197b      	adds	r3, r7, r5
 8002834:	781b      	ldrb	r3, [r3, #0]
 8002836:	3309      	adds	r3, #9
 8002838:	b2da      	uxtb	r2, r3
 800283a:	19bb      	adds	r3, r7, r6
 800283c:	781b      	ldrb	r3, [r3, #0]
 800283e:	3303      	adds	r3, #3
 8002840:	b2dc      	uxtb	r4, r3
 8002842:	2301      	movs	r3, #1
 8002844:	9300      	str	r3, [sp, #0]
 8002846:	0023      	movs	r3, r4
 8002848:	f001 fade 	bl	8003e08 <ssd1306_Line>
			ssd1306_Line(x+2,y+4,x+9,y+4, White);
 800284c:	197b      	adds	r3, r7, r5
 800284e:	781b      	ldrb	r3, [r3, #0]
 8002850:	3302      	adds	r3, #2
 8002852:	b2d8      	uxtb	r0, r3
 8002854:	19bb      	adds	r3, r7, r6
 8002856:	781b      	ldrb	r3, [r3, #0]
 8002858:	3304      	adds	r3, #4
 800285a:	b2d9      	uxtb	r1, r3
 800285c:	197b      	adds	r3, r7, r5
 800285e:	781b      	ldrb	r3, [r3, #0]
 8002860:	3309      	adds	r3, #9
 8002862:	b2da      	uxtb	r2, r3
 8002864:	19bb      	adds	r3, r7, r6
 8002866:	781b      	ldrb	r3, [r3, #0]
 8002868:	3304      	adds	r3, #4
 800286a:	b2dc      	uxtb	r4, r3
 800286c:	2301      	movs	r3, #1
 800286e:	9300      	str	r3, [sp, #0]
 8002870:	0023      	movs	r3, r4
 8002872:	f001 fac9 	bl	8003e08 <ssd1306_Line>
			ssd1306_Line(x+2,y+5,x+9,y+5, White);
 8002876:	002a      	movs	r2, r5
 8002878:	18bb      	adds	r3, r7, r2
 800287a:	781b      	ldrb	r3, [r3, #0]
 800287c:	3302      	adds	r3, #2
 800287e:	b2d8      	uxtb	r0, r3
 8002880:	0034      	movs	r4, r6
 8002882:	193b      	adds	r3, r7, r4
 8002884:	781b      	ldrb	r3, [r3, #0]
 8002886:	3305      	adds	r3, #5
 8002888:	b2d9      	uxtb	r1, r3
 800288a:	0015      	movs	r5, r2
 800288c:	18bb      	adds	r3, r7, r2
 800288e:	781b      	ldrb	r3, [r3, #0]
 8002890:	3309      	adds	r3, #9
 8002892:	b2da      	uxtb	r2, r3
 8002894:	0026      	movs	r6, r4
 8002896:	193b      	adds	r3, r7, r4
 8002898:	781b      	ldrb	r3, [r3, #0]
 800289a:	3305      	adds	r3, #5
 800289c:	b2dc      	uxtb	r4, r3
 800289e:	2301      	movs	r3, #1
 80028a0:	9300      	str	r3, [sp, #0]
 80028a2:	0023      	movs	r3, r4
 80028a4:	f001 fab0 	bl	8003e08 <ssd1306_Line>
			ssd1306_Line(x+2,y+6,x+9,y+6, White);
 80028a8:	002a      	movs	r2, r5
 80028aa:	18bb      	adds	r3, r7, r2
 80028ac:	781b      	ldrb	r3, [r3, #0]
 80028ae:	3302      	adds	r3, #2
 80028b0:	b2d8      	uxtb	r0, r3
 80028b2:	0034      	movs	r4, r6
 80028b4:	193b      	adds	r3, r7, r4
 80028b6:	781b      	ldrb	r3, [r3, #0]
 80028b8:	3306      	adds	r3, #6
 80028ba:	b2d9      	uxtb	r1, r3
 80028bc:	18bb      	adds	r3, r7, r2
 80028be:	781b      	ldrb	r3, [r3, #0]
 80028c0:	3309      	adds	r3, #9
 80028c2:	b2da      	uxtb	r2, r3
 80028c4:	193b      	adds	r3, r7, r4
 80028c6:	781b      	ldrb	r3, [r3, #0]
 80028c8:	3306      	adds	r3, #6
 80028ca:	b2dc      	uxtb	r4, r3
 80028cc:	2301      	movs	r3, #1
 80028ce:	9300      	str	r3, [sp, #0]
 80028d0:	0023      	movs	r3, r4
 80028d2:	f001 fa99 	bl	8003e08 <ssd1306_Line>
		}
	}

	ssd1306_UpdateScreen();
 80028d6:	f001 f91d 	bl	8003b14 <ssd1306_UpdateScreen>
#endif
}
 80028da:	46c0      	nop			; (mov r8, r8)
 80028dc:	46bd      	mov	sp, r7
 80028de:	b00b      	add	sp, #44	; 0x2c
 80028e0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80028e2:	46c0      	nop			; (mov r8, r8)

080028e4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80028e4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80028e6:	b0a1      	sub	sp, #132	; 0x84
 80028e8:	af10      	add	r7, sp, #64	; 0x40
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80028ea:	f001 fcd3 	bl	8004294 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80028ee:	f000 fcc7 	bl	8003280 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80028f2:	f000 ff23 	bl	800373c <MX_GPIO_Init>
  MX_DMA_Init();
 80028f6:	f000 ff03 	bl	8003700 <MX_DMA_Init>
  MX_ADC_Init();
 80028fa:	f000 fd2b 	bl	8003354 <MX_ADC_Init>
  MX_I2C1_Init();
 80028fe:	f000 fddf 	bl	80034c0 <MX_I2C1_Init>
  MX_USART1_UART_Init();
 8002902:	f000 fecd 	bl	80036a0 <MX_USART1_UART_Init>
  MX_TIM1_Init();
 8002906:	f000 fe1b 	bl	8003540 <MX_TIM1_Init>
  MX_TIM3_Init();
 800290a:	f000 fe71 	bl	80035f0 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */
  if(HAL_OK != HAL_ADCEx_Calibration_Start(&hadc))
 800290e:	4bd0      	ldr	r3, [pc, #832]	; (8002c50 <main+0x36c>)
 8002910:	0018      	movs	r0, r3
 8002912:	f002 f90d 	bl	8004b30 <HAL_ADCEx_Calibration_Start>
 8002916:	1e03      	subs	r3, r0, #0
 8002918:	d001      	beq.n	800291e <main+0x3a>
	  Error_Handler();
 800291a:	f001 f82b 	bl	8003974 <Error_Handler>

  if(HAL_ADC_Start_DMA(&hadc, &ADC_buffer, ADC_BUF_SIZE) != HAL_OK)
 800291e:	49cd      	ldr	r1, [pc, #820]	; (8002c54 <main+0x370>)
 8002920:	4bcb      	ldr	r3, [pc, #812]	; (8002c50 <main+0x36c>)
 8002922:	2206      	movs	r2, #6
 8002924:	0018      	movs	r0, r3
 8002926:	f001 fe7b 	bl	8004620 <HAL_ADC_Start_DMA>
 800292a:	1e03      	subs	r3, r0, #0
 800292c:	d001      	beq.n	8002932 <main+0x4e>
	  Error_Handler();
 800292e:	f001 f821 	bl	8003974 <Error_Handler>

  if(HAL_OK != HAL_TIM_Base_Start(&htim1))
 8002932:	4bc9      	ldr	r3, [pc, #804]	; (8002c58 <main+0x374>)
 8002934:	0018      	movs	r0, r3
 8002936:	f004 f997 	bl	8006c68 <HAL_TIM_Base_Start>
 800293a:	1e03      	subs	r3, r0, #0
 800293c:	d001      	beq.n	8002942 <main+0x5e>
	  Error_Handler();
 800293e:	f001 f819 	bl	8003974 <Error_Handler>
  if(HAL_OK != HAL_TIM_Base_Start(&htim3))
 8002942:	4bc6      	ldr	r3, [pc, #792]	; (8002c5c <main+0x378>)
 8002944:	0018      	movs	r0, r3
 8002946:	f004 f98f 	bl	8006c68 <HAL_TIM_Base_Start>
 800294a:	1e03      	subs	r3, r0, #0
 800294c:	d001      	beq.n	8002952 <main+0x6e>
	  Error_Handler();
 800294e:	f001 f811 	bl	8003974 <Error_Handler>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  // Endstufe initial deaktiviert
  HAL_GPIO_WritePin(MUTE_AMP1_GPIO_Port,MUTE_AMP1_Pin, GPIO_PIN_SET);
 8002952:	4bc3      	ldr	r3, [pc, #780]	; (8002c60 <main+0x37c>)
 8002954:	2201      	movs	r2, #1
 8002956:	2180      	movs	r1, #128	; 0x80
 8002958:	0018      	movs	r0, r3
 800295a:	f002 fd8a 	bl	8005472 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(STBY_AMP1_GPIO_Port,STBY_AMP1_Pin, GPIO_PIN_RESET);
 800295e:	2380      	movs	r3, #128	; 0x80
 8002960:	005b      	lsls	r3, r3, #1
 8002962:	48bf      	ldr	r0, [pc, #764]	; (8002c60 <main+0x37c>)
 8002964:	2200      	movs	r2, #0
 8002966:	0019      	movs	r1, r3
 8002968:	f002 fd83 	bl	8005472 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(MUTE_AMP2_GPIO_Port,MUTE_AMP2_Pin, GPIO_PIN_SET);
 800296c:	2380      	movs	r3, #128	; 0x80
 800296e:	019b      	lsls	r3, r3, #6
 8002970:	48bb      	ldr	r0, [pc, #748]	; (8002c60 <main+0x37c>)
 8002972:	2201      	movs	r2, #1
 8002974:	0019      	movs	r1, r3
 8002976:	f002 fd7c 	bl	8005472 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(STBY_AMP2_GPIO_Port,STBY_AMP2_Pin, GPIO_PIN_RESET);
 800297a:	4bb9      	ldr	r3, [pc, #740]	; (8002c60 <main+0x37c>)
 800297c:	2200      	movs	r2, #0
 800297e:	2108      	movs	r1, #8
 8002980:	0018      	movs	r0, r3
 8002982:	f002 fd76 	bl	8005472 <HAL_GPIO_WritePin>
  //HAL_GPIO_WritePin(STEPUP_DISABLE_GPIO_Port, STEPUP_DISABLE_Pin, GPIO_PIN_SET);

  GPIO_PinState state;
  uint8_t test = 0;
 8002986:	2337      	movs	r3, #55	; 0x37
 8002988:	2208      	movs	r2, #8
 800298a:	4694      	mov	ip, r2
 800298c:	44bc      	add	ip, r7
 800298e:	4463      	add	r3, ip
 8002990:	2200      	movs	r2, #0
 8002992:	701a      	strb	r2, [r3, #0]
  uint8_t adresses[5] = {0,0,0,0,0};
 8002994:	230c      	movs	r3, #12
 8002996:	2208      	movs	r2, #8
 8002998:	4694      	mov	ip, r2
 800299a:	44bc      	add	ip, r7
 800299c:	4463      	add	r3, ip
 800299e:	0018      	movs	r0, r3
 80029a0:	2305      	movs	r3, #5
 80029a2:	001a      	movs	r2, r3
 80029a4:	2100      	movs	r1, #0
 80029a6:	f004 ff1a 	bl	80077de <memset>


// I2C Scan
	HAL_StatusTypeDef result;
	int i = 0;
 80029aa:	2300      	movs	r3, #0
 80029ac:	63bb      	str	r3, [r7, #56]	; 0x38
	for (i=1; i<128; i++)
 80029ae:	2301      	movs	r3, #1
 80029b0:	63bb      	str	r3, [r7, #56]	; 0x38
 80029b2:	e02a      	b.n	8002a0a <main+0x126>
	   //&hi2c1 is the handle
	   //(uint16_t)(i<<1) is the i2c address left aligned
	   //retries 2
	   //timeout 2

	  result = HAL_I2C_IsDeviceReady(&hi2c1, (uint16_t)(i<<1), 2, 2);
 80029b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80029b6:	b29b      	uxth	r3, r3
 80029b8:	18db      	adds	r3, r3, r3
 80029ba:	b299      	uxth	r1, r3
 80029bc:	2513      	movs	r5, #19
 80029be:	2608      	movs	r6, #8
 80029c0:	19bb      	adds	r3, r7, r6
 80029c2:	195c      	adds	r4, r3, r5
 80029c4:	48a7      	ldr	r0, [pc, #668]	; (8002c64 <main+0x380>)
 80029c6:	2302      	movs	r3, #2
 80029c8:	2202      	movs	r2, #2
 80029ca:	f003 f857 	bl	8005a7c <HAL_I2C_IsDeviceReady>
 80029ce:	0003      	movs	r3, r0
 80029d0:	7023      	strb	r3, [r4, #0]
	  if (result != HAL_OK) // HAL_ERROR or HAL_BUSY or HAL_TIMEOUT
	  {
		  ;
	  }
	  if (result == HAL_OK)
 80029d2:	19bb      	adds	r3, r7, r6
 80029d4:	195b      	adds	r3, r3, r5
 80029d6:	781b      	ldrb	r3, [r3, #0]
 80029d8:	2b00      	cmp	r3, #0
 80029da:	d113      	bne.n	8002a04 <main+0x120>
	  {
		  adresses[test]= i;
 80029dc:	2037      	movs	r0, #55	; 0x37
 80029de:	2408      	movs	r4, #8
 80029e0:	193b      	adds	r3, r7, r4
 80029e2:	181b      	adds	r3, r3, r0
 80029e4:	781b      	ldrb	r3, [r3, #0]
 80029e6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80029e8:	b2d1      	uxtb	r1, r2
 80029ea:	220c      	movs	r2, #12
 80029ec:	2508      	movs	r5, #8
 80029ee:	46ac      	mov	ip, r5
 80029f0:	44bc      	add	ip, r7
 80029f2:	4462      	add	r2, ip
 80029f4:	54d1      	strb	r1, [r2, r3]
		  test++;
 80029f6:	193b      	adds	r3, r7, r4
 80029f8:	181b      	adds	r3, r3, r0
 80029fa:	781a      	ldrb	r2, [r3, #0]
 80029fc:	193b      	adds	r3, r7, r4
 80029fe:	181b      	adds	r3, r3, r0
 8002a00:	3201      	adds	r2, #1
 8002a02:	701a      	strb	r2, [r3, #0]
	for (i=1; i<128; i++)
 8002a04:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002a06:	3301      	adds	r3, #1
 8002a08:	63bb      	str	r3, [r7, #56]	; 0x38
 8002a0a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002a0c:	2b7f      	cmp	r3, #127	; 0x7f
 8002a0e:	ddd1      	ble.n	80029b4 <main+0xd0>
	  }
	}

#if DISPLAY == 1
  	  ssd1306_Init();
 8002a10:	f000 ffee 	bl	80039f0 <ssd1306_Init>
  	  ssd1306_Fill(Black);
 8002a14:	2000      	movs	r0, #0
 8002a16:	f001 f859 	bl	8003acc <ssd1306_Fill>
  	  ssd1306_SetCursor(0, 20);
 8002a1a:	2114      	movs	r1, #20
 8002a1c:	2000      	movs	r0, #0
 8002a1e:	f001 f9d9 	bl	8003dd4 <ssd1306_SetCursor>
  	  ssd1306_WriteString("Moin Digga!", Font_6x8, White);
 8002a22:	4a91      	ldr	r2, [pc, #580]	; (8002c68 <main+0x384>)
 8002a24:	4891      	ldr	r0, [pc, #580]	; (8002c6c <main+0x388>)
 8002a26:	2301      	movs	r3, #1
 8002a28:	6811      	ldr	r1, [r2, #0]
 8002a2a:	6852      	ldr	r2, [r2, #4]
 8002a2c:	f001 f9a8 	bl	8003d80 <ssd1306_WriteString>
  	  ssd1306_UpdateScreen();
 8002a30:	f001 f870 	bl	8003b14 <ssd1306_UpdateScreen>


  while (1)
  {
	  // Alles abschalten, wenn eine Endstufe in Störung geht. Fehler am Display anzeigen
	  if((HAL_GPIO_ReadPin(DIAG_AMP1_GPIO_Port, DIAG_AMP1_Pin) == GPIO_PIN_RESET) ||
 8002a34:	2380      	movs	r3, #128	; 0x80
 8002a36:	009b      	lsls	r3, r3, #2
 8002a38:	4a89      	ldr	r2, [pc, #548]	; (8002c60 <main+0x37c>)
 8002a3a:	0019      	movs	r1, r3
 8002a3c:	0010      	movs	r0, r2
 8002a3e:	f002 fcfb 	bl	8005438 <HAL_GPIO_ReadPin>
 8002a42:	1e03      	subs	r3, r0, #0
 8002a44:	d013      	beq.n	8002a6e <main+0x18a>
			  (HAL_GPIO_ReadPin(DIAG_AMP2_GPIO_Port, DIAG_AMP2_Pin) == GPIO_PIN_RESET) ||
 8002a46:	2380      	movs	r3, #128	; 0x80
 8002a48:	01db      	lsls	r3, r3, #7
 8002a4a:	4a85      	ldr	r2, [pc, #532]	; (8002c60 <main+0x37c>)
 8002a4c:	0019      	movs	r1, r3
 8002a4e:	0010      	movs	r0, r2
 8002a50:	f002 fcf2 	bl	8005438 <HAL_GPIO_ReadPin>
 8002a54:	1e03      	subs	r3, r0, #0
	  if((HAL_GPIO_ReadPin(DIAG_AMP1_GPIO_Port, DIAG_AMP1_Pin) == GPIO_PIN_RESET) ||
 8002a56:	d00a      	beq.n	8002a6e <main+0x18a>
			  (HAL_GPIO_ReadPin(BT_FAULT_GPIO_Port, BT_FAULT_Pin) == GPIO_PIN_RESET)){
 8002a58:	2380      	movs	r3, #128	; 0x80
 8002a5a:	015a      	lsls	r2, r3, #5
 8002a5c:	2390      	movs	r3, #144	; 0x90
 8002a5e:	05db      	lsls	r3, r3, #23
 8002a60:	0011      	movs	r1, r2
 8002a62:	0018      	movs	r0, r3
 8002a64:	f002 fce8 	bl	8005438 <HAL_GPIO_ReadPin>
 8002a68:	1e03      	subs	r3, r0, #0
			  (HAL_GPIO_ReadPin(DIAG_AMP2_GPIO_Port, DIAG_AMP2_Pin) == GPIO_PIN_RESET) ||
 8002a6a:	d000      	beq.n	8002a6e <main+0x18a>
 8002a6c:	e092      	b.n	8002b94 <main+0x2b0>
		  // Endstufen abschalten
		  HAL_GPIO_WritePin(MUTE_AMP1_GPIO_Port,MUTE_AMP1_Pin, GPIO_PIN_SET);
 8002a6e:	4b7c      	ldr	r3, [pc, #496]	; (8002c60 <main+0x37c>)
 8002a70:	2201      	movs	r2, #1
 8002a72:	2180      	movs	r1, #128	; 0x80
 8002a74:	0018      	movs	r0, r3
 8002a76:	f002 fcfc 	bl	8005472 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(STBY_AMP1_GPIO_Port,STBY_AMP1_Pin, GPIO_PIN_RESET);
 8002a7a:	2380      	movs	r3, #128	; 0x80
 8002a7c:	005b      	lsls	r3, r3, #1
 8002a7e:	4878      	ldr	r0, [pc, #480]	; (8002c60 <main+0x37c>)
 8002a80:	2200      	movs	r2, #0
 8002a82:	0019      	movs	r1, r3
 8002a84:	f002 fcf5 	bl	8005472 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(MUTE_AMP2_GPIO_Port,MUTE_AMP2_Pin, GPIO_PIN_SET);
 8002a88:	2380      	movs	r3, #128	; 0x80
 8002a8a:	019b      	lsls	r3, r3, #6
 8002a8c:	4874      	ldr	r0, [pc, #464]	; (8002c60 <main+0x37c>)
 8002a8e:	2201      	movs	r2, #1
 8002a90:	0019      	movs	r1, r3
 8002a92:	f002 fcee 	bl	8005472 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(STBY_AMP2_GPIO_Port,STBY_AMP2_Pin, GPIO_PIN_RESET);
 8002a96:	4b72      	ldr	r3, [pc, #456]	; (8002c60 <main+0x37c>)
 8002a98:	2200      	movs	r2, #0
 8002a9a:	2108      	movs	r1, #8
 8002a9c:	0018      	movs	r0, r3
 8002a9e:	f002 fce8 	bl	8005472 <HAL_GPIO_WritePin>
		  // Power abschalten
		  HAL_GPIO_WritePin(POWER_GPIO_Port,POWER_Pin, GPIO_PIN_RESET);
 8002aa2:	4b6f      	ldr	r3, [pc, #444]	; (8002c60 <main+0x37c>)
 8002aa4:	2200      	movs	r2, #0
 8002aa6:	2110      	movs	r1, #16
 8002aa8:	0018      	movs	r0, r3
 8002aaa:	f002 fce2 	bl	8005472 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(ENABLE_9V_GPIO_Port,ENABLE_9V_Pin, GPIO_PIN_RESET);
 8002aae:	2380      	movs	r3, #128	; 0x80
 8002ab0:	0219      	lsls	r1, r3, #8
 8002ab2:	2390      	movs	r3, #144	; 0x90
 8002ab4:	05db      	lsls	r3, r3, #23
 8002ab6:	2200      	movs	r2, #0
 8002ab8:	0018      	movs	r0, r3
 8002aba:	f002 fcda 	bl	8005472 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(BT_EN_GPIO_Port,BT_EN_Pin, GPIO_PIN_RESET);
 8002abe:	4b6c      	ldr	r3, [pc, #432]	; (8002c70 <main+0x38c>)
 8002ac0:	2200      	movs	r2, #0
 8002ac2:	2180      	movs	r1, #128	; 0x80
 8002ac4:	0018      	movs	r0, r3
 8002ac6:	f002 fcd4 	bl	8005472 <HAL_GPIO_WritePin>
#if DISPLAY == 1
			char s[7];
			int vorkomma = 0, nachkomma = 0;
 8002aca:	2300      	movs	r3, #0
 8002acc:	623b      	str	r3, [r7, #32]
 8002ace:	2300      	movs	r3, #0
 8002ad0:	61fb      	str	r3, [r7, #28]
			ssd1306_Fill(Black);
 8002ad2:	2000      	movs	r0, #0
 8002ad4:	f000 fffa 	bl	8003acc <ssd1306_Fill>
			ssd1306_SetCursor(0, 0);
 8002ad8:	2100      	movs	r1, #0
 8002ada:	2000      	movs	r0, #0
 8002adc:	f001 f97a 	bl	8003dd4 <ssd1306_SetCursor>
			ssd1306_WriteString("GurkiBox   V03", Font_6x8, White);
 8002ae0:	4a61      	ldr	r2, [pc, #388]	; (8002c68 <main+0x384>)
 8002ae2:	4864      	ldr	r0, [pc, #400]	; (8002c74 <main+0x390>)
 8002ae4:	2301      	movs	r3, #1
 8002ae6:	6811      	ldr	r1, [r2, #0]
 8002ae8:	6852      	ldr	r2, [r2, #4]
 8002aea:	f001 f949 	bl	8003d80 <ssd1306_WriteString>
			//bass
			if((HAL_GPIO_ReadPin(DIAG_AMP1_GPIO_Port, DIAG_AMP1_Pin) == GPIO_PIN_RESET)){
 8002aee:	2380      	movs	r3, #128	; 0x80
 8002af0:	009b      	lsls	r3, r3, #2
 8002af2:	4a5b      	ldr	r2, [pc, #364]	; (8002c60 <main+0x37c>)
 8002af4:	0019      	movs	r1, r3
 8002af6:	0010      	movs	r0, r2
 8002af8:	f002 fc9e 	bl	8005438 <HAL_GPIO_ReadPin>
 8002afc:	1e03      	subs	r3, r0, #0
 8002afe:	d10a      	bne.n	8002b16 <main+0x232>
				ssd1306_SetCursor(0, 10);
 8002b00:	210a      	movs	r1, #10
 8002b02:	2000      	movs	r0, #0
 8002b04:	f001 f966 	bl	8003dd4 <ssd1306_SetCursor>
				ssd1306_WriteString("Error Amp1", Font_6x8, White);
 8002b08:	4a57      	ldr	r2, [pc, #348]	; (8002c68 <main+0x384>)
 8002b0a:	485b      	ldr	r0, [pc, #364]	; (8002c78 <main+0x394>)
 8002b0c:	2301      	movs	r3, #1
 8002b0e:	6811      	ldr	r1, [r2, #0]
 8002b10:	6852      	ldr	r2, [r2, #4]
 8002b12:	f001 f935 	bl	8003d80 <ssd1306_WriteString>
			}
			if((HAL_GPIO_ReadPin(DIAG_AMP2_GPIO_Port, DIAG_AMP2_Pin) == GPIO_PIN_RESET)){
 8002b16:	2380      	movs	r3, #128	; 0x80
 8002b18:	01db      	lsls	r3, r3, #7
 8002b1a:	4a51      	ldr	r2, [pc, #324]	; (8002c60 <main+0x37c>)
 8002b1c:	0019      	movs	r1, r3
 8002b1e:	0010      	movs	r0, r2
 8002b20:	f002 fc8a 	bl	8005438 <HAL_GPIO_ReadPin>
 8002b24:	1e03      	subs	r3, r0, #0
 8002b26:	d10a      	bne.n	8002b3e <main+0x25a>
				ssd1306_SetCursor(0, 10);
 8002b28:	210a      	movs	r1, #10
 8002b2a:	2000      	movs	r0, #0
 8002b2c:	f001 f952 	bl	8003dd4 <ssd1306_SetCursor>
				ssd1306_WriteString("Error Amp2", Font_6x8, White);
 8002b30:	4a4d      	ldr	r2, [pc, #308]	; (8002c68 <main+0x384>)
 8002b32:	4852      	ldr	r0, [pc, #328]	; (8002c7c <main+0x398>)
 8002b34:	2301      	movs	r3, #1
 8002b36:	6811      	ldr	r1, [r2, #0]
 8002b38:	6852      	ldr	r2, [r2, #4]
 8002b3a:	f001 f921 	bl	8003d80 <ssd1306_WriteString>
			}
			if((HAL_GPIO_ReadPin(BT_FAULT_GPIO_Port, BT_FAULT_Pin) == GPIO_PIN_RESET)){
 8002b3e:	2380      	movs	r3, #128	; 0x80
 8002b40:	015a      	lsls	r2, r3, #5
 8002b42:	2390      	movs	r3, #144	; 0x90
 8002b44:	05db      	lsls	r3, r3, #23
 8002b46:	0011      	movs	r1, r2
 8002b48:	0018      	movs	r0, r3
 8002b4a:	f002 fc75 	bl	8005438 <HAL_GPIO_ReadPin>
 8002b4e:	1e03      	subs	r3, r0, #0
 8002b50:	d115      	bne.n	8002b7e <main+0x29a>
				ssd1306_SetCursor(0, 10);
 8002b52:	210a      	movs	r1, #10
 8002b54:	2000      	movs	r0, #0
 8002b56:	f001 f93d 	bl	8003dd4 <ssd1306_SetCursor>
				ssd1306_WriteString("Error ", Font_6x8, White);
 8002b5a:	4a43      	ldr	r2, [pc, #268]	; (8002c68 <main+0x384>)
 8002b5c:	4848      	ldr	r0, [pc, #288]	; (8002c80 <main+0x39c>)
 8002b5e:	2301      	movs	r3, #1
 8002b60:	6811      	ldr	r1, [r2, #0]
 8002b62:	6852      	ldr	r2, [r2, #4]
 8002b64:	f001 f90c 	bl	8003d80 <ssd1306_WriteString>
				ssd1306_SetCursor(0, 20);
 8002b68:	2114      	movs	r1, #20
 8002b6a:	2000      	movs	r0, #0
 8002b6c:	f001 f932 	bl	8003dd4 <ssd1306_SetCursor>
				ssd1306_WriteString("Bluetooth ", Font_6x8, White);
 8002b70:	4a3d      	ldr	r2, [pc, #244]	; (8002c68 <main+0x384>)
 8002b72:	4844      	ldr	r0, [pc, #272]	; (8002c84 <main+0x3a0>)
 8002b74:	2301      	movs	r3, #1
 8002b76:	6811      	ldr	r1, [r2, #0]
 8002b78:	6852      	ldr	r2, [r2, #4]
 8002b7a:	f001 f901 	bl	8003d80 <ssd1306_WriteString>
			}
			ssd1306_UpdateScreen();
 8002b7e:	f000 ffc9 	bl	8003b14 <ssd1306_UpdateScreen>
#endif
		  while(1){
			  HAL_GPIO_WritePin(STATUS_LED_GPIO_Port, STATUS_LED_Pin, GPIO_PIN_SET);
 8002b82:	2380      	movs	r3, #128	; 0x80
 8002b84:	0059      	lsls	r1, r3, #1
 8002b86:	2390      	movs	r3, #144	; 0x90
 8002b88:	05db      	lsls	r3, r3, #23
 8002b8a:	2201      	movs	r2, #1
 8002b8c:	0018      	movs	r0, r3
 8002b8e:	f002 fc70 	bl	8005472 <HAL_GPIO_WritePin>
 8002b92:	e7f6      	b.n	8002b82 <main+0x29e>
			  ;
		  }
	  }


	  if(adc_flag == 1){
 8002b94:	4b3c      	ldr	r3, [pc, #240]	; (8002c88 <main+0x3a4>)
 8002b96:	781b      	ldrb	r3, [r3, #0]
 8002b98:	2b01      	cmp	r3, #1
 8002b9a:	d000      	beq.n	8002b9e <main+0x2ba>
 8002b9c:	e34b      	b.n	8003236 <main+0x952>
		  // Run LED
		  HAL_GPIO_TogglePin(STATUS_LED_GPIO_Port, STATUS_LED_Pin);
 8002b9e:	2380      	movs	r3, #128	; 0x80
 8002ba0:	005a      	lsls	r2, r3, #1
 8002ba2:	2390      	movs	r3, #144	; 0x90
 8002ba4:	05db      	lsls	r3, r3, #23
 8002ba6:	0011      	movs	r1, r2
 8002ba8:	0018      	movs	r0, r3
 8002baa:	f002 fc7f 	bl	80054ac <HAL_GPIO_TogglePin>

		  if(HAL_ADC_Start_DMA(&hadc, &ADC_buffer, ADC_BUF_SIZE) != HAL_OK)
 8002bae:	4929      	ldr	r1, [pc, #164]	; (8002c54 <main+0x370>)
 8002bb0:	4b27      	ldr	r3, [pc, #156]	; (8002c50 <main+0x36c>)
 8002bb2:	2206      	movs	r2, #6
 8002bb4:	0018      	movs	r0, r3
 8002bb6:	f001 fd33 	bl	8004620 <HAL_ADC_Start_DMA>
 8002bba:	1e03      	subs	r3, r0, #0
 8002bbc:	d001      	beq.n	8002bc2 <main+0x2de>
			  Error_Handler();
 8002bbe:	f000 fed9 	bl	8003974 <Error_Handler>

		  if(HAL_OK != HAL_TIM_Base_Start(&htim1))
 8002bc2:	4b25      	ldr	r3, [pc, #148]	; (8002c58 <main+0x374>)
 8002bc4:	0018      	movs	r0, r3
 8002bc6:	f004 f84f 	bl	8006c68 <HAL_TIM_Base_Start>
 8002bca:	1e03      	subs	r3, r0, #0
 8002bcc:	d001      	beq.n	8002bd2 <main+0x2ee>
			  Error_Handler();
 8002bce:	f000 fed1 	bl	8003974 <Error_Handler>
		  adc_flag = 0;
 8002bd2:	4b2d      	ldr	r3, [pc, #180]	; (8002c88 <main+0x3a4>)
 8002bd4:	2200      	movs	r2, #0
 8002bd6:	701a      	strb	r2, [r3, #0]
		  //TDA7719_begin(hi2c1);

		  // Überprüfen, ob Ladeadapter eingesteckt
		  charger_plugged = HAL_GPIO_ReadPin(CHARGER_PLUGGED_GPIO_Port, CHARGER_PLUGGED_Pin);
 8002bd8:	2380      	movs	r3, #128	; 0x80
 8002bda:	021b      	lsls	r3, r3, #8
 8002bdc:	4a2b      	ldr	r2, [pc, #172]	; (8002c8c <main+0x3a8>)
 8002bde:	0019      	movs	r1, r3
 8002be0:	0010      	movs	r0, r2
 8002be2:	f002 fc29 	bl	8005438 <HAL_GPIO_ReadPin>
 8002be6:	0003      	movs	r3, r0
 8002be8:	001a      	movs	r2, r3
 8002bea:	4b29      	ldr	r3, [pc, #164]	; (8002c90 <main+0x3ac>)
 8002bec:	701a      	strb	r2, [r3, #0]

		  // Akku Spannung überwachen
		  if(HAL_GPIO_ReadPin(EN_PACK_SENSE_GPIO_Port,EN_PACK_SENSE_Pin) == GPIO_PIN_SET){
 8002bee:	2380      	movs	r3, #128	; 0x80
 8002bf0:	019b      	lsls	r3, r3, #6
 8002bf2:	4a26      	ldr	r2, [pc, #152]	; (8002c8c <main+0x3a8>)
 8002bf4:	0019      	movs	r1, r3
 8002bf6:	0010      	movs	r0, r2
 8002bf8:	f002 fc1e 	bl	8005438 <HAL_GPIO_ReadPin>
 8002bfc:	0003      	movs	r3, r0
 8002bfe:	2b01      	cmp	r3, #1
 8002c00:	d000      	beq.n	8002c04 <main+0x320>
 8002c02:	e081      	b.n	8002d08 <main+0x424>
			  //1698 ~ 14,76V
			  pack_val = ADC_buffer[PACK];
 8002c04:	2205      	movs	r2, #5
 8002c06:	4b13      	ldr	r3, [pc, #76]	; (8002c54 <main+0x370>)
 8002c08:	0052      	lsls	r2, r2, #1
 8002c0a:	5ad3      	ldrh	r3, [r2, r3]
 8002c0c:	001a      	movs	r2, r3
 8002c0e:	4b21      	ldr	r3, [pc, #132]	; (8002c94 <main+0x3b0>)
 8002c10:	601a      	str	r2, [r3, #0]
			  // Ringpuffer
			  pack_voltage_buf[buf_index] = ((double)pack_val) * PACK_FAKTOR;
 8002c12:	4b20      	ldr	r3, [pc, #128]	; (8002c94 <main+0x3b0>)
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	0018      	movs	r0, r3
 8002c18:	f7ff f940 	bl	8001e9c <__aeabi_i2d>
 8002c1c:	6038      	str	r0, [r7, #0]
 8002c1e:	6079      	str	r1, [r7, #4]
 8002c20:	491d      	ldr	r1, [pc, #116]	; (8002c98 <main+0x3b4>)
 8002c22:	4a1e      	ldr	r2, [pc, #120]	; (8002c9c <main+0x3b8>)
 8002c24:	4b1e      	ldr	r3, [pc, #120]	; (8002ca0 <main+0x3bc>)
 8002c26:	681d      	ldr	r5, [r3, #0]
 8002c28:	0013      	movs	r3, r2
 8002c2a:	000a      	movs	r2, r1
 8002c2c:	6838      	ldr	r0, [r7, #0]
 8002c2e:	6879      	ldr	r1, [r7, #4]
 8002c30:	f7fe fb44 	bl	80012bc <__aeabi_dmul>
 8002c34:	0003      	movs	r3, r0
 8002c36:	000c      	movs	r4, r1
 8002c38:	491a      	ldr	r1, [pc, #104]	; (8002ca4 <main+0x3c0>)
 8002c3a:	00ea      	lsls	r2, r5, #3
 8002c3c:	188a      	adds	r2, r1, r2
 8002c3e:	6013      	str	r3, [r2, #0]
 8002c40:	6054      	str	r4, [r2, #4]
			  double rms = 0;
 8002c42:	2300      	movs	r3, #0
 8002c44:	2400      	movs	r4, #0
 8002c46:	633b      	str	r3, [r7, #48]	; 0x30
 8002c48:	637c      	str	r4, [r7, #52]	; 0x34
			  for(int i = 0; i<5; i++)rms+=pack_voltage_buf[i];
 8002c4a:	2300      	movs	r3, #0
 8002c4c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002c4e:	e03e      	b.n	8002cce <main+0x3ea>
 8002c50:	200006b8 	.word	0x200006b8
 8002c54:	200006ac 	.word	0x200006ac
 8002c58:	20000628 	.word	0x20000628
 8002c5c:	20000568 	.word	0x20000568
 8002c60:	48000400 	.word	0x48000400
 8002c64:	2000051c 	.word	0x2000051c
 8002c68:	20000008 	.word	0x20000008
 8002c6c:	080078ac 	.word	0x080078ac
 8002c70:	48001400 	.word	0x48001400
 8002c74:	0800786c 	.word	0x0800786c
 8002c78:	080078b8 	.word	0x080078b8
 8002c7c:	080078c4 	.word	0x080078c4
 8002c80:	080078d0 	.word	0x080078d0
 8002c84:	080078d8 	.word	0x080078d8
 8002c88:	2000003c 	.word	0x2000003c
 8002c8c:	48000800 	.word	0x48000800
 8002c90:	20000001 	.word	0x20000001
 8002c94:	20000044 	.word	0x20000044
 8002c98:	bb435057 	.word	0xbb435057
 8002c9c:	3f81ec4a 	.word	0x3f81ec4a
 8002ca0:	20000070 	.word	0x20000070
 8002ca4:	20000048 	.word	0x20000048
 8002ca8:	4ac4      	ldr	r2, [pc, #784]	; (8002fbc <main+0x6d8>)
 8002caa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002cac:	00db      	lsls	r3, r3, #3
 8002cae:	18d3      	adds	r3, r2, r3
 8002cb0:	685c      	ldr	r4, [r3, #4]
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	001a      	movs	r2, r3
 8002cb6:	0023      	movs	r3, r4
 8002cb8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002cba:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8002cbc:	f7fd fbd8 	bl	8000470 <__aeabi_dadd>
 8002cc0:	0003      	movs	r3, r0
 8002cc2:	000c      	movs	r4, r1
 8002cc4:	633b      	str	r3, [r7, #48]	; 0x30
 8002cc6:	637c      	str	r4, [r7, #52]	; 0x34
 8002cc8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002cca:	3301      	adds	r3, #1
 8002ccc:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002cce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002cd0:	2b04      	cmp	r3, #4
 8002cd2:	dde9      	ble.n	8002ca8 <main+0x3c4>
			  rms/=5.0;
 8002cd4:	2200      	movs	r2, #0
 8002cd6:	4bba      	ldr	r3, [pc, #744]	; (8002fc0 <main+0x6dc>)
 8002cd8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002cda:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8002cdc:	f7fd fee4 	bl	8000aa8 <__aeabi_ddiv>
 8002ce0:	0003      	movs	r3, r0
 8002ce2:	000c      	movs	r4, r1
 8002ce4:	633b      	str	r3, [r7, #48]	; 0x30
 8002ce6:	637c      	str	r4, [r7, #52]	; 0x34
			  pack_voltage = rms;
 8002ce8:	4ab6      	ldr	r2, [pc, #728]	; (8002fc4 <main+0x6e0>)
 8002cea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002cec:	6b7c      	ldr	r4, [r7, #52]	; 0x34
 8002cee:	6013      	str	r3, [r2, #0]
 8002cf0:	6054      	str	r4, [r2, #4]
			  buf_index = buf_index == 4 ? 0 : buf_index +1;
 8002cf2:	4bb5      	ldr	r3, [pc, #724]	; (8002fc8 <main+0x6e4>)
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	2b04      	cmp	r3, #4
 8002cf8:	d003      	beq.n	8002d02 <main+0x41e>
 8002cfa:	4bb3      	ldr	r3, [pc, #716]	; (8002fc8 <main+0x6e4>)
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	1c5a      	adds	r2, r3, #1
 8002d00:	e000      	b.n	8002d04 <main+0x420>
 8002d02:	2200      	movs	r2, #0
 8002d04:	4bb0      	ldr	r3, [pc, #704]	; (8002fc8 <main+0x6e4>)
 8002d06:	601a      	str	r2, [r3, #0]
		  }
		  pack_sense++;
 8002d08:	4bb0      	ldr	r3, [pc, #704]	; (8002fcc <main+0x6e8>)
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	1c5a      	adds	r2, r3, #1
 8002d0e:	4baf      	ldr	r3, [pc, #700]	; (8002fcc <main+0x6e8>)
 8002d10:	601a      	str	r2, [r3, #0]
		  HAL_GPIO_WritePin(EN_PACK_SENSE_GPIO_Port,EN_PACK_SENSE_Pin , ((pack_sense%10) == 0));
 8002d12:	4bae      	ldr	r3, [pc, #696]	; (8002fcc <main+0x6e8>)
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	210a      	movs	r1, #10
 8002d18:	0018      	movs	r0, r3
 8002d1a:	f7fd fb65 	bl	80003e8 <__aeabi_idivmod>
 8002d1e:	000b      	movs	r3, r1
 8002d20:	425a      	negs	r2, r3
 8002d22:	4153      	adcs	r3, r2
 8002d24:	b2db      	uxtb	r3, r3
 8002d26:	001a      	movs	r2, r3
 8002d28:	2380      	movs	r3, #128	; 0x80
 8002d2a:	019b      	lsls	r3, r3, #6
 8002d2c:	48a8      	ldr	r0, [pc, #672]	; (8002fd0 <main+0x6ec>)
 8002d2e:	0019      	movs	r1, r3
 8002d30:	f002 fb9f 	bl	8005472 <HAL_GPIO_WritePin>
		  write_bat++;
 8002d34:	4ba7      	ldr	r3, [pc, #668]	; (8002fd4 <main+0x6f0>)
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	1c5a      	adds	r2, r3, #1
 8002d3a:	4ba6      	ldr	r3, [pc, #664]	; (8002fd4 <main+0x6f0>)
 8002d3c:	601a      	str	r2, [r3, #0]
#if DISPLAY == 1
		  if((write_bat % 1000)  == 0)
 8002d3e:	4ba5      	ldr	r3, [pc, #660]	; (8002fd4 <main+0x6f0>)
 8002d40:	681a      	ldr	r2, [r3, #0]
 8002d42:	23fa      	movs	r3, #250	; 0xfa
 8002d44:	0099      	lsls	r1, r3, #2
 8002d46:	0010      	movs	r0, r2
 8002d48:	f7fd fb4e 	bl	80003e8 <__aeabi_idivmod>
 8002d4c:	1e0b      	subs	r3, r1, #0
 8002d4e:	d10c      	bne.n	8002d6a <main+0x486>
			  write_screen(bass, middle, treble, pack_voltage);
 8002d50:	4ba1      	ldr	r3, [pc, #644]	; (8002fd8 <main+0x6f4>)
 8002d52:	6818      	ldr	r0, [r3, #0]
 8002d54:	4ba1      	ldr	r3, [pc, #644]	; (8002fdc <main+0x6f8>)
 8002d56:	6819      	ldr	r1, [r3, #0]
 8002d58:	4ba1      	ldr	r3, [pc, #644]	; (8002fe0 <main+0x6fc>)
 8002d5a:	681a      	ldr	r2, [r3, #0]
 8002d5c:	4b99      	ldr	r3, [pc, #612]	; (8002fc4 <main+0x6e0>)
 8002d5e:	685c      	ldr	r4, [r3, #4]
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	9300      	str	r3, [sp, #0]
 8002d64:	9401      	str	r4, [sp, #4]
 8002d66:	f7ff faff 	bl	8002368 <write_screen>
#endif


		  // Charger abschalten, wenn Spannung überschritten wird
		  pack_full = pack_voltage > (PACK_FULL + (PACK_HYST*2)) ? 1 : pack_voltage < (PACK_FULL - (PACK_HYST*2)) ? 0 : pack_full;
 8002d6a:	489e      	ldr	r0, [pc, #632]	; (8002fe4 <main+0x700>)
 8002d6c:	499e      	ldr	r1, [pc, #632]	; (8002fe8 <main+0x704>)
 8002d6e:	0002      	movs	r2, r0
 8002d70:	000b      	movs	r3, r1
 8002d72:	f7fd fb7d 	bl	8000470 <__aeabi_dadd>
 8002d76:	0003      	movs	r3, r0
 8002d78:	000c      	movs	r4, r1
 8002d7a:	0018      	movs	r0, r3
 8002d7c:	0021      	movs	r1, r4
 8002d7e:	4b99      	ldr	r3, [pc, #612]	; (8002fe4 <main+0x700>)
 8002d80:	4c9a      	ldr	r4, [pc, #616]	; (8002fec <main+0x708>)
 8002d82:	001a      	movs	r2, r3
 8002d84:	0023      	movs	r3, r4
 8002d86:	f7fd fb73 	bl	8000470 <__aeabi_dadd>
 8002d8a:	0003      	movs	r3, r0
 8002d8c:	000c      	movs	r4, r1
 8002d8e:	0018      	movs	r0, r3
 8002d90:	0021      	movs	r1, r4
 8002d92:	4b8c      	ldr	r3, [pc, #560]	; (8002fc4 <main+0x6e0>)
 8002d94:	685c      	ldr	r4, [r3, #4]
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	001a      	movs	r2, r3
 8002d9a:	0023      	movs	r3, r4
 8002d9c:	f7fd fb40 	bl	8000420 <__aeabi_dcmplt>
 8002da0:	1e03      	subs	r3, r0, #0
 8002da2:	d001      	beq.n	8002da8 <main+0x4c4>
 8002da4:	2301      	movs	r3, #1
 8002da6:	e01e      	b.n	8002de6 <main+0x502>
 8002da8:	4c8e      	ldr	r4, [pc, #568]	; (8002fe4 <main+0x700>)
 8002daa:	4d90      	ldr	r5, [pc, #576]	; (8002fec <main+0x708>)
 8002dac:	488d      	ldr	r0, [pc, #564]	; (8002fe4 <main+0x700>)
 8002dae:	498e      	ldr	r1, [pc, #568]	; (8002fe8 <main+0x704>)
 8002db0:	0002      	movs	r2, r0
 8002db2:	000b      	movs	r3, r1
 8002db4:	f7fd fb5c 	bl	8000470 <__aeabi_dadd>
 8002db8:	0002      	movs	r2, r0
 8002dba:	000b      	movs	r3, r1
 8002dbc:	0020      	movs	r0, r4
 8002dbe:	0029      	movs	r1, r5
 8002dc0:	f7fe fcee 	bl	80017a0 <__aeabi_dsub>
 8002dc4:	0003      	movs	r3, r0
 8002dc6:	000c      	movs	r4, r1
 8002dc8:	0018      	movs	r0, r3
 8002dca:	0021      	movs	r1, r4
 8002dcc:	4b7d      	ldr	r3, [pc, #500]	; (8002fc4 <main+0x6e0>)
 8002dce:	685c      	ldr	r4, [r3, #4]
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	001a      	movs	r2, r3
 8002dd4:	0023      	movs	r3, r4
 8002dd6:	f7fd fb37 	bl	8000448 <__aeabi_dcmpgt>
 8002dda:	1e03      	subs	r3, r0, #0
 8002ddc:	d001      	beq.n	8002de2 <main+0x4fe>
 8002dde:	2300      	movs	r3, #0
 8002de0:	e001      	b.n	8002de6 <main+0x502>
 8002de2:	4b83      	ldr	r3, [pc, #524]	; (8002ff0 <main+0x70c>)
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	4a82      	ldr	r2, [pc, #520]	; (8002ff0 <main+0x70c>)
 8002de8:	6013      	str	r3, [r2, #0]
		  // TEST pack_full = pack_voltage > (15.0 + (PACK_HYST*2)) ? 1 : pack_voltage < 15.0 ? 0 : 0;
		  HAL_GPIO_WritePin(CHARGER_DISABLE_GPIO_Port,CHARGER_DISABLE_Pin , pack_full);
 8002dea:	4b81      	ldr	r3, [pc, #516]	; (8002ff0 <main+0x70c>)
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	b2da      	uxtb	r2, r3
 8002df0:	2380      	movs	r3, #128	; 0x80
 8002df2:	01db      	lsls	r3, r3, #7
 8002df4:	4876      	ldr	r0, [pc, #472]	; (8002fd0 <main+0x6ec>)
 8002df6:	0019      	movs	r1, r3
 8002df8:	f002 fb3b 	bl	8005472 <HAL_GPIO_WritePin>

		  // Versorgungsspannung schalten
		  pack_low = (pack_voltage > (PACK_LOW + PACK_HYST)) ? 0 : (pack_voltage < PACK_LOW) ? 1 : pack_low;
 8002dfc:	2000      	movs	r0, #0
 8002dfe:	497d      	ldr	r1, [pc, #500]	; (8002ff4 <main+0x710>)
 8002e00:	4b78      	ldr	r3, [pc, #480]	; (8002fe4 <main+0x700>)
 8002e02:	4c79      	ldr	r4, [pc, #484]	; (8002fe8 <main+0x704>)
 8002e04:	001a      	movs	r2, r3
 8002e06:	0023      	movs	r3, r4
 8002e08:	f7fd fb32 	bl	8000470 <__aeabi_dadd>
 8002e0c:	0003      	movs	r3, r0
 8002e0e:	000c      	movs	r4, r1
 8002e10:	0018      	movs	r0, r3
 8002e12:	0021      	movs	r1, r4
 8002e14:	4b6b      	ldr	r3, [pc, #428]	; (8002fc4 <main+0x6e0>)
 8002e16:	685c      	ldr	r4, [r3, #4]
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	001a      	movs	r2, r3
 8002e1c:	0023      	movs	r3, r4
 8002e1e:	f7fd faff 	bl	8000420 <__aeabi_dcmplt>
 8002e22:	1e03      	subs	r3, r0, #0
 8002e24:	d001      	beq.n	8002e2a <main+0x546>
 8002e26:	2300      	movs	r3, #0
 8002e28:	e00e      	b.n	8002e48 <main+0x564>
 8002e2a:	4b66      	ldr	r3, [pc, #408]	; (8002fc4 <main+0x6e0>)
 8002e2c:	6818      	ldr	r0, [r3, #0]
 8002e2e:	6859      	ldr	r1, [r3, #4]
 8002e30:	2300      	movs	r3, #0
 8002e32:	4c70      	ldr	r4, [pc, #448]	; (8002ff4 <main+0x710>)
 8002e34:	001a      	movs	r2, r3
 8002e36:	0023      	movs	r3, r4
 8002e38:	f7fd faf2 	bl	8000420 <__aeabi_dcmplt>
 8002e3c:	1e03      	subs	r3, r0, #0
 8002e3e:	d001      	beq.n	8002e44 <main+0x560>
 8002e40:	2301      	movs	r3, #1
 8002e42:	e001      	b.n	8002e48 <main+0x564>
 8002e44:	4b6c      	ldr	r3, [pc, #432]	; (8002ff8 <main+0x714>)
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	4a6b      	ldr	r2, [pc, #428]	; (8002ff8 <main+0x714>)
 8002e4a:	6013      	str	r3, [r2, #0]

		  state_3v3 = HAL_GPIO_ReadPin(U3V3_ENABLED_GPIO_Port, U3V3_ENABLED_Pin);
 8002e4c:	4b6b      	ldr	r3, [pc, #428]	; (8002ffc <main+0x718>)
 8002e4e:	2120      	movs	r1, #32
 8002e50:	0018      	movs	r0, r3
 8002e52:	f002 faf1 	bl	8005438 <HAL_GPIO_ReadPin>
 8002e56:	0003      	movs	r3, r0
 8002e58:	001a      	movs	r2, r3
 8002e5a:	4b69      	ldr	r3, [pc, #420]	; (8003000 <main+0x71c>)
 8002e5c:	701a      	strb	r2, [r3, #0]
		  int power_on = (state_3v3 == GPIO_PIN_RESET) && (pack_low == 0);
 8002e5e:	4b68      	ldr	r3, [pc, #416]	; (8003000 <main+0x71c>)
 8002e60:	781b      	ldrb	r3, [r3, #0]
 8002e62:	2b00      	cmp	r3, #0
 8002e64:	d105      	bne.n	8002e72 <main+0x58e>
 8002e66:	4b64      	ldr	r3, [pc, #400]	; (8002ff8 <main+0x714>)
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	2b00      	cmp	r3, #0
 8002e6c:	d101      	bne.n	8002e72 <main+0x58e>
 8002e6e:	2301      	movs	r3, #1
 8002e70:	e000      	b.n	8002e74 <main+0x590>
 8002e72:	2300      	movs	r3, #0
 8002e74:	62bb      	str	r3, [r7, #40]	; 0x28
		  HAL_GPIO_WritePin(POWER_GPIO_Port,POWER_Pin, power_on);
 8002e76:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e78:	b2db      	uxtb	r3, r3
 8002e7a:	4860      	ldr	r0, [pc, #384]	; (8002ffc <main+0x718>)
 8002e7c:	001a      	movs	r2, r3
 8002e7e:	2110      	movs	r1, #16
 8002e80:	f002 faf7 	bl	8005472 <HAL_GPIO_WritePin>

		  // Versorgungsspannung für Audio-DSP einschalten
		  HAL_GPIO_WritePin(ENABLE_9V_GPIO_Port,ENABLE_9V_Pin, power_on);
 8002e84:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e86:	b2da      	uxtb	r2, r3
 8002e88:	2380      	movs	r3, #128	; 0x80
 8002e8a:	0219      	lsls	r1, r3, #8
 8002e8c:	2390      	movs	r3, #144	; 0x90
 8002e8e:	05db      	lsls	r3, r3, #23
 8002e90:	0018      	movs	r0, r3
 8002e92:	f002 faee 	bl	8005472 <HAL_GPIO_WritePin>
		  // Bluetooth Modul einschalten
		  HAL_GPIO_WritePin(BT_EN_GPIO_Port,BT_EN_Pin, power_on);
 8002e96:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e98:	b2db      	uxtb	r3, r3
 8002e9a:	485a      	ldr	r0, [pc, #360]	; (8003004 <main+0x720>)
 8002e9c:	001a      	movs	r2, r3
 8002e9e:	2180      	movs	r1, #128	; 0x80
 8002ea0:	f002 fae7 	bl	8005472 <HAL_GPIO_WritePin>


		  // DSP initialisieren
		  if(power_rise < HAL_GPIO_ReadPin(POWER_GPIO_Port,POWER_Pin)){
 8002ea4:	4b55      	ldr	r3, [pc, #340]	; (8002ffc <main+0x718>)
 8002ea6:	2110      	movs	r1, #16
 8002ea8:	0018      	movs	r0, r3
 8002eaa:	f002 fac5 	bl	8005438 <HAL_GPIO_ReadPin>
 8002eae:	0003      	movs	r3, r0
 8002eb0:	001a      	movs	r2, r3
 8002eb2:	4b55      	ldr	r3, [pc, #340]	; (8003008 <main+0x724>)
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	429a      	cmp	r2, r3
 8002eb8:	dd11      	ble.n	8002ede <main+0x5fa>
#if DISPLAY == 1
			  write_screen(bass, middle, treble, pack_voltage);
 8002eba:	4b47      	ldr	r3, [pc, #284]	; (8002fd8 <main+0x6f4>)
 8002ebc:	6818      	ldr	r0, [r3, #0]
 8002ebe:	4b47      	ldr	r3, [pc, #284]	; (8002fdc <main+0x6f8>)
 8002ec0:	6819      	ldr	r1, [r3, #0]
 8002ec2:	4b47      	ldr	r3, [pc, #284]	; (8002fe0 <main+0x6fc>)
 8002ec4:	681a      	ldr	r2, [r3, #0]
 8002ec6:	4b3f      	ldr	r3, [pc, #252]	; (8002fc4 <main+0x6e0>)
 8002ec8:	685c      	ldr	r4, [r3, #4]
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	9300      	str	r3, [sp, #0]
 8002ece:	9401      	str	r4, [sp, #4]
 8002ed0:	f7ff fa4a 	bl	8002368 <write_screen>
#endif
			  dsp_delay++;
 8002ed4:	4b4d      	ldr	r3, [pc, #308]	; (800300c <main+0x728>)
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	1c5a      	adds	r2, r3, #1
 8002eda:	4b4c      	ldr	r3, [pc, #304]	; (800300c <main+0x728>)
 8002edc:	601a      	str	r2, [r3, #0]
		  }
		  dsp_delay = dsp_delay == 0 ? 0 : dsp_delay < 11 ? dsp_delay + 1 : dsp_delay;
 8002ede:	4b4b      	ldr	r3, [pc, #300]	; (800300c <main+0x728>)
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	2b00      	cmp	r3, #0
 8002ee4:	d00a      	beq.n	8002efc <main+0x618>
 8002ee6:	4b49      	ldr	r3, [pc, #292]	; (800300c <main+0x728>)
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	2b0a      	cmp	r3, #10
 8002eec:	dc03      	bgt.n	8002ef6 <main+0x612>
 8002eee:	4b47      	ldr	r3, [pc, #284]	; (800300c <main+0x728>)
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	3301      	adds	r3, #1
 8002ef4:	e003      	b.n	8002efe <main+0x61a>
 8002ef6:	4b45      	ldr	r3, [pc, #276]	; (800300c <main+0x728>)
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	e000      	b.n	8002efe <main+0x61a>
 8002efc:	2300      	movs	r3, #0
 8002efe:	4a43      	ldr	r2, [pc, #268]	; (800300c <main+0x728>)
 8002f00:	6013      	str	r3, [r2, #0]
		  if( dsp_delay == 10){
 8002f02:	4b42      	ldr	r3, [pc, #264]	; (800300c <main+0x728>)
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	2b0a      	cmp	r3, #10
 8002f08:	d140      	bne.n	8002f8c <main+0x6a8>
			  // 1s gewartet nach power up
			  // Endstufen einschalten
			  HAL_GPIO_WritePin(MUTE_AMP1_GPIO_Port,MUTE_AMP1_Pin, GPIO_PIN_RESET);
 8002f0a:	4b3c      	ldr	r3, [pc, #240]	; (8002ffc <main+0x718>)
 8002f0c:	2200      	movs	r2, #0
 8002f0e:	2180      	movs	r1, #128	; 0x80
 8002f10:	0018      	movs	r0, r3
 8002f12:	f002 faae 	bl	8005472 <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(STBY_AMP1_GPIO_Port,STBY_AMP1_Pin, GPIO_PIN_SET);
 8002f16:	2380      	movs	r3, #128	; 0x80
 8002f18:	005b      	lsls	r3, r3, #1
 8002f1a:	4838      	ldr	r0, [pc, #224]	; (8002ffc <main+0x718>)
 8002f1c:	2201      	movs	r2, #1
 8002f1e:	0019      	movs	r1, r3
 8002f20:	f002 faa7 	bl	8005472 <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(MUTE_AMP2_GPIO_Port,MUTE_AMP2_Pin, GPIO_PIN_RESET);
 8002f24:	2380      	movs	r3, #128	; 0x80
 8002f26:	019b      	lsls	r3, r3, #6
 8002f28:	4834      	ldr	r0, [pc, #208]	; (8002ffc <main+0x718>)
 8002f2a:	2200      	movs	r2, #0
 8002f2c:	0019      	movs	r1, r3
 8002f2e:	f002 faa0 	bl	8005472 <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(STBY_AMP2_GPIO_Port,STBY_AMP2_Pin, GPIO_PIN_SET);
 8002f32:	4b32      	ldr	r3, [pc, #200]	; (8002ffc <main+0x718>)
 8002f34:	2201      	movs	r2, #1
 8002f36:	2108      	movs	r1, #8
 8002f38:	0018      	movs	r0, r3
 8002f3a:	f002 fa9a 	bl	8005472 <HAL_GPIO_WritePin>
			  TDA7719_begin(hi2c1);
 8002f3e:	4c34      	ldr	r4, [pc, #208]	; (8003010 <main+0x72c>)
 8002f40:	466b      	mov	r3, sp
 8002f42:	0018      	movs	r0, r3
 8002f44:	0023      	movs	r3, r4
 8002f46:	3310      	adds	r3, #16
 8002f48:	223c      	movs	r2, #60	; 0x3c
 8002f4a:	0019      	movs	r1, r3
 8002f4c:	f004 fc3e 	bl	80077cc <memcpy>
 8002f50:	6820      	ldr	r0, [r4, #0]
 8002f52:	6861      	ldr	r1, [r4, #4]
 8002f54:	68a2      	ldr	r2, [r4, #8]
 8002f56:	68e3      	ldr	r3, [r4, #12]
 8002f58:	f7fe fff8 	bl	8001f4c <TDA7719_begin>
			  TDA7719_volume((int8_t)gain);
 8002f5c:	4b2d      	ldr	r3, [pc, #180]	; (8003014 <main+0x730>)
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	b25b      	sxtb	r3, r3
 8002f62:	0018      	movs	r0, r3
 8002f64:	f7ff f8a0 	bl	80020a8 <TDA7719_volume>
			  TDA7719_bass((int8_t)bass);
 8002f68:	4b1b      	ldr	r3, [pc, #108]	; (8002fd8 <main+0x6f4>)
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	b25b      	sxtb	r3, r3
 8002f6e:	0018      	movs	r0, r3
 8002f70:	f7ff f8f2 	bl	8002158 <TDA7719_bass>
			  TDA7719_middle((int8_t)middle);
 8002f74:	4b19      	ldr	r3, [pc, #100]	; (8002fdc <main+0x6f8>)
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	b25b      	sxtb	r3, r3
 8002f7a:	0018      	movs	r0, r3
 8002f7c:	f7ff f944 	bl	8002208 <TDA7719_middle>
			  TDA7719_treble((int8_t)treble);
 8002f80:	4b17      	ldr	r3, [pc, #92]	; (8002fe0 <main+0x6fc>)
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	b25b      	sxtb	r3, r3
 8002f86:	0018      	movs	r0, r3
 8002f88:	f7ff f996 	bl	80022b8 <TDA7719_treble>

		  }
		  power_rise = HAL_GPIO_ReadPin(POWER_GPIO_Port,POWER_Pin);
 8002f8c:	4b1b      	ldr	r3, [pc, #108]	; (8002ffc <main+0x718>)
 8002f8e:	2110      	movs	r1, #16
 8002f90:	0018      	movs	r0, r3
 8002f92:	f002 fa51 	bl	8005438 <HAL_GPIO_ReadPin>
 8002f96:	0003      	movs	r3, r0
 8002f98:	001a      	movs	r2, r3
 8002f9a:	4b1b      	ldr	r3, [pc, #108]	; (8003008 <main+0x724>)
 8002f9c:	601a      	str	r2, [r3, #0]
		  if(power_rise == 0) dsp_delay = 0;
 8002f9e:	4b1a      	ldr	r3, [pc, #104]	; (8003008 <main+0x724>)
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	2b00      	cmp	r3, #0
 8002fa4:	d102      	bne.n	8002fac <main+0x6c8>
 8002fa6:	4b19      	ldr	r3, [pc, #100]	; (800300c <main+0x728>)
 8002fa8:	2200      	movs	r2, #0
 8002faa:	601a      	str	r2, [r3, #0]

		  // Splash screen -  Moin Digga!
		  splash_sceen=splash_sceen <= 100 ? splash_sceen + 1 : splash_sceen;
 8002fac:	4b1a      	ldr	r3, [pc, #104]	; (8003018 <main+0x734>)
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	2b64      	cmp	r3, #100	; 0x64
 8002fb2:	dc33      	bgt.n	800301c <main+0x738>
 8002fb4:	4b18      	ldr	r3, [pc, #96]	; (8003018 <main+0x734>)
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	1c5a      	adds	r2, r3, #1
 8002fba:	e031      	b.n	8003020 <main+0x73c>
 8002fbc:	20000048 	.word	0x20000048
 8002fc0:	40140000 	.word	0x40140000
 8002fc4:	20000078 	.word	0x20000078
 8002fc8:	20000070 	.word	0x20000070
 8002fcc:	20000040 	.word	0x20000040
 8002fd0:	48000800 	.word	0x48000800
 8002fd4:	200000b0 	.word	0x200000b0
 8002fd8:	200000a0 	.word	0x200000a0
 8002fdc:	200000a4 	.word	0x200000a4
 8002fe0:	200000a8 	.word	0x200000a8
 8002fe4:	9999999a 	.word	0x9999999a
 8002fe8:	3fb99999 	.word	0x3fb99999
 8002fec:	40309999 	.word	0x40309999
 8002ff0:	20000080 	.word	0x20000080
 8002ff4:	402c0000 	.word	0x402c0000
 8002ff8:	20000004 	.word	0x20000004
 8002ffc:	48000400 	.word	0x48000400
 8003000:	20000000 	.word	0x20000000
 8003004:	48001400 	.word	0x48001400
 8003008:	20000084 	.word	0x20000084
 800300c:	20000088 	.word	0x20000088
 8003010:	2000051c 	.word	0x2000051c
 8003014:	2000009c 	.word	0x2000009c
 8003018:	200000ac 	.word	0x200000ac
 800301c:	4b8c      	ldr	r3, [pc, #560]	; (8003250 <main+0x96c>)
 800301e:	681a      	ldr	r2, [r3, #0]
 8003020:	4b8b      	ldr	r3, [pc, #556]	; (8003250 <main+0x96c>)
 8003022:	601a      	str	r2, [r3, #0]
		  if(splash_sceen== 100){
 8003024:	4b8a      	ldr	r3, [pc, #552]	; (8003250 <main+0x96c>)
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	2b64      	cmp	r3, #100	; 0x64
 800302a:	d10c      	bne.n	8003046 <main+0x762>
#if DISPLAY == 1
			  write_screen(bass, middle, treble, pack_voltage);
 800302c:	4b89      	ldr	r3, [pc, #548]	; (8003254 <main+0x970>)
 800302e:	6818      	ldr	r0, [r3, #0]
 8003030:	4b89      	ldr	r3, [pc, #548]	; (8003258 <main+0x974>)
 8003032:	6819      	ldr	r1, [r3, #0]
 8003034:	4b89      	ldr	r3, [pc, #548]	; (800325c <main+0x978>)
 8003036:	681a      	ldr	r2, [r3, #0]
 8003038:	4b89      	ldr	r3, [pc, #548]	; (8003260 <main+0x97c>)
 800303a:	685c      	ldr	r4, [r3, #4]
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	9300      	str	r3, [sp, #0]
 8003040:	9401      	str	r4, [sp, #4]
 8003042:	f7ff f991 	bl	8002368 <write_screen>
#endif
		  }

		  gain = ADC_buffer[GAIN]/GAIN_STEPS;
 8003046:	2204      	movs	r2, #4
 8003048:	4b86      	ldr	r3, [pc, #536]	; (8003264 <main+0x980>)
 800304a:	0052      	lsls	r2, r2, #1
 800304c:	5ad3      	ldrh	r3, [r2, r3]
 800304e:	001a      	movs	r2, r3
 8003050:	2388      	movs	r3, #136	; 0x88
 8003052:	0019      	movs	r1, r3
 8003054:	0010      	movs	r0, r2
 8003056:	f7fd f8e1 	bl	800021c <__divsi3>
 800305a:	0003      	movs	r3, r0
 800305c:	001a      	movs	r2, r3
 800305e:	4b82      	ldr	r3, [pc, #520]	; (8003268 <main+0x984>)
 8003060:	601a      	str	r2, [r3, #0]
		  if(old_gain != gain && ((ADC_buffer[GAIN]%GAIN_STEPS) > GAIN_HYST) && (splash_sceen > 100)){
 8003062:	4b82      	ldr	r3, [pc, #520]	; (800326c <main+0x988>)
 8003064:	681a      	ldr	r2, [r3, #0]
 8003066:	4b80      	ldr	r3, [pc, #512]	; (8003268 <main+0x984>)
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	429a      	cmp	r2, r3
 800306c:	d029      	beq.n	80030c2 <main+0x7de>
 800306e:	2204      	movs	r2, #4
 8003070:	4b7c      	ldr	r3, [pc, #496]	; (8003264 <main+0x980>)
 8003072:	0052      	lsls	r2, r2, #1
 8003074:	5ad3      	ldrh	r3, [r2, r3]
 8003076:	001a      	movs	r2, r3
 8003078:	2388      	movs	r3, #136	; 0x88
 800307a:	0019      	movs	r1, r3
 800307c:	0010      	movs	r0, r2
 800307e:	f7fd f9b3 	bl	80003e8 <__aeabi_idivmod>
 8003082:	000b      	movs	r3, r1
 8003084:	001a      	movs	r2, r3
 8003086:	231e      	movs	r3, #30
 8003088:	429a      	cmp	r2, r3
 800308a:	dd1a      	ble.n	80030c2 <main+0x7de>
 800308c:	4b70      	ldr	r3, [pc, #448]	; (8003250 <main+0x96c>)
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	2b64      	cmp	r3, #100	; 0x64
 8003092:	dd16      	ble.n	80030c2 <main+0x7de>
			  old_gain = gain;
 8003094:	4b74      	ldr	r3, [pc, #464]	; (8003268 <main+0x984>)
 8003096:	681a      	ldr	r2, [r3, #0]
 8003098:	4b74      	ldr	r3, [pc, #464]	; (800326c <main+0x988>)
 800309a:	601a      	str	r2, [r3, #0]
			  TDA7719_volume((int8_t)gain);
 800309c:	4b72      	ldr	r3, [pc, #456]	; (8003268 <main+0x984>)
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	b25b      	sxtb	r3, r3
 80030a2:	0018      	movs	r0, r3
 80030a4:	f7ff f800 	bl	80020a8 <TDA7719_volume>
#if DISPLAY == 1
			  write_screen(bass, middle, treble, pack_voltage);
 80030a8:	4b6a      	ldr	r3, [pc, #424]	; (8003254 <main+0x970>)
 80030aa:	6818      	ldr	r0, [r3, #0]
 80030ac:	4b6a      	ldr	r3, [pc, #424]	; (8003258 <main+0x974>)
 80030ae:	6819      	ldr	r1, [r3, #0]
 80030b0:	4b6a      	ldr	r3, [pc, #424]	; (800325c <main+0x978>)
 80030b2:	681a      	ldr	r2, [r3, #0]
 80030b4:	4b6a      	ldr	r3, [pc, #424]	; (8003260 <main+0x97c>)
 80030b6:	685c      	ldr	r4, [r3, #4]
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	9300      	str	r3, [sp, #0]
 80030bc:	9401      	str	r4, [sp, #4]
 80030be:	f7ff f953 	bl	8002368 <write_screen>
#endif
		  }

		  bass = ADC_buffer[BASS]/GAIN_STEPS;
 80030c2:	2203      	movs	r2, #3
 80030c4:	4b67      	ldr	r3, [pc, #412]	; (8003264 <main+0x980>)
 80030c6:	0052      	lsls	r2, r2, #1
 80030c8:	5ad3      	ldrh	r3, [r2, r3]
 80030ca:	001a      	movs	r2, r3
 80030cc:	2388      	movs	r3, #136	; 0x88
 80030ce:	0019      	movs	r1, r3
 80030d0:	0010      	movs	r0, r2
 80030d2:	f7fd f8a3 	bl	800021c <__divsi3>
 80030d6:	0003      	movs	r3, r0
 80030d8:	001a      	movs	r2, r3
 80030da:	4b5e      	ldr	r3, [pc, #376]	; (8003254 <main+0x970>)
 80030dc:	601a      	str	r2, [r3, #0]
		  if(old_bass != bass && ((ADC_buffer[BASS]%GAIN_STEPS) > GAIN_HYST) && (splash_sceen > 100)){
 80030de:	4b64      	ldr	r3, [pc, #400]	; (8003270 <main+0x98c>)
 80030e0:	681a      	ldr	r2, [r3, #0]
 80030e2:	4b5c      	ldr	r3, [pc, #368]	; (8003254 <main+0x970>)
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	429a      	cmp	r2, r3
 80030e8:	d029      	beq.n	800313e <main+0x85a>
 80030ea:	2203      	movs	r2, #3
 80030ec:	4b5d      	ldr	r3, [pc, #372]	; (8003264 <main+0x980>)
 80030ee:	0052      	lsls	r2, r2, #1
 80030f0:	5ad3      	ldrh	r3, [r2, r3]
 80030f2:	001a      	movs	r2, r3
 80030f4:	2388      	movs	r3, #136	; 0x88
 80030f6:	0019      	movs	r1, r3
 80030f8:	0010      	movs	r0, r2
 80030fa:	f7fd f975 	bl	80003e8 <__aeabi_idivmod>
 80030fe:	000b      	movs	r3, r1
 8003100:	001a      	movs	r2, r3
 8003102:	231e      	movs	r3, #30
 8003104:	429a      	cmp	r2, r3
 8003106:	dd1a      	ble.n	800313e <main+0x85a>
 8003108:	4b51      	ldr	r3, [pc, #324]	; (8003250 <main+0x96c>)
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	2b64      	cmp	r3, #100	; 0x64
 800310e:	dd16      	ble.n	800313e <main+0x85a>
			  old_bass = bass;
 8003110:	4b50      	ldr	r3, [pc, #320]	; (8003254 <main+0x970>)
 8003112:	681a      	ldr	r2, [r3, #0]
 8003114:	4b56      	ldr	r3, [pc, #344]	; (8003270 <main+0x98c>)
 8003116:	601a      	str	r2, [r3, #0]
			  TDA7719_bass((int8_t)bass);
 8003118:	4b4e      	ldr	r3, [pc, #312]	; (8003254 <main+0x970>)
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	b25b      	sxtb	r3, r3
 800311e:	0018      	movs	r0, r3
 8003120:	f7ff f81a 	bl	8002158 <TDA7719_bass>
#if DISPLAY == 1
			  write_screen(bass, middle, treble, pack_voltage);
 8003124:	4b4b      	ldr	r3, [pc, #300]	; (8003254 <main+0x970>)
 8003126:	6818      	ldr	r0, [r3, #0]
 8003128:	4b4b      	ldr	r3, [pc, #300]	; (8003258 <main+0x974>)
 800312a:	6819      	ldr	r1, [r3, #0]
 800312c:	4b4b      	ldr	r3, [pc, #300]	; (800325c <main+0x978>)
 800312e:	681a      	ldr	r2, [r3, #0]
 8003130:	4b4b      	ldr	r3, [pc, #300]	; (8003260 <main+0x97c>)
 8003132:	685c      	ldr	r4, [r3, #4]
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	9300      	str	r3, [sp, #0]
 8003138:	9401      	str	r4, [sp, #4]
 800313a:	f7ff f915 	bl	8002368 <write_screen>
#endif
		  }

		  middle = ADC_buffer[MIDDLE]/GAIN_STEPS;
 800313e:	2202      	movs	r2, #2
 8003140:	4b48      	ldr	r3, [pc, #288]	; (8003264 <main+0x980>)
 8003142:	0052      	lsls	r2, r2, #1
 8003144:	5ad3      	ldrh	r3, [r2, r3]
 8003146:	001a      	movs	r2, r3
 8003148:	2388      	movs	r3, #136	; 0x88
 800314a:	0019      	movs	r1, r3
 800314c:	0010      	movs	r0, r2
 800314e:	f7fd f865 	bl	800021c <__divsi3>
 8003152:	0003      	movs	r3, r0
 8003154:	001a      	movs	r2, r3
 8003156:	4b40      	ldr	r3, [pc, #256]	; (8003258 <main+0x974>)
 8003158:	601a      	str	r2, [r3, #0]
		  if(old_middle != middle && ((ADC_buffer[MIDDLE]%GAIN_STEPS) > GAIN_HYST) && (splash_sceen > 100)){
 800315a:	4b46      	ldr	r3, [pc, #280]	; (8003274 <main+0x990>)
 800315c:	681a      	ldr	r2, [r3, #0]
 800315e:	4b3e      	ldr	r3, [pc, #248]	; (8003258 <main+0x974>)
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	429a      	cmp	r2, r3
 8003164:	d029      	beq.n	80031ba <main+0x8d6>
 8003166:	2202      	movs	r2, #2
 8003168:	4b3e      	ldr	r3, [pc, #248]	; (8003264 <main+0x980>)
 800316a:	0052      	lsls	r2, r2, #1
 800316c:	5ad3      	ldrh	r3, [r2, r3]
 800316e:	001a      	movs	r2, r3
 8003170:	2388      	movs	r3, #136	; 0x88
 8003172:	0019      	movs	r1, r3
 8003174:	0010      	movs	r0, r2
 8003176:	f7fd f937 	bl	80003e8 <__aeabi_idivmod>
 800317a:	000b      	movs	r3, r1
 800317c:	001a      	movs	r2, r3
 800317e:	231e      	movs	r3, #30
 8003180:	429a      	cmp	r2, r3
 8003182:	dd1a      	ble.n	80031ba <main+0x8d6>
 8003184:	4b32      	ldr	r3, [pc, #200]	; (8003250 <main+0x96c>)
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	2b64      	cmp	r3, #100	; 0x64
 800318a:	dd16      	ble.n	80031ba <main+0x8d6>
			  old_middle = middle;
 800318c:	4b32      	ldr	r3, [pc, #200]	; (8003258 <main+0x974>)
 800318e:	681a      	ldr	r2, [r3, #0]
 8003190:	4b38      	ldr	r3, [pc, #224]	; (8003274 <main+0x990>)
 8003192:	601a      	str	r2, [r3, #0]
			  TDA7719_middle((int8_t)middle);
 8003194:	4b30      	ldr	r3, [pc, #192]	; (8003258 <main+0x974>)
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	b25b      	sxtb	r3, r3
 800319a:	0018      	movs	r0, r3
 800319c:	f7ff f834 	bl	8002208 <TDA7719_middle>
#if DISPLAY == 1
			  write_screen(bass, middle, treble, pack_voltage);
 80031a0:	4b2c      	ldr	r3, [pc, #176]	; (8003254 <main+0x970>)
 80031a2:	6818      	ldr	r0, [r3, #0]
 80031a4:	4b2c      	ldr	r3, [pc, #176]	; (8003258 <main+0x974>)
 80031a6:	6819      	ldr	r1, [r3, #0]
 80031a8:	4b2c      	ldr	r3, [pc, #176]	; (800325c <main+0x978>)
 80031aa:	681a      	ldr	r2, [r3, #0]
 80031ac:	4b2c      	ldr	r3, [pc, #176]	; (8003260 <main+0x97c>)
 80031ae:	685c      	ldr	r4, [r3, #4]
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	9300      	str	r3, [sp, #0]
 80031b4:	9401      	str	r4, [sp, #4]
 80031b6:	f7ff f8d7 	bl	8002368 <write_screen>
#endif
		  }

		  treble = ADC_buffer[TREBLE]/GAIN_STEPS;
 80031ba:	2201      	movs	r2, #1
 80031bc:	4b29      	ldr	r3, [pc, #164]	; (8003264 <main+0x980>)
 80031be:	0052      	lsls	r2, r2, #1
 80031c0:	5ad3      	ldrh	r3, [r2, r3]
 80031c2:	001a      	movs	r2, r3
 80031c4:	2388      	movs	r3, #136	; 0x88
 80031c6:	0019      	movs	r1, r3
 80031c8:	0010      	movs	r0, r2
 80031ca:	f7fd f827 	bl	800021c <__divsi3>
 80031ce:	0003      	movs	r3, r0
 80031d0:	001a      	movs	r2, r3
 80031d2:	4b22      	ldr	r3, [pc, #136]	; (800325c <main+0x978>)
 80031d4:	601a      	str	r2, [r3, #0]
		  if(old_treble != treble && ((ADC_buffer[TREBLE]%GAIN_STEPS) > GAIN_HYST) && (splash_sceen > 100)){
 80031d6:	4b28      	ldr	r3, [pc, #160]	; (8003278 <main+0x994>)
 80031d8:	681a      	ldr	r2, [r3, #0]
 80031da:	4b20      	ldr	r3, [pc, #128]	; (800325c <main+0x978>)
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	429a      	cmp	r2, r3
 80031e0:	d029      	beq.n	8003236 <main+0x952>
 80031e2:	2201      	movs	r2, #1
 80031e4:	4b1f      	ldr	r3, [pc, #124]	; (8003264 <main+0x980>)
 80031e6:	0052      	lsls	r2, r2, #1
 80031e8:	5ad3      	ldrh	r3, [r2, r3]
 80031ea:	001a      	movs	r2, r3
 80031ec:	2388      	movs	r3, #136	; 0x88
 80031ee:	0019      	movs	r1, r3
 80031f0:	0010      	movs	r0, r2
 80031f2:	f7fd f8f9 	bl	80003e8 <__aeabi_idivmod>
 80031f6:	000b      	movs	r3, r1
 80031f8:	001a      	movs	r2, r3
 80031fa:	231e      	movs	r3, #30
 80031fc:	429a      	cmp	r2, r3
 80031fe:	dd1a      	ble.n	8003236 <main+0x952>
 8003200:	4b13      	ldr	r3, [pc, #76]	; (8003250 <main+0x96c>)
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	2b64      	cmp	r3, #100	; 0x64
 8003206:	dd16      	ble.n	8003236 <main+0x952>
			  old_treble = treble;
 8003208:	4b14      	ldr	r3, [pc, #80]	; (800325c <main+0x978>)
 800320a:	681a      	ldr	r2, [r3, #0]
 800320c:	4b1a      	ldr	r3, [pc, #104]	; (8003278 <main+0x994>)
 800320e:	601a      	str	r2, [r3, #0]
			  TDA7719_treble((int8_t)treble);
 8003210:	4b12      	ldr	r3, [pc, #72]	; (800325c <main+0x978>)
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	b25b      	sxtb	r3, r3
 8003216:	0018      	movs	r0, r3
 8003218:	f7ff f84e 	bl	80022b8 <TDA7719_treble>
#if DISPLAY == 1
			  write_screen(bass, middle, treble, pack_voltage);
 800321c:	4b0d      	ldr	r3, [pc, #52]	; (8003254 <main+0x970>)
 800321e:	6818      	ldr	r0, [r3, #0]
 8003220:	4b0d      	ldr	r3, [pc, #52]	; (8003258 <main+0x974>)
 8003222:	6819      	ldr	r1, [r3, #0]
 8003224:	4b0d      	ldr	r3, [pc, #52]	; (800325c <main+0x978>)
 8003226:	681a      	ldr	r2, [r3, #0]
 8003228:	4b0d      	ldr	r3, [pc, #52]	; (8003260 <main+0x97c>)
 800322a:	685c      	ldr	r4, [r3, #4]
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	9300      	str	r3, [sp, #0]
 8003230:	9401      	str	r4, [sp, #4]
 8003232:	f7ff f899 	bl	8002368 <write_screen>
		  }

	  }

	  // Power Schalter lesen zum aktiven ausschalten
	  state = HAL_GPIO_ReadPin(POWER_GPIO_Port, POWER_Pin);
 8003236:	231f      	movs	r3, #31
 8003238:	2208      	movs	r2, #8
 800323a:	18ba      	adds	r2, r7, r2
 800323c:	18d4      	adds	r4, r2, r3
 800323e:	4b0f      	ldr	r3, [pc, #60]	; (800327c <main+0x998>)
 8003240:	2110      	movs	r1, #16
 8003242:	0018      	movs	r0, r3
 8003244:	f002 f8f8 	bl	8005438 <HAL_GPIO_ReadPin>
 8003248:	0003      	movs	r3, r0
 800324a:	7023      	strb	r3, [r4, #0]
	  if((HAL_GPIO_ReadPin(DIAG_AMP1_GPIO_Port, DIAG_AMP1_Pin) == GPIO_PIN_RESET) ||
 800324c:	f7ff fbf2 	bl	8002a34 <main+0x150>
 8003250:	200000ac 	.word	0x200000ac
 8003254:	200000a0 	.word	0x200000a0
 8003258:	200000a4 	.word	0x200000a4
 800325c:	200000a8 	.word	0x200000a8
 8003260:	20000078 	.word	0x20000078
 8003264:	200006ac 	.word	0x200006ac
 8003268:	2000009c 	.word	0x2000009c
 800326c:	2000008c 	.word	0x2000008c
 8003270:	20000090 	.word	0x20000090
 8003274:	20000094 	.word	0x20000094
 8003278:	20000098 	.word	0x20000098
 800327c:	48000400 	.word	0x48000400

08003280 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8003280:	b590      	push	{r4, r7, lr}
 8003282:	b095      	sub	sp, #84	; 0x54
 8003284:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8003286:	2420      	movs	r4, #32
 8003288:	193b      	adds	r3, r7, r4
 800328a:	0018      	movs	r0, r3
 800328c:	2330      	movs	r3, #48	; 0x30
 800328e:	001a      	movs	r2, r3
 8003290:	2100      	movs	r1, #0
 8003292:	f004 faa4 	bl	80077de <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8003296:	2310      	movs	r3, #16
 8003298:	18fb      	adds	r3, r7, r3
 800329a:	0018      	movs	r0, r3
 800329c:	2310      	movs	r3, #16
 800329e:	001a      	movs	r2, r3
 80032a0:	2100      	movs	r1, #0
 80032a2:	f004 fa9c 	bl	80077de <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80032a6:	003b      	movs	r3, r7
 80032a8:	0018      	movs	r0, r3
 80032aa:	2310      	movs	r3, #16
 80032ac:	001a      	movs	r2, r3
 80032ae:	2100      	movs	r1, #0
 80032b0:	f004 fa95 	bl	80077de <memset>

  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSI14;
 80032b4:	0021      	movs	r1, r4
 80032b6:	187b      	adds	r3, r7, r1
 80032b8:	2212      	movs	r2, #18
 80032ba:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80032bc:	187b      	adds	r3, r7, r1
 80032be:	2201      	movs	r2, #1
 80032c0:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSI14State = RCC_HSI14_ON;
 80032c2:	187b      	adds	r3, r7, r1
 80032c4:	2201      	movs	r2, #1
 80032c6:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80032c8:	187b      	adds	r3, r7, r1
 80032ca:	2210      	movs	r2, #16
 80032cc:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSI14CalibrationValue = 16;
 80032ce:	187b      	adds	r3, r7, r1
 80032d0:	2210      	movs	r2, #16
 80032d2:	619a      	str	r2, [r3, #24]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80032d4:	187b      	adds	r3, r7, r1
 80032d6:	2202      	movs	r2, #2
 80032d8:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80032da:	187b      	adds	r3, r7, r1
 80032dc:	2200      	movs	r2, #0
 80032de:	625a      	str	r2, [r3, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL8;
 80032e0:	187b      	adds	r3, r7, r1
 80032e2:	22c0      	movs	r2, #192	; 0xc0
 80032e4:	0352      	lsls	r2, r2, #13
 80032e6:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 80032e8:	187b      	adds	r3, r7, r1
 80032ea:	2200      	movs	r2, #0
 80032ec:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80032ee:	187b      	adds	r3, r7, r1
 80032f0:	0018      	movs	r0, r3
 80032f2:	f002 ff51 	bl	8006198 <HAL_RCC_OscConfig>
 80032f6:	1e03      	subs	r3, r0, #0
 80032f8:	d001      	beq.n	80032fe <SystemClock_Config+0x7e>
  {
    Error_Handler();
 80032fa:	f000 fb3b 	bl	8003974 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80032fe:	2110      	movs	r1, #16
 8003300:	187b      	adds	r3, r7, r1
 8003302:	2207      	movs	r2, #7
 8003304:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8003306:	187b      	adds	r3, r7, r1
 8003308:	2202      	movs	r2, #2
 800330a:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800330c:	187b      	adds	r3, r7, r1
 800330e:	2200      	movs	r2, #0
 8003310:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8003312:	187b      	adds	r3, r7, r1
 8003314:	2200      	movs	r2, #0
 8003316:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8003318:	187b      	adds	r3, r7, r1
 800331a:	2101      	movs	r1, #1
 800331c:	0018      	movs	r0, r3
 800331e:	f003 fa57 	bl	80067d0 <HAL_RCC_ClockConfig>
 8003322:	1e03      	subs	r3, r0, #0
 8003324:	d001      	beq.n	800332a <SystemClock_Config+0xaa>
  {
    Error_Handler();
 8003326:	f000 fb25 	bl	8003974 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_I2C1;
 800332a:	003b      	movs	r3, r7
 800332c:	2221      	movs	r2, #33	; 0x21
 800332e:	601a      	str	r2, [r3, #0]
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_SYSCLK;
 8003330:	003b      	movs	r3, r7
 8003332:	2201      	movs	r2, #1
 8003334:	609a      	str	r2, [r3, #8]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_HSI;
 8003336:	003b      	movs	r3, r7
 8003338:	2200      	movs	r2, #0
 800333a:	60da      	str	r2, [r3, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800333c:	003b      	movs	r3, r7
 800333e:	0018      	movs	r0, r3
 8003340:	f003 fb98 	bl	8006a74 <HAL_RCCEx_PeriphCLKConfig>
 8003344:	1e03      	subs	r3, r0, #0
 8003346:	d001      	beq.n	800334c <SystemClock_Config+0xcc>
  {
    Error_Handler();
 8003348:	f000 fb14 	bl	8003974 <Error_Handler>
  }
}
 800334c:	46c0      	nop			; (mov r8, r8)
 800334e:	46bd      	mov	sp, r7
 8003350:	b015      	add	sp, #84	; 0x54
 8003352:	bd90      	pop	{r4, r7, pc}

08003354 <MX_ADC_Init>:
  * @brief ADC Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC_Init(void)
{
 8003354:	b580      	push	{r7, lr}
 8003356:	b084      	sub	sp, #16
 8003358:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC_Init 0 */

  /* USER CODE END ADC_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800335a:	1d3b      	adds	r3, r7, #4
 800335c:	0018      	movs	r0, r3
 800335e:	230c      	movs	r3, #12
 8003360:	001a      	movs	r2, r3
 8003362:	2100      	movs	r1, #0
 8003364:	f004 fa3b 	bl	80077de <memset>
  /* USER CODE BEGIN ADC_Init 1 */

  /* USER CODE END ADC_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion) 
  */
  hadc.Instance = ADC1;
 8003368:	4b53      	ldr	r3, [pc, #332]	; (80034b8 <MX_ADC_Init+0x164>)
 800336a:	4a54      	ldr	r2, [pc, #336]	; (80034bc <MX_ADC_Init+0x168>)
 800336c:	601a      	str	r2, [r3, #0]
  hadc.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 800336e:	4b52      	ldr	r3, [pc, #328]	; (80034b8 <MX_ADC_Init+0x164>)
 8003370:	2200      	movs	r2, #0
 8003372:	605a      	str	r2, [r3, #4]
  hadc.Init.Resolution = ADC_RESOLUTION_12B;
 8003374:	4b50      	ldr	r3, [pc, #320]	; (80034b8 <MX_ADC_Init+0x164>)
 8003376:	2200      	movs	r2, #0
 8003378:	609a      	str	r2, [r3, #8]
  hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800337a:	4b4f      	ldr	r3, [pc, #316]	; (80034b8 <MX_ADC_Init+0x164>)
 800337c:	2200      	movs	r2, #0
 800337e:	60da      	str	r2, [r3, #12]
  hadc.Init.ScanConvMode = ADC_SCAN_DIRECTION_FORWARD;
 8003380:	4b4d      	ldr	r3, [pc, #308]	; (80034b8 <MX_ADC_Init+0x164>)
 8003382:	2201      	movs	r2, #1
 8003384:	611a      	str	r2, [r3, #16]
  hadc.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8003386:	4b4c      	ldr	r3, [pc, #304]	; (80034b8 <MX_ADC_Init+0x164>)
 8003388:	2204      	movs	r2, #4
 800338a:	615a      	str	r2, [r3, #20]
  hadc.Init.LowPowerAutoWait = DISABLE;
 800338c:	4b4a      	ldr	r3, [pc, #296]	; (80034b8 <MX_ADC_Init+0x164>)
 800338e:	2200      	movs	r2, #0
 8003390:	761a      	strb	r2, [r3, #24]
  hadc.Init.LowPowerAutoPowerOff = DISABLE;
 8003392:	4b49      	ldr	r3, [pc, #292]	; (80034b8 <MX_ADC_Init+0x164>)
 8003394:	2200      	movs	r2, #0
 8003396:	765a      	strb	r2, [r3, #25]
  hadc.Init.ContinuousConvMode = DISABLE;
 8003398:	4b47      	ldr	r3, [pc, #284]	; (80034b8 <MX_ADC_Init+0x164>)
 800339a:	2200      	movs	r2, #0
 800339c:	769a      	strb	r2, [r3, #26]
  hadc.Init.DiscontinuousConvMode = DISABLE;
 800339e:	4b46      	ldr	r3, [pc, #280]	; (80034b8 <MX_ADC_Init+0x164>)
 80033a0:	2200      	movs	r2, #0
 80033a2:	76da      	strb	r2, [r3, #27]
  hadc.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T1_TRGO;
 80033a4:	4b44      	ldr	r3, [pc, #272]	; (80034b8 <MX_ADC_Init+0x164>)
 80033a6:	2200      	movs	r2, #0
 80033a8:	61da      	str	r2, [r3, #28]
  hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 80033aa:	4b43      	ldr	r3, [pc, #268]	; (80034b8 <MX_ADC_Init+0x164>)
 80033ac:	2280      	movs	r2, #128	; 0x80
 80033ae:	00d2      	lsls	r2, r2, #3
 80033b0:	621a      	str	r2, [r3, #32]
  hadc.Init.DMAContinuousRequests = DISABLE;
 80033b2:	4b41      	ldr	r3, [pc, #260]	; (80034b8 <MX_ADC_Init+0x164>)
 80033b4:	2224      	movs	r2, #36	; 0x24
 80033b6:	2100      	movs	r1, #0
 80033b8:	5499      	strb	r1, [r3, r2]
  hadc.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80033ba:	4b3f      	ldr	r3, [pc, #252]	; (80034b8 <MX_ADC_Init+0x164>)
 80033bc:	2201      	movs	r2, #1
 80033be:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_ADC_Init(&hadc) != HAL_OK)
 80033c0:	4b3d      	ldr	r3, [pc, #244]	; (80034b8 <MX_ADC_Init+0x164>)
 80033c2:	0018      	movs	r0, r3
 80033c4:	f000 ffec 	bl	80043a0 <HAL_ADC_Init>
 80033c8:	1e03      	subs	r3, r0, #0
 80033ca:	d001      	beq.n	80033d0 <MX_ADC_Init+0x7c>
  {
    Error_Handler();
 80033cc:	f000 fad2 	bl	8003974 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel to be converted. 
  */
  sConfig.Channel = ADC_CHANNEL_0;
 80033d0:	1d3b      	adds	r3, r7, #4
 80033d2:	2200      	movs	r2, #0
 80033d4:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 80033d6:	1d3b      	adds	r3, r7, #4
 80033d8:	2280      	movs	r2, #128	; 0x80
 80033da:	0152      	lsls	r2, r2, #5
 80033dc:	605a      	str	r2, [r3, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_71CYCLES_5;
 80033de:	1d3b      	adds	r3, r7, #4
 80033e0:	2206      	movs	r2, #6
 80033e2:	609a      	str	r2, [r3, #8]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 80033e4:	1d3a      	adds	r2, r7, #4
 80033e6:	4b34      	ldr	r3, [pc, #208]	; (80034b8 <MX_ADC_Init+0x164>)
 80033e8:	0011      	movs	r1, r2
 80033ea:	0018      	movs	r0, r3
 80033ec:	f001 f9aa 	bl	8004744 <HAL_ADC_ConfigChannel>
 80033f0:	1e03      	subs	r3, r0, #0
 80033f2:	d001      	beq.n	80033f8 <MX_ADC_Init+0xa4>
  {
    Error_Handler();
 80033f4:	f000 fabe 	bl	8003974 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel to be converted. 
  */
  sConfig.Channel = ADC_CHANNEL_1;
 80033f8:	1d3b      	adds	r3, r7, #4
 80033fa:	2201      	movs	r2, #1
 80033fc:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 80033fe:	1d3a      	adds	r2, r7, #4
 8003400:	4b2d      	ldr	r3, [pc, #180]	; (80034b8 <MX_ADC_Init+0x164>)
 8003402:	0011      	movs	r1, r2
 8003404:	0018      	movs	r0, r3
 8003406:	f001 f99d 	bl	8004744 <HAL_ADC_ConfigChannel>
 800340a:	1e03      	subs	r3, r0, #0
 800340c:	d001      	beq.n	8003412 <MX_ADC_Init+0xbe>
  {
    Error_Handler();
 800340e:	f000 fab1 	bl	8003974 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel to be converted. 
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8003412:	1d3b      	adds	r3, r7, #4
 8003414:	2202      	movs	r2, #2
 8003416:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8003418:	1d3a      	adds	r2, r7, #4
 800341a:	4b27      	ldr	r3, [pc, #156]	; (80034b8 <MX_ADC_Init+0x164>)
 800341c:	0011      	movs	r1, r2
 800341e:	0018      	movs	r0, r3
 8003420:	f001 f990 	bl	8004744 <HAL_ADC_ConfigChannel>
 8003424:	1e03      	subs	r3, r0, #0
 8003426:	d001      	beq.n	800342c <MX_ADC_Init+0xd8>
  {
    Error_Handler();
 8003428:	f000 faa4 	bl	8003974 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel to be converted. 
  */
  sConfig.Channel = ADC_CHANNEL_3;
 800342c:	1d3b      	adds	r3, r7, #4
 800342e:	2203      	movs	r2, #3
 8003430:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8003432:	1d3a      	adds	r2, r7, #4
 8003434:	4b20      	ldr	r3, [pc, #128]	; (80034b8 <MX_ADC_Init+0x164>)
 8003436:	0011      	movs	r1, r2
 8003438:	0018      	movs	r0, r3
 800343a:	f001 f983 	bl	8004744 <HAL_ADC_ConfigChannel>
 800343e:	1e03      	subs	r3, r0, #0
 8003440:	d001      	beq.n	8003446 <MX_ADC_Init+0xf2>
  {
    Error_Handler();
 8003442:	f000 fa97 	bl	8003974 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel to be converted. 
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8003446:	1d3b      	adds	r3, r7, #4
 8003448:	2204      	movs	r2, #4
 800344a:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 800344c:	1d3a      	adds	r2, r7, #4
 800344e:	4b1a      	ldr	r3, [pc, #104]	; (80034b8 <MX_ADC_Init+0x164>)
 8003450:	0011      	movs	r1, r2
 8003452:	0018      	movs	r0, r3
 8003454:	f001 f976 	bl	8004744 <HAL_ADC_ConfigChannel>
 8003458:	1e03      	subs	r3, r0, #0
 800345a:	d001      	beq.n	8003460 <MX_ADC_Init+0x10c>
  {
    Error_Handler();
 800345c:	f000 fa8a 	bl	8003974 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel to be converted. 
  */
  sConfig.Channel = ADC_CHANNEL_5;
 8003460:	1d3b      	adds	r3, r7, #4
 8003462:	2205      	movs	r2, #5
 8003464:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8003466:	1d3a      	adds	r2, r7, #4
 8003468:	4b13      	ldr	r3, [pc, #76]	; (80034b8 <MX_ADC_Init+0x164>)
 800346a:	0011      	movs	r1, r2
 800346c:	0018      	movs	r0, r3
 800346e:	f001 f969 	bl	8004744 <HAL_ADC_ConfigChannel>
 8003472:	1e03      	subs	r3, r0, #0
 8003474:	d001      	beq.n	800347a <MX_ADC_Init+0x126>
  {
    Error_Handler();
 8003476:	f000 fa7d 	bl	8003974 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel to be converted. 
  */
  sConfig.Channel = ADC_CHANNEL_6;
 800347a:	1d3b      	adds	r3, r7, #4
 800347c:	2206      	movs	r2, #6
 800347e:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8003480:	1d3a      	adds	r2, r7, #4
 8003482:	4b0d      	ldr	r3, [pc, #52]	; (80034b8 <MX_ADC_Init+0x164>)
 8003484:	0011      	movs	r1, r2
 8003486:	0018      	movs	r0, r3
 8003488:	f001 f95c 	bl	8004744 <HAL_ADC_ConfigChannel>
 800348c:	1e03      	subs	r3, r0, #0
 800348e:	d001      	beq.n	8003494 <MX_ADC_Init+0x140>
  {
    Error_Handler();
 8003490:	f000 fa70 	bl	8003974 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel to be converted. 
  */
  sConfig.Channel = ADC_CHANNEL_7;
 8003494:	1d3b      	adds	r3, r7, #4
 8003496:	2207      	movs	r2, #7
 8003498:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 800349a:	1d3a      	adds	r2, r7, #4
 800349c:	4b06      	ldr	r3, [pc, #24]	; (80034b8 <MX_ADC_Init+0x164>)
 800349e:	0011      	movs	r1, r2
 80034a0:	0018      	movs	r0, r3
 80034a2:	f001 f94f 	bl	8004744 <HAL_ADC_ConfigChannel>
 80034a6:	1e03      	subs	r3, r0, #0
 80034a8:	d001      	beq.n	80034ae <MX_ADC_Init+0x15a>
  {
    Error_Handler();
 80034aa:	f000 fa63 	bl	8003974 <Error_Handler>
  }
  /* USER CODE BEGIN ADC_Init 2 */

  /* USER CODE END ADC_Init 2 */

}
 80034ae:	46c0      	nop			; (mov r8, r8)
 80034b0:	46bd      	mov	sp, r7
 80034b2:	b004      	add	sp, #16
 80034b4:	bd80      	pop	{r7, pc}
 80034b6:	46c0      	nop			; (mov r8, r8)
 80034b8:	200006b8 	.word	0x200006b8
 80034bc:	40012400 	.word	0x40012400

080034c0 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80034c0:	b580      	push	{r7, lr}
 80034c2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80034c4:	4b1b      	ldr	r3, [pc, #108]	; (8003534 <MX_I2C1_Init+0x74>)
 80034c6:	4a1c      	ldr	r2, [pc, #112]	; (8003538 <MX_I2C1_Init+0x78>)
 80034c8:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00103D84;
 80034ca:	4b1a      	ldr	r3, [pc, #104]	; (8003534 <MX_I2C1_Init+0x74>)
 80034cc:	4a1b      	ldr	r2, [pc, #108]	; (800353c <MX_I2C1_Init+0x7c>)
 80034ce:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80034d0:	4b18      	ldr	r3, [pc, #96]	; (8003534 <MX_I2C1_Init+0x74>)
 80034d2:	2200      	movs	r2, #0
 80034d4:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80034d6:	4b17      	ldr	r3, [pc, #92]	; (8003534 <MX_I2C1_Init+0x74>)
 80034d8:	2201      	movs	r2, #1
 80034da:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80034dc:	4b15      	ldr	r3, [pc, #84]	; (8003534 <MX_I2C1_Init+0x74>)
 80034de:	2200      	movs	r2, #0
 80034e0:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80034e2:	4b14      	ldr	r3, [pc, #80]	; (8003534 <MX_I2C1_Init+0x74>)
 80034e4:	2200      	movs	r2, #0
 80034e6:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80034e8:	4b12      	ldr	r3, [pc, #72]	; (8003534 <MX_I2C1_Init+0x74>)
 80034ea:	2200      	movs	r2, #0
 80034ec:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80034ee:	4b11      	ldr	r3, [pc, #68]	; (8003534 <MX_I2C1_Init+0x74>)
 80034f0:	2200      	movs	r2, #0
 80034f2:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80034f4:	4b0f      	ldr	r3, [pc, #60]	; (8003534 <MX_I2C1_Init+0x74>)
 80034f6:	2200      	movs	r2, #0
 80034f8:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80034fa:	4b0e      	ldr	r3, [pc, #56]	; (8003534 <MX_I2C1_Init+0x74>)
 80034fc:	0018      	movs	r0, r3
 80034fe:	f001 fff1 	bl	80054e4 <HAL_I2C_Init>
 8003502:	1e03      	subs	r3, r0, #0
 8003504:	d001      	beq.n	800350a <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8003506:	f000 fa35 	bl	8003974 <Error_Handler>
  }
  /** Configure Analogue filter 
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800350a:	4b0a      	ldr	r3, [pc, #40]	; (8003534 <MX_I2C1_Init+0x74>)
 800350c:	2100      	movs	r1, #0
 800350e:	0018      	movs	r0, r3
 8003510:	f002 fdaa 	bl	8006068 <HAL_I2CEx_ConfigAnalogFilter>
 8003514:	1e03      	subs	r3, r0, #0
 8003516:	d001      	beq.n	800351c <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8003518:	f000 fa2c 	bl	8003974 <Error_Handler>
  }
  /** Configure Digital filter 
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 800351c:	4b05      	ldr	r3, [pc, #20]	; (8003534 <MX_I2C1_Init+0x74>)
 800351e:	2100      	movs	r1, #0
 8003520:	0018      	movs	r0, r3
 8003522:	f002 fded 	bl	8006100 <HAL_I2CEx_ConfigDigitalFilter>
 8003526:	1e03      	subs	r3, r0, #0
 8003528:	d001      	beq.n	800352e <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 800352a:	f000 fa23 	bl	8003974 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800352e:	46c0      	nop			; (mov r8, r8)
 8003530:	46bd      	mov	sp, r7
 8003532:	bd80      	pop	{r7, pc}
 8003534:	2000051c 	.word	0x2000051c
 8003538:	40005400 	.word	0x40005400
 800353c:	00103d84 	.word	0x00103d84

08003540 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8003540:	b580      	push	{r7, lr}
 8003542:	b086      	sub	sp, #24
 8003544:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8003546:	2308      	movs	r3, #8
 8003548:	18fb      	adds	r3, r7, r3
 800354a:	0018      	movs	r0, r3
 800354c:	2310      	movs	r3, #16
 800354e:	001a      	movs	r2, r3
 8003550:	2100      	movs	r1, #0
 8003552:	f004 f944 	bl	80077de <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003556:	003b      	movs	r3, r7
 8003558:	0018      	movs	r0, r3
 800355a:	2308      	movs	r3, #8
 800355c:	001a      	movs	r2, r3
 800355e:	2100      	movs	r1, #0
 8003560:	f004 f93d 	bl	80077de <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8003564:	4b20      	ldr	r3, [pc, #128]	; (80035e8 <MX_TIM1_Init+0xa8>)
 8003566:	4a21      	ldr	r2, [pc, #132]	; (80035ec <MX_TIM1_Init+0xac>)
 8003568:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 8000;
 800356a:	4b1f      	ldr	r3, [pc, #124]	; (80035e8 <MX_TIM1_Init+0xa8>)
 800356c:	22fa      	movs	r2, #250	; 0xfa
 800356e:	0152      	lsls	r2, r2, #5
 8003570:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003572:	4b1d      	ldr	r3, [pc, #116]	; (80035e8 <MX_TIM1_Init+0xa8>)
 8003574:	2200      	movs	r2, #0
 8003576:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 100;
 8003578:	4b1b      	ldr	r3, [pc, #108]	; (80035e8 <MX_TIM1_Init+0xa8>)
 800357a:	2264      	movs	r2, #100	; 0x64
 800357c:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800357e:	4b1a      	ldr	r3, [pc, #104]	; (80035e8 <MX_TIM1_Init+0xa8>)
 8003580:	2200      	movs	r2, #0
 8003582:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8003584:	4b18      	ldr	r3, [pc, #96]	; (80035e8 <MX_TIM1_Init+0xa8>)
 8003586:	2200      	movs	r2, #0
 8003588:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800358a:	4b17      	ldr	r3, [pc, #92]	; (80035e8 <MX_TIM1_Init+0xa8>)
 800358c:	2200      	movs	r2, #0
 800358e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8003590:	4b15      	ldr	r3, [pc, #84]	; (80035e8 <MX_TIM1_Init+0xa8>)
 8003592:	0018      	movs	r0, r3
 8003594:	f003 fb3c 	bl	8006c10 <HAL_TIM_Base_Init>
 8003598:	1e03      	subs	r3, r0, #0
 800359a:	d001      	beq.n	80035a0 <MX_TIM1_Init+0x60>
  {
    Error_Handler();
 800359c:	f000 f9ea 	bl	8003974 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80035a0:	2108      	movs	r1, #8
 80035a2:	187b      	adds	r3, r7, r1
 80035a4:	2280      	movs	r2, #128	; 0x80
 80035a6:	0152      	lsls	r2, r2, #5
 80035a8:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80035aa:	187a      	adds	r2, r7, r1
 80035ac:	4b0e      	ldr	r3, [pc, #56]	; (80035e8 <MX_TIM1_Init+0xa8>)
 80035ae:	0011      	movs	r1, r2
 80035b0:	0018      	movs	r0, r3
 80035b2:	f003 fb7b 	bl	8006cac <HAL_TIM_ConfigClockSource>
 80035b6:	1e03      	subs	r3, r0, #0
 80035b8:	d001      	beq.n	80035be <MX_TIM1_Init+0x7e>
  {
    Error_Handler();
 80035ba:	f000 f9db 	bl	8003974 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 80035be:	003b      	movs	r3, r7
 80035c0:	2220      	movs	r2, #32
 80035c2:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_ENABLE;
 80035c4:	003b      	movs	r3, r7
 80035c6:	2280      	movs	r2, #128	; 0x80
 80035c8:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80035ca:	003a      	movs	r2, r7
 80035cc:	4b06      	ldr	r3, [pc, #24]	; (80035e8 <MX_TIM1_Init+0xa8>)
 80035ce:	0011      	movs	r1, r2
 80035d0:	0018      	movs	r0, r3
 80035d2:	f003 fd2f 	bl	8007034 <HAL_TIMEx_MasterConfigSynchronization>
 80035d6:	1e03      	subs	r3, r0, #0
 80035d8:	d001      	beq.n	80035de <MX_TIM1_Init+0x9e>
  {
    Error_Handler();
 80035da:	f000 f9cb 	bl	8003974 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 80035de:	46c0      	nop			; (mov r8, r8)
 80035e0:	46bd      	mov	sp, r7
 80035e2:	b006      	add	sp, #24
 80035e4:	bd80      	pop	{r7, pc}
 80035e6:	46c0      	nop			; (mov r8, r8)
 80035e8:	20000628 	.word	0x20000628
 80035ec:	40012c00 	.word	0x40012c00

080035f0 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80035f0:	b580      	push	{r7, lr}
 80035f2:	b086      	sub	sp, #24
 80035f4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80035f6:	2308      	movs	r3, #8
 80035f8:	18fb      	adds	r3, r7, r3
 80035fa:	0018      	movs	r0, r3
 80035fc:	2310      	movs	r3, #16
 80035fe:	001a      	movs	r2, r3
 8003600:	2100      	movs	r1, #0
 8003602:	f004 f8ec 	bl	80077de <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003606:	003b      	movs	r3, r7
 8003608:	0018      	movs	r0, r3
 800360a:	2308      	movs	r3, #8
 800360c:	001a      	movs	r2, r3
 800360e:	2100      	movs	r1, #0
 8003610:	f004 f8e5 	bl	80077de <memset>

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8003614:	4b1e      	ldr	r3, [pc, #120]	; (8003690 <MX_TIM3_Init+0xa0>)
 8003616:	4a1f      	ldr	r2, [pc, #124]	; (8003694 <MX_TIM3_Init+0xa4>)
 8003618:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 7999;
 800361a:	4b1d      	ldr	r3, [pc, #116]	; (8003690 <MX_TIM3_Init+0xa0>)
 800361c:	4a1e      	ldr	r2, [pc, #120]	; (8003698 <MX_TIM3_Init+0xa8>)
 800361e:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003620:	4b1b      	ldr	r3, [pc, #108]	; (8003690 <MX_TIM3_Init+0xa0>)
 8003622:	2200      	movs	r2, #0
 8003624:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 999;
 8003626:	4b1a      	ldr	r3, [pc, #104]	; (8003690 <MX_TIM3_Init+0xa0>)
 8003628:	4a1c      	ldr	r2, [pc, #112]	; (800369c <MX_TIM3_Init+0xac>)
 800362a:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800362c:	4b18      	ldr	r3, [pc, #96]	; (8003690 <MX_TIM3_Init+0xa0>)
 800362e:	2200      	movs	r2, #0
 8003630:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8003632:	4b17      	ldr	r3, [pc, #92]	; (8003690 <MX_TIM3_Init+0xa0>)
 8003634:	2280      	movs	r2, #128	; 0x80
 8003636:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8003638:	4b15      	ldr	r3, [pc, #84]	; (8003690 <MX_TIM3_Init+0xa0>)
 800363a:	0018      	movs	r0, r3
 800363c:	f003 fae8 	bl	8006c10 <HAL_TIM_Base_Init>
 8003640:	1e03      	subs	r3, r0, #0
 8003642:	d001      	beq.n	8003648 <MX_TIM3_Init+0x58>
  {
    Error_Handler();
 8003644:	f000 f996 	bl	8003974 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003648:	2108      	movs	r1, #8
 800364a:	187b      	adds	r3, r7, r1
 800364c:	2280      	movs	r2, #128	; 0x80
 800364e:	0152      	lsls	r2, r2, #5
 8003650:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8003652:	187a      	adds	r2, r7, r1
 8003654:	4b0e      	ldr	r3, [pc, #56]	; (8003690 <MX_TIM3_Init+0xa0>)
 8003656:	0011      	movs	r1, r2
 8003658:	0018      	movs	r0, r3
 800365a:	f003 fb27 	bl	8006cac <HAL_TIM_ConfigClockSource>
 800365e:	1e03      	subs	r3, r0, #0
 8003660:	d001      	beq.n	8003666 <MX_TIM3_Init+0x76>
  {
    Error_Handler();
 8003662:	f000 f987 	bl	8003974 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8003666:	003b      	movs	r3, r7
 8003668:	2220      	movs	r2, #32
 800366a:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_ENABLE;
 800366c:	003b      	movs	r3, r7
 800366e:	2280      	movs	r2, #128	; 0x80
 8003670:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8003672:	003a      	movs	r2, r7
 8003674:	4b06      	ldr	r3, [pc, #24]	; (8003690 <MX_TIM3_Init+0xa0>)
 8003676:	0011      	movs	r1, r2
 8003678:	0018      	movs	r0, r3
 800367a:	f003 fcdb 	bl	8007034 <HAL_TIMEx_MasterConfigSynchronization>
 800367e:	1e03      	subs	r3, r0, #0
 8003680:	d001      	beq.n	8003686 <MX_TIM3_Init+0x96>
  {
    Error_Handler();
 8003682:	f000 f977 	bl	8003974 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8003686:	46c0      	nop			; (mov r8, r8)
 8003688:	46bd      	mov	sp, r7
 800368a:	b006      	add	sp, #24
 800368c:	bd80      	pop	{r7, pc}
 800368e:	46c0      	nop			; (mov r8, r8)
 8003690:	20000568 	.word	0x20000568
 8003694:	40000400 	.word	0x40000400
 8003698:	00001f3f 	.word	0x00001f3f
 800369c:	000003e7 	.word	0x000003e7

080036a0 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80036a0:	b580      	push	{r7, lr}
 80036a2:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80036a4:	4b14      	ldr	r3, [pc, #80]	; (80036f8 <MX_USART1_UART_Init+0x58>)
 80036a6:	4a15      	ldr	r2, [pc, #84]	; (80036fc <MX_USART1_UART_Init+0x5c>)
 80036a8:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80036aa:	4b13      	ldr	r3, [pc, #76]	; (80036f8 <MX_USART1_UART_Init+0x58>)
 80036ac:	22e1      	movs	r2, #225	; 0xe1
 80036ae:	0252      	lsls	r2, r2, #9
 80036b0:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80036b2:	4b11      	ldr	r3, [pc, #68]	; (80036f8 <MX_USART1_UART_Init+0x58>)
 80036b4:	2200      	movs	r2, #0
 80036b6:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80036b8:	4b0f      	ldr	r3, [pc, #60]	; (80036f8 <MX_USART1_UART_Init+0x58>)
 80036ba:	2200      	movs	r2, #0
 80036bc:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80036be:	4b0e      	ldr	r3, [pc, #56]	; (80036f8 <MX_USART1_UART_Init+0x58>)
 80036c0:	2200      	movs	r2, #0
 80036c2:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80036c4:	4b0c      	ldr	r3, [pc, #48]	; (80036f8 <MX_USART1_UART_Init+0x58>)
 80036c6:	220c      	movs	r2, #12
 80036c8:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80036ca:	4b0b      	ldr	r3, [pc, #44]	; (80036f8 <MX_USART1_UART_Init+0x58>)
 80036cc:	2200      	movs	r2, #0
 80036ce:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80036d0:	4b09      	ldr	r3, [pc, #36]	; (80036f8 <MX_USART1_UART_Init+0x58>)
 80036d2:	2200      	movs	r2, #0
 80036d4:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80036d6:	4b08      	ldr	r3, [pc, #32]	; (80036f8 <MX_USART1_UART_Init+0x58>)
 80036d8:	2200      	movs	r2, #0
 80036da:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80036dc:	4b06      	ldr	r3, [pc, #24]	; (80036f8 <MX_USART1_UART_Init+0x58>)
 80036de:	2200      	movs	r2, #0
 80036e0:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80036e2:	4b05      	ldr	r3, [pc, #20]	; (80036f8 <MX_USART1_UART_Init+0x58>)
 80036e4:	0018      	movs	r0, r3
 80036e6:	f003 fcf7 	bl	80070d8 <HAL_UART_Init>
 80036ea:	1e03      	subs	r3, r0, #0
 80036ec:	d001      	beq.n	80036f2 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 80036ee:	f000 f941 	bl	8003974 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80036f2:	46c0      	nop			; (mov r8, r8)
 80036f4:	46bd      	mov	sp, r7
 80036f6:	bd80      	pop	{r7, pc}
 80036f8:	200005a8 	.word	0x200005a8
 80036fc:	40013800 	.word	0x40013800

08003700 <MX_DMA_Init>:

/** 
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void) 
{
 8003700:	b580      	push	{r7, lr}
 8003702:	b082      	sub	sp, #8
 8003704:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8003706:	4b0c      	ldr	r3, [pc, #48]	; (8003738 <MX_DMA_Init+0x38>)
 8003708:	695a      	ldr	r2, [r3, #20]
 800370a:	4b0b      	ldr	r3, [pc, #44]	; (8003738 <MX_DMA_Init+0x38>)
 800370c:	2101      	movs	r1, #1
 800370e:	430a      	orrs	r2, r1
 8003710:	615a      	str	r2, [r3, #20]
 8003712:	4b09      	ldr	r3, [pc, #36]	; (8003738 <MX_DMA_Init+0x38>)
 8003714:	695b      	ldr	r3, [r3, #20]
 8003716:	2201      	movs	r2, #1
 8003718:	4013      	ands	r3, r2
 800371a:	607b      	str	r3, [r7, #4]
 800371c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 800371e:	2200      	movs	r2, #0
 8003720:	2100      	movs	r1, #0
 8003722:	2009      	movs	r0, #9
 8003724:	f001 fb4e 	bl	8004dc4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8003728:	2009      	movs	r0, #9
 800372a:	f001 fb60 	bl	8004dee <HAL_NVIC_EnableIRQ>

}
 800372e:	46c0      	nop			; (mov r8, r8)
 8003730:	46bd      	mov	sp, r7
 8003732:	b002      	add	sp, #8
 8003734:	bd80      	pop	{r7, pc}
 8003736:	46c0      	nop			; (mov r8, r8)
 8003738:	40021000 	.word	0x40021000

0800373c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800373c:	b590      	push	{r4, r7, lr}
 800373e:	b08b      	sub	sp, #44	; 0x2c
 8003740:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003742:	2414      	movs	r4, #20
 8003744:	193b      	adds	r3, r7, r4
 8003746:	0018      	movs	r0, r3
 8003748:	2314      	movs	r3, #20
 800374a:	001a      	movs	r2, r3
 800374c:	2100      	movs	r1, #0
 800374e:	f004 f846 	bl	80077de <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8003752:	4b76      	ldr	r3, [pc, #472]	; (800392c <MX_GPIO_Init+0x1f0>)
 8003754:	695a      	ldr	r2, [r3, #20]
 8003756:	4b75      	ldr	r3, [pc, #468]	; (800392c <MX_GPIO_Init+0x1f0>)
 8003758:	2180      	movs	r1, #128	; 0x80
 800375a:	0309      	lsls	r1, r1, #12
 800375c:	430a      	orrs	r2, r1
 800375e:	615a      	str	r2, [r3, #20]
 8003760:	4b72      	ldr	r3, [pc, #456]	; (800392c <MX_GPIO_Init+0x1f0>)
 8003762:	695a      	ldr	r2, [r3, #20]
 8003764:	2380      	movs	r3, #128	; 0x80
 8003766:	031b      	lsls	r3, r3, #12
 8003768:	4013      	ands	r3, r2
 800376a:	613b      	str	r3, [r7, #16]
 800376c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800376e:	4b6f      	ldr	r3, [pc, #444]	; (800392c <MX_GPIO_Init+0x1f0>)
 8003770:	695a      	ldr	r2, [r3, #20]
 8003772:	4b6e      	ldr	r3, [pc, #440]	; (800392c <MX_GPIO_Init+0x1f0>)
 8003774:	2180      	movs	r1, #128	; 0x80
 8003776:	03c9      	lsls	r1, r1, #15
 8003778:	430a      	orrs	r2, r1
 800377a:	615a      	str	r2, [r3, #20]
 800377c:	4b6b      	ldr	r3, [pc, #428]	; (800392c <MX_GPIO_Init+0x1f0>)
 800377e:	695a      	ldr	r2, [r3, #20]
 8003780:	2380      	movs	r3, #128	; 0x80
 8003782:	03db      	lsls	r3, r3, #15
 8003784:	4013      	ands	r3, r2
 8003786:	60fb      	str	r3, [r7, #12]
 8003788:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800378a:	4b68      	ldr	r3, [pc, #416]	; (800392c <MX_GPIO_Init+0x1f0>)
 800378c:	695a      	ldr	r2, [r3, #20]
 800378e:	4b67      	ldr	r3, [pc, #412]	; (800392c <MX_GPIO_Init+0x1f0>)
 8003790:	2180      	movs	r1, #128	; 0x80
 8003792:	0289      	lsls	r1, r1, #10
 8003794:	430a      	orrs	r2, r1
 8003796:	615a      	str	r2, [r3, #20]
 8003798:	4b64      	ldr	r3, [pc, #400]	; (800392c <MX_GPIO_Init+0x1f0>)
 800379a:	695a      	ldr	r2, [r3, #20]
 800379c:	2380      	movs	r3, #128	; 0x80
 800379e:	029b      	lsls	r3, r3, #10
 80037a0:	4013      	ands	r3, r2
 80037a2:	60bb      	str	r3, [r7, #8]
 80037a4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80037a6:	4b61      	ldr	r3, [pc, #388]	; (800392c <MX_GPIO_Init+0x1f0>)
 80037a8:	695a      	ldr	r2, [r3, #20]
 80037aa:	4b60      	ldr	r3, [pc, #384]	; (800392c <MX_GPIO_Init+0x1f0>)
 80037ac:	2180      	movs	r1, #128	; 0x80
 80037ae:	02c9      	lsls	r1, r1, #11
 80037b0:	430a      	orrs	r2, r1
 80037b2:	615a      	str	r2, [r3, #20]
 80037b4:	4b5d      	ldr	r3, [pc, #372]	; (800392c <MX_GPIO_Init+0x1f0>)
 80037b6:	695a      	ldr	r2, [r3, #20]
 80037b8:	2380      	movs	r3, #128	; 0x80
 80037ba:	02db      	lsls	r3, r3, #11
 80037bc:	4013      	ands	r3, r2
 80037be:	607b      	str	r3, [r7, #4]
 80037c0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, EN_PACK_SENSE_Pin|CHARGER_DISABLE_Pin, GPIO_PIN_RESET);
 80037c2:	23c0      	movs	r3, #192	; 0xc0
 80037c4:	01db      	lsls	r3, r3, #7
 80037c6:	485a      	ldr	r0, [pc, #360]	; (8003930 <MX_GPIO_Init+0x1f4>)
 80037c8:	2200      	movs	r2, #0
 80037ca:	0019      	movs	r1, r3
 80037cc:	f001 fe51 	bl	8005472 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, MUTE_AMP2_Pin|STEPUP_DISABLE_Pin|STBY_AMP2_Pin|POWER_Pin 
 80037d0:	4958      	ldr	r1, [pc, #352]	; (8003934 <MX_GPIO_Init+0x1f8>)
 80037d2:	4b59      	ldr	r3, [pc, #356]	; (8003938 <MX_GPIO_Init+0x1fc>)
 80037d4:	2200      	movs	r2, #0
 80037d6:	0018      	movs	r0, r3
 80037d8:	f001 fe4b 	bl	8005472 <HAL_GPIO_WritePin>
                          |RST_BT_Pin|MUTE_AMP1_Pin|STBY_AMP1_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, STATUS_LED_Pin|ENABLE_9V_Pin, GPIO_PIN_RESET);
 80037dc:	2381      	movs	r3, #129	; 0x81
 80037de:	0219      	lsls	r1, r3, #8
 80037e0:	2390      	movs	r3, #144	; 0x90
 80037e2:	05db      	lsls	r3, r3, #23
 80037e4:	2200      	movs	r2, #0
 80037e6:	0018      	movs	r0, r3
 80037e8:	f001 fe43 	bl	8005472 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(BT_EN_GPIO_Port, BT_EN_Pin, GPIO_PIN_RESET);
 80037ec:	4b53      	ldr	r3, [pc, #332]	; (800393c <MX_GPIO_Init+0x200>)
 80037ee:	2200      	movs	r2, #0
 80037f0:	2180      	movs	r1, #128	; 0x80
 80037f2:	0018      	movs	r0, r3
 80037f4:	f001 fe3d 	bl	8005472 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : EN_PACK_SENSE_Pin CHARGER_DISABLE_Pin */
  GPIO_InitStruct.Pin = EN_PACK_SENSE_Pin|CHARGER_DISABLE_Pin;
 80037f8:	193b      	adds	r3, r7, r4
 80037fa:	22c0      	movs	r2, #192	; 0xc0
 80037fc:	01d2      	lsls	r2, r2, #7
 80037fe:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003800:	193b      	adds	r3, r7, r4
 8003802:	2201      	movs	r2, #1
 8003804:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003806:	193b      	adds	r3, r7, r4
 8003808:	2200      	movs	r2, #0
 800380a:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800380c:	193b      	adds	r3, r7, r4
 800380e:	2200      	movs	r2, #0
 8003810:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003812:	193b      	adds	r3, r7, r4
 8003814:	4a46      	ldr	r2, [pc, #280]	; (8003930 <MX_GPIO_Init+0x1f4>)
 8003816:	0019      	movs	r1, r3
 8003818:	0010      	movs	r0, r2
 800381a:	f001 fc9d 	bl	8005158 <HAL_GPIO_Init>

  /*Configure GPIO pin : CHARGER_PLUGGED_Pin */
  GPIO_InitStruct.Pin = CHARGER_PLUGGED_Pin;
 800381e:	0021      	movs	r1, r4
 8003820:	187b      	adds	r3, r7, r1
 8003822:	2280      	movs	r2, #128	; 0x80
 8003824:	0212      	lsls	r2, r2, #8
 8003826:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003828:	187b      	adds	r3, r7, r1
 800382a:	2200      	movs	r2, #0
 800382c:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800382e:	187b      	adds	r3, r7, r1
 8003830:	2200      	movs	r2, #0
 8003832:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(CHARGER_PLUGGED_GPIO_Port, &GPIO_InitStruct);
 8003834:	000c      	movs	r4, r1
 8003836:	187b      	adds	r3, r7, r1
 8003838:	4a3d      	ldr	r2, [pc, #244]	; (8003930 <MX_GPIO_Init+0x1f4>)
 800383a:	0019      	movs	r1, r3
 800383c:	0010      	movs	r0, r2
 800383e:	f001 fc8b 	bl	8005158 <HAL_GPIO_Init>

  /*Configure GPIO pins : GPIO1_Pin GPIO2_Pin GPIO3_Pin GPIO4_Pin 
                           DIAG_AMP2_Pin U3V3_ENABLED_Pin DIAG_AMP1_Pin */
  GPIO_InitStruct.Pin = GPIO1_Pin|GPIO2_Pin|GPIO3_Pin|GPIO4_Pin 
 8003842:	0021      	movs	r1, r4
 8003844:	187b      	adds	r3, r7, r1
 8003846:	4a3e      	ldr	r2, [pc, #248]	; (8003940 <MX_GPIO_Init+0x204>)
 8003848:	601a      	str	r2, [r3, #0]
                          |DIAG_AMP2_Pin|U3V3_ENABLED_Pin|DIAG_AMP1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800384a:	187b      	adds	r3, r7, r1
 800384c:	2200      	movs	r2, #0
 800384e:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003850:	187b      	adds	r3, r7, r1
 8003852:	2200      	movs	r2, #0
 8003854:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003856:	000c      	movs	r4, r1
 8003858:	187b      	adds	r3, r7, r1
 800385a:	4a37      	ldr	r2, [pc, #220]	; (8003938 <MX_GPIO_Init+0x1fc>)
 800385c:	0019      	movs	r1, r3
 800385e:	0010      	movs	r0, r2
 8003860:	f001 fc7a 	bl	8005158 <HAL_GPIO_Init>

  /*Configure GPIO pins : MUTE_AMP2_Pin STEPUP_DISABLE_Pin STBY_AMP2_Pin POWER_Pin 
                           RST_BT_Pin MUTE_AMP1_Pin STBY_AMP1_Pin */
  GPIO_InitStruct.Pin = MUTE_AMP2_Pin|STEPUP_DISABLE_Pin|STBY_AMP2_Pin|POWER_Pin 
 8003864:	0021      	movs	r1, r4
 8003866:	187b      	adds	r3, r7, r1
 8003868:	4a32      	ldr	r2, [pc, #200]	; (8003934 <MX_GPIO_Init+0x1f8>)
 800386a:	601a      	str	r2, [r3, #0]
                          |RST_BT_Pin|MUTE_AMP1_Pin|STBY_AMP1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800386c:	187b      	adds	r3, r7, r1
 800386e:	2201      	movs	r2, #1
 8003870:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003872:	187b      	adds	r3, r7, r1
 8003874:	2200      	movs	r2, #0
 8003876:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003878:	187b      	adds	r3, r7, r1
 800387a:	2200      	movs	r2, #0
 800387c:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800387e:	000c      	movs	r4, r1
 8003880:	187b      	adds	r3, r7, r1
 8003882:	4a2d      	ldr	r2, [pc, #180]	; (8003938 <MX_GPIO_Init+0x1fc>)
 8003884:	0019      	movs	r1, r3
 8003886:	0010      	movs	r0, r2
 8003888:	f001 fc66 	bl	8005158 <HAL_GPIO_Init>

  /*Configure GPIO pins : STATUS_LED_Pin ENABLE_9V_Pin */
  GPIO_InitStruct.Pin = STATUS_LED_Pin|ENABLE_9V_Pin;
 800388c:	0021      	movs	r1, r4
 800388e:	187b      	adds	r3, r7, r1
 8003890:	2281      	movs	r2, #129	; 0x81
 8003892:	0212      	lsls	r2, r2, #8
 8003894:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003896:	000c      	movs	r4, r1
 8003898:	193b      	adds	r3, r7, r4
 800389a:	2201      	movs	r2, #1
 800389c:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800389e:	193b      	adds	r3, r7, r4
 80038a0:	2200      	movs	r2, #0
 80038a2:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80038a4:	193b      	adds	r3, r7, r4
 80038a6:	2200      	movs	r2, #0
 80038a8:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80038aa:	193a      	adds	r2, r7, r4
 80038ac:	2390      	movs	r3, #144	; 0x90
 80038ae:	05db      	lsls	r3, r3, #23
 80038b0:	0011      	movs	r1, r2
 80038b2:	0018      	movs	r0, r3
 80038b4:	f001 fc50 	bl	8005158 <HAL_GPIO_Init>

  /*Configure GPIO pins : CHARGER_STAT1_Pin BT_FAULT_Pin */
  GPIO_InitStruct.Pin = CHARGER_STAT1_Pin|BT_FAULT_Pin;
 80038b8:	193b      	adds	r3, r7, r4
 80038ba:	22c0      	movs	r2, #192	; 0xc0
 80038bc:	0152      	lsls	r2, r2, #5
 80038be:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80038c0:	193b      	adds	r3, r7, r4
 80038c2:	2200      	movs	r2, #0
 80038c4:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80038c6:	193b      	adds	r3, r7, r4
 80038c8:	2200      	movs	r2, #0
 80038ca:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80038cc:	193a      	adds	r2, r7, r4
 80038ce:	2390      	movs	r3, #144	; 0x90
 80038d0:	05db      	lsls	r3, r3, #23
 80038d2:	0011      	movs	r1, r2
 80038d4:	0018      	movs	r0, r3
 80038d6:	f001 fc3f 	bl	8005158 <HAL_GPIO_Init>

  /*Configure GPIO pin : CHARGER_STAT2_Pin */
  GPIO_InitStruct.Pin = CHARGER_STAT2_Pin;
 80038da:	0021      	movs	r1, r4
 80038dc:	187b      	adds	r3, r7, r1
 80038de:	2240      	movs	r2, #64	; 0x40
 80038e0:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80038e2:	187b      	adds	r3, r7, r1
 80038e4:	2200      	movs	r2, #0
 80038e6:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80038e8:	187b      	adds	r3, r7, r1
 80038ea:	2200      	movs	r2, #0
 80038ec:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(CHARGER_STAT2_GPIO_Port, &GPIO_InitStruct);
 80038ee:	000c      	movs	r4, r1
 80038f0:	187b      	adds	r3, r7, r1
 80038f2:	4a12      	ldr	r2, [pc, #72]	; (800393c <MX_GPIO_Init+0x200>)
 80038f4:	0019      	movs	r1, r3
 80038f6:	0010      	movs	r0, r2
 80038f8:	f001 fc2e 	bl	8005158 <HAL_GPIO_Init>

  /*Configure GPIO pin : BT_EN_Pin */
  GPIO_InitStruct.Pin = BT_EN_Pin;
 80038fc:	0021      	movs	r1, r4
 80038fe:	187b      	adds	r3, r7, r1
 8003900:	2280      	movs	r2, #128	; 0x80
 8003902:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003904:	187b      	adds	r3, r7, r1
 8003906:	2201      	movs	r2, #1
 8003908:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800390a:	187b      	adds	r3, r7, r1
 800390c:	2200      	movs	r2, #0
 800390e:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003910:	187b      	adds	r3, r7, r1
 8003912:	2200      	movs	r2, #0
 8003914:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(BT_EN_GPIO_Port, &GPIO_InitStruct);
 8003916:	187b      	adds	r3, r7, r1
 8003918:	4a08      	ldr	r2, [pc, #32]	; (800393c <MX_GPIO_Init+0x200>)
 800391a:	0019      	movs	r1, r3
 800391c:	0010      	movs	r0, r2
 800391e:	f001 fc1b 	bl	8005158 <HAL_GPIO_Init>

}
 8003922:	46c0      	nop			; (mov r8, r8)
 8003924:	46bd      	mov	sp, r7
 8003926:	b00b      	add	sp, #44	; 0x2c
 8003928:	bd90      	pop	{r4, r7, pc}
 800392a:	46c0      	nop			; (mov r8, r8)
 800392c:	40021000 	.word	0x40021000
 8003930:	48000800 	.word	0x48000800
 8003934:	0000a1d8 	.word	0x0000a1d8
 8003938:	48000400 	.word	0x48000400
 800393c:	48001400 	.word	0x48001400
 8003940:	00005227 	.word	0x00005227

08003944 <HAL_ADC_ConvCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc){
 8003944:	b580      	push	{r7, lr}
 8003946:	b082      	sub	sp, #8
 8003948:	af00      	add	r7, sp, #0
 800394a:	6078      	str	r0, [r7, #4]


  if(HAL_OK != HAL_TIM_Base_Start(&htim1))
 800394c:	4b07      	ldr	r3, [pc, #28]	; (800396c <HAL_ADC_ConvCpltCallback+0x28>)
 800394e:	0018      	movs	r0, r3
 8003950:	f003 f98a 	bl	8006c68 <HAL_TIM_Base_Start>
 8003954:	1e03      	subs	r3, r0, #0
 8003956:	d001      	beq.n	800395c <HAL_ADC_ConvCpltCallback+0x18>
	  Error_Handler();
 8003958:	f000 f80c 	bl	8003974 <Error_Handler>
	adc_flag = 1;
 800395c:	4b04      	ldr	r3, [pc, #16]	; (8003970 <HAL_ADC_ConvCpltCallback+0x2c>)
 800395e:	2201      	movs	r2, #1
 8003960:	701a      	strb	r2, [r3, #0]
}
 8003962:	46c0      	nop			; (mov r8, r8)
 8003964:	46bd      	mov	sp, r7
 8003966:	b002      	add	sp, #8
 8003968:	bd80      	pop	{r7, pc}
 800396a:	46c0      	nop			; (mov r8, r8)
 800396c:	20000628 	.word	0x20000628
 8003970:	2000003c 	.word	0x2000003c

08003974 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler()
{
 8003974:	b580      	push	{r7, lr}
 8003976:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8003978:	46c0      	nop			; (mov r8, r8)
 800397a:	46bd      	mov	sp, r7
 800397c:	bd80      	pop	{r7, pc}

0800397e <ssd1306_Reset>:
#include "ssd1306.h"
#include <math.h>
#include <stdlib.h>

void ssd1306_Reset(void) {
 800397e:	b580      	push	{r7, lr}
 8003980:	af00      	add	r7, sp, #0
	/* for I2C - do nothing */
}
 8003982:	46c0      	nop			; (mov r8, r8)
 8003984:	46bd      	mov	sp, r7
 8003986:	bd80      	pop	{r7, pc}

08003988 <ssd1306_WriteCommand>:

// Send a byte to the command register
void ssd1306_WriteCommand(uint8_t byte) {
 8003988:	b580      	push	{r7, lr}
 800398a:	b086      	sub	sp, #24
 800398c:	af04      	add	r7, sp, #16
 800398e:	0002      	movs	r2, r0
 8003990:	1dfb      	adds	r3, r7, #7
 8003992:	701a      	strb	r2, [r3, #0]
	HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x00, 1, &byte, 1, HAL_MAX_DELAY);
 8003994:	4808      	ldr	r0, [pc, #32]	; (80039b8 <ssd1306_WriteCommand+0x30>)
 8003996:	2301      	movs	r3, #1
 8003998:	425b      	negs	r3, r3
 800399a:	9302      	str	r3, [sp, #8]
 800399c:	2301      	movs	r3, #1
 800399e:	9301      	str	r3, [sp, #4]
 80039a0:	1dfb      	adds	r3, r7, #7
 80039a2:	9300      	str	r3, [sp, #0]
 80039a4:	2301      	movs	r3, #1
 80039a6:	2200      	movs	r2, #0
 80039a8:	2178      	movs	r1, #120	; 0x78
 80039aa:	f001 ff39 	bl	8005820 <HAL_I2C_Mem_Write>
}
 80039ae:	46c0      	nop			; (mov r8, r8)
 80039b0:	46bd      	mov	sp, r7
 80039b2:	b002      	add	sp, #8
 80039b4:	bd80      	pop	{r7, pc}
 80039b6:	46c0      	nop			; (mov r8, r8)
 80039b8:	2000051c 	.word	0x2000051c

080039bc <ssd1306_WriteData>:

// Send data
void ssd1306_WriteData(uint8_t* buffer, size_t buff_size) {
 80039bc:	b580      	push	{r7, lr}
 80039be:	b086      	sub	sp, #24
 80039c0:	af04      	add	r7, sp, #16
 80039c2:	6078      	str	r0, [r7, #4]
 80039c4:	6039      	str	r1, [r7, #0]
	HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x40, 1, buffer, buff_size, HAL_MAX_DELAY);
 80039c6:	683b      	ldr	r3, [r7, #0]
 80039c8:	b29b      	uxth	r3, r3
 80039ca:	4808      	ldr	r0, [pc, #32]	; (80039ec <ssd1306_WriteData+0x30>)
 80039cc:	2201      	movs	r2, #1
 80039ce:	4252      	negs	r2, r2
 80039d0:	9202      	str	r2, [sp, #8]
 80039d2:	9301      	str	r3, [sp, #4]
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	9300      	str	r3, [sp, #0]
 80039d8:	2301      	movs	r3, #1
 80039da:	2240      	movs	r2, #64	; 0x40
 80039dc:	2178      	movs	r1, #120	; 0x78
 80039de:	f001 ff1f 	bl	8005820 <HAL_I2C_Mem_Write>
}
 80039e2:	46c0      	nop			; (mov r8, r8)
 80039e4:	46bd      	mov	sp, r7
 80039e6:	b002      	add	sp, #8
 80039e8:	bd80      	pop	{r7, pc}
 80039ea:	46c0      	nop			; (mov r8, r8)
 80039ec:	2000051c 	.word	0x2000051c

080039f0 <ssd1306_Init>:

// Screen object
static SSD1306_t SSD1306;

// Initialize the oled screen
void ssd1306_Init(void) {
 80039f0:	b580      	push	{r7, lr}
 80039f2:	af00      	add	r7, sp, #0
	// Reset OLED
	ssd1306_Reset();
 80039f4:	f7ff ffc3 	bl	800397e <ssd1306_Reset>

    // Wait for the screen to boot
    HAL_Delay(100);
 80039f8:	2064      	movs	r0, #100	; 0x64
 80039fa:	f000 fcaf 	bl	800435c <HAL_Delay>
    
    // Init OLED
    ssd1306_WriteCommand(0xAE); //display off
 80039fe:	20ae      	movs	r0, #174	; 0xae
 8003a00:	f7ff ffc2 	bl	8003988 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x20); //Set Memory Addressing Mode   
 8003a04:	2020      	movs	r0, #32
 8003a06:	f7ff ffbf 	bl	8003988 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); // 00b,Horizontal Addressing Mode; 01b,Vertical Addressing Mode;
 8003a0a:	2000      	movs	r0, #0
 8003a0c:	f7ff ffbc 	bl	8003988 <ssd1306_WriteCommand>
                                // 10b,Page Addressing Mode (RESET); 11b,Invalid

    ssd1306_WriteCommand(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 8003a10:	20b0      	movs	r0, #176	; 0xb0
 8003a12:	f7ff ffb9 	bl	8003988 <ssd1306_WriteCommand>


    //ssd1306_WriteCommand(0xC0); // Mirror vertically

    ssd1306_WriteCommand(0xC8); //Set COM Output Scan Direction
 8003a16:	20c8      	movs	r0, #200	; 0xc8
 8003a18:	f7ff ffb6 	bl	8003988 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); //---set low column address
 8003a1c:	2000      	movs	r0, #0
 8003a1e:	f7ff ffb3 	bl	8003988 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x10); //---set high column address
 8003a22:	2010      	movs	r0, #16
 8003a24:	f7ff ffb0 	bl	8003988 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x40); //--set start line address - CHECK
 8003a28:	2040      	movs	r0, #64	; 0x40
 8003a2a:	f7ff ffad 	bl	8003988 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x81); //--set contrast control register - CHECK
 8003a2e:	2081      	movs	r0, #129	; 0x81
 8003a30:	f7ff ffaa 	bl	8003988 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x3F);
 8003a34:	203f      	movs	r0, #63	; 0x3f
 8003a36:	f7ff ffa7 	bl	8003988 <ssd1306_WriteCommand>


    //ssd1306_WriteCommand(0xA0); // Mirror horizontally
    ssd1306_WriteCommand(0xA1); //--set segment re-map 0 to 127 - CHECK
 8003a3a:	20a1      	movs	r0, #161	; 0xa1
 8003a3c:	f7ff ffa4 	bl	8003988 <ssd1306_WriteCommand>

    //ssd1306_WriteCommand(0xA7); //--set inverse color
    ssd1306_WriteCommand(0xA6); //--set normal color
 8003a40:	20a6      	movs	r0, #166	; 0xa6
 8003a42:	f7ff ffa1 	bl	8003988 <ssd1306_WriteCommand>

    //ssd1306_WriteCommand(0xFF);
    ssd1306_WriteCommand(0xA8); //--set multiplex ratio(1 to 64) - CHECK
 8003a46:	20a8      	movs	r0, #168	; 0xa8
 8003a48:	f7ff ff9e 	bl	8003988 <ssd1306_WriteCommand>


    //ssd1306_WriteCommand(0x1F); // Height 32
    ssd1306_WriteCommand(0x3F); // Height 64
 8003a4c:	203f      	movs	r0, #63	; 0x3f
 8003a4e:	f7ff ff9b 	bl	8003988 <ssd1306_WriteCommand>
    //ssd1306_WriteCommand(0x3F); // Height 128px high displays too.

    ssd1306_WriteCommand(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 8003a52:	20a4      	movs	r0, #164	; 0xa4
 8003a54:	f7ff ff98 	bl	8003988 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD3); //-set display offset - CHECK
 8003a58:	20d3      	movs	r0, #211	; 0xd3
 8003a5a:	f7ff ff95 	bl	8003988 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); //-not offset
 8003a5e:	2000      	movs	r0, #0
 8003a60:	f7ff ff92 	bl	8003988 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD5); //--set display clock divide ratio/oscillator frequency
 8003a64:	20d5      	movs	r0, #213	; 0xd5
 8003a66:	f7ff ff8f 	bl	8003988 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0xF0); //--set divide ratio
 8003a6a:	20f0      	movs	r0, #240	; 0xf0
 8003a6c:	f7ff ff8c 	bl	8003988 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD9); //--set pre-charge period
 8003a70:	20d9      	movs	r0, #217	; 0xd9
 8003a72:	f7ff ff89 	bl	8003988 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x22); //
 8003a76:	2022      	movs	r0, #34	; 0x22
 8003a78:	f7ff ff86 	bl	8003988 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xDA); //--set com pins hardware configuration - CHECK
 8003a7c:	20da      	movs	r0, #218	; 0xda
 8003a7e:	f7ff ff83 	bl	8003988 <ssd1306_WriteCommand>


    //ssd1306_WriteCommand(0x02);	// Height 32
    ssd1306_WriteCommand(0x12);	// Height 64
 8003a82:	2012      	movs	r0, #18
 8003a84:	f7ff ff80 	bl	8003988 <ssd1306_WriteCommand>
    //ssd1306_WriteCommand(0x12);	// Height 128


    ssd1306_WriteCommand(0xDB); //--set vcomh
 8003a88:	20db      	movs	r0, #219	; 0xdb
 8003a8a:	f7ff ff7d 	bl	8003988 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x20); //0x20,0.77xVcc
 8003a8e:	2020      	movs	r0, #32
 8003a90:	f7ff ff7a 	bl	8003988 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x8D); //--set DC-DC enable
 8003a94:	208d      	movs	r0, #141	; 0x8d
 8003a96:	f7ff ff77 	bl	8003988 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x14); //
 8003a9a:	2014      	movs	r0, #20
 8003a9c:	f7ff ff74 	bl	8003988 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0xAF); //--turn on SSD1306 panel
 8003aa0:	20af      	movs	r0, #175	; 0xaf
 8003aa2:	f7ff ff71 	bl	8003988 <ssd1306_WriteCommand>

    // Clear screen
    ssd1306_Fill(Black);
 8003aa6:	2000      	movs	r0, #0
 8003aa8:	f000 f810 	bl	8003acc <ssd1306_Fill>
    
    // Flush buffer to screen
    ssd1306_UpdateScreen();
 8003aac:	f000 f832 	bl	8003b14 <ssd1306_UpdateScreen>
    
    // Set default values for screen object
    SSD1306.CurrentX = 0;
 8003ab0:	4b05      	ldr	r3, [pc, #20]	; (8003ac8 <ssd1306_Init+0xd8>)
 8003ab2:	2200      	movs	r2, #0
 8003ab4:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = 0;
 8003ab6:	4b04      	ldr	r3, [pc, #16]	; (8003ac8 <ssd1306_Init+0xd8>)
 8003ab8:	2200      	movs	r2, #0
 8003aba:	805a      	strh	r2, [r3, #2]
    
    SSD1306.Initialized = 1;
 8003abc:	4b02      	ldr	r3, [pc, #8]	; (8003ac8 <ssd1306_Init+0xd8>)
 8003abe:	2201      	movs	r2, #1
 8003ac0:	715a      	strb	r2, [r3, #5]
}
 8003ac2:	46c0      	nop			; (mov r8, r8)
 8003ac4:	46bd      	mov	sp, r7
 8003ac6:	bd80      	pop	{r7, pc}
 8003ac8:	200004b4 	.word	0x200004b4

08003acc <ssd1306_Fill>:

// Fill the whole screen with the given color
void ssd1306_Fill(SSD1306_COLOR color) {
 8003acc:	b580      	push	{r7, lr}
 8003ace:	b084      	sub	sp, #16
 8003ad0:	af00      	add	r7, sp, #0
 8003ad2:	0002      	movs	r2, r0
 8003ad4:	1dfb      	adds	r3, r7, #7
 8003ad6:	701a      	strb	r2, [r3, #0]
    /* Set memory */
    uint32_t i;

    for(i = 0; i < sizeof(SSD1306_Buffer); i++) {
 8003ad8:	2300      	movs	r3, #0
 8003ada:	60fb      	str	r3, [r7, #12]
 8003adc:	e00e      	b.n	8003afc <ssd1306_Fill+0x30>
        SSD1306_Buffer[i] = (color == Black) ? 0x00 : 0xFF;
 8003ade:	1dfb      	adds	r3, r7, #7
 8003ae0:	781b      	ldrb	r3, [r3, #0]
 8003ae2:	2b00      	cmp	r3, #0
 8003ae4:	d101      	bne.n	8003aea <ssd1306_Fill+0x1e>
 8003ae6:	2100      	movs	r1, #0
 8003ae8:	e000      	b.n	8003aec <ssd1306_Fill+0x20>
 8003aea:	21ff      	movs	r1, #255	; 0xff
 8003aec:	4a07      	ldr	r2, [pc, #28]	; (8003b0c <ssd1306_Fill+0x40>)
 8003aee:	68fb      	ldr	r3, [r7, #12]
 8003af0:	18d3      	adds	r3, r2, r3
 8003af2:	1c0a      	adds	r2, r1, #0
 8003af4:	701a      	strb	r2, [r3, #0]
    for(i = 0; i < sizeof(SSD1306_Buffer); i++) {
 8003af6:	68fb      	ldr	r3, [r7, #12]
 8003af8:	3301      	adds	r3, #1
 8003afa:	60fb      	str	r3, [r7, #12]
 8003afc:	68fb      	ldr	r3, [r7, #12]
 8003afe:	4a04      	ldr	r2, [pc, #16]	; (8003b10 <ssd1306_Fill+0x44>)
 8003b00:	4293      	cmp	r3, r2
 8003b02:	d9ec      	bls.n	8003ade <ssd1306_Fill+0x12>
    }
}
 8003b04:	46c0      	nop			; (mov r8, r8)
 8003b06:	46bd      	mov	sp, r7
 8003b08:	b004      	add	sp, #16
 8003b0a:	bd80      	pop	{r7, pc}
 8003b0c:	200000b4 	.word	0x200000b4
 8003b10:	000003ff 	.word	0x000003ff

08003b14 <ssd1306_UpdateScreen>:

// Write the screenbuffer with changed to the screen
void ssd1306_UpdateScreen(void) {
 8003b14:	b580      	push	{r7, lr}
 8003b16:	b082      	sub	sp, #8
 8003b18:	af00      	add	r7, sp, #0
    // depends on the screen height:
    //
    //  * 32px   ==  4 pages
    //  * 64px   ==  8 pages
    //  * 128px  ==  16 pages
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 8003b1a:	1dfb      	adds	r3, r7, #7
 8003b1c:	2200      	movs	r2, #0
 8003b1e:	701a      	strb	r2, [r3, #0]
 8003b20:	e01a      	b.n	8003b58 <ssd1306_UpdateScreen+0x44>
        ssd1306_WriteCommand(0xB0 + i); // Set the current RAM page address.
 8003b22:	1dfb      	adds	r3, r7, #7
 8003b24:	781b      	ldrb	r3, [r3, #0]
 8003b26:	3b50      	subs	r3, #80	; 0x50
 8003b28:	b2db      	uxtb	r3, r3
 8003b2a:	0018      	movs	r0, r3
 8003b2c:	f7ff ff2c 	bl	8003988 <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x00);
 8003b30:	2000      	movs	r0, #0
 8003b32:	f7ff ff29 	bl	8003988 <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x10);
 8003b36:	2010      	movs	r0, #16
 8003b38:	f7ff ff26 	bl	8003988 <ssd1306_WriteCommand>
        ssd1306_WriteData(&SSD1306_Buffer[SSD1306_WIDTH*i],SSD1306_WIDTH);
 8003b3c:	1dfb      	adds	r3, r7, #7
 8003b3e:	781b      	ldrb	r3, [r3, #0]
 8003b40:	01da      	lsls	r2, r3, #7
 8003b42:	4b09      	ldr	r3, [pc, #36]	; (8003b68 <ssd1306_UpdateScreen+0x54>)
 8003b44:	18d3      	adds	r3, r2, r3
 8003b46:	2180      	movs	r1, #128	; 0x80
 8003b48:	0018      	movs	r0, r3
 8003b4a:	f7ff ff37 	bl	80039bc <ssd1306_WriteData>
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 8003b4e:	1dfb      	adds	r3, r7, #7
 8003b50:	781a      	ldrb	r2, [r3, #0]
 8003b52:	1dfb      	adds	r3, r7, #7
 8003b54:	3201      	adds	r2, #1
 8003b56:	701a      	strb	r2, [r3, #0]
 8003b58:	1dfb      	adds	r3, r7, #7
 8003b5a:	781b      	ldrb	r3, [r3, #0]
 8003b5c:	2b07      	cmp	r3, #7
 8003b5e:	d9e0      	bls.n	8003b22 <ssd1306_UpdateScreen+0xe>
    }
}
 8003b60:	46c0      	nop			; (mov r8, r8)
 8003b62:	46bd      	mov	sp, r7
 8003b64:	b002      	add	sp, #8
 8003b66:	bd80      	pop	{r7, pc}
 8003b68:	200000b4 	.word	0x200000b4

08003b6c <ssd1306_DrawPixel>:

//    Draw one pixel in the screenbuffer
//    X => X Coordinate
//    Y => Y Coordinate
//    color => Pixel color
void ssd1306_DrawPixel(uint8_t x, uint8_t y, SSD1306_COLOR color) {
 8003b6c:	b590      	push	{r4, r7, lr}
 8003b6e:	b083      	sub	sp, #12
 8003b70:	af00      	add	r7, sp, #0
 8003b72:	0004      	movs	r4, r0
 8003b74:	0008      	movs	r0, r1
 8003b76:	0011      	movs	r1, r2
 8003b78:	1dfb      	adds	r3, r7, #7
 8003b7a:	1c22      	adds	r2, r4, #0
 8003b7c:	701a      	strb	r2, [r3, #0]
 8003b7e:	1dbb      	adds	r3, r7, #6
 8003b80:	1c02      	adds	r2, r0, #0
 8003b82:	701a      	strb	r2, [r3, #0]
 8003b84:	1d7b      	adds	r3, r7, #5
 8003b86:	1c0a      	adds	r2, r1, #0
 8003b88:	701a      	strb	r2, [r3, #0]
    if(x >= SSD1306_WIDTH || y >= SSD1306_HEIGHT) {
 8003b8a:	1dfb      	adds	r3, r7, #7
 8003b8c:	781b      	ldrb	r3, [r3, #0]
 8003b8e:	b25b      	sxtb	r3, r3
 8003b90:	2b00      	cmp	r3, #0
 8003b92:	db52      	blt.n	8003c3a <ssd1306_DrawPixel+0xce>
 8003b94:	1dbb      	adds	r3, r7, #6
 8003b96:	781b      	ldrb	r3, [r3, #0]
 8003b98:	2b3f      	cmp	r3, #63	; 0x3f
 8003b9a:	d84e      	bhi.n	8003c3a <ssd1306_DrawPixel+0xce>
        // Don't write outside the buffer
        return;
    }
    
    // Check if pixel should be inverted
    if(SSD1306.Inverted) {
 8003b9c:	4b29      	ldr	r3, [pc, #164]	; (8003c44 <ssd1306_DrawPixel+0xd8>)
 8003b9e:	791b      	ldrb	r3, [r3, #4]
 8003ba0:	2b00      	cmp	r3, #0
 8003ba2:	d006      	beq.n	8003bb2 <ssd1306_DrawPixel+0x46>
        color = (SSD1306_COLOR)!color;
 8003ba4:	1d7b      	adds	r3, r7, #5
 8003ba6:	781b      	ldrb	r3, [r3, #0]
 8003ba8:	425a      	negs	r2, r3
 8003baa:	4153      	adcs	r3, r2
 8003bac:	b2da      	uxtb	r2, r3
 8003bae:	1d7b      	adds	r3, r7, #5
 8003bb0:	701a      	strb	r2, [r3, #0]
    }
    
    // Draw in the right color
    if(color == White) {
 8003bb2:	1d7b      	adds	r3, r7, #5
 8003bb4:	781b      	ldrb	r3, [r3, #0]
 8003bb6:	2b01      	cmp	r3, #1
 8003bb8:	d11e      	bne.n	8003bf8 <ssd1306_DrawPixel+0x8c>
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 8003bba:	1dfb      	adds	r3, r7, #7
 8003bbc:	781a      	ldrb	r2, [r3, #0]
 8003bbe:	1dbb      	adds	r3, r7, #6
 8003bc0:	781b      	ldrb	r3, [r3, #0]
 8003bc2:	08db      	lsrs	r3, r3, #3
 8003bc4:	b2d8      	uxtb	r0, r3
 8003bc6:	0003      	movs	r3, r0
 8003bc8:	01db      	lsls	r3, r3, #7
 8003bca:	18d3      	adds	r3, r2, r3
 8003bcc:	4a1e      	ldr	r2, [pc, #120]	; (8003c48 <ssd1306_DrawPixel+0xdc>)
 8003bce:	5cd3      	ldrb	r3, [r2, r3]
 8003bd0:	b25a      	sxtb	r2, r3
 8003bd2:	1dbb      	adds	r3, r7, #6
 8003bd4:	781b      	ldrb	r3, [r3, #0]
 8003bd6:	2107      	movs	r1, #7
 8003bd8:	400b      	ands	r3, r1
 8003bda:	2101      	movs	r1, #1
 8003bdc:	4099      	lsls	r1, r3
 8003bde:	000b      	movs	r3, r1
 8003be0:	b25b      	sxtb	r3, r3
 8003be2:	4313      	orrs	r3, r2
 8003be4:	b259      	sxtb	r1, r3
 8003be6:	1dfb      	adds	r3, r7, #7
 8003be8:	781a      	ldrb	r2, [r3, #0]
 8003bea:	0003      	movs	r3, r0
 8003bec:	01db      	lsls	r3, r3, #7
 8003bee:	18d3      	adds	r3, r2, r3
 8003bf0:	b2c9      	uxtb	r1, r1
 8003bf2:	4a15      	ldr	r2, [pc, #84]	; (8003c48 <ssd1306_DrawPixel+0xdc>)
 8003bf4:	54d1      	strb	r1, [r2, r3]
 8003bf6:	e021      	b.n	8003c3c <ssd1306_DrawPixel+0xd0>
    } else { 
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 8003bf8:	1dfb      	adds	r3, r7, #7
 8003bfa:	781a      	ldrb	r2, [r3, #0]
 8003bfc:	1dbb      	adds	r3, r7, #6
 8003bfe:	781b      	ldrb	r3, [r3, #0]
 8003c00:	08db      	lsrs	r3, r3, #3
 8003c02:	b2d8      	uxtb	r0, r3
 8003c04:	0003      	movs	r3, r0
 8003c06:	01db      	lsls	r3, r3, #7
 8003c08:	18d3      	adds	r3, r2, r3
 8003c0a:	4a0f      	ldr	r2, [pc, #60]	; (8003c48 <ssd1306_DrawPixel+0xdc>)
 8003c0c:	5cd3      	ldrb	r3, [r2, r3]
 8003c0e:	b25b      	sxtb	r3, r3
 8003c10:	1dba      	adds	r2, r7, #6
 8003c12:	7812      	ldrb	r2, [r2, #0]
 8003c14:	2107      	movs	r1, #7
 8003c16:	400a      	ands	r2, r1
 8003c18:	2101      	movs	r1, #1
 8003c1a:	4091      	lsls	r1, r2
 8003c1c:	000a      	movs	r2, r1
 8003c1e:	b252      	sxtb	r2, r2
 8003c20:	43d2      	mvns	r2, r2
 8003c22:	b252      	sxtb	r2, r2
 8003c24:	4013      	ands	r3, r2
 8003c26:	b259      	sxtb	r1, r3
 8003c28:	1dfb      	adds	r3, r7, #7
 8003c2a:	781a      	ldrb	r2, [r3, #0]
 8003c2c:	0003      	movs	r3, r0
 8003c2e:	01db      	lsls	r3, r3, #7
 8003c30:	18d3      	adds	r3, r2, r3
 8003c32:	b2c9      	uxtb	r1, r1
 8003c34:	4a04      	ldr	r2, [pc, #16]	; (8003c48 <ssd1306_DrawPixel+0xdc>)
 8003c36:	54d1      	strb	r1, [r2, r3]
 8003c38:	e000      	b.n	8003c3c <ssd1306_DrawPixel+0xd0>
        return;
 8003c3a:	46c0      	nop			; (mov r8, r8)
    }
}
 8003c3c:	46bd      	mov	sp, r7
 8003c3e:	b003      	add	sp, #12
 8003c40:	bd90      	pop	{r4, r7, pc}
 8003c42:	46c0      	nop			; (mov r8, r8)
 8003c44:	200004b4 	.word	0x200004b4
 8003c48:	200000b4 	.word	0x200000b4

08003c4c <ssd1306_WriteChar>:

// Draw 1 char to the screen buffer
// ch       => char om weg te schrijven
// Font     => Font waarmee we gaan schrijven
// color    => Black or White
char ssd1306_WriteChar(char ch, FontDef Font, SSD1306_COLOR color) {
 8003c4c:	b590      	push	{r4, r7, lr}
 8003c4e:	b089      	sub	sp, #36	; 0x24
 8003c50:	af00      	add	r7, sp, #0
 8003c52:	0004      	movs	r4, r0
 8003c54:	1d38      	adds	r0, r7, #4
 8003c56:	6001      	str	r1, [r0, #0]
 8003c58:	6042      	str	r2, [r0, #4]
 8003c5a:	0019      	movs	r1, r3
 8003c5c:	200f      	movs	r0, #15
 8003c5e:	183b      	adds	r3, r7, r0
 8003c60:	1c22      	adds	r2, r4, #0
 8003c62:	701a      	strb	r2, [r3, #0]
 8003c64:	230e      	movs	r3, #14
 8003c66:	18fb      	adds	r3, r7, r3
 8003c68:	1c0a      	adds	r2, r1, #0
 8003c6a:	701a      	strb	r2, [r3, #0]
    uint32_t i, b, j;
    
    // Check if character is valid
    if (ch < 32 || ch > 126)
 8003c6c:	183b      	adds	r3, r7, r0
 8003c6e:	781b      	ldrb	r3, [r3, #0]
 8003c70:	2b1f      	cmp	r3, #31
 8003c72:	d904      	bls.n	8003c7e <ssd1306_WriteChar+0x32>
 8003c74:	230f      	movs	r3, #15
 8003c76:	18fb      	adds	r3, r7, r3
 8003c78:	781b      	ldrb	r3, [r3, #0]
 8003c7a:	2b7e      	cmp	r3, #126	; 0x7e
 8003c7c:	d901      	bls.n	8003c82 <ssd1306_WriteChar+0x36>
        return 0;
 8003c7e:	2300      	movs	r3, #0
 8003c80:	e078      	b.n	8003d74 <ssd1306_WriteChar+0x128>
    
    // Check remaining space on current line
    if (SSD1306_WIDTH < (SSD1306.CurrentX + Font.FontWidth) ||
 8003c82:	4b3e      	ldr	r3, [pc, #248]	; (8003d7c <ssd1306_WriteChar+0x130>)
 8003c84:	881b      	ldrh	r3, [r3, #0]
 8003c86:	001a      	movs	r2, r3
 8003c88:	1d3b      	adds	r3, r7, #4
 8003c8a:	781b      	ldrb	r3, [r3, #0]
 8003c8c:	18d3      	adds	r3, r2, r3
 8003c8e:	2b80      	cmp	r3, #128	; 0x80
 8003c90:	dc07      	bgt.n	8003ca2 <ssd1306_WriteChar+0x56>
        SSD1306_HEIGHT < (SSD1306.CurrentY + Font.FontHeight))
 8003c92:	4b3a      	ldr	r3, [pc, #232]	; (8003d7c <ssd1306_WriteChar+0x130>)
 8003c94:	885b      	ldrh	r3, [r3, #2]
 8003c96:	001a      	movs	r2, r3
 8003c98:	1d3b      	adds	r3, r7, #4
 8003c9a:	785b      	ldrb	r3, [r3, #1]
 8003c9c:	18d3      	adds	r3, r2, r3
    if (SSD1306_WIDTH < (SSD1306.CurrentX + Font.FontWidth) ||
 8003c9e:	2b40      	cmp	r3, #64	; 0x40
 8003ca0:	dd01      	ble.n	8003ca6 <ssd1306_WriteChar+0x5a>
    {
        // Not enough space on current line
        return 0;
 8003ca2:	2300      	movs	r3, #0
 8003ca4:	e066      	b.n	8003d74 <ssd1306_WriteChar+0x128>
    }
    
    // Use the font to write
    for(i = 0; i < Font.FontHeight; i++) {
 8003ca6:	2300      	movs	r3, #0
 8003ca8:	61fb      	str	r3, [r7, #28]
 8003caa:	e051      	b.n	8003d50 <ssd1306_WriteChar+0x104>
        b = Font.data[(ch - 32) * Font.FontHeight + i];
 8003cac:	1d3b      	adds	r3, r7, #4
 8003cae:	685a      	ldr	r2, [r3, #4]
 8003cb0:	230f      	movs	r3, #15
 8003cb2:	18fb      	adds	r3, r7, r3
 8003cb4:	781b      	ldrb	r3, [r3, #0]
 8003cb6:	3b20      	subs	r3, #32
 8003cb8:	1d39      	adds	r1, r7, #4
 8003cba:	7849      	ldrb	r1, [r1, #1]
 8003cbc:	434b      	muls	r3, r1
 8003cbe:	0019      	movs	r1, r3
 8003cc0:	69fb      	ldr	r3, [r7, #28]
 8003cc2:	18cb      	adds	r3, r1, r3
 8003cc4:	005b      	lsls	r3, r3, #1
 8003cc6:	18d3      	adds	r3, r2, r3
 8003cc8:	881b      	ldrh	r3, [r3, #0]
 8003cca:	617b      	str	r3, [r7, #20]
        for(j = 0; j < Font.FontWidth; j++) {
 8003ccc:	2300      	movs	r3, #0
 8003cce:	61bb      	str	r3, [r7, #24]
 8003cd0:	e035      	b.n	8003d3e <ssd1306_WriteChar+0xf2>
            if((b << j) & 0x8000)  {
 8003cd2:	697a      	ldr	r2, [r7, #20]
 8003cd4:	69bb      	ldr	r3, [r7, #24]
 8003cd6:	409a      	lsls	r2, r3
 8003cd8:	2380      	movs	r3, #128	; 0x80
 8003cda:	021b      	lsls	r3, r3, #8
 8003cdc:	4013      	ands	r3, r2
 8003cde:	d014      	beq.n	8003d0a <ssd1306_WriteChar+0xbe>
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR) color);
 8003ce0:	4b26      	ldr	r3, [pc, #152]	; (8003d7c <ssd1306_WriteChar+0x130>)
 8003ce2:	881b      	ldrh	r3, [r3, #0]
 8003ce4:	b2da      	uxtb	r2, r3
 8003ce6:	69bb      	ldr	r3, [r7, #24]
 8003ce8:	b2db      	uxtb	r3, r3
 8003cea:	18d3      	adds	r3, r2, r3
 8003cec:	b2d8      	uxtb	r0, r3
 8003cee:	4b23      	ldr	r3, [pc, #140]	; (8003d7c <ssd1306_WriteChar+0x130>)
 8003cf0:	885b      	ldrh	r3, [r3, #2]
 8003cf2:	b2da      	uxtb	r2, r3
 8003cf4:	69fb      	ldr	r3, [r7, #28]
 8003cf6:	b2db      	uxtb	r3, r3
 8003cf8:	18d3      	adds	r3, r2, r3
 8003cfa:	b2d9      	uxtb	r1, r3
 8003cfc:	230e      	movs	r3, #14
 8003cfe:	18fb      	adds	r3, r7, r3
 8003d00:	781b      	ldrb	r3, [r3, #0]
 8003d02:	001a      	movs	r2, r3
 8003d04:	f7ff ff32 	bl	8003b6c <ssd1306_DrawPixel>
 8003d08:	e016      	b.n	8003d38 <ssd1306_WriteChar+0xec>
            } else {
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR)!color);
 8003d0a:	4b1c      	ldr	r3, [pc, #112]	; (8003d7c <ssd1306_WriteChar+0x130>)
 8003d0c:	881b      	ldrh	r3, [r3, #0]
 8003d0e:	b2da      	uxtb	r2, r3
 8003d10:	69bb      	ldr	r3, [r7, #24]
 8003d12:	b2db      	uxtb	r3, r3
 8003d14:	18d3      	adds	r3, r2, r3
 8003d16:	b2d8      	uxtb	r0, r3
 8003d18:	4b18      	ldr	r3, [pc, #96]	; (8003d7c <ssd1306_WriteChar+0x130>)
 8003d1a:	885b      	ldrh	r3, [r3, #2]
 8003d1c:	b2da      	uxtb	r2, r3
 8003d1e:	69fb      	ldr	r3, [r7, #28]
 8003d20:	b2db      	uxtb	r3, r3
 8003d22:	18d3      	adds	r3, r2, r3
 8003d24:	b2d9      	uxtb	r1, r3
 8003d26:	230e      	movs	r3, #14
 8003d28:	18fb      	adds	r3, r7, r3
 8003d2a:	781b      	ldrb	r3, [r3, #0]
 8003d2c:	425a      	negs	r2, r3
 8003d2e:	4153      	adcs	r3, r2
 8003d30:	b2db      	uxtb	r3, r3
 8003d32:	001a      	movs	r2, r3
 8003d34:	f7ff ff1a 	bl	8003b6c <ssd1306_DrawPixel>
        for(j = 0; j < Font.FontWidth; j++) {
 8003d38:	69bb      	ldr	r3, [r7, #24]
 8003d3a:	3301      	adds	r3, #1
 8003d3c:	61bb      	str	r3, [r7, #24]
 8003d3e:	1d3b      	adds	r3, r7, #4
 8003d40:	781b      	ldrb	r3, [r3, #0]
 8003d42:	001a      	movs	r2, r3
 8003d44:	69bb      	ldr	r3, [r7, #24]
 8003d46:	4293      	cmp	r3, r2
 8003d48:	d3c3      	bcc.n	8003cd2 <ssd1306_WriteChar+0x86>
    for(i = 0; i < Font.FontHeight; i++) {
 8003d4a:	69fb      	ldr	r3, [r7, #28]
 8003d4c:	3301      	adds	r3, #1
 8003d4e:	61fb      	str	r3, [r7, #28]
 8003d50:	1d3b      	adds	r3, r7, #4
 8003d52:	785b      	ldrb	r3, [r3, #1]
 8003d54:	001a      	movs	r2, r3
 8003d56:	69fb      	ldr	r3, [r7, #28]
 8003d58:	4293      	cmp	r3, r2
 8003d5a:	d3a7      	bcc.n	8003cac <ssd1306_WriteChar+0x60>
            }
        }
    }
    
    // The current space is now taken
    SSD1306.CurrentX += Font.FontWidth;
 8003d5c:	4b07      	ldr	r3, [pc, #28]	; (8003d7c <ssd1306_WriteChar+0x130>)
 8003d5e:	881a      	ldrh	r2, [r3, #0]
 8003d60:	1d3b      	adds	r3, r7, #4
 8003d62:	781b      	ldrb	r3, [r3, #0]
 8003d64:	b29b      	uxth	r3, r3
 8003d66:	18d3      	adds	r3, r2, r3
 8003d68:	b29a      	uxth	r2, r3
 8003d6a:	4b04      	ldr	r3, [pc, #16]	; (8003d7c <ssd1306_WriteChar+0x130>)
 8003d6c:	801a      	strh	r2, [r3, #0]
    
    // Return written char for validation
    return ch;
 8003d6e:	230f      	movs	r3, #15
 8003d70:	18fb      	adds	r3, r7, r3
 8003d72:	781b      	ldrb	r3, [r3, #0]
}
 8003d74:	0018      	movs	r0, r3
 8003d76:	46bd      	mov	sp, r7
 8003d78:	b009      	add	sp, #36	; 0x24
 8003d7a:	bd90      	pop	{r4, r7, pc}
 8003d7c:	200004b4 	.word	0x200004b4

08003d80 <ssd1306_WriteString>:

// Write full string to screenbuffer
char ssd1306_WriteString(char* str, FontDef Font, SSD1306_COLOR color) {
 8003d80:	b580      	push	{r7, lr}
 8003d82:	b084      	sub	sp, #16
 8003d84:	af00      	add	r7, sp, #0
 8003d86:	60f8      	str	r0, [r7, #12]
 8003d88:	1d38      	adds	r0, r7, #4
 8003d8a:	6001      	str	r1, [r0, #0]
 8003d8c:	6042      	str	r2, [r0, #4]
 8003d8e:	001a      	movs	r2, r3
 8003d90:	1cfb      	adds	r3, r7, #3
 8003d92:	701a      	strb	r2, [r3, #0]
    // Write until null-byte
    while (*str) {
 8003d94:	e014      	b.n	8003dc0 <ssd1306_WriteString+0x40>
        if (ssd1306_WriteChar(*str, Font, color) != *str) {
 8003d96:	68fb      	ldr	r3, [r7, #12]
 8003d98:	7818      	ldrb	r0, [r3, #0]
 8003d9a:	1cfb      	adds	r3, r7, #3
 8003d9c:	781b      	ldrb	r3, [r3, #0]
 8003d9e:	1d3a      	adds	r2, r7, #4
 8003da0:	6811      	ldr	r1, [r2, #0]
 8003da2:	6852      	ldr	r2, [r2, #4]
 8003da4:	f7ff ff52 	bl	8003c4c <ssd1306_WriteChar>
 8003da8:	0003      	movs	r3, r0
 8003daa:	001a      	movs	r2, r3
 8003dac:	68fb      	ldr	r3, [r7, #12]
 8003dae:	781b      	ldrb	r3, [r3, #0]
 8003db0:	429a      	cmp	r2, r3
 8003db2:	d002      	beq.n	8003dba <ssd1306_WriteString+0x3a>
            // Char could not be written
            return *str;
 8003db4:	68fb      	ldr	r3, [r7, #12]
 8003db6:	781b      	ldrb	r3, [r3, #0]
 8003db8:	e008      	b.n	8003dcc <ssd1306_WriteString+0x4c>
        }
        
        // Next char
        str++;
 8003dba:	68fb      	ldr	r3, [r7, #12]
 8003dbc:	3301      	adds	r3, #1
 8003dbe:	60fb      	str	r3, [r7, #12]
    while (*str) {
 8003dc0:	68fb      	ldr	r3, [r7, #12]
 8003dc2:	781b      	ldrb	r3, [r3, #0]
 8003dc4:	2b00      	cmp	r3, #0
 8003dc6:	d1e6      	bne.n	8003d96 <ssd1306_WriteString+0x16>
    }
    
    // Everything ok
    return *str;
 8003dc8:	68fb      	ldr	r3, [r7, #12]
 8003dca:	781b      	ldrb	r3, [r3, #0]
}
 8003dcc:	0018      	movs	r0, r3
 8003dce:	46bd      	mov	sp, r7
 8003dd0:	b004      	add	sp, #16
 8003dd2:	bd80      	pop	{r7, pc}

08003dd4 <ssd1306_SetCursor>:

// Position the cursor
void ssd1306_SetCursor(uint8_t x, uint8_t y) {
 8003dd4:	b580      	push	{r7, lr}
 8003dd6:	b082      	sub	sp, #8
 8003dd8:	af00      	add	r7, sp, #0
 8003dda:	0002      	movs	r2, r0
 8003ddc:	1dfb      	adds	r3, r7, #7
 8003dde:	701a      	strb	r2, [r3, #0]
 8003de0:	1dbb      	adds	r3, r7, #6
 8003de2:	1c0a      	adds	r2, r1, #0
 8003de4:	701a      	strb	r2, [r3, #0]
    SSD1306.CurrentX = x;
 8003de6:	1dfb      	adds	r3, r7, #7
 8003de8:	781b      	ldrb	r3, [r3, #0]
 8003dea:	b29a      	uxth	r2, r3
 8003dec:	4b05      	ldr	r3, [pc, #20]	; (8003e04 <ssd1306_SetCursor+0x30>)
 8003dee:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = y;
 8003df0:	1dbb      	adds	r3, r7, #6
 8003df2:	781b      	ldrb	r3, [r3, #0]
 8003df4:	b29a      	uxth	r2, r3
 8003df6:	4b03      	ldr	r3, [pc, #12]	; (8003e04 <ssd1306_SetCursor+0x30>)
 8003df8:	805a      	strh	r2, [r3, #2]
}
 8003dfa:	46c0      	nop			; (mov r8, r8)
 8003dfc:	46bd      	mov	sp, r7
 8003dfe:	b002      	add	sp, #8
 8003e00:	bd80      	pop	{r7, pc}
 8003e02:	46c0      	nop			; (mov r8, r8)
 8003e04:	200004b4 	.word	0x200004b4

08003e08 <ssd1306_Line>:

// Draw line by Bresenhem's algorithm
void ssd1306_Line(uint8_t x1, uint8_t y1, uint8_t x2, uint8_t y2, SSD1306_COLOR color) {
 8003e08:	b5b0      	push	{r4, r5, r7, lr}
 8003e0a:	b088      	sub	sp, #32
 8003e0c:	af00      	add	r7, sp, #0
 8003e0e:	0005      	movs	r5, r0
 8003e10:	000c      	movs	r4, r1
 8003e12:	0010      	movs	r0, r2
 8003e14:	0019      	movs	r1, r3
 8003e16:	1dfb      	adds	r3, r7, #7
 8003e18:	1c2a      	adds	r2, r5, #0
 8003e1a:	701a      	strb	r2, [r3, #0]
 8003e1c:	1dbb      	adds	r3, r7, #6
 8003e1e:	1c22      	adds	r2, r4, #0
 8003e20:	701a      	strb	r2, [r3, #0]
 8003e22:	1d7b      	adds	r3, r7, #5
 8003e24:	1c02      	adds	r2, r0, #0
 8003e26:	701a      	strb	r2, [r3, #0]
 8003e28:	1d3b      	adds	r3, r7, #4
 8003e2a:	1c0a      	adds	r2, r1, #0
 8003e2c:	701a      	strb	r2, [r3, #0]
  int32_t deltaX = abs(x2 - x1);
 8003e2e:	1d7b      	adds	r3, r7, #5
 8003e30:	781a      	ldrb	r2, [r3, #0]
 8003e32:	1dfb      	adds	r3, r7, #7
 8003e34:	781b      	ldrb	r3, [r3, #0]
 8003e36:	1ad3      	subs	r3, r2, r3
 8003e38:	17da      	asrs	r2, r3, #31
 8003e3a:	189b      	adds	r3, r3, r2
 8003e3c:	4053      	eors	r3, r2
 8003e3e:	61bb      	str	r3, [r7, #24]
  int32_t deltaY = abs(y2 - y1);
 8003e40:	1d3b      	adds	r3, r7, #4
 8003e42:	781a      	ldrb	r2, [r3, #0]
 8003e44:	1dbb      	adds	r3, r7, #6
 8003e46:	781b      	ldrb	r3, [r3, #0]
 8003e48:	1ad3      	subs	r3, r2, r3
 8003e4a:	17da      	asrs	r2, r3, #31
 8003e4c:	189b      	adds	r3, r3, r2
 8003e4e:	4053      	eors	r3, r2
 8003e50:	617b      	str	r3, [r7, #20]
  int32_t signX = ((x1 < x2) ? 1 : -1);
 8003e52:	1dfa      	adds	r2, r7, #7
 8003e54:	1d7b      	adds	r3, r7, #5
 8003e56:	7812      	ldrb	r2, [r2, #0]
 8003e58:	781b      	ldrb	r3, [r3, #0]
 8003e5a:	429a      	cmp	r2, r3
 8003e5c:	d201      	bcs.n	8003e62 <ssd1306_Line+0x5a>
 8003e5e:	2301      	movs	r3, #1
 8003e60:	e001      	b.n	8003e66 <ssd1306_Line+0x5e>
 8003e62:	2301      	movs	r3, #1
 8003e64:	425b      	negs	r3, r3
 8003e66:	613b      	str	r3, [r7, #16]
  int32_t signY = ((y1 < y2) ? 1 : -1);
 8003e68:	1dba      	adds	r2, r7, #6
 8003e6a:	1d3b      	adds	r3, r7, #4
 8003e6c:	7812      	ldrb	r2, [r2, #0]
 8003e6e:	781b      	ldrb	r3, [r3, #0]
 8003e70:	429a      	cmp	r2, r3
 8003e72:	d201      	bcs.n	8003e78 <ssd1306_Line+0x70>
 8003e74:	2301      	movs	r3, #1
 8003e76:	e001      	b.n	8003e7c <ssd1306_Line+0x74>
 8003e78:	2301      	movs	r3, #1
 8003e7a:	425b      	negs	r3, r3
 8003e7c:	60fb      	str	r3, [r7, #12]
  int32_t error = deltaX - deltaY;
 8003e7e:	69ba      	ldr	r2, [r7, #24]
 8003e80:	697b      	ldr	r3, [r7, #20]
 8003e82:	1ad3      	subs	r3, r2, r3
 8003e84:	61fb      	str	r3, [r7, #28]
  int32_t error2;
	
  ssd1306_DrawPixel(x2, y2, color);
 8003e86:	2330      	movs	r3, #48	; 0x30
 8003e88:	18fb      	adds	r3, r7, r3
 8003e8a:	781a      	ldrb	r2, [r3, #0]
 8003e8c:	1d3b      	adds	r3, r7, #4
 8003e8e:	7819      	ldrb	r1, [r3, #0]
 8003e90:	1d7b      	adds	r3, r7, #5
 8003e92:	781b      	ldrb	r3, [r3, #0]
 8003e94:	0018      	movs	r0, r3
 8003e96:	f7ff fe69 	bl	8003b6c <ssd1306_DrawPixel>
	while((x1 != x2) || (y1 != y2))
 8003e9a:	e02f      	b.n	8003efc <ssd1306_Line+0xf4>
	{
    ssd1306_DrawPixel(x1, y1, color);
 8003e9c:	2330      	movs	r3, #48	; 0x30
 8003e9e:	18fb      	adds	r3, r7, r3
 8003ea0:	781a      	ldrb	r2, [r3, #0]
 8003ea2:	1dbb      	adds	r3, r7, #6
 8003ea4:	7819      	ldrb	r1, [r3, #0]
 8003ea6:	1dfb      	adds	r3, r7, #7
 8003ea8:	781b      	ldrb	r3, [r3, #0]
 8003eaa:	0018      	movs	r0, r3
 8003eac:	f7ff fe5e 	bl	8003b6c <ssd1306_DrawPixel>
    error2 = error * 2;
 8003eb0:	69fb      	ldr	r3, [r7, #28]
 8003eb2:	005b      	lsls	r3, r3, #1
 8003eb4:	60bb      	str	r3, [r7, #8]
    if(error2 > -deltaY)
 8003eb6:	697b      	ldr	r3, [r7, #20]
 8003eb8:	425b      	negs	r3, r3
 8003eba:	68ba      	ldr	r2, [r7, #8]
 8003ebc:	429a      	cmp	r2, r3
 8003ebe:	dd0a      	ble.n	8003ed6 <ssd1306_Line+0xce>
    {
      error -= deltaY;
 8003ec0:	69fa      	ldr	r2, [r7, #28]
 8003ec2:	697b      	ldr	r3, [r7, #20]
 8003ec4:	1ad3      	subs	r3, r2, r3
 8003ec6:	61fb      	str	r3, [r7, #28]
      x1 += signX;
 8003ec8:	693b      	ldr	r3, [r7, #16]
 8003eca:	b2d9      	uxtb	r1, r3
 8003ecc:	1dfb      	adds	r3, r7, #7
 8003ece:	1dfa      	adds	r2, r7, #7
 8003ed0:	7812      	ldrb	r2, [r2, #0]
 8003ed2:	188a      	adds	r2, r1, r2
 8003ed4:	701a      	strb	r2, [r3, #0]
 8003ed6:	1dbb      	adds	r3, r7, #6
 8003ed8:	1dba      	adds	r2, r7, #6
 8003eda:	7812      	ldrb	r2, [r2, #0]
 8003edc:	701a      	strb	r2, [r3, #0]
    else
    {
    /*nothing to do*/
    }
		
    if(error2 < deltaX)
 8003ede:	68ba      	ldr	r2, [r7, #8]
 8003ee0:	69bb      	ldr	r3, [r7, #24]
 8003ee2:	429a      	cmp	r2, r3
 8003ee4:	da0a      	bge.n	8003efc <ssd1306_Line+0xf4>
    {
      error += deltaX;
 8003ee6:	69fa      	ldr	r2, [r7, #28]
 8003ee8:	69bb      	ldr	r3, [r7, #24]
 8003eea:	18d3      	adds	r3, r2, r3
 8003eec:	61fb      	str	r3, [r7, #28]
      y1 += signY;
 8003eee:	68fb      	ldr	r3, [r7, #12]
 8003ef0:	b2d9      	uxtb	r1, r3
 8003ef2:	1dbb      	adds	r3, r7, #6
 8003ef4:	1dba      	adds	r2, r7, #6
 8003ef6:	7812      	ldrb	r2, [r2, #0]
 8003ef8:	188a      	adds	r2, r1, r2
 8003efa:	701a      	strb	r2, [r3, #0]
	while((x1 != x2) || (y1 != y2))
 8003efc:	1dfa      	adds	r2, r7, #7
 8003efe:	1d7b      	adds	r3, r7, #5
 8003f00:	7812      	ldrb	r2, [r2, #0]
 8003f02:	781b      	ldrb	r3, [r3, #0]
 8003f04:	429a      	cmp	r2, r3
 8003f06:	d1c9      	bne.n	8003e9c <ssd1306_Line+0x94>
 8003f08:	1dba      	adds	r2, r7, #6
 8003f0a:	1d3b      	adds	r3, r7, #4
 8003f0c:	7812      	ldrb	r2, [r2, #0]
 8003f0e:	781b      	ldrb	r3, [r3, #0]
 8003f10:	429a      	cmp	r2, r3
 8003f12:	d1c3      	bne.n	8003e9c <ssd1306_Line+0x94>
    else
    {
    /*nothing to do*/
    }
  }
  return;
 8003f14:	46c0      	nop			; (mov r8, r8)
}
 8003f16:	46bd      	mov	sp, r7
 8003f18:	b008      	add	sp, #32
 8003f1a:	bdb0      	pop	{r4, r5, r7, pc}

08003f1c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003f1c:	b580      	push	{r7, lr}
 8003f1e:	b082      	sub	sp, #8
 8003f20:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003f22:	4b0f      	ldr	r3, [pc, #60]	; (8003f60 <HAL_MspInit+0x44>)
 8003f24:	699a      	ldr	r2, [r3, #24]
 8003f26:	4b0e      	ldr	r3, [pc, #56]	; (8003f60 <HAL_MspInit+0x44>)
 8003f28:	2101      	movs	r1, #1
 8003f2a:	430a      	orrs	r2, r1
 8003f2c:	619a      	str	r2, [r3, #24]
 8003f2e:	4b0c      	ldr	r3, [pc, #48]	; (8003f60 <HAL_MspInit+0x44>)
 8003f30:	699b      	ldr	r3, [r3, #24]
 8003f32:	2201      	movs	r2, #1
 8003f34:	4013      	ands	r3, r2
 8003f36:	607b      	str	r3, [r7, #4]
 8003f38:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8003f3a:	4b09      	ldr	r3, [pc, #36]	; (8003f60 <HAL_MspInit+0x44>)
 8003f3c:	69da      	ldr	r2, [r3, #28]
 8003f3e:	4b08      	ldr	r3, [pc, #32]	; (8003f60 <HAL_MspInit+0x44>)
 8003f40:	2180      	movs	r1, #128	; 0x80
 8003f42:	0549      	lsls	r1, r1, #21
 8003f44:	430a      	orrs	r2, r1
 8003f46:	61da      	str	r2, [r3, #28]
 8003f48:	4b05      	ldr	r3, [pc, #20]	; (8003f60 <HAL_MspInit+0x44>)
 8003f4a:	69da      	ldr	r2, [r3, #28]
 8003f4c:	2380      	movs	r3, #128	; 0x80
 8003f4e:	055b      	lsls	r3, r3, #21
 8003f50:	4013      	ands	r3, r2
 8003f52:	603b      	str	r3, [r7, #0]
 8003f54:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003f56:	46c0      	nop			; (mov r8, r8)
 8003f58:	46bd      	mov	sp, r7
 8003f5a:	b002      	add	sp, #8
 8003f5c:	bd80      	pop	{r7, pc}
 8003f5e:	46c0      	nop			; (mov r8, r8)
 8003f60:	40021000 	.word	0x40021000

08003f64 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8003f64:	b580      	push	{r7, lr}
 8003f66:	b08a      	sub	sp, #40	; 0x28
 8003f68:	af00      	add	r7, sp, #0
 8003f6a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003f6c:	2314      	movs	r3, #20
 8003f6e:	18fb      	adds	r3, r7, r3
 8003f70:	0018      	movs	r0, r3
 8003f72:	2314      	movs	r3, #20
 8003f74:	001a      	movs	r2, r3
 8003f76:	2100      	movs	r1, #0
 8003f78:	f003 fc31 	bl	80077de <memset>
  if(hadc->Instance==ADC1)
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	4a2d      	ldr	r2, [pc, #180]	; (8004038 <HAL_ADC_MspInit+0xd4>)
 8003f82:	4293      	cmp	r3, r2
 8003f84:	d154      	bne.n	8004030 <HAL_ADC_MspInit+0xcc>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8003f86:	4b2d      	ldr	r3, [pc, #180]	; (800403c <HAL_ADC_MspInit+0xd8>)
 8003f88:	699a      	ldr	r2, [r3, #24]
 8003f8a:	4b2c      	ldr	r3, [pc, #176]	; (800403c <HAL_ADC_MspInit+0xd8>)
 8003f8c:	2180      	movs	r1, #128	; 0x80
 8003f8e:	0089      	lsls	r1, r1, #2
 8003f90:	430a      	orrs	r2, r1
 8003f92:	619a      	str	r2, [r3, #24]
 8003f94:	4b29      	ldr	r3, [pc, #164]	; (800403c <HAL_ADC_MspInit+0xd8>)
 8003f96:	699a      	ldr	r2, [r3, #24]
 8003f98:	2380      	movs	r3, #128	; 0x80
 8003f9a:	009b      	lsls	r3, r3, #2
 8003f9c:	4013      	ands	r3, r2
 8003f9e:	613b      	str	r3, [r7, #16]
 8003fa0:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003fa2:	4b26      	ldr	r3, [pc, #152]	; (800403c <HAL_ADC_MspInit+0xd8>)
 8003fa4:	695a      	ldr	r2, [r3, #20]
 8003fa6:	4b25      	ldr	r3, [pc, #148]	; (800403c <HAL_ADC_MspInit+0xd8>)
 8003fa8:	2180      	movs	r1, #128	; 0x80
 8003faa:	0289      	lsls	r1, r1, #10
 8003fac:	430a      	orrs	r2, r1
 8003fae:	615a      	str	r2, [r3, #20]
 8003fb0:	4b22      	ldr	r3, [pc, #136]	; (800403c <HAL_ADC_MspInit+0xd8>)
 8003fb2:	695a      	ldr	r2, [r3, #20]
 8003fb4:	2380      	movs	r3, #128	; 0x80
 8003fb6:	029b      	lsls	r3, r3, #10
 8003fb8:	4013      	ands	r3, r2
 8003fba:	60fb      	str	r3, [r7, #12]
 8003fbc:	68fb      	ldr	r3, [r7, #12]
    PA4     ------> ADC_IN4
    PA5     ------> ADC_IN5
    PA6     ------> ADC_IN6
    PA7     ------> ADC_IN7 
    */
    GPIO_InitStruct.Pin = CHARGER_PG_Pin|GAIN_Pin|GAIN_BASS_Pin|GAIN_MIDDLE_Pin 
 8003fbe:	2114      	movs	r1, #20
 8003fc0:	187b      	adds	r3, r7, r1
 8003fc2:	22ff      	movs	r2, #255	; 0xff
 8003fc4:	601a      	str	r2, [r3, #0]
                          |GAIN_TREBLE_Pin|PACK_VOLTAGE_Pin|TEMP_SENSOR1_Pin|LEVELMETER_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003fc6:	187b      	adds	r3, r7, r1
 8003fc8:	2203      	movs	r2, #3
 8003fca:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003fcc:	187b      	adds	r3, r7, r1
 8003fce:	2200      	movs	r2, #0
 8003fd0:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003fd2:	187a      	adds	r2, r7, r1
 8003fd4:	2390      	movs	r3, #144	; 0x90
 8003fd6:	05db      	lsls	r3, r3, #23
 8003fd8:	0011      	movs	r1, r2
 8003fda:	0018      	movs	r0, r3
 8003fdc:	f001 f8bc 	bl	8005158 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC Init */
    hdma_adc.Instance = DMA1_Channel1;
 8003fe0:	4b17      	ldr	r3, [pc, #92]	; (8004040 <HAL_ADC_MspInit+0xdc>)
 8003fe2:	4a18      	ldr	r2, [pc, #96]	; (8004044 <HAL_ADC_MspInit+0xe0>)
 8003fe4:	601a      	str	r2, [r3, #0]
    hdma_adc.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8003fe6:	4b16      	ldr	r3, [pc, #88]	; (8004040 <HAL_ADC_MspInit+0xdc>)
 8003fe8:	2200      	movs	r2, #0
 8003fea:	605a      	str	r2, [r3, #4]
    hdma_adc.Init.PeriphInc = DMA_PINC_DISABLE;
 8003fec:	4b14      	ldr	r3, [pc, #80]	; (8004040 <HAL_ADC_MspInit+0xdc>)
 8003fee:	2200      	movs	r2, #0
 8003ff0:	609a      	str	r2, [r3, #8]
    hdma_adc.Init.MemInc = DMA_MINC_ENABLE;
 8003ff2:	4b13      	ldr	r3, [pc, #76]	; (8004040 <HAL_ADC_MspInit+0xdc>)
 8003ff4:	2280      	movs	r2, #128	; 0x80
 8003ff6:	60da      	str	r2, [r3, #12]
    hdma_adc.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8003ff8:	4b11      	ldr	r3, [pc, #68]	; (8004040 <HAL_ADC_MspInit+0xdc>)
 8003ffa:	2280      	movs	r2, #128	; 0x80
 8003ffc:	0052      	lsls	r2, r2, #1
 8003ffe:	611a      	str	r2, [r3, #16]
    hdma_adc.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8004000:	4b0f      	ldr	r3, [pc, #60]	; (8004040 <HAL_ADC_MspInit+0xdc>)
 8004002:	2280      	movs	r2, #128	; 0x80
 8004004:	00d2      	lsls	r2, r2, #3
 8004006:	615a      	str	r2, [r3, #20]
    hdma_adc.Init.Mode = DMA_NORMAL;
 8004008:	4b0d      	ldr	r3, [pc, #52]	; (8004040 <HAL_ADC_MspInit+0xdc>)
 800400a:	2200      	movs	r2, #0
 800400c:	619a      	str	r2, [r3, #24]
    hdma_adc.Init.Priority = DMA_PRIORITY_LOW;
 800400e:	4b0c      	ldr	r3, [pc, #48]	; (8004040 <HAL_ADC_MspInit+0xdc>)
 8004010:	2200      	movs	r2, #0
 8004012:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_adc) != HAL_OK)
 8004014:	4b0a      	ldr	r3, [pc, #40]	; (8004040 <HAL_ADC_MspInit+0xdc>)
 8004016:	0018      	movs	r0, r3
 8004018:	f000 ff06 	bl	8004e28 <HAL_DMA_Init>
 800401c:	1e03      	subs	r3, r0, #0
 800401e:	d001      	beq.n	8004024 <HAL_ADC_MspInit+0xc0>
    {
      Error_Handler();
 8004020:	f7ff fca8 	bl	8003974 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc);
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	4a06      	ldr	r2, [pc, #24]	; (8004040 <HAL_ADC_MspInit+0xdc>)
 8004028:	631a      	str	r2, [r3, #48]	; 0x30
 800402a:	4b05      	ldr	r3, [pc, #20]	; (8004040 <HAL_ADC_MspInit+0xdc>)
 800402c:	687a      	ldr	r2, [r7, #4]
 800402e:	625a      	str	r2, [r3, #36]	; 0x24
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8004030:	46c0      	nop			; (mov r8, r8)
 8004032:	46bd      	mov	sp, r7
 8004034:	b00a      	add	sp, #40	; 0x28
 8004036:	bd80      	pop	{r7, pc}
 8004038:	40012400 	.word	0x40012400
 800403c:	40021000 	.word	0x40021000
 8004040:	20000668 	.word	0x20000668
 8004044:	40020008 	.word	0x40020008

08004048 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8004048:	b580      	push	{r7, lr}
 800404a:	b08a      	sub	sp, #40	; 0x28
 800404c:	af00      	add	r7, sp, #0
 800404e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004050:	2314      	movs	r3, #20
 8004052:	18fb      	adds	r3, r7, r3
 8004054:	0018      	movs	r0, r3
 8004056:	2314      	movs	r3, #20
 8004058:	001a      	movs	r2, r3
 800405a:	2100      	movs	r1, #0
 800405c:	f003 fbbf 	bl	80077de <memset>
  if(hi2c->Instance==I2C1)
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	4a1c      	ldr	r2, [pc, #112]	; (80040d8 <HAL_I2C_MspInit+0x90>)
 8004066:	4293      	cmp	r3, r2
 8004068:	d132      	bne.n	80040d0 <HAL_I2C_MspInit+0x88>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800406a:	4b1c      	ldr	r3, [pc, #112]	; (80040dc <HAL_I2C_MspInit+0x94>)
 800406c:	695a      	ldr	r2, [r3, #20]
 800406e:	4b1b      	ldr	r3, [pc, #108]	; (80040dc <HAL_I2C_MspInit+0x94>)
 8004070:	2180      	movs	r1, #128	; 0x80
 8004072:	02c9      	lsls	r1, r1, #11
 8004074:	430a      	orrs	r2, r1
 8004076:	615a      	str	r2, [r3, #20]
 8004078:	4b18      	ldr	r3, [pc, #96]	; (80040dc <HAL_I2C_MspInit+0x94>)
 800407a:	695a      	ldr	r2, [r3, #20]
 800407c:	2380      	movs	r3, #128	; 0x80
 800407e:	02db      	lsls	r3, r3, #11
 8004080:	4013      	ands	r3, r2
 8004082:	613b      	str	r3, [r7, #16]
 8004084:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration    
    PB10     ------> I2C1_SCL
    PB11     ------> I2C1_SDA 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8004086:	2114      	movs	r1, #20
 8004088:	187b      	adds	r3, r7, r1
 800408a:	22c0      	movs	r2, #192	; 0xc0
 800408c:	0112      	lsls	r2, r2, #4
 800408e:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8004090:	187b      	adds	r3, r7, r1
 8004092:	2212      	movs	r2, #18
 8004094:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8004096:	187b      	adds	r3, r7, r1
 8004098:	2201      	movs	r2, #1
 800409a:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800409c:	187b      	adds	r3, r7, r1
 800409e:	2203      	movs	r2, #3
 80040a0:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_I2C1;
 80040a2:	187b      	adds	r3, r7, r1
 80040a4:	2201      	movs	r2, #1
 80040a6:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80040a8:	187b      	adds	r3, r7, r1
 80040aa:	4a0d      	ldr	r2, [pc, #52]	; (80040e0 <HAL_I2C_MspInit+0x98>)
 80040ac:	0019      	movs	r1, r3
 80040ae:	0010      	movs	r0, r2
 80040b0:	f001 f852 	bl	8005158 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80040b4:	4b09      	ldr	r3, [pc, #36]	; (80040dc <HAL_I2C_MspInit+0x94>)
 80040b6:	69da      	ldr	r2, [r3, #28]
 80040b8:	4b08      	ldr	r3, [pc, #32]	; (80040dc <HAL_I2C_MspInit+0x94>)
 80040ba:	2180      	movs	r1, #128	; 0x80
 80040bc:	0389      	lsls	r1, r1, #14
 80040be:	430a      	orrs	r2, r1
 80040c0:	61da      	str	r2, [r3, #28]
 80040c2:	4b06      	ldr	r3, [pc, #24]	; (80040dc <HAL_I2C_MspInit+0x94>)
 80040c4:	69da      	ldr	r2, [r3, #28]
 80040c6:	2380      	movs	r3, #128	; 0x80
 80040c8:	039b      	lsls	r3, r3, #14
 80040ca:	4013      	ands	r3, r2
 80040cc:	60fb      	str	r3, [r7, #12]
 80040ce:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80040d0:	46c0      	nop			; (mov r8, r8)
 80040d2:	46bd      	mov	sp, r7
 80040d4:	b00a      	add	sp, #40	; 0x28
 80040d6:	bd80      	pop	{r7, pc}
 80040d8:	40005400 	.word	0x40005400
 80040dc:	40021000 	.word	0x40021000
 80040e0:	48000400 	.word	0x48000400

080040e4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80040e4:	b580      	push	{r7, lr}
 80040e6:	b084      	sub	sp, #16
 80040e8:	af00      	add	r7, sp, #0
 80040ea:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	4a13      	ldr	r2, [pc, #76]	; (8004140 <HAL_TIM_Base_MspInit+0x5c>)
 80040f2:	4293      	cmp	r3, r2
 80040f4:	d10e      	bne.n	8004114 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80040f6:	4b13      	ldr	r3, [pc, #76]	; (8004144 <HAL_TIM_Base_MspInit+0x60>)
 80040f8:	699a      	ldr	r2, [r3, #24]
 80040fa:	4b12      	ldr	r3, [pc, #72]	; (8004144 <HAL_TIM_Base_MspInit+0x60>)
 80040fc:	2180      	movs	r1, #128	; 0x80
 80040fe:	0109      	lsls	r1, r1, #4
 8004100:	430a      	orrs	r2, r1
 8004102:	619a      	str	r2, [r3, #24]
 8004104:	4b0f      	ldr	r3, [pc, #60]	; (8004144 <HAL_TIM_Base_MspInit+0x60>)
 8004106:	699a      	ldr	r2, [r3, #24]
 8004108:	2380      	movs	r3, #128	; 0x80
 800410a:	011b      	lsls	r3, r3, #4
 800410c:	4013      	ands	r3, r2
 800410e:	60fb      	str	r3, [r7, #12]
 8004110:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8004112:	e010      	b.n	8004136 <HAL_TIM_Base_MspInit+0x52>
  else if(htim_base->Instance==TIM3)
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	4a0b      	ldr	r2, [pc, #44]	; (8004148 <HAL_TIM_Base_MspInit+0x64>)
 800411a:	4293      	cmp	r3, r2
 800411c:	d10b      	bne.n	8004136 <HAL_TIM_Base_MspInit+0x52>
    __HAL_RCC_TIM3_CLK_ENABLE();
 800411e:	4b09      	ldr	r3, [pc, #36]	; (8004144 <HAL_TIM_Base_MspInit+0x60>)
 8004120:	69da      	ldr	r2, [r3, #28]
 8004122:	4b08      	ldr	r3, [pc, #32]	; (8004144 <HAL_TIM_Base_MspInit+0x60>)
 8004124:	2102      	movs	r1, #2
 8004126:	430a      	orrs	r2, r1
 8004128:	61da      	str	r2, [r3, #28]
 800412a:	4b06      	ldr	r3, [pc, #24]	; (8004144 <HAL_TIM_Base_MspInit+0x60>)
 800412c:	69db      	ldr	r3, [r3, #28]
 800412e:	2202      	movs	r2, #2
 8004130:	4013      	ands	r3, r2
 8004132:	60bb      	str	r3, [r7, #8]
 8004134:	68bb      	ldr	r3, [r7, #8]
}
 8004136:	46c0      	nop			; (mov r8, r8)
 8004138:	46bd      	mov	sp, r7
 800413a:	b004      	add	sp, #16
 800413c:	bd80      	pop	{r7, pc}
 800413e:	46c0      	nop			; (mov r8, r8)
 8004140:	40012c00 	.word	0x40012c00
 8004144:	40021000 	.word	0x40021000
 8004148:	40000400 	.word	0x40000400

0800414c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800414c:	b580      	push	{r7, lr}
 800414e:	b08a      	sub	sp, #40	; 0x28
 8004150:	af00      	add	r7, sp, #0
 8004152:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004154:	2314      	movs	r3, #20
 8004156:	18fb      	adds	r3, r7, r3
 8004158:	0018      	movs	r0, r3
 800415a:	2314      	movs	r3, #20
 800415c:	001a      	movs	r2, r3
 800415e:	2100      	movs	r1, #0
 8004160:	f003 fb3d 	bl	80077de <memset>
  if(huart->Instance==USART1)
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	4a1d      	ldr	r2, [pc, #116]	; (80041e0 <HAL_UART_MspInit+0x94>)
 800416a:	4293      	cmp	r3, r2
 800416c:	d133      	bne.n	80041d6 <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800416e:	4b1d      	ldr	r3, [pc, #116]	; (80041e4 <HAL_UART_MspInit+0x98>)
 8004170:	699a      	ldr	r2, [r3, #24]
 8004172:	4b1c      	ldr	r3, [pc, #112]	; (80041e4 <HAL_UART_MspInit+0x98>)
 8004174:	2180      	movs	r1, #128	; 0x80
 8004176:	01c9      	lsls	r1, r1, #7
 8004178:	430a      	orrs	r2, r1
 800417a:	619a      	str	r2, [r3, #24]
 800417c:	4b19      	ldr	r3, [pc, #100]	; (80041e4 <HAL_UART_MspInit+0x98>)
 800417e:	699a      	ldr	r2, [r3, #24]
 8004180:	2380      	movs	r3, #128	; 0x80
 8004182:	01db      	lsls	r3, r3, #7
 8004184:	4013      	ands	r3, r2
 8004186:	613b      	str	r3, [r7, #16]
 8004188:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800418a:	4b16      	ldr	r3, [pc, #88]	; (80041e4 <HAL_UART_MspInit+0x98>)
 800418c:	695a      	ldr	r2, [r3, #20]
 800418e:	4b15      	ldr	r3, [pc, #84]	; (80041e4 <HAL_UART_MspInit+0x98>)
 8004190:	2180      	movs	r1, #128	; 0x80
 8004192:	0289      	lsls	r1, r1, #10
 8004194:	430a      	orrs	r2, r1
 8004196:	615a      	str	r2, [r3, #20]
 8004198:	4b12      	ldr	r3, [pc, #72]	; (80041e4 <HAL_UART_MspInit+0x98>)
 800419a:	695a      	ldr	r2, [r3, #20]
 800419c:	2380      	movs	r3, #128	; 0x80
 800419e:	029b      	lsls	r3, r3, #10
 80041a0:	4013      	ands	r3, r2
 80041a2:	60fb      	str	r3, [r7, #12]
 80041a4:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration    
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80041a6:	2114      	movs	r1, #20
 80041a8:	187b      	adds	r3, r7, r1
 80041aa:	22c0      	movs	r2, #192	; 0xc0
 80041ac:	00d2      	lsls	r2, r2, #3
 80041ae:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80041b0:	187b      	adds	r3, r7, r1
 80041b2:	2202      	movs	r2, #2
 80041b4:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80041b6:	187b      	adds	r3, r7, r1
 80041b8:	2200      	movs	r2, #0
 80041ba:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80041bc:	187b      	adds	r3, r7, r1
 80041be:	2203      	movs	r2, #3
 80041c0:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART1;
 80041c2:	187b      	adds	r3, r7, r1
 80041c4:	2201      	movs	r2, #1
 80041c6:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80041c8:	187a      	adds	r2, r7, r1
 80041ca:	2390      	movs	r3, #144	; 0x90
 80041cc:	05db      	lsls	r3, r3, #23
 80041ce:	0011      	movs	r1, r2
 80041d0:	0018      	movs	r0, r3
 80041d2:	f000 ffc1 	bl	8005158 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 80041d6:	46c0      	nop			; (mov r8, r8)
 80041d8:	46bd      	mov	sp, r7
 80041da:	b00a      	add	sp, #40	; 0x28
 80041dc:	bd80      	pop	{r7, pc}
 80041de:	46c0      	nop			; (mov r8, r8)
 80041e0:	40013800 	.word	0x40013800
 80041e4:	40021000 	.word	0x40021000

080041e8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80041e8:	b580      	push	{r7, lr}
 80041ea:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80041ec:	46c0      	nop			; (mov r8, r8)
 80041ee:	46bd      	mov	sp, r7
 80041f0:	bd80      	pop	{r7, pc}

080041f2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80041f2:	b580      	push	{r7, lr}
 80041f4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80041f6:	e7fe      	b.n	80041f6 <HardFault_Handler+0x4>

080041f8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80041f8:	b580      	push	{r7, lr}
 80041fa:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 80041fc:	46c0      	nop			; (mov r8, r8)
 80041fe:	46bd      	mov	sp, r7
 8004200:	bd80      	pop	{r7, pc}

08004202 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8004202:	b580      	push	{r7, lr}
 8004204:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8004206:	46c0      	nop			; (mov r8, r8)
 8004208:	46bd      	mov	sp, r7
 800420a:	bd80      	pop	{r7, pc}

0800420c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800420c:	b580      	push	{r7, lr}
 800420e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8004210:	f000 f888 	bl	8004324 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8004214:	46c0      	nop			; (mov r8, r8)
 8004216:	46bd      	mov	sp, r7
 8004218:	bd80      	pop	{r7, pc}
	...

0800421c <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 1 interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 800421c:	b580      	push	{r7, lr}
 800421e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc);
 8004220:	4b03      	ldr	r3, [pc, #12]	; (8004230 <DMA1_Channel1_IRQHandler+0x14>)
 8004222:	0018      	movs	r0, r3
 8004224:	f000 feae 	bl	8004f84 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8004228:	46c0      	nop			; (mov r8, r8)
 800422a:	46bd      	mov	sp, r7
 800422c:	bd80      	pop	{r7, pc}
 800422e:	46c0      	nop			; (mov r8, r8)
 8004230:	20000668 	.word	0x20000668

08004234 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8004234:	b580      	push	{r7, lr}
 8004236:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 8004238:	46c0      	nop			; (mov r8, r8)
 800423a:	46bd      	mov	sp, r7
 800423c:	bd80      	pop	{r7, pc}
	...

08004240 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8004240:	480d      	ldr	r0, [pc, #52]	; (8004278 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8004242:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8004244:	480d      	ldr	r0, [pc, #52]	; (800427c <LoopForever+0x6>)
  ldr r1, =_edata
 8004246:	490e      	ldr	r1, [pc, #56]	; (8004280 <LoopForever+0xa>)
  ldr r2, =_sidata
 8004248:	4a0e      	ldr	r2, [pc, #56]	; (8004284 <LoopForever+0xe>)
  movs r3, #0
 800424a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800424c:	e002      	b.n	8004254 <LoopCopyDataInit>

0800424e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800424e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8004250:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8004252:	3304      	adds	r3, #4

08004254 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8004254:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8004256:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8004258:	d3f9      	bcc.n	800424e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800425a:	4a0b      	ldr	r2, [pc, #44]	; (8004288 <LoopForever+0x12>)
  ldr r4, =_ebss
 800425c:	4c0b      	ldr	r4, [pc, #44]	; (800428c <LoopForever+0x16>)
  movs r3, #0
 800425e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8004260:	e001      	b.n	8004266 <LoopFillZerobss>

08004262 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8004262:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8004264:	3204      	adds	r2, #4

08004266 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8004266:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8004268:	d3fb      	bcc.n	8004262 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 800426a:	f7ff ffe3 	bl	8004234 <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 800426e:	f003 fa6d 	bl	800774c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8004272:	f7fe fb37 	bl	80028e4 <main>

08004276 <LoopForever>:

LoopForever:
    b LoopForever
 8004276:	e7fe      	b.n	8004276 <LoopForever>
  ldr   r0, =_estack
 8004278:	20001000 	.word	0x20001000
  ldr r0, =_sdata
 800427c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8004280:	2000001c 	.word	0x2000001c
  ldr r2, =_sidata
 8004284:	08007fbc 	.word	0x08007fbc
  ldr r2, =_sbss
 8004288:	20000020 	.word	0x20000020
  ldr r4, =_ebss
 800428c:	200006fc 	.word	0x200006fc

08004290 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8004290:	e7fe      	b.n	8004290 <ADC1_IRQHandler>
	...

08004294 <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8004294:	b580      	push	{r7, lr}
 8004296:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8004298:	4b07      	ldr	r3, [pc, #28]	; (80042b8 <HAL_Init+0x24>)
 800429a:	681a      	ldr	r2, [r3, #0]
 800429c:	4b06      	ldr	r3, [pc, #24]	; (80042b8 <HAL_Init+0x24>)
 800429e:	2110      	movs	r1, #16
 80042a0:	430a      	orrs	r2, r1
 80042a2:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 80042a4:	2000      	movs	r0, #0
 80042a6:	f000 f809 	bl	80042bc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80042aa:	f7ff fe37 	bl	8003f1c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80042ae:	2300      	movs	r3, #0
}
 80042b0:	0018      	movs	r0, r3
 80042b2:	46bd      	mov	sp, r7
 80042b4:	bd80      	pop	{r7, pc}
 80042b6:	46c0      	nop			; (mov r8, r8)
 80042b8:	40022000 	.word	0x40022000

080042bc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80042bc:	b590      	push	{r4, r7, lr}
 80042be:	b083      	sub	sp, #12
 80042c0:	af00      	add	r7, sp, #0
 80042c2:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80042c4:	4b14      	ldr	r3, [pc, #80]	; (8004318 <HAL_InitTick+0x5c>)
 80042c6:	681c      	ldr	r4, [r3, #0]
 80042c8:	4b14      	ldr	r3, [pc, #80]	; (800431c <HAL_InitTick+0x60>)
 80042ca:	781b      	ldrb	r3, [r3, #0]
 80042cc:	0019      	movs	r1, r3
 80042ce:	23fa      	movs	r3, #250	; 0xfa
 80042d0:	0098      	lsls	r0, r3, #2
 80042d2:	f7fb ff19 	bl	8000108 <__udivsi3>
 80042d6:	0003      	movs	r3, r0
 80042d8:	0019      	movs	r1, r3
 80042da:	0020      	movs	r0, r4
 80042dc:	f7fb ff14 	bl	8000108 <__udivsi3>
 80042e0:	0003      	movs	r3, r0
 80042e2:	0018      	movs	r0, r3
 80042e4:	f000 fd93 	bl	8004e0e <HAL_SYSTICK_Config>
 80042e8:	1e03      	subs	r3, r0, #0
 80042ea:	d001      	beq.n	80042f0 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 80042ec:	2301      	movs	r3, #1
 80042ee:	e00f      	b.n	8004310 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	2b03      	cmp	r3, #3
 80042f4:	d80b      	bhi.n	800430e <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80042f6:	6879      	ldr	r1, [r7, #4]
 80042f8:	2301      	movs	r3, #1
 80042fa:	425b      	negs	r3, r3
 80042fc:	2200      	movs	r2, #0
 80042fe:	0018      	movs	r0, r3
 8004300:	f000 fd60 	bl	8004dc4 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8004304:	4b06      	ldr	r3, [pc, #24]	; (8004320 <HAL_InitTick+0x64>)
 8004306:	687a      	ldr	r2, [r7, #4]
 8004308:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
 800430a:	2300      	movs	r3, #0
 800430c:	e000      	b.n	8004310 <HAL_InitTick+0x54>
    return HAL_ERROR;
 800430e:	2301      	movs	r3, #1
}
 8004310:	0018      	movs	r0, r3
 8004312:	46bd      	mov	sp, r7
 8004314:	b003      	add	sp, #12
 8004316:	bd90      	pop	{r4, r7, pc}
 8004318:	20000010 	.word	0x20000010
 800431c:	20000018 	.word	0x20000018
 8004320:	20000014 	.word	0x20000014

08004324 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8004324:	b580      	push	{r7, lr}
 8004326:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8004328:	4b05      	ldr	r3, [pc, #20]	; (8004340 <HAL_IncTick+0x1c>)
 800432a:	781b      	ldrb	r3, [r3, #0]
 800432c:	001a      	movs	r2, r3
 800432e:	4b05      	ldr	r3, [pc, #20]	; (8004344 <HAL_IncTick+0x20>)
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	18d2      	adds	r2, r2, r3
 8004334:	4b03      	ldr	r3, [pc, #12]	; (8004344 <HAL_IncTick+0x20>)
 8004336:	601a      	str	r2, [r3, #0]
}
 8004338:	46c0      	nop			; (mov r8, r8)
 800433a:	46bd      	mov	sp, r7
 800433c:	bd80      	pop	{r7, pc}
 800433e:	46c0      	nop			; (mov r8, r8)
 8004340:	20000018 	.word	0x20000018
 8004344:	200006f8 	.word	0x200006f8

08004348 <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8004348:	b580      	push	{r7, lr}
 800434a:	af00      	add	r7, sp, #0
  return uwTick;
 800434c:	4b02      	ldr	r3, [pc, #8]	; (8004358 <HAL_GetTick+0x10>)
 800434e:	681b      	ldr	r3, [r3, #0]
}
 8004350:	0018      	movs	r0, r3
 8004352:	46bd      	mov	sp, r7
 8004354:	bd80      	pop	{r7, pc}
 8004356:	46c0      	nop			; (mov r8, r8)
 8004358:	200006f8 	.word	0x200006f8

0800435c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800435c:	b580      	push	{r7, lr}
 800435e:	b084      	sub	sp, #16
 8004360:	af00      	add	r7, sp, #0
 8004362:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8004364:	f7ff fff0 	bl	8004348 <HAL_GetTick>
 8004368:	0003      	movs	r3, r0
 800436a:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	60fb      	str	r3, [r7, #12]
  
  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8004370:	68fb      	ldr	r3, [r7, #12]
 8004372:	3301      	adds	r3, #1
 8004374:	d005      	beq.n	8004382 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8004376:	4b09      	ldr	r3, [pc, #36]	; (800439c <HAL_Delay+0x40>)
 8004378:	781b      	ldrb	r3, [r3, #0]
 800437a:	001a      	movs	r2, r3
 800437c:	68fb      	ldr	r3, [r7, #12]
 800437e:	189b      	adds	r3, r3, r2
 8004380:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8004382:	46c0      	nop			; (mov r8, r8)
 8004384:	f7ff ffe0 	bl	8004348 <HAL_GetTick>
 8004388:	0002      	movs	r2, r0
 800438a:	68bb      	ldr	r3, [r7, #8]
 800438c:	1ad3      	subs	r3, r2, r3
 800438e:	68fa      	ldr	r2, [r7, #12]
 8004390:	429a      	cmp	r2, r3
 8004392:	d8f7      	bhi.n	8004384 <HAL_Delay+0x28>
  {
  }
}
 8004394:	46c0      	nop			; (mov r8, r8)
 8004396:	46bd      	mov	sp, r7
 8004398:	b004      	add	sp, #16
 800439a:	bd80      	pop	{r7, pc}
 800439c:	20000018 	.word	0x20000018

080043a0 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80043a0:	b580      	push	{r7, lr}
 80043a2:	b084      	sub	sp, #16
 80043a4:	af00      	add	r7, sp, #0
 80043a6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80043a8:	230f      	movs	r3, #15
 80043aa:	18fb      	adds	r3, r7, r3
 80043ac:	2200      	movs	r2, #0
 80043ae:	701a      	strb	r2, [r3, #0]
  uint32_t tmpCFGR1 = 0U;
 80043b0:	2300      	movs	r3, #0
 80043b2:	60bb      	str	r3, [r7, #8]

  /* Check ADC handle */
  if(hadc == NULL)
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	2b00      	cmp	r3, #0
 80043b8:	d101      	bne.n	80043be <HAL_ADC_Init+0x1e>
  {
    return HAL_ERROR;
 80043ba:	2301      	movs	r3, #1
 80043bc:	e125      	b.n	800460a <HAL_ADC_Init+0x26a>
  /* Refer to header of this file for more details on clock enabling procedure*/
  
  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  /* - ADC voltage regulator enable                                           */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80043c2:	2b00      	cmp	r3, #0
 80043c4:	d10a      	bne.n	80043dc <HAL_ADC_Init+0x3c>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	2200      	movs	r2, #0
 80043ca:	63da      	str	r2, [r3, #60]	; 0x3c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	2234      	movs	r2, #52	; 0x34
 80043d0:	2100      	movs	r1, #0
 80043d2:	5499      	strb	r1, [r3, r2]
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	0018      	movs	r0, r3
 80043d8:	f7ff fdc4 	bl	8003f64 <HAL_ADC_MspInit>
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  /* and if there is no conversion on going on regular group (ADC can be      */ 
  /* enabled anyway, in case of call of this function to update a parameter   */
  /* on the fly).                                                             */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80043e0:	2210      	movs	r2, #16
 80043e2:	4013      	ands	r3, r2
 80043e4:	d000      	beq.n	80043e8 <HAL_ADC_Init+0x48>
 80043e6:	e103      	b.n	80045f0 <HAL_ADC_Init+0x250>
 80043e8:	230f      	movs	r3, #15
 80043ea:	18fb      	adds	r3, r7, r3
 80043ec:	781b      	ldrb	r3, [r3, #0]
 80043ee:	2b00      	cmp	r3, #0
 80043f0:	d000      	beq.n	80043f4 <HAL_ADC_Init+0x54>
 80043f2:	e0fd      	b.n	80045f0 <HAL_ADC_Init+0x250>
      (tmp_hal_status == HAL_OK)                                &&
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	689b      	ldr	r3, [r3, #8]
 80043fa:	2204      	movs	r2, #4
 80043fc:	4013      	ands	r3, r2
      (tmp_hal_status == HAL_OK)                                &&
 80043fe:	d000      	beq.n	8004402 <HAL_ADC_Init+0x62>
 8004400:	e0f6      	b.n	80045f0 <HAL_ADC_Init+0x250>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004406:	4a83      	ldr	r2, [pc, #524]	; (8004614 <HAL_ADC_Init+0x274>)
 8004408:	4013      	ands	r3, r2
 800440a:	2202      	movs	r2, #2
 800440c:	431a      	orrs	r2, r3
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	639a      	str	r2, [r3, #56]	; 0x38
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - ADC clock mode                                                      */
    /*  - ADC clock prescaler                                                 */
    /*  - ADC resolution                                                      */
    if (ADC_IS_ENABLE(hadc) == RESET)
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	681b      	ldr	r3, [r3, #0]
 8004416:	689b      	ldr	r3, [r3, #8]
 8004418:	2203      	movs	r2, #3
 800441a:	4013      	ands	r3, r2
 800441c:	2b01      	cmp	r3, #1
 800441e:	d112      	bne.n	8004446 <HAL_ADC_Init+0xa6>
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	2201      	movs	r2, #1
 8004428:	4013      	ands	r3, r2
 800442a:	2b01      	cmp	r3, #1
 800442c:	d009      	beq.n	8004442 <HAL_ADC_Init+0xa2>
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	681b      	ldr	r3, [r3, #0]
 8004432:	68da      	ldr	r2, [r3, #12]
 8004434:	2380      	movs	r3, #128	; 0x80
 8004436:	021b      	lsls	r3, r3, #8
 8004438:	401a      	ands	r2, r3
 800443a:	2380      	movs	r3, #128	; 0x80
 800443c:	021b      	lsls	r3, r3, #8
 800443e:	429a      	cmp	r2, r3
 8004440:	d101      	bne.n	8004446 <HAL_ADC_Init+0xa6>
 8004442:	2301      	movs	r3, #1
 8004444:	e000      	b.n	8004448 <HAL_ADC_Init+0xa8>
 8004446:	2300      	movs	r3, #0
 8004448:	2b00      	cmp	r3, #0
 800444a:	d116      	bne.n	800447a <HAL_ADC_Init+0xda>
      /* parameters):                                                         */
      /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
      /*     (set into HAL_ADC_ConfigChannel() )                              */
     
      /* Configuration of ADC resolution                                      */
      MODIFY_REG(hadc->Instance->CFGR1,
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	68db      	ldr	r3, [r3, #12]
 8004452:	2218      	movs	r2, #24
 8004454:	4393      	bics	r3, r2
 8004456:	0019      	movs	r1, r3
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	689a      	ldr	r2, [r3, #8]
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	430a      	orrs	r2, r1
 8004462:	60da      	str	r2, [r3, #12]
                 ADC_CFGR1_RES        ,
                 hadc->Init.Resolution );
      
      /* Configuration of ADC clock mode: clock source AHB or HSI with        */
      /* selectable prescaler                                                 */
      MODIFY_REG(hadc->Instance->CFGR2    ,
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	681b      	ldr	r3, [r3, #0]
 8004468:	691b      	ldr	r3, [r3, #16]
 800446a:	009b      	lsls	r3, r3, #2
 800446c:	0899      	lsrs	r1, r3, #2
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	685a      	ldr	r2, [r3, #4]
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	681b      	ldr	r3, [r3, #0]
 8004476:	430a      	orrs	r2, r1
 8004478:	611a      	str	r2, [r3, #16]
    /*  - external trigger polarity                                           */
    /*  - data alignment                                                      */
    /*  - resolution                                                          */
    /*  - scan direction                                                      */
    /*  - DMA continuous request                                              */
    hadc->Instance->CFGR1 &= ~( ADC_CFGR1_DISCEN  |
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	68da      	ldr	r2, [r3, #12]
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	4964      	ldr	r1, [pc, #400]	; (8004618 <HAL_ADC_Init+0x278>)
 8004486:	400a      	ands	r2, r1
 8004488:	60da      	str	r2, [r3, #12]
                                ADC_CFGR1_EXTEN   |
                                ADC_CFGR1_ALIGN   |
                                ADC_CFGR1_SCANDIR |
                                ADC_CFGR1_DMACFG   );

    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	7e1b      	ldrb	r3, [r3, #24]
 800448e:	039a      	lsls	r2, r3, #14
                 ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)     |
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	7e5b      	ldrb	r3, [r3, #25]
 8004494:	03db      	lsls	r3, r3, #15
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8004496:	431a      	orrs	r2, r3
                 ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	7e9b      	ldrb	r3, [r3, #26]
 800449c:	035b      	lsls	r3, r3, #13
                 ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)     |
 800449e:	431a      	orrs	r2, r3
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                            |
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80044a4:	2b01      	cmp	r3, #1
 80044a6:	d002      	beq.n	80044ae <HAL_ADC_Init+0x10e>
 80044a8:	2380      	movs	r3, #128	; 0x80
 80044aa:	015b      	lsls	r3, r3, #5
 80044ac:	e000      	b.n	80044b0 <HAL_ADC_Init+0x110>
 80044ae:	2300      	movs	r3, #0
                 ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 80044b0:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                             |
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	68db      	ldr	r3, [r3, #12]
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                            |
 80044b6:	431a      	orrs	r2, r3
                 ADC_SCANDIR(hadc->Init.ScanConvMode)                             |
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	691b      	ldr	r3, [r3, #16]
 80044bc:	2b02      	cmp	r3, #2
 80044be:	d101      	bne.n	80044c4 <HAL_ADC_Init+0x124>
 80044c0:	2304      	movs	r3, #4
 80044c2:	e000      	b.n	80044c6 <HAL_ADC_Init+0x126>
 80044c4:	2300      	movs	r3, #0
                 hadc->Init.DataAlign                                             |
 80044c6:	431a      	orrs	r2, r3
                 ADC_CFGR1_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests)  );
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	2124      	movs	r1, #36	; 0x24
 80044cc:	5c5b      	ldrb	r3, [r3, r1]
 80044ce:	005b      	lsls	r3, r3, #1
                 ADC_SCANDIR(hadc->Init.ScanConvMode)                             |
 80044d0:	4313      	orrs	r3, r2
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80044d2:	68ba      	ldr	r2, [r7, #8]
 80044d4:	4313      	orrs	r3, r2
 80044d6:	60bb      	str	r3, [r7, #8]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	7edb      	ldrb	r3, [r3, #27]
 80044dc:	2b01      	cmp	r3, #1
 80044de:	d115      	bne.n	800450c <HAL_ADC_Init+0x16c>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	7e9b      	ldrb	r3, [r3, #26]
 80044e4:	2b00      	cmp	r3, #0
 80044e6:	d105      	bne.n	80044f4 <HAL_ADC_Init+0x154>
      {
        /* Enable the selected ADC group regular discontinuous mode */
        tmpCFGR1 |= ADC_CFGR1_DISCEN;
 80044e8:	68bb      	ldr	r3, [r7, #8]
 80044ea:	2280      	movs	r2, #128	; 0x80
 80044ec:	0252      	lsls	r2, r2, #9
 80044ee:	4313      	orrs	r3, r2
 80044f0:	60bb      	str	r3, [r7, #8]
 80044f2:	e00b      	b.n	800450c <HAL_ADC_Init+0x16c>
        /* ADC regular group discontinuous was intended to be enabled,        */
        /* but ADC regular group modes continuous and sequencer discontinuous */
        /* cannot be enabled simultaneously.                                  */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80044f8:	2220      	movs	r2, #32
 80044fa:	431a      	orrs	r2, r3
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	639a      	str	r2, [r3, #56]	; 0x38
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004504:	2201      	movs	r2, #1
 8004506:	431a      	orrs	r2, r3
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	63da      	str	r2, [r3, #60]	; 0x3c
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	69da      	ldr	r2, [r3, #28]
 8004510:	23c2      	movs	r3, #194	; 0xc2
 8004512:	33ff      	adds	r3, #255	; 0xff
 8004514:	429a      	cmp	r2, r3
 8004516:	d007      	beq.n	8004528 <HAL_ADC_Init+0x188>
    {
      tmpCFGR1 |= ( hadc->Init.ExternalTrigConv    |
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	69da      	ldr	r2, [r3, #28]
                    hadc->Init.ExternalTrigConvEdge );
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	6a1b      	ldr	r3, [r3, #32]
      tmpCFGR1 |= ( hadc->Init.ExternalTrigConv    |
 8004520:	4313      	orrs	r3, r2
 8004522:	68ba      	ldr	r2, [r7, #8]
 8004524:	4313      	orrs	r3, r2
 8004526:	60bb      	str	r3, [r7, #8]
    }
    
    /* Update ADC configuration register with previous settings */
    hadc->Instance->CFGR1 |= tmpCFGR1;
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	681b      	ldr	r3, [r3, #0]
 800452c:	68d9      	ldr	r1, [r3, #12]
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	681b      	ldr	r3, [r3, #0]
 8004532:	68ba      	ldr	r2, [r7, #8]
 8004534:	430a      	orrs	r2, r1
 8004536:	60da      	str	r2, [r3, #12]
    /* Management of parameters "SamplingTimeCommon" and "SamplingTime"       */
    /* (obsolete): sampling time set in this function if parameter            */
    /*  "SamplingTimeCommon" has been set to a valid sampling time.           */
    /* Otherwise, sampling time is set into ADC channel initialization        */
    /* structure with parameter "SamplingTime" (obsolete).                    */
    if (IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800453c:	2380      	movs	r3, #128	; 0x80
 800453e:	055b      	lsls	r3, r3, #21
 8004540:	429a      	cmp	r2, r3
 8004542:	d01b      	beq.n	800457c <HAL_ADC_Init+0x1dc>
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004548:	2b01      	cmp	r3, #1
 800454a:	d017      	beq.n	800457c <HAL_ADC_Init+0x1dc>
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004550:	2b02      	cmp	r3, #2
 8004552:	d013      	beq.n	800457c <HAL_ADC_Init+0x1dc>
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004558:	2b03      	cmp	r3, #3
 800455a:	d00f      	beq.n	800457c <HAL_ADC_Init+0x1dc>
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004560:	2b04      	cmp	r3, #4
 8004562:	d00b      	beq.n	800457c <HAL_ADC_Init+0x1dc>
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004568:	2b05      	cmp	r3, #5
 800456a:	d007      	beq.n	800457c <HAL_ADC_Init+0x1dc>
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004570:	2b06      	cmp	r3, #6
 8004572:	d003      	beq.n	800457c <HAL_ADC_Init+0x1dc>
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004578:	2b07      	cmp	r3, #7
 800457a:	d112      	bne.n	80045a2 <HAL_ADC_Init+0x202>
    {
      /* Channel sampling time configuration */
      /* Clear the old sample time */
      hadc->Instance->SMPR &= ~(ADC_SMPR_SMP);
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	681b      	ldr	r3, [r3, #0]
 8004580:	695a      	ldr	r2, [r3, #20]
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	681b      	ldr	r3, [r3, #0]
 8004586:	2107      	movs	r1, #7
 8004588:	438a      	bics	r2, r1
 800458a:	615a      	str	r2, [r3, #20]
      
      /* Set the new sample time */
      hadc->Instance->SMPR |= ADC_SMPR_SET(hadc->Init.SamplingTimeCommon);
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	681b      	ldr	r3, [r3, #0]
 8004590:	6959      	ldr	r1, [r3, #20]
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004596:	2207      	movs	r2, #7
 8004598:	401a      	ands	r2, r3
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	430a      	orrs	r2, r1
 80045a0:	615a      	str	r2, [r3, #20]
    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CFGR1 (excluding analog watchdog configuration: */
    /* set into separate dedicated function, and bits of ADC resolution set   */
    /* out of temporary variable 'tmpCFGR1').                                 */
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	681b      	ldr	r3, [r3, #0]
 80045a6:	68db      	ldr	r3, [r3, #12]
 80045a8:	4a1c      	ldr	r2, [pc, #112]	; (800461c <HAL_ADC_Init+0x27c>)
 80045aa:	4013      	ands	r3, r2
 80045ac:	68ba      	ldr	r2, [r7, #8]
 80045ae:	429a      	cmp	r2, r3
 80045b0:	d10b      	bne.n	80045ca <HAL_ADC_Init+0x22a>
         == tmpCFGR1)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	2200      	movs	r2, #0
 80045b6:	63da      	str	r2, [r3, #60]	; 0x3c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80045bc:	2203      	movs	r2, #3
 80045be:	4393      	bics	r3, r2
 80045c0:	2201      	movs	r2, #1
 80045c2:	431a      	orrs	r2, r3
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	639a      	str	r2, [r3, #56]	; 0x38
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 80045c8:	e01c      	b.n	8004604 <HAL_ADC_Init+0x264>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80045ce:	2212      	movs	r2, #18
 80045d0:	4393      	bics	r3, r2
 80045d2:	2210      	movs	r2, #16
 80045d4:	431a      	orrs	r2, r3
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	639a      	str	r2, [r3, #56]	; 0x38
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80045de:	2201      	movs	r2, #1
 80045e0:	431a      	orrs	r2, r3
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	63da      	str	r2, [r3, #60]	; 0x3c
      
      tmp_hal_status = HAL_ERROR;
 80045e6:	230f      	movs	r3, #15
 80045e8:	18fb      	adds	r3, r7, r3
 80045ea:	2201      	movs	r2, #1
 80045ec:	701a      	strb	r2, [r3, #0]
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 80045ee:	e009      	b.n	8004604 <HAL_ADC_Init+0x264>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80045f4:	2210      	movs	r2, #16
 80045f6:	431a      	orrs	r2, r3
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	639a      	str	r2, [r3, #56]	; 0x38
        
    tmp_hal_status = HAL_ERROR;
 80045fc:	230f      	movs	r3, #15
 80045fe:	18fb      	adds	r3, r7, r3
 8004600:	2201      	movs	r2, #1
 8004602:	701a      	strb	r2, [r3, #0]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8004604:	230f      	movs	r3, #15
 8004606:	18fb      	adds	r3, r7, r3
 8004608:	781b      	ldrb	r3, [r3, #0]
}
 800460a:	0018      	movs	r0, r3
 800460c:	46bd      	mov	sp, r7
 800460e:	b004      	add	sp, #16
 8004610:	bd80      	pop	{r7, pc}
 8004612:	46c0      	nop			; (mov r8, r8)
 8004614:	fffffefd 	.word	0xfffffefd
 8004618:	fffe0219 	.word	0xfffe0219
 800461c:	833fffe7 	.word	0x833fffe7

08004620 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval None
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8004620:	b590      	push	{r4, r7, lr}
 8004622:	b087      	sub	sp, #28
 8004624:	af00      	add	r7, sp, #0
 8004626:	60f8      	str	r0, [r7, #12]
 8004628:	60b9      	str	r1, [r7, #8]
 800462a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800462c:	2317      	movs	r3, #23
 800462e:	18fb      	adds	r3, r7, r3
 8004630:	2200      	movs	r2, #0
 8004632:	701a      	strb	r2, [r3, #0]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8004634:	68fb      	ldr	r3, [r7, #12]
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	689b      	ldr	r3, [r3, #8]
 800463a:	2204      	movs	r2, #4
 800463c:	4013      	ands	r3, r2
 800463e:	d15e      	bne.n	80046fe <HAL_ADC_Start_DMA+0xde>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8004640:	68fb      	ldr	r3, [r7, #12]
 8004642:	2234      	movs	r2, #52	; 0x34
 8004644:	5c9b      	ldrb	r3, [r3, r2]
 8004646:	2b01      	cmp	r3, #1
 8004648:	d101      	bne.n	800464e <HAL_ADC_Start_DMA+0x2e>
 800464a:	2302      	movs	r3, #2
 800464c:	e05e      	b.n	800470c <HAL_ADC_Start_DMA+0xec>
 800464e:	68fb      	ldr	r3, [r7, #12]
 8004650:	2234      	movs	r2, #52	; 0x34
 8004652:	2101      	movs	r1, #1
 8004654:	5499      	strb	r1, [r3, r2]

    /* Enable the ADC peripheral */
    /* If low power mode AutoPowerOff is enabled, power-on/off phases are       */
    /* performed automatically by hardware.                                     */
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 8004656:	68fb      	ldr	r3, [r7, #12]
 8004658:	7e5b      	ldrb	r3, [r3, #25]
 800465a:	2b01      	cmp	r3, #1
 800465c:	d007      	beq.n	800466e <HAL_ADC_Start_DMA+0x4e>
    {
      tmp_hal_status = ADC_Enable(hadc);
 800465e:	2317      	movs	r3, #23
 8004660:	18fc      	adds	r4, r7, r3
 8004662:	68fb      	ldr	r3, [r7, #12]
 8004664:	0018      	movs	r0, r3
 8004666:	f000 f963 	bl	8004930 <ADC_Enable>
 800466a:	0003      	movs	r3, r0
 800466c:	7023      	strb	r3, [r4, #0]
    }
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 800466e:	2317      	movs	r3, #23
 8004670:	18fb      	adds	r3, r7, r3
 8004672:	781b      	ldrb	r3, [r3, #0]
 8004674:	2b00      	cmp	r3, #0
 8004676:	d146      	bne.n	8004706 <HAL_ADC_Start_DMA+0xe6>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8004678:	68fb      	ldr	r3, [r7, #12]
 800467a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800467c:	4a25      	ldr	r2, [pc, #148]	; (8004714 <HAL_ADC_Start_DMA+0xf4>)
 800467e:	4013      	ands	r3, r2
 8004680:	2280      	movs	r2, #128	; 0x80
 8004682:	0052      	lsls	r2, r2, #1
 8004684:	431a      	orrs	r2, r3
 8004686:	68fb      	ldr	r3, [r7, #12]
 8004688:	639a      	str	r2, [r3, #56]	; 0x38
                        HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR | HAL_ADC_STATE_REG_EOSMP,
                        HAL_ADC_STATE_REG_BUSY);
      
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 800468a:	68fb      	ldr	r3, [r7, #12]
 800468c:	2200      	movs	r2, #0
 800468e:	63da      	str	r2, [r3, #60]	; 0x3c
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8004690:	68fb      	ldr	r3, [r7, #12]
 8004692:	2234      	movs	r2, #52	; 0x34
 8004694:	2100      	movs	r1, #0
 8004696:	5499      	strb	r1, [r3, r2]

      /* Set the DMA transfer complete callback */
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8004698:	68fb      	ldr	r3, [r7, #12]
 800469a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800469c:	4a1e      	ldr	r2, [pc, #120]	; (8004718 <HAL_ADC_Start_DMA+0xf8>)
 800469e:	629a      	str	r2, [r3, #40]	; 0x28

      /* Set the DMA half transfer complete callback */
      hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 80046a0:	68fb      	ldr	r3, [r7, #12]
 80046a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80046a4:	4a1d      	ldr	r2, [pc, #116]	; (800471c <HAL_ADC_Start_DMA+0xfc>)
 80046a6:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the DMA error callback */
      hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 80046a8:	68fb      	ldr	r3, [r7, #12]
 80046aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80046ac:	4a1c      	ldr	r2, [pc, #112]	; (8004720 <HAL_ADC_Start_DMA+0x100>)
 80046ae:	631a      	str	r2, [r3, #48]	; 0x30
      /* start (in case of SW start):                                         */
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 80046b0:	68fb      	ldr	r3, [r7, #12]
 80046b2:	681b      	ldr	r3, [r3, #0]
 80046b4:	221c      	movs	r2, #28
 80046b6:	601a      	str	r2, [r3, #0]
      
      /* Enable ADC overrun interrupt */
      __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 80046b8:	68fb      	ldr	r3, [r7, #12]
 80046ba:	681b      	ldr	r3, [r3, #0]
 80046bc:	685a      	ldr	r2, [r3, #4]
 80046be:	68fb      	ldr	r3, [r7, #12]
 80046c0:	681b      	ldr	r3, [r3, #0]
 80046c2:	2110      	movs	r1, #16
 80046c4:	430a      	orrs	r2, r1
 80046c6:	605a      	str	r2, [r3, #4]
      
      /* Enable ADC DMA mode */
      hadc->Instance->CFGR1 |= ADC_CFGR1_DMAEN;
 80046c8:	68fb      	ldr	r3, [r7, #12]
 80046ca:	681b      	ldr	r3, [r3, #0]
 80046cc:	68da      	ldr	r2, [r3, #12]
 80046ce:	68fb      	ldr	r3, [r7, #12]
 80046d0:	681b      	ldr	r3, [r3, #0]
 80046d2:	2101      	movs	r1, #1
 80046d4:	430a      	orrs	r2, r1
 80046d6:	60da      	str	r2, [r3, #12]
      
      /* Start the DMA channel */
      HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 80046d8:	68fb      	ldr	r3, [r7, #12]
 80046da:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80046dc:	68fb      	ldr	r3, [r7, #12]
 80046de:	681b      	ldr	r3, [r3, #0]
 80046e0:	3340      	adds	r3, #64	; 0x40
 80046e2:	0019      	movs	r1, r3
 80046e4:	68ba      	ldr	r2, [r7, #8]
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	f000 fbe6 	bl	8004eb8 <HAL_DMA_Start_IT>
           
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      hadc->Instance->CR |= ADC_CR_ADSTART;
 80046ec:	68fb      	ldr	r3, [r7, #12]
 80046ee:	681b      	ldr	r3, [r3, #0]
 80046f0:	689a      	ldr	r2, [r3, #8]
 80046f2:	68fb      	ldr	r3, [r7, #12]
 80046f4:	681b      	ldr	r3, [r3, #0]
 80046f6:	2104      	movs	r1, #4
 80046f8:	430a      	orrs	r2, r1
 80046fa:	609a      	str	r2, [r3, #8]
 80046fc:	e003      	b.n	8004706 <HAL_ADC_Start_DMA+0xe6>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 80046fe:	2317      	movs	r3, #23
 8004700:	18fb      	adds	r3, r7, r3
 8004702:	2202      	movs	r2, #2
 8004704:	701a      	strb	r2, [r3, #0]
  }
    
  /* Return function status */
  return tmp_hal_status;
 8004706:	2317      	movs	r3, #23
 8004708:	18fb      	adds	r3, r7, r3
 800470a:	781b      	ldrb	r3, [r3, #0]
}
 800470c:	0018      	movs	r0, r3
 800470e:	46bd      	mov	sp, r7
 8004710:	b007      	add	sp, #28
 8004712:	bd90      	pop	{r4, r7, pc}
 8004714:	fffff0fe 	.word	0xfffff0fe
 8004718:	08004a29 	.word	0x08004a29
 800471c:	08004add 	.word	0x08004add
 8004720:	08004afb 	.word	0x08004afb

08004724 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non blocking mode 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8004724:	b580      	push	{r7, lr}
 8004726:	b082      	sub	sp, #8
 8004728:	af00      	add	r7, sp, #0
 800472a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 800472c:	46c0      	nop			; (mov r8, r8)
 800472e:	46bd      	mov	sp, r7
 8004730:	b002      	add	sp, #8
 8004732:	bd80      	pop	{r7, pc}

08004734 <HAL_ADC_ErrorCallback>:
  *        (ADC conversion with interruption or transfer by DMA)
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8004734:	b580      	push	{r7, lr}
 8004736:	b082      	sub	sp, #8
 8004738:	af00      	add	r7, sp, #0
 800473a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 800473c:	46c0      	nop			; (mov r8, r8)
 800473e:	46bd      	mov	sp, r7
 8004740:	b002      	add	sp, #8
 8004742:	bd80      	pop	{r7, pc}

08004744 <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8004744:	b580      	push	{r7, lr}
 8004746:	b084      	sub	sp, #16
 8004748:	af00      	add	r7, sp, #0
 800474a:	6078      	str	r0, [r7, #4]
 800474c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800474e:	230f      	movs	r3, #15
 8004750:	18fb      	adds	r3, r7, r3
 8004752:	2200      	movs	r2, #0
 8004754:	701a      	strb	r2, [r3, #0]
  __IO uint32_t wait_loop_index = 0U;
 8004756:	2300      	movs	r3, #0
 8004758:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_RANK(sConfig->Rank));
  
  if (! IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800475e:	2380      	movs	r3, #128	; 0x80
 8004760:	055b      	lsls	r3, r3, #21
 8004762:	429a      	cmp	r2, r3
 8004764:	d011      	beq.n	800478a <HAL_ADC_ConfigChannel+0x46>
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800476a:	2b01      	cmp	r3, #1
 800476c:	d00d      	beq.n	800478a <HAL_ADC_ConfigChannel+0x46>
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004772:	2b02      	cmp	r3, #2
 8004774:	d009      	beq.n	800478a <HAL_ADC_ConfigChannel+0x46>
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800477a:	2b03      	cmp	r3, #3
 800477c:	d005      	beq.n	800478a <HAL_ADC_ConfigChannel+0x46>
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004782:	2b04      	cmp	r3, #4
 8004784:	d001      	beq.n	800478a <HAL_ADC_ConfigChannel+0x46>
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  {
    assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	2234      	movs	r2, #52	; 0x34
 800478e:	5c9b      	ldrb	r3, [r3, r2]
 8004790:	2b01      	cmp	r3, #1
 8004792:	d101      	bne.n	8004798 <HAL_ADC_ConfigChannel+0x54>
 8004794:	2302      	movs	r3, #2
 8004796:	e0bb      	b.n	8004910 <HAL_ADC_ConfigChannel+0x1cc>
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	2234      	movs	r2, #52	; 0x34
 800479c:	2101      	movs	r1, #1
 800479e:	5499      	strb	r1, [r3, r2]
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel sampling time                                                 */
  /*  - Management of internal measurement channels: VrefInt/TempSensor/Vbat  */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	681b      	ldr	r3, [r3, #0]
 80047a4:	689b      	ldr	r3, [r3, #8]
 80047a6:	2204      	movs	r2, #4
 80047a8:	4013      	ands	r3, r2
 80047aa:	d000      	beq.n	80047ae <HAL_ADC_ConfigChannel+0x6a>
 80047ac:	e09f      	b.n	80048ee <HAL_ADC_ConfigChannel+0x1aa>
  {
    /* Configure channel: depending on rank setting, add it or remove it from */
    /* ADC conversion sequencer.                                              */
    if (sConfig->Rank != ADC_RANK_NONE)
 80047ae:	683b      	ldr	r3, [r7, #0]
 80047b0:	685b      	ldr	r3, [r3, #4]
 80047b2:	4a59      	ldr	r2, [pc, #356]	; (8004918 <HAL_ADC_ConfigChannel+0x1d4>)
 80047b4:	4293      	cmp	r3, r2
 80047b6:	d100      	bne.n	80047ba <HAL_ADC_ConfigChannel+0x76>
 80047b8:	e077      	b.n	80048aa <HAL_ADC_ConfigChannel+0x166>
    {
      /* Regular sequence configuration */
      /* Set the channel selection register from the selected channel */
      hadc->Instance->CHSELR |= ADC_CHSELR_CHANNEL(sConfig->Channel);
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	681b      	ldr	r3, [r3, #0]
 80047be:	6a99      	ldr	r1, [r3, #40]	; 0x28
 80047c0:	683b      	ldr	r3, [r7, #0]
 80047c2:	681b      	ldr	r3, [r3, #0]
 80047c4:	2201      	movs	r2, #1
 80047c6:	409a      	lsls	r2, r3
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	681b      	ldr	r3, [r3, #0]
 80047cc:	430a      	orrs	r2, r1
 80047ce:	629a      	str	r2, [r3, #40]	; 0x28
      /* Channel sampling time configuration */
      /* Management of parameters "SamplingTimeCommon" and "SamplingTime"     */
      /* (obsolete): sampling time set in this function with                  */
      /* parameter "SamplingTime" (obsolete) only if not already set into     */
      /* ADC initialization structure with parameter "SamplingTimeCommon".    */
      if (! IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80047d4:	2380      	movs	r3, #128	; 0x80
 80047d6:	055b      	lsls	r3, r3, #21
 80047d8:	429a      	cmp	r2, r3
 80047da:	d037      	beq.n	800484c <HAL_ADC_ConfigChannel+0x108>
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80047e0:	2b01      	cmp	r3, #1
 80047e2:	d033      	beq.n	800484c <HAL_ADC_ConfigChannel+0x108>
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80047e8:	2b02      	cmp	r3, #2
 80047ea:	d02f      	beq.n	800484c <HAL_ADC_ConfigChannel+0x108>
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80047f0:	2b03      	cmp	r3, #3
 80047f2:	d02b      	beq.n	800484c <HAL_ADC_ConfigChannel+0x108>
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80047f8:	2b04      	cmp	r3, #4
 80047fa:	d027      	beq.n	800484c <HAL_ADC_ConfigChannel+0x108>
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004800:	2b05      	cmp	r3, #5
 8004802:	d023      	beq.n	800484c <HAL_ADC_ConfigChannel+0x108>
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004808:	2b06      	cmp	r3, #6
 800480a:	d01f      	beq.n	800484c <HAL_ADC_ConfigChannel+0x108>
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004810:	2b07      	cmp	r3, #7
 8004812:	d01b      	beq.n	800484c <HAL_ADC_ConfigChannel+0x108>
      {
        /* Modify sampling time if needed (not needed in case of reoccurrence */
        /* for several channels programmed consecutively into the sequencer)  */
        if (sConfig->SamplingTime != ADC_GET_SAMPLINGTIME(hadc))
 8004814:	683b      	ldr	r3, [r7, #0]
 8004816:	689a      	ldr	r2, [r3, #8]
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	695b      	ldr	r3, [r3, #20]
 800481e:	2107      	movs	r1, #7
 8004820:	400b      	ands	r3, r1
 8004822:	429a      	cmp	r2, r3
 8004824:	d012      	beq.n	800484c <HAL_ADC_ConfigChannel+0x108>
        {
          /* Channel sampling time configuration */
          /* Clear the old sample time */
          hadc->Instance->SMPR &= ~(ADC_SMPR_SMP);
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	681b      	ldr	r3, [r3, #0]
 800482a:	695a      	ldr	r2, [r3, #20]
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	2107      	movs	r1, #7
 8004832:	438a      	bics	r2, r1
 8004834:	615a      	str	r2, [r3, #20]
          
          /* Set the new sample time */
          hadc->Instance->SMPR |= ADC_SMPR_SET(sConfig->SamplingTime);
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	681b      	ldr	r3, [r3, #0]
 800483a:	6959      	ldr	r1, [r3, #20]
 800483c:	683b      	ldr	r3, [r7, #0]
 800483e:	689b      	ldr	r3, [r3, #8]
 8004840:	2207      	movs	r2, #7
 8004842:	401a      	ands	r2, r3
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	681b      	ldr	r3, [r3, #0]
 8004848:	430a      	orrs	r2, r1
 800484a:	615a      	str	r2, [r3, #20]
      /* internal measurement paths enable: If internal channel selected,     */
      /* enable dedicated internal buffers and path.                          */
      /* Note: these internal measurement paths can be disabled using         */
      /*       HAL_ADC_DeInit() or removing the channel from sequencer with   */
      /*       channel configuration parameter "Rank".                        */
      if(ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 800484c:	683b      	ldr	r3, [r7, #0]
 800484e:	681b      	ldr	r3, [r3, #0]
 8004850:	2b10      	cmp	r3, #16
 8004852:	d003      	beq.n	800485c <HAL_ADC_ConfigChannel+0x118>
 8004854:	683b      	ldr	r3, [r7, #0]
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	2b11      	cmp	r3, #17
 800485a:	d152      	bne.n	8004902 <HAL_ADC_ConfigChannel+0x1be>
      {
        /* If Channel_16 is selected, enable Temp. sensor measurement path. */
        /* If Channel_17 is selected, enable VREFINT measurement path. */
        /* If Channel_18 is selected, enable VBAT measurement path. */
        ADC->CCR |= ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 800485c:	4b2f      	ldr	r3, [pc, #188]	; (800491c <HAL_ADC_ConfigChannel+0x1d8>)
 800485e:	6819      	ldr	r1, [r3, #0]
 8004860:	683b      	ldr	r3, [r7, #0]
 8004862:	681b      	ldr	r3, [r3, #0]
 8004864:	2b10      	cmp	r3, #16
 8004866:	d102      	bne.n	800486e <HAL_ADC_ConfigChannel+0x12a>
 8004868:	2380      	movs	r3, #128	; 0x80
 800486a:	041b      	lsls	r3, r3, #16
 800486c:	e001      	b.n	8004872 <HAL_ADC_ConfigChannel+0x12e>
 800486e:	2380      	movs	r3, #128	; 0x80
 8004870:	03db      	lsls	r3, r3, #15
 8004872:	4a2a      	ldr	r2, [pc, #168]	; (800491c <HAL_ADC_ConfigChannel+0x1d8>)
 8004874:	430b      	orrs	r3, r1
 8004876:	6013      	str	r3, [r2, #0]
        
        /* If Temp. sensor is selected, wait for stabilization delay */
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8004878:	683b      	ldr	r3, [r7, #0]
 800487a:	681b      	ldr	r3, [r3, #0]
 800487c:	2b10      	cmp	r3, #16
 800487e:	d140      	bne.n	8004902 <HAL_ADC_ConfigChannel+0x1be>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8004880:	4b27      	ldr	r3, [pc, #156]	; (8004920 <HAL_ADC_ConfigChannel+0x1dc>)
 8004882:	681b      	ldr	r3, [r3, #0]
 8004884:	4927      	ldr	r1, [pc, #156]	; (8004924 <HAL_ADC_ConfigChannel+0x1e0>)
 8004886:	0018      	movs	r0, r3
 8004888:	f7fb fc3e 	bl	8000108 <__udivsi3>
 800488c:	0003      	movs	r3, r0
 800488e:	001a      	movs	r2, r3
 8004890:	0013      	movs	r3, r2
 8004892:	009b      	lsls	r3, r3, #2
 8004894:	189b      	adds	r3, r3, r2
 8004896:	005b      	lsls	r3, r3, #1
 8004898:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 800489a:	e002      	b.n	80048a2 <HAL_ADC_ConfigChannel+0x15e>
          {
            wait_loop_index--;
 800489c:	68bb      	ldr	r3, [r7, #8]
 800489e:	3b01      	subs	r3, #1
 80048a0:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80048a2:	68bb      	ldr	r3, [r7, #8]
 80048a4:	2b00      	cmp	r3, #0
 80048a6:	d1f9      	bne.n	800489c <HAL_ADC_ConfigChannel+0x158>
 80048a8:	e02b      	b.n	8004902 <HAL_ADC_ConfigChannel+0x1be>
    }
    else
    {
      /* Regular sequence configuration */
      /* Reset the channel selection register from the selected channel */
      hadc->Instance->CHSELR &= ~ADC_CHSELR_CHANNEL(sConfig->Channel);
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	681b      	ldr	r3, [r3, #0]
 80048ae:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80048b0:	683b      	ldr	r3, [r7, #0]
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	2101      	movs	r1, #1
 80048b6:	4099      	lsls	r1, r3
 80048b8:	000b      	movs	r3, r1
 80048ba:	43d9      	mvns	r1, r3
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	400a      	ands	r2, r1
 80048c2:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* Management of internal measurement channels: VrefInt/TempSensor/Vbat */
      /* internal measurement paths disable: If internal channel selected,    */
      /* disable dedicated internal buffers and path.                         */
      if(ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 80048c4:	683b      	ldr	r3, [r7, #0]
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	2b10      	cmp	r3, #16
 80048ca:	d003      	beq.n	80048d4 <HAL_ADC_ConfigChannel+0x190>
 80048cc:	683b      	ldr	r3, [r7, #0]
 80048ce:	681b      	ldr	r3, [r3, #0]
 80048d0:	2b11      	cmp	r3, #17
 80048d2:	d116      	bne.n	8004902 <HAL_ADC_ConfigChannel+0x1be>
      {
        /* If Channel_16 is selected, disable Temp. sensor measurement path. */
        /* If Channel_17 is selected, disable VREFINT measurement path. */
        /* If Channel_18 is selected, disable VBAT measurement path. */
        ADC->CCR &= ~ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 80048d4:	4b11      	ldr	r3, [pc, #68]	; (800491c <HAL_ADC_ConfigChannel+0x1d8>)
 80048d6:	6819      	ldr	r1, [r3, #0]
 80048d8:	683b      	ldr	r3, [r7, #0]
 80048da:	681b      	ldr	r3, [r3, #0]
 80048dc:	2b10      	cmp	r3, #16
 80048de:	d101      	bne.n	80048e4 <HAL_ADC_ConfigChannel+0x1a0>
 80048e0:	4a11      	ldr	r2, [pc, #68]	; (8004928 <HAL_ADC_ConfigChannel+0x1e4>)
 80048e2:	e000      	b.n	80048e6 <HAL_ADC_ConfigChannel+0x1a2>
 80048e4:	4a11      	ldr	r2, [pc, #68]	; (800492c <HAL_ADC_ConfigChannel+0x1e8>)
 80048e6:	4b0d      	ldr	r3, [pc, #52]	; (800491c <HAL_ADC_ConfigChannel+0x1d8>)
 80048e8:	400a      	ands	r2, r1
 80048ea:	601a      	str	r2, [r3, #0]
 80048ec:	e009      	b.n	8004902 <HAL_ADC_ConfigChannel+0x1be>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80048f2:	2220      	movs	r2, #32
 80048f4:	431a      	orrs	r2, r3
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	639a      	str	r2, [r3, #56]	; 0x38
    
    tmp_hal_status = HAL_ERROR;
 80048fa:	230f      	movs	r3, #15
 80048fc:	18fb      	adds	r3, r7, r3
 80048fe:	2201      	movs	r2, #1
 8004900:	701a      	strb	r2, [r3, #0]
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	2234      	movs	r2, #52	; 0x34
 8004906:	2100      	movs	r1, #0
 8004908:	5499      	strb	r1, [r3, r2]
  
  /* Return function status */
  return tmp_hal_status;
 800490a:	230f      	movs	r3, #15
 800490c:	18fb      	adds	r3, r7, r3
 800490e:	781b      	ldrb	r3, [r3, #0]
}
 8004910:	0018      	movs	r0, r3
 8004912:	46bd      	mov	sp, r7
 8004914:	b004      	add	sp, #16
 8004916:	bd80      	pop	{r7, pc}
 8004918:	00001001 	.word	0x00001001
 800491c:	40012708 	.word	0x40012708
 8004920:	20000010 	.word	0x20000010
 8004924:	000f4240 	.word	0x000f4240
 8004928:	ff7fffff 	.word	0xff7fffff
 800492c:	ffbfffff 	.word	0xffbfffff

08004930 <ADC_Enable>:
  *         "if (hadc->Init.LowPowerAutoPowerOff != ENABLE)".
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8004930:	b580      	push	{r7, lr}
 8004932:	b084      	sub	sp, #16
 8004934:	af00      	add	r7, sp, #0
 8004936:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004938:	2300      	movs	r3, #0
 800493a:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 800493c:	2300      	movs	r3, #0
 800493e:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	681b      	ldr	r3, [r3, #0]
 8004944:	689b      	ldr	r3, [r3, #8]
 8004946:	2203      	movs	r2, #3
 8004948:	4013      	ands	r3, r2
 800494a:	2b01      	cmp	r3, #1
 800494c:	d112      	bne.n	8004974 <ADC_Enable+0x44>
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	681b      	ldr	r3, [r3, #0]
 8004952:	681b      	ldr	r3, [r3, #0]
 8004954:	2201      	movs	r2, #1
 8004956:	4013      	ands	r3, r2
 8004958:	2b01      	cmp	r3, #1
 800495a:	d009      	beq.n	8004970 <ADC_Enable+0x40>
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	681b      	ldr	r3, [r3, #0]
 8004960:	68da      	ldr	r2, [r3, #12]
 8004962:	2380      	movs	r3, #128	; 0x80
 8004964:	021b      	lsls	r3, r3, #8
 8004966:	401a      	ands	r2, r3
 8004968:	2380      	movs	r3, #128	; 0x80
 800496a:	021b      	lsls	r3, r3, #8
 800496c:	429a      	cmp	r2, r3
 800496e:	d101      	bne.n	8004974 <ADC_Enable+0x44>
 8004970:	2301      	movs	r3, #1
 8004972:	e000      	b.n	8004976 <ADC_Enable+0x46>
 8004974:	2300      	movs	r3, #0
 8004976:	2b00      	cmp	r3, #0
 8004978:	d14b      	bne.n	8004a12 <ADC_Enable+0xe2>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	681b      	ldr	r3, [r3, #0]
 800497e:	689b      	ldr	r3, [r3, #8]
 8004980:	4a26      	ldr	r2, [pc, #152]	; (8004a1c <ADC_Enable+0xec>)
 8004982:	4013      	ands	r3, r2
 8004984:	d00d      	beq.n	80049a2 <ADC_Enable+0x72>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800498a:	2210      	movs	r2, #16
 800498c:	431a      	orrs	r2, r3
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	639a      	str	r2, [r3, #56]	; 0x38
    
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004996:	2201      	movs	r2, #1
 8004998:	431a      	orrs	r2, r3
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	63da      	str	r2, [r3, #60]	; 0x3c
      
      return HAL_ERROR;
 800499e:	2301      	movs	r3, #1
 80049a0:	e038      	b.n	8004a14 <ADC_Enable+0xe4>
    }
    
    /* Enable the ADC peripheral */
    __HAL_ADC_ENABLE(hadc);
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	681b      	ldr	r3, [r3, #0]
 80049a6:	689a      	ldr	r2, [r3, #8]
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	681b      	ldr	r3, [r3, #0]
 80049ac:	2101      	movs	r1, #1
 80049ae:	430a      	orrs	r2, r1
 80049b0:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80049b2:	4b1b      	ldr	r3, [pc, #108]	; (8004a20 <ADC_Enable+0xf0>)
 80049b4:	681b      	ldr	r3, [r3, #0]
 80049b6:	491b      	ldr	r1, [pc, #108]	; (8004a24 <ADC_Enable+0xf4>)
 80049b8:	0018      	movs	r0, r3
 80049ba:	f7fb fba5 	bl	8000108 <__udivsi3>
 80049be:	0003      	movs	r3, r0
 80049c0:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 80049c2:	e002      	b.n	80049ca <ADC_Enable+0x9a>
    {
      wait_loop_index--;
 80049c4:	68bb      	ldr	r3, [r7, #8]
 80049c6:	3b01      	subs	r3, #1
 80049c8:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 80049ca:	68bb      	ldr	r3, [r7, #8]
 80049cc:	2b00      	cmp	r3, #0
 80049ce:	d1f9      	bne.n	80049c4 <ADC_Enable+0x94>
    }

    /* Get tick count */
    tickstart = HAL_GetTick();
 80049d0:	f7ff fcba 	bl	8004348 <HAL_GetTick>
 80049d4:	0003      	movs	r3, r0
 80049d6:	60fb      	str	r3, [r7, #12]
    
    /* Wait for ADC effectively enabled */
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 80049d8:	e014      	b.n	8004a04 <ADC_Enable+0xd4>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80049da:	f7ff fcb5 	bl	8004348 <HAL_GetTick>
 80049de:	0002      	movs	r2, r0
 80049e0:	68fb      	ldr	r3, [r7, #12]
 80049e2:	1ad3      	subs	r3, r2, r3
 80049e4:	2b02      	cmp	r3, #2
 80049e6:	d90d      	bls.n	8004a04 <ADC_Enable+0xd4>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80049ec:	2210      	movs	r2, #16
 80049ee:	431a      	orrs	r2, r3
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	639a      	str	r2, [r3, #56]	; 0x38
      
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80049f8:	2201      	movs	r2, #1
 80049fa:	431a      	orrs	r2, r3
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	63da      	str	r2, [r3, #60]	; 0x3c
      
        return HAL_ERROR;
 8004a00:	2301      	movs	r3, #1
 8004a02:	e007      	b.n	8004a14 <ADC_Enable+0xe4>
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	681b      	ldr	r3, [r3, #0]
 8004a08:	681b      	ldr	r3, [r3, #0]
 8004a0a:	2201      	movs	r2, #1
 8004a0c:	4013      	ands	r3, r2
 8004a0e:	2b01      	cmp	r3, #1
 8004a10:	d1e3      	bne.n	80049da <ADC_Enable+0xaa>
    }   
    
  }
   
  /* Return HAL status */
  return HAL_OK;
 8004a12:	2300      	movs	r3, #0
}
 8004a14:	0018      	movs	r0, r3
 8004a16:	46bd      	mov	sp, r7
 8004a18:	b004      	add	sp, #16
 8004a1a:	bd80      	pop	{r7, pc}
 8004a1c:	80000017 	.word	0x80000017
 8004a20:	20000010 	.word	0x20000010
 8004a24:	000f4240 	.word	0x000f4240

08004a28 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback. 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8004a28:	b580      	push	{r7, lr}
 8004a2a:	b084      	sub	sp, #16
 8004a2c:	af00      	add	r7, sp, #0
 8004a2e:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a34:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8004a36:	68fb      	ldr	r3, [r7, #12]
 8004a38:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a3a:	2250      	movs	r2, #80	; 0x50
 8004a3c:	4013      	ands	r3, r2
 8004a3e:	d140      	bne.n	8004ac2 <ADC_DMAConvCplt+0x9a>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 8004a40:	68fb      	ldr	r3, [r7, #12]
 8004a42:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a44:	2280      	movs	r2, #128	; 0x80
 8004a46:	0092      	lsls	r2, r2, #2
 8004a48:	431a      	orrs	r2, r3
 8004a4a:	68fb      	ldr	r3, [r7, #12]
 8004a4c:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going.        */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8004a4e:	68fb      	ldr	r3, [r7, #12]
 8004a50:	681b      	ldr	r3, [r3, #0]
 8004a52:	68da      	ldr	r2, [r3, #12]
 8004a54:	23c0      	movs	r3, #192	; 0xc0
 8004a56:	011b      	lsls	r3, r3, #4
 8004a58:	4013      	ands	r3, r2
 8004a5a:	d12d      	bne.n	8004ab8 <ADC_DMAConvCplt+0x90>
       (hadc->Init.ContinuousConvMode == DISABLE)   )
 8004a5c:	68fb      	ldr	r3, [r7, #12]
 8004a5e:	7e9b      	ldrb	r3, [r3, #26]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8004a60:	2b00      	cmp	r3, #0
 8004a62:	d129      	bne.n	8004ab8 <ADC_DMAConvCplt+0x90>
    {
      /* If End of Sequence is reached, disable interrupts */
      if( __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) )
 8004a64:	68fb      	ldr	r3, [r7, #12]
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	681b      	ldr	r3, [r3, #0]
 8004a6a:	2208      	movs	r2, #8
 8004a6c:	4013      	ands	r3, r2
 8004a6e:	2b08      	cmp	r3, #8
 8004a70:	d122      	bne.n	8004ab8 <ADC_DMAConvCplt+0x90>
      {
        /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit           */
        /* ADSTART==0 (no conversion on going)                                */
        if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8004a72:	68fb      	ldr	r3, [r7, #12]
 8004a74:	681b      	ldr	r3, [r3, #0]
 8004a76:	689b      	ldr	r3, [r3, #8]
 8004a78:	2204      	movs	r2, #4
 8004a7a:	4013      	ands	r3, r2
 8004a7c:	d110      	bne.n	8004aa0 <ADC_DMAConvCplt+0x78>
        {
          /* Disable ADC end of single conversion interrupt on group regular */
          /* Note: Overrun interrupt was enabled with EOC interrupt in        */
          /* HAL_Start_IT(), but is not disabled here because can be used     */
          /* by overrun IRQ process below.                                    */
          __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8004a7e:	68fb      	ldr	r3, [r7, #12]
 8004a80:	681b      	ldr	r3, [r3, #0]
 8004a82:	685a      	ldr	r2, [r3, #4]
 8004a84:	68fb      	ldr	r3, [r7, #12]
 8004a86:	681b      	ldr	r3, [r3, #0]
 8004a88:	210c      	movs	r1, #12
 8004a8a:	438a      	bics	r2, r1
 8004a8c:	605a      	str	r2, [r3, #4]
          
          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 8004a8e:	68fb      	ldr	r3, [r7, #12]
 8004a90:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a92:	4a11      	ldr	r2, [pc, #68]	; (8004ad8 <ADC_DMAConvCplt+0xb0>)
 8004a94:	4013      	ands	r3, r2
 8004a96:	2201      	movs	r2, #1
 8004a98:	431a      	orrs	r2, r3
 8004a9a:	68fb      	ldr	r3, [r7, #12]
 8004a9c:	639a      	str	r2, [r3, #56]	; 0x38
 8004a9e:	e00b      	b.n	8004ab8 <ADC_DMAConvCplt+0x90>
                            HAL_ADC_STATE_READY);
        }
        else
        {
          /* Change ADC state to error state */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004aa0:	68fb      	ldr	r3, [r7, #12]
 8004aa2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004aa4:	2220      	movs	r2, #32
 8004aa6:	431a      	orrs	r2, r3
 8004aa8:	68fb      	ldr	r3, [r7, #12]
 8004aaa:	639a      	str	r2, [r3, #56]	; 0x38
          
          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004aac:	68fb      	ldr	r3, [r7, #12]
 8004aae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004ab0:	2201      	movs	r2, #1
 8004ab2:	431a      	orrs	r2, r3
 8004ab4:	68fb      	ldr	r3, [r7, #12]
 8004ab6:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8004ab8:	68fb      	ldr	r3, [r7, #12]
 8004aba:	0018      	movs	r0, r3
 8004abc:	f7fe ff42 	bl	8003944 <HAL_ADC_ConvCpltCallback>
  {
    /* Call DMA error callback */
    hadc->DMA_Handle->XferErrorCallback(hdma);
  }

}
 8004ac0:	e005      	b.n	8004ace <ADC_DMAConvCplt+0xa6>
    hadc->DMA_Handle->XferErrorCallback(hdma);
 8004ac2:	68fb      	ldr	r3, [r7, #12]
 8004ac4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ac6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ac8:	687a      	ldr	r2, [r7, #4]
 8004aca:	0010      	movs	r0, r2
 8004acc:	4798      	blx	r3
}
 8004ace:	46c0      	nop			; (mov r8, r8)
 8004ad0:	46bd      	mov	sp, r7
 8004ad2:	b004      	add	sp, #16
 8004ad4:	bd80      	pop	{r7, pc}
 8004ad6:	46c0      	nop			; (mov r8, r8)
 8004ad8:	fffffefe 	.word	0xfffffefe

08004adc <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback. 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8004adc:	b580      	push	{r7, lr}
 8004ade:	b084      	sub	sp, #16
 8004ae0:	af00      	add	r7, sp, #0
 8004ae2:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ae8:	60fb      	str	r3, [r7, #12]
  
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc); 
 8004aea:	68fb      	ldr	r3, [r7, #12]
 8004aec:	0018      	movs	r0, r3
 8004aee:	f7ff fe19 	bl	8004724 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8004af2:	46c0      	nop			; (mov r8, r8)
 8004af4:	46bd      	mov	sp, r7
 8004af6:	b004      	add	sp, #16
 8004af8:	bd80      	pop	{r7, pc}

08004afa <ADC_DMAError>:
  * @brief  DMA error callback 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8004afa:	b580      	push	{r7, lr}
 8004afc:	b084      	sub	sp, #16
 8004afe:	af00      	add	r7, sp, #0
 8004b00:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b06:	60fb      	str	r3, [r7, #12]
  
  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8004b08:	68fb      	ldr	r3, [r7, #12]
 8004b0a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b0c:	2240      	movs	r2, #64	; 0x40
 8004b0e:	431a      	orrs	r2, r3
 8004b10:	68fb      	ldr	r3, [r7, #12]
 8004b12:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8004b14:	68fb      	ldr	r3, [r7, #12]
 8004b16:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004b18:	2204      	movs	r2, #4
 8004b1a:	431a      	orrs	r2, r3
 8004b1c:	68fb      	ldr	r3, [r7, #12]
 8004b1e:	63da      	str	r2, [r3, #60]	; 0x3c
  
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc); 
 8004b20:	68fb      	ldr	r3, [r7, #12]
 8004b22:	0018      	movs	r0, r3
 8004b24:	f7ff fe06 	bl	8004734 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8004b28:	46c0      	nop			; (mov r8, r8)
 8004b2a:	46bd      	mov	sp, r7
 8004b2c:	b004      	add	sp, #16
 8004b2e:	bd80      	pop	{r7, pc}

08004b30 <HAL_ADCEx_Calibration_Start>:
  *         HAL_ADC_GetValue() (value on 7 bits: from DR[6;0]).
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef* hadc)
{
 8004b30:	b580      	push	{r7, lr}
 8004b32:	b086      	sub	sp, #24
 8004b34:	af00      	add	r7, sp, #0
 8004b36:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004b38:	2317      	movs	r3, #23
 8004b3a:	18fb      	adds	r3, r7, r3
 8004b3c:	2200      	movs	r2, #0
 8004b3e:	701a      	strb	r2, [r3, #0]
  uint32_t tickstart = 0U;
 8004b40:	2300      	movs	r3, #0
 8004b42:	613b      	str	r3, [r7, #16]
  uint32_t backup_setting_adc_dma_transfer = 0; /* Note: Variable not declared as volatile because register read is already declared as volatile */
 8004b44:	2300      	movs	r3, #0
 8004b46:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	2234      	movs	r2, #52	; 0x34
 8004b4c:	5c9b      	ldrb	r3, [r3, r2]
 8004b4e:	2b01      	cmp	r3, #1
 8004b50:	d101      	bne.n	8004b56 <HAL_ADCEx_Calibration_Start+0x26>
 8004b52:	2302      	movs	r3, #2
 8004b54:	e084      	b.n	8004c60 <HAL_ADCEx_Calibration_Start+0x130>
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	2234      	movs	r2, #52	; 0x34
 8004b5a:	2101      	movs	r1, #1
 8004b5c:	5499      	strb	r1, [r3, r2]
  
  /* Calibration prerequisite: ADC must be disabled. */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	681b      	ldr	r3, [r3, #0]
 8004b62:	689b      	ldr	r3, [r3, #8]
 8004b64:	2203      	movs	r2, #3
 8004b66:	4013      	ands	r3, r2
 8004b68:	2b01      	cmp	r3, #1
 8004b6a:	d112      	bne.n	8004b92 <HAL_ADCEx_Calibration_Start+0x62>
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	681b      	ldr	r3, [r3, #0]
 8004b70:	681b      	ldr	r3, [r3, #0]
 8004b72:	2201      	movs	r2, #1
 8004b74:	4013      	ands	r3, r2
 8004b76:	2b01      	cmp	r3, #1
 8004b78:	d009      	beq.n	8004b8e <HAL_ADCEx_Calibration_Start+0x5e>
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	681b      	ldr	r3, [r3, #0]
 8004b7e:	68da      	ldr	r2, [r3, #12]
 8004b80:	2380      	movs	r3, #128	; 0x80
 8004b82:	021b      	lsls	r3, r3, #8
 8004b84:	401a      	ands	r2, r3
 8004b86:	2380      	movs	r3, #128	; 0x80
 8004b88:	021b      	lsls	r3, r3, #8
 8004b8a:	429a      	cmp	r2, r3
 8004b8c:	d101      	bne.n	8004b92 <HAL_ADCEx_Calibration_Start+0x62>
 8004b8e:	2301      	movs	r3, #1
 8004b90:	e000      	b.n	8004b94 <HAL_ADCEx_Calibration_Start+0x64>
 8004b92:	2300      	movs	r3, #0
 8004b94:	2b00      	cmp	r3, #0
 8004b96:	d152      	bne.n	8004c3e <HAL_ADCEx_Calibration_Start+0x10e>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State, 
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b9c:	4a32      	ldr	r2, [pc, #200]	; (8004c68 <HAL_ADCEx_Calibration_Start+0x138>)
 8004b9e:	4013      	ands	r3, r2
 8004ba0:	2202      	movs	r2, #2
 8004ba2:	431a      	orrs	r2, r3
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	639a      	str	r2, [r3, #56]	; 0x38
    /* Note: Specificity of this STM32 serie: Calibration factor is           */
    /*       available in data register and also transfered by DMA.           */
    /*       To not insert ADC calibration factor among ADC conversion data   */
    /*       in array variable, DMA transfer must be disabled during          */
    /*       calibration.                                                     */
    backup_setting_adc_dma_transfer = READ_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG);
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	681b      	ldr	r3, [r3, #0]
 8004bac:	68db      	ldr	r3, [r3, #12]
 8004bae:	2203      	movs	r2, #3
 8004bb0:	4013      	ands	r3, r2
 8004bb2:	60fb      	str	r3, [r7, #12]
    CLEAR_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG);
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	681b      	ldr	r3, [r3, #0]
 8004bb8:	68da      	ldr	r2, [r3, #12]
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	681b      	ldr	r3, [r3, #0]
 8004bbe:	2103      	movs	r1, #3
 8004bc0:	438a      	bics	r2, r1
 8004bc2:	60da      	str	r2, [r3, #12]

    /* Start ADC calibration */
    hadc->Instance->CR |= ADC_CR_ADCAL;
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	681b      	ldr	r3, [r3, #0]
 8004bc8:	689a      	ldr	r2, [r3, #8]
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	681b      	ldr	r3, [r3, #0]
 8004bce:	2180      	movs	r1, #128	; 0x80
 8004bd0:	0609      	lsls	r1, r1, #24
 8004bd2:	430a      	orrs	r2, r1
 8004bd4:	609a      	str	r2, [r3, #8]

    tickstart = HAL_GetTick();  
 8004bd6:	f7ff fbb7 	bl	8004348 <HAL_GetTick>
 8004bda:	0003      	movs	r3, r0
 8004bdc:	613b      	str	r3, [r7, #16]

    /* Wait for calibration completion */
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADCAL))
 8004bde:	e014      	b.n	8004c0a <HAL_ADCEx_Calibration_Start+0xda>
    {
      if((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 8004be0:	f7ff fbb2 	bl	8004348 <HAL_GetTick>
 8004be4:	0002      	movs	r2, r0
 8004be6:	693b      	ldr	r3, [r7, #16]
 8004be8:	1ad3      	subs	r3, r2, r3
 8004bea:	2b02      	cmp	r3, #2
 8004bec:	d90d      	bls.n	8004c0a <HAL_ADCEx_Calibration_Start+0xda>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004bf2:	2212      	movs	r2, #18
 8004bf4:	4393      	bics	r3, r2
 8004bf6:	2210      	movs	r2, #16
 8004bf8:	431a      	orrs	r2, r3
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	639a      	str	r2, [r3, #56]	; 0x38
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	2234      	movs	r2, #52	; 0x34
 8004c02:	2100      	movs	r1, #0
 8004c04:	5499      	strb	r1, [r3, r2]
        
        return HAL_ERROR;
 8004c06:	2301      	movs	r3, #1
 8004c08:	e02a      	b.n	8004c60 <HAL_ADCEx_Calibration_Start+0x130>
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADCAL))
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	681b      	ldr	r3, [r3, #0]
 8004c0e:	689b      	ldr	r3, [r3, #8]
 8004c10:	0fdb      	lsrs	r3, r3, #31
 8004c12:	07da      	lsls	r2, r3, #31
 8004c14:	2380      	movs	r3, #128	; 0x80
 8004c16:	061b      	lsls	r3, r3, #24
 8004c18:	429a      	cmp	r2, r3
 8004c1a:	d0e1      	beq.n	8004be0 <HAL_ADCEx_Calibration_Start+0xb0>
      }
    }
    
    /* Restore ADC DMA transfer request after calibration */
    SET_BIT(hadc->Instance->CFGR1, backup_setting_adc_dma_transfer);
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	681b      	ldr	r3, [r3, #0]
 8004c20:	68d9      	ldr	r1, [r3, #12]
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	681b      	ldr	r3, [r3, #0]
 8004c26:	68fa      	ldr	r2, [r7, #12]
 8004c28:	430a      	orrs	r2, r1
 8004c2a:	60da      	str	r2, [r3, #12]

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c30:	2203      	movs	r2, #3
 8004c32:	4393      	bics	r3, r2
 8004c34:	2201      	movs	r2, #1
 8004c36:	431a      	orrs	r2, r3
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	639a      	str	r2, [r3, #56]	; 0x38
 8004c3c:	e009      	b.n	8004c52 <HAL_ADCEx_Calibration_Start+0x122>
                      HAL_ADC_STATE_READY);
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c42:	2220      	movs	r2, #32
 8004c44:	431a      	orrs	r2, r3
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	639a      	str	r2, [r3, #56]	; 0x38
    
    tmp_hal_status = HAL_ERROR;
 8004c4a:	2317      	movs	r3, #23
 8004c4c:	18fb      	adds	r3, r7, r3
 8004c4e:	2201      	movs	r2, #1
 8004c50:	701a      	strb	r2, [r3, #0]
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	2234      	movs	r2, #52	; 0x34
 8004c56:	2100      	movs	r1, #0
 8004c58:	5499      	strb	r1, [r3, r2]
  
  /* Return function status */
  return tmp_hal_status;
 8004c5a:	2317      	movs	r3, #23
 8004c5c:	18fb      	adds	r3, r7, r3
 8004c5e:	781b      	ldrb	r3, [r3, #0]
}
 8004c60:	0018      	movs	r0, r3
 8004c62:	46bd      	mov	sp, r7
 8004c64:	b006      	add	sp, #24
 8004c66:	bd80      	pop	{r7, pc}
 8004c68:	fffffefd 	.word	0xfffffefd

08004c6c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004c6c:	b580      	push	{r7, lr}
 8004c6e:	b082      	sub	sp, #8
 8004c70:	af00      	add	r7, sp, #0
 8004c72:	0002      	movs	r2, r0
 8004c74:	1dfb      	adds	r3, r7, #7
 8004c76:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8004c78:	1dfb      	adds	r3, r7, #7
 8004c7a:	781b      	ldrb	r3, [r3, #0]
 8004c7c:	2b7f      	cmp	r3, #127	; 0x7f
 8004c7e:	d809      	bhi.n	8004c94 <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004c80:	1dfb      	adds	r3, r7, #7
 8004c82:	781b      	ldrb	r3, [r3, #0]
 8004c84:	001a      	movs	r2, r3
 8004c86:	231f      	movs	r3, #31
 8004c88:	401a      	ands	r2, r3
 8004c8a:	4b04      	ldr	r3, [pc, #16]	; (8004c9c <__NVIC_EnableIRQ+0x30>)
 8004c8c:	2101      	movs	r1, #1
 8004c8e:	4091      	lsls	r1, r2
 8004c90:	000a      	movs	r2, r1
 8004c92:	601a      	str	r2, [r3, #0]
  }
}
 8004c94:	46c0      	nop			; (mov r8, r8)
 8004c96:	46bd      	mov	sp, r7
 8004c98:	b002      	add	sp, #8
 8004c9a:	bd80      	pop	{r7, pc}
 8004c9c:	e000e100 	.word	0xe000e100

08004ca0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004ca0:	b590      	push	{r4, r7, lr}
 8004ca2:	b083      	sub	sp, #12
 8004ca4:	af00      	add	r7, sp, #0
 8004ca6:	0002      	movs	r2, r0
 8004ca8:	6039      	str	r1, [r7, #0]
 8004caa:	1dfb      	adds	r3, r7, #7
 8004cac:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8004cae:	1dfb      	adds	r3, r7, #7
 8004cb0:	781b      	ldrb	r3, [r3, #0]
 8004cb2:	2b7f      	cmp	r3, #127	; 0x7f
 8004cb4:	d828      	bhi.n	8004d08 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8004cb6:	4a2f      	ldr	r2, [pc, #188]	; (8004d74 <__NVIC_SetPriority+0xd4>)
 8004cb8:	1dfb      	adds	r3, r7, #7
 8004cba:	781b      	ldrb	r3, [r3, #0]
 8004cbc:	b25b      	sxtb	r3, r3
 8004cbe:	089b      	lsrs	r3, r3, #2
 8004cc0:	33c0      	adds	r3, #192	; 0xc0
 8004cc2:	009b      	lsls	r3, r3, #2
 8004cc4:	589b      	ldr	r3, [r3, r2]
 8004cc6:	1dfa      	adds	r2, r7, #7
 8004cc8:	7812      	ldrb	r2, [r2, #0]
 8004cca:	0011      	movs	r1, r2
 8004ccc:	2203      	movs	r2, #3
 8004cce:	400a      	ands	r2, r1
 8004cd0:	00d2      	lsls	r2, r2, #3
 8004cd2:	21ff      	movs	r1, #255	; 0xff
 8004cd4:	4091      	lsls	r1, r2
 8004cd6:	000a      	movs	r2, r1
 8004cd8:	43d2      	mvns	r2, r2
 8004cda:	401a      	ands	r2, r3
 8004cdc:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8004cde:	683b      	ldr	r3, [r7, #0]
 8004ce0:	019b      	lsls	r3, r3, #6
 8004ce2:	22ff      	movs	r2, #255	; 0xff
 8004ce4:	401a      	ands	r2, r3
 8004ce6:	1dfb      	adds	r3, r7, #7
 8004ce8:	781b      	ldrb	r3, [r3, #0]
 8004cea:	0018      	movs	r0, r3
 8004cec:	2303      	movs	r3, #3
 8004cee:	4003      	ands	r3, r0
 8004cf0:	00db      	lsls	r3, r3, #3
 8004cf2:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8004cf4:	481f      	ldr	r0, [pc, #124]	; (8004d74 <__NVIC_SetPriority+0xd4>)
 8004cf6:	1dfb      	adds	r3, r7, #7
 8004cf8:	781b      	ldrb	r3, [r3, #0]
 8004cfa:	b25b      	sxtb	r3, r3
 8004cfc:	089b      	lsrs	r3, r3, #2
 8004cfe:	430a      	orrs	r2, r1
 8004d00:	33c0      	adds	r3, #192	; 0xc0
 8004d02:	009b      	lsls	r3, r3, #2
 8004d04:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8004d06:	e031      	b.n	8004d6c <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8004d08:	4a1b      	ldr	r2, [pc, #108]	; (8004d78 <__NVIC_SetPriority+0xd8>)
 8004d0a:	1dfb      	adds	r3, r7, #7
 8004d0c:	781b      	ldrb	r3, [r3, #0]
 8004d0e:	0019      	movs	r1, r3
 8004d10:	230f      	movs	r3, #15
 8004d12:	400b      	ands	r3, r1
 8004d14:	3b08      	subs	r3, #8
 8004d16:	089b      	lsrs	r3, r3, #2
 8004d18:	3306      	adds	r3, #6
 8004d1a:	009b      	lsls	r3, r3, #2
 8004d1c:	18d3      	adds	r3, r2, r3
 8004d1e:	3304      	adds	r3, #4
 8004d20:	681b      	ldr	r3, [r3, #0]
 8004d22:	1dfa      	adds	r2, r7, #7
 8004d24:	7812      	ldrb	r2, [r2, #0]
 8004d26:	0011      	movs	r1, r2
 8004d28:	2203      	movs	r2, #3
 8004d2a:	400a      	ands	r2, r1
 8004d2c:	00d2      	lsls	r2, r2, #3
 8004d2e:	21ff      	movs	r1, #255	; 0xff
 8004d30:	4091      	lsls	r1, r2
 8004d32:	000a      	movs	r2, r1
 8004d34:	43d2      	mvns	r2, r2
 8004d36:	401a      	ands	r2, r3
 8004d38:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8004d3a:	683b      	ldr	r3, [r7, #0]
 8004d3c:	019b      	lsls	r3, r3, #6
 8004d3e:	22ff      	movs	r2, #255	; 0xff
 8004d40:	401a      	ands	r2, r3
 8004d42:	1dfb      	adds	r3, r7, #7
 8004d44:	781b      	ldrb	r3, [r3, #0]
 8004d46:	0018      	movs	r0, r3
 8004d48:	2303      	movs	r3, #3
 8004d4a:	4003      	ands	r3, r0
 8004d4c:	00db      	lsls	r3, r3, #3
 8004d4e:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8004d50:	4809      	ldr	r0, [pc, #36]	; (8004d78 <__NVIC_SetPriority+0xd8>)
 8004d52:	1dfb      	adds	r3, r7, #7
 8004d54:	781b      	ldrb	r3, [r3, #0]
 8004d56:	001c      	movs	r4, r3
 8004d58:	230f      	movs	r3, #15
 8004d5a:	4023      	ands	r3, r4
 8004d5c:	3b08      	subs	r3, #8
 8004d5e:	089b      	lsrs	r3, r3, #2
 8004d60:	430a      	orrs	r2, r1
 8004d62:	3306      	adds	r3, #6
 8004d64:	009b      	lsls	r3, r3, #2
 8004d66:	18c3      	adds	r3, r0, r3
 8004d68:	3304      	adds	r3, #4
 8004d6a:	601a      	str	r2, [r3, #0]
}
 8004d6c:	46c0      	nop			; (mov r8, r8)
 8004d6e:	46bd      	mov	sp, r7
 8004d70:	b003      	add	sp, #12
 8004d72:	bd90      	pop	{r4, r7, pc}
 8004d74:	e000e100 	.word	0xe000e100
 8004d78:	e000ed00 	.word	0xe000ed00

08004d7c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004d7c:	b580      	push	{r7, lr}
 8004d7e:	b082      	sub	sp, #8
 8004d80:	af00      	add	r7, sp, #0
 8004d82:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	3b01      	subs	r3, #1
 8004d88:	4a0c      	ldr	r2, [pc, #48]	; (8004dbc <SysTick_Config+0x40>)
 8004d8a:	4293      	cmp	r3, r2
 8004d8c:	d901      	bls.n	8004d92 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8004d8e:	2301      	movs	r3, #1
 8004d90:	e010      	b.n	8004db4 <SysTick_Config+0x38>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004d92:	4b0b      	ldr	r3, [pc, #44]	; (8004dc0 <SysTick_Config+0x44>)
 8004d94:	687a      	ldr	r2, [r7, #4]
 8004d96:	3a01      	subs	r2, #1
 8004d98:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8004d9a:	2301      	movs	r3, #1
 8004d9c:	425b      	negs	r3, r3
 8004d9e:	2103      	movs	r1, #3
 8004da0:	0018      	movs	r0, r3
 8004da2:	f7ff ff7d 	bl	8004ca0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004da6:	4b06      	ldr	r3, [pc, #24]	; (8004dc0 <SysTick_Config+0x44>)
 8004da8:	2200      	movs	r2, #0
 8004daa:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004dac:	4b04      	ldr	r3, [pc, #16]	; (8004dc0 <SysTick_Config+0x44>)
 8004dae:	2207      	movs	r2, #7
 8004db0:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004db2:	2300      	movs	r3, #0
}
 8004db4:	0018      	movs	r0, r3
 8004db6:	46bd      	mov	sp, r7
 8004db8:	b002      	add	sp, #8
 8004dba:	bd80      	pop	{r7, pc}
 8004dbc:	00ffffff 	.word	0x00ffffff
 8004dc0:	e000e010 	.word	0xe000e010

08004dc4 <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8004dc4:	b580      	push	{r7, lr}
 8004dc6:	b084      	sub	sp, #16
 8004dc8:	af00      	add	r7, sp, #0
 8004dca:	60b9      	str	r1, [r7, #8]
 8004dcc:	607a      	str	r2, [r7, #4]
 8004dce:	210f      	movs	r1, #15
 8004dd0:	187b      	adds	r3, r7, r1
 8004dd2:	1c02      	adds	r2, r0, #0
 8004dd4:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8004dd6:	68ba      	ldr	r2, [r7, #8]
 8004dd8:	187b      	adds	r3, r7, r1
 8004dda:	781b      	ldrb	r3, [r3, #0]
 8004ddc:	b25b      	sxtb	r3, r3
 8004dde:	0011      	movs	r1, r2
 8004de0:	0018      	movs	r0, r3
 8004de2:	f7ff ff5d 	bl	8004ca0 <__NVIC_SetPriority>
}
 8004de6:	46c0      	nop			; (mov r8, r8)
 8004de8:	46bd      	mov	sp, r7
 8004dea:	b004      	add	sp, #16
 8004dec:	bd80      	pop	{r7, pc}

08004dee <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004dee:	b580      	push	{r7, lr}
 8004df0:	b082      	sub	sp, #8
 8004df2:	af00      	add	r7, sp, #0
 8004df4:	0002      	movs	r2, r0
 8004df6:	1dfb      	adds	r3, r7, #7
 8004df8:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004dfa:	1dfb      	adds	r3, r7, #7
 8004dfc:	781b      	ldrb	r3, [r3, #0]
 8004dfe:	b25b      	sxtb	r3, r3
 8004e00:	0018      	movs	r0, r3
 8004e02:	f7ff ff33 	bl	8004c6c <__NVIC_EnableIRQ>
}
 8004e06:	46c0      	nop			; (mov r8, r8)
 8004e08:	46bd      	mov	sp, r7
 8004e0a:	b002      	add	sp, #8
 8004e0c:	bd80      	pop	{r7, pc}

08004e0e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8004e0e:	b580      	push	{r7, lr}
 8004e10:	b082      	sub	sp, #8
 8004e12:	af00      	add	r7, sp, #0
 8004e14:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	0018      	movs	r0, r3
 8004e1a:	f7ff ffaf 	bl	8004d7c <SysTick_Config>
 8004e1e:	0003      	movs	r3, r0
}
 8004e20:	0018      	movs	r0, r3
 8004e22:	46bd      	mov	sp, r7
 8004e24:	b002      	add	sp, #8
 8004e26:	bd80      	pop	{r7, pc}

08004e28 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{ 
 8004e28:	b580      	push	{r7, lr}
 8004e2a:	b084      	sub	sp, #16
 8004e2c:	af00      	add	r7, sp, #0
 8004e2e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8004e30:	2300      	movs	r3, #0
 8004e32:	60fb      	str	r3, [r7, #12]
  
  /* Check the DMA handle allocation */
  if(NULL == hdma)
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	2b00      	cmp	r3, #0
 8004e38:	d101      	bne.n	8004e3e <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8004e3a:	2301      	movs	r3, #1
 8004e3c:	e036      	b.n	8004eac <HAL_DMA_Init+0x84>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	2221      	movs	r2, #33	; 0x21
 8004e42:	2102      	movs	r1, #2
 8004e44:	5499      	strb	r1, [r3, r2]

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	681b      	ldr	r3, [r3, #0]
 8004e4a:	681b      	ldr	r3, [r3, #0]
 8004e4c:	60fb      	str	r3, [r7, #12]
  
  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8004e4e:	68fb      	ldr	r3, [r7, #12]
 8004e50:	4a18      	ldr	r2, [pc, #96]	; (8004eb4 <HAL_DMA_Init+0x8c>)
 8004e52:	4013      	ands	r3, r2
 8004e54:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));
  
  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8004e5e:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	68db      	ldr	r3, [r3, #12]
 8004e64:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004e6a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	695b      	ldr	r3, [r3, #20]
 8004e70:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004e76:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	69db      	ldr	r3, [r3, #28]
 8004e7c:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8004e7e:	68fa      	ldr	r2, [r7, #12]
 8004e80:	4313      	orrs	r3, r2
 8004e82:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;  
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	681b      	ldr	r3, [r3, #0]
 8004e88:	68fa      	ldr	r2, [r7, #12]
 8004e8a:	601a      	str	r2, [r3, #0]
  
  /* Initialize DmaBaseAddress and ChannelIndex parameters used 
     by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  DMA_CalcBaseAndBitshift(hdma);
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	0018      	movs	r0, r3
 8004e90:	f000 f946 	bl	8005120 <DMA_CalcBaseAndBitshift>
  
  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	2200      	movs	r2, #0
 8004e98:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	2221      	movs	r2, #33	; 0x21
 8004e9e:	2101      	movs	r1, #1
 8004ea0:	5499      	strb	r1, [r3, r2]
  
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	2220      	movs	r2, #32
 8004ea6:	2100      	movs	r1, #0
 8004ea8:	5499      	strb	r1, [r3, r2]
  
  return HAL_OK;
 8004eaa:	2300      	movs	r3, #0
}  
 8004eac:	0018      	movs	r0, r3
 8004eae:	46bd      	mov	sp, r7
 8004eb0:	b004      	add	sp, #16
 8004eb2:	bd80      	pop	{r7, pc}
 8004eb4:	ffffc00f 	.word	0xffffc00f

08004eb8 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004eb8:	b580      	push	{r7, lr}
 8004eba:	b086      	sub	sp, #24
 8004ebc:	af00      	add	r7, sp, #0
 8004ebe:	60f8      	str	r0, [r7, #12]
 8004ec0:	60b9      	str	r1, [r7, #8]
 8004ec2:	607a      	str	r2, [r7, #4]
 8004ec4:	603b      	str	r3, [r7, #0]
	HAL_StatusTypeDef status = HAL_OK;
 8004ec6:	2317      	movs	r3, #23
 8004ec8:	18fb      	adds	r3, r7, r3
 8004eca:	2200      	movs	r2, #0
 8004ecc:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
  
  /* Process locked */
  __HAL_LOCK(hdma);
 8004ece:	68fb      	ldr	r3, [r7, #12]
 8004ed0:	2220      	movs	r2, #32
 8004ed2:	5c9b      	ldrb	r3, [r3, r2]
 8004ed4:	2b01      	cmp	r3, #1
 8004ed6:	d101      	bne.n	8004edc <HAL_DMA_Start_IT+0x24>
 8004ed8:	2302      	movs	r3, #2
 8004eda:	e04f      	b.n	8004f7c <HAL_DMA_Start_IT+0xc4>
 8004edc:	68fb      	ldr	r3, [r7, #12]
 8004ede:	2220      	movs	r2, #32
 8004ee0:	2101      	movs	r1, #1
 8004ee2:	5499      	strb	r1, [r3, r2]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8004ee4:	68fb      	ldr	r3, [r7, #12]
 8004ee6:	2221      	movs	r2, #33	; 0x21
 8004ee8:	5c9b      	ldrb	r3, [r3, r2]
 8004eea:	b2db      	uxtb	r3, r3
 8004eec:	2b01      	cmp	r3, #1
 8004eee:	d13a      	bne.n	8004f66 <HAL_DMA_Start_IT+0xae>
  {
  	/* Change DMA peripheral state */  
  	hdma->State = HAL_DMA_STATE_BUSY;
 8004ef0:	68fb      	ldr	r3, [r7, #12]
 8004ef2:	2221      	movs	r2, #33	; 0x21
 8004ef4:	2102      	movs	r1, #2
 8004ef6:	5499      	strb	r1, [r3, r2]
  	
  	hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004ef8:	68fb      	ldr	r3, [r7, #12]
 8004efa:	2200      	movs	r2, #0
 8004efc:	639a      	str	r2, [r3, #56]	; 0x38
  	
  	/* Disable the peripheral */
  	hdma->Instance->CCR &= ~DMA_CCR_EN;
 8004efe:	68fb      	ldr	r3, [r7, #12]
 8004f00:	681b      	ldr	r3, [r3, #0]
 8004f02:	681a      	ldr	r2, [r3, #0]
 8004f04:	68fb      	ldr	r3, [r7, #12]
 8004f06:	681b      	ldr	r3, [r3, #0]
 8004f08:	2101      	movs	r1, #1
 8004f0a:	438a      	bics	r2, r1
 8004f0c:	601a      	str	r2, [r3, #0]
  	
  	/* Configure the source, destination address and the data length */  
  	DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8004f0e:	683b      	ldr	r3, [r7, #0]
 8004f10:	687a      	ldr	r2, [r7, #4]
 8004f12:	68b9      	ldr	r1, [r7, #8]
 8004f14:	68f8      	ldr	r0, [r7, #12]
 8004f16:	f000 f8d7 	bl	80050c8 <DMA_SetConfig>
  	
  	/* Enable the transfer complete, & transfer error interrupts */
  	/* Half transfer interrupt is optional: enable it only if associated callback is available */
    if(NULL != hdma->XferHalfCpltCallback )
 8004f1a:	68fb      	ldr	r3, [r7, #12]
 8004f1c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f1e:	2b00      	cmp	r3, #0
 8004f20:	d008      	beq.n	8004f34 <HAL_DMA_Start_IT+0x7c>
    {
      hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8004f22:	68fb      	ldr	r3, [r7, #12]
 8004f24:	681b      	ldr	r3, [r3, #0]
 8004f26:	681a      	ldr	r2, [r3, #0]
 8004f28:	68fb      	ldr	r3, [r7, #12]
 8004f2a:	681b      	ldr	r3, [r3, #0]
 8004f2c:	210e      	movs	r1, #14
 8004f2e:	430a      	orrs	r2, r1
 8004f30:	601a      	str	r2, [r3, #0]
 8004f32:	e00f      	b.n	8004f54 <HAL_DMA_Start_IT+0x9c>
    }
  	else
  	{
  		hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_TE);
 8004f34:	68fb      	ldr	r3, [r7, #12]
 8004f36:	681b      	ldr	r3, [r3, #0]
 8004f38:	681a      	ldr	r2, [r3, #0]
 8004f3a:	68fb      	ldr	r3, [r7, #12]
 8004f3c:	681b      	ldr	r3, [r3, #0]
 8004f3e:	210a      	movs	r1, #10
 8004f40:	430a      	orrs	r2, r1
 8004f42:	601a      	str	r2, [r3, #0]
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 8004f44:	68fb      	ldr	r3, [r7, #12]
 8004f46:	681b      	ldr	r3, [r3, #0]
 8004f48:	681a      	ldr	r2, [r3, #0]
 8004f4a:	68fb      	ldr	r3, [r7, #12]
 8004f4c:	681b      	ldr	r3, [r3, #0]
 8004f4e:	2104      	movs	r1, #4
 8004f50:	438a      	bics	r2, r1
 8004f52:	601a      	str	r2, [r3, #0]
  	}
  	
  	/* Enable the Peripheral */
  	hdma->Instance->CCR |= DMA_CCR_EN;
 8004f54:	68fb      	ldr	r3, [r7, #12]
 8004f56:	681b      	ldr	r3, [r3, #0]
 8004f58:	681a      	ldr	r2, [r3, #0]
 8004f5a:	68fb      	ldr	r3, [r7, #12]
 8004f5c:	681b      	ldr	r3, [r3, #0]
 8004f5e:	2101      	movs	r1, #1
 8004f60:	430a      	orrs	r2, r1
 8004f62:	601a      	str	r2, [r3, #0]
 8004f64:	e007      	b.n	8004f76 <HAL_DMA_Start_IT+0xbe>
  }
  else
  {
  	/* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8004f66:	68fb      	ldr	r3, [r7, #12]
 8004f68:	2220      	movs	r2, #32
 8004f6a:	2100      	movs	r1, #0
 8004f6c:	5499      	strb	r1, [r3, r2]
  
    /* Remain BUSY */
    status = HAL_BUSY;
 8004f6e:	2317      	movs	r3, #23
 8004f70:	18fb      	adds	r3, r7, r3
 8004f72:	2202      	movs	r2, #2
 8004f74:	701a      	strb	r2, [r3, #0]
  }     
  
  return status;    
 8004f76:	2317      	movs	r3, #23
 8004f78:	18fb      	adds	r3, r7, r3
 8004f7a:	781b      	ldrb	r3, [r3, #0]
} 
 8004f7c:	0018      	movs	r0, r3
 8004f7e:	46bd      	mov	sp, r7
 8004f80:	b006      	add	sp, #24
 8004f82:	bd80      	pop	{r7, pc}

08004f84 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8004f84:	b580      	push	{r7, lr}
 8004f86:	b084      	sub	sp, #16
 8004f88:	af00      	add	r7, sp, #0
 8004f8a:	6078      	str	r0, [r7, #4]
	uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004f90:	681b      	ldr	r3, [r3, #0]
 8004f92:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	681b      	ldr	r3, [r3, #0]
 8004f98:	681b      	ldr	r3, [r3, #0]
 8004f9a:	60bb      	str	r3, [r7, #8]
          
  /* Half Transfer Complete Interrupt management ******************************/
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004fa0:	2204      	movs	r2, #4
 8004fa2:	409a      	lsls	r2, r3
 8004fa4:	0013      	movs	r3, r2
 8004fa6:	68fa      	ldr	r2, [r7, #12]
 8004fa8:	4013      	ands	r3, r2
 8004faa:	d024      	beq.n	8004ff6 <HAL_DMA_IRQHandler+0x72>
 8004fac:	68bb      	ldr	r3, [r7, #8]
 8004fae:	2204      	movs	r2, #4
 8004fb0:	4013      	ands	r3, r2
 8004fb2:	d020      	beq.n	8004ff6 <HAL_DMA_IRQHandler+0x72>
  {
  	/* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	681b      	ldr	r3, [r3, #0]
 8004fb8:	681b      	ldr	r3, [r3, #0]
 8004fba:	2220      	movs	r2, #32
 8004fbc:	4013      	ands	r3, r2
 8004fbe:	d107      	bne.n	8004fd0 <HAL_DMA_IRQHandler+0x4c>
  	{
  		/* Disable the half transfer interrupt */
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	681b      	ldr	r3, [r3, #0]
 8004fc4:	681a      	ldr	r2, [r3, #0]
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	681b      	ldr	r3, [r3, #0]
 8004fca:	2104      	movs	r1, #4
 8004fcc:	438a      	bics	r2, r1
 8004fce:	601a      	str	r2, [r3, #0]
  	}
  	
  	/* Clear the half transfer complete flag */
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_HT1 << hdma->ChannelIndex;
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004fd8:	2104      	movs	r1, #4
 8004fda:	4091      	lsls	r1, r2
 8004fdc:	000a      	movs	r2, r1
 8004fde:	605a      	str	r2, [r3, #4]
  	
  	/* DMA peripheral state is not updated in Half Transfer */
  	/* State is updated only in Transfer Complete case */
  	
  	if(hdma->XferHalfCpltCallback != NULL)
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004fe4:	2b00      	cmp	r3, #0
 8004fe6:	d100      	bne.n	8004fea <HAL_DMA_IRQHandler+0x66>
 8004fe8:	e06a      	b.n	80050c0 <HAL_DMA_IRQHandler+0x13c>
  	{
  		/* Half transfer callback */
  		hdma->XferHalfCpltCallback(hdma);
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004fee:	687a      	ldr	r2, [r7, #4]
 8004ff0:	0010      	movs	r0, r2
 8004ff2:	4798      	blx	r3
  	if(hdma->XferHalfCpltCallback != NULL)
 8004ff4:	e064      	b.n	80050c0 <HAL_DMA_IRQHandler+0x13c>
  	}
  }
  
  /* Transfer Complete Interrupt management ***********************************/
  else if ((RESET != (flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TC)))
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ffa:	2202      	movs	r2, #2
 8004ffc:	409a      	lsls	r2, r3
 8004ffe:	0013      	movs	r3, r2
 8005000:	68fa      	ldr	r2, [r7, #12]
 8005002:	4013      	ands	r3, r2
 8005004:	d02b      	beq.n	800505e <HAL_DMA_IRQHandler+0xda>
 8005006:	68bb      	ldr	r3, [r7, #8]
 8005008:	2202      	movs	r2, #2
 800500a:	4013      	ands	r3, r2
 800500c:	d027      	beq.n	800505e <HAL_DMA_IRQHandler+0xda>
  {
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	681b      	ldr	r3, [r3, #0]
 8005012:	681b      	ldr	r3, [r3, #0]
 8005014:	2220      	movs	r2, #32
 8005016:	4013      	ands	r3, r2
 8005018:	d10b      	bne.n	8005032 <HAL_DMA_IRQHandler+0xae>
  	{
  		/* Disable the transfer complete  & transfer error interrupts */
  		/* if the DMA mode is not CIRCULAR */
  		hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_TE);
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	681b      	ldr	r3, [r3, #0]
 800501e:	681a      	ldr	r2, [r3, #0]
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	681b      	ldr	r3, [r3, #0]
 8005024:	210a      	movs	r1, #10
 8005026:	438a      	bics	r2, r1
 8005028:	601a      	str	r2, [r3, #0]
  		
  		/* Change the DMA state */
  		hdma->State = HAL_DMA_STATE_READY;
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	2221      	movs	r2, #33	; 0x21
 800502e:	2101      	movs	r1, #1
 8005030:	5499      	strb	r1, [r3, r2]
  	}
  	
  	/* Clear the transfer complete flag */
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_TC1 << hdma->ChannelIndex;
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800503a:	2102      	movs	r1, #2
 800503c:	4091      	lsls	r1, r2
 800503e:	000a      	movs	r2, r1
 8005040:	605a      	str	r2, [r3, #4]
  	
  	/* Process Unlocked */
  	__HAL_UNLOCK(hdma);
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	2220      	movs	r2, #32
 8005046:	2100      	movs	r1, #0
 8005048:	5499      	strb	r1, [r3, r2]
  	
  	if(hdma->XferCpltCallback != NULL)
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800504e:	2b00      	cmp	r3, #0
 8005050:	d036      	beq.n	80050c0 <HAL_DMA_IRQHandler+0x13c>
  	{
  		/* Transfer complete callback */
  		hdma->XferCpltCallback(hdma);
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005056:	687a      	ldr	r2, [r7, #4]
 8005058:	0010      	movs	r0, r2
 800505a:	4798      	blx	r3
  	if(hdma->XferCpltCallback != NULL)
 800505c:	e030      	b.n	80050c0 <HAL_DMA_IRQHandler+0x13c>
  	}
  }
  
  /* Transfer Error Interrupt management ***************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005062:	2208      	movs	r2, #8
 8005064:	409a      	lsls	r2, r3
 8005066:	0013      	movs	r3, r2
 8005068:	68fa      	ldr	r2, [r7, #12]
 800506a:	4013      	ands	r3, r2
 800506c:	d028      	beq.n	80050c0 <HAL_DMA_IRQHandler+0x13c>
 800506e:	68bb      	ldr	r3, [r7, #8]
 8005070:	2208      	movs	r2, #8
 8005072:	4013      	ands	r3, r2
 8005074:	d024      	beq.n	80050c0 <HAL_DMA_IRQHandler+0x13c>
  {
  	/* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Then, disable all DMA interrupts */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	681b      	ldr	r3, [r3, #0]
 800507a:	681a      	ldr	r2, [r3, #0]
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	681b      	ldr	r3, [r3, #0]
 8005080:	210e      	movs	r1, #14
 8005082:	438a      	bics	r2, r1
 8005084:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800508e:	2101      	movs	r1, #1
 8005090:	4091      	lsls	r1, r2
 8005092:	000a      	movs	r2, r1
 8005094:	605a      	str	r2, [r3, #4]
    
    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	2201      	movs	r2, #1
 800509a:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;    
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	2221      	movs	r2, #33	; 0x21
 80050a0:	2101      	movs	r1, #1
 80050a2:	5499      	strb	r1, [r3, r2]
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	2220      	movs	r2, #32
 80050a8:	2100      	movs	r1, #0
 80050aa:	5499      	strb	r1, [r3, r2]
    
    if(hdma->XferErrorCallback != NULL)
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80050b0:	2b00      	cmp	r3, #0
 80050b2:	d005      	beq.n	80050c0 <HAL_DMA_IRQHandler+0x13c>
    {
    	/* Transfer error callback */
    	hdma->XferErrorCallback(hdma);
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80050b8:	687a      	ldr	r2, [r7, #4]
 80050ba:	0010      	movs	r0, r2
 80050bc:	4798      	blx	r3
    }
   }
}  
 80050be:	e7ff      	b.n	80050c0 <HAL_DMA_IRQHandler+0x13c>
 80050c0:	46c0      	nop			; (mov r8, r8)
 80050c2:	46bd      	mov	sp, r7
 80050c4:	b004      	add	sp, #16
 80050c6:	bd80      	pop	{r7, pc}

080050c8 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80050c8:	b580      	push	{r7, lr}
 80050ca:	b084      	sub	sp, #16
 80050cc:	af00      	add	r7, sp, #0
 80050ce:	60f8      	str	r0, [r7, #12]
 80050d0:	60b9      	str	r1, [r7, #8]
 80050d2:	607a      	str	r2, [r7, #4]
 80050d4:	603b      	str	r3, [r7, #0]
	/* Clear all flags */
  hdma->DmaBaseAddress->IFCR  = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 80050d6:	68fb      	ldr	r3, [r7, #12]
 80050d8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80050da:	68fb      	ldr	r3, [r7, #12]
 80050dc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80050de:	2101      	movs	r1, #1
 80050e0:	4091      	lsls	r1, r2
 80050e2:	000a      	movs	r2, r1
 80050e4:	605a      	str	r2, [r3, #4]
  
  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80050e6:	68fb      	ldr	r3, [r7, #12]
 80050e8:	681b      	ldr	r3, [r3, #0]
 80050ea:	683a      	ldr	r2, [r7, #0]
 80050ec:	605a      	str	r2, [r3, #4]
  
  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80050ee:	68fb      	ldr	r3, [r7, #12]
 80050f0:	685b      	ldr	r3, [r3, #4]
 80050f2:	2b10      	cmp	r3, #16
 80050f4:	d108      	bne.n	8005108 <DMA_SetConfig+0x40>
  {   
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80050f6:	68fb      	ldr	r3, [r7, #12]
 80050f8:	681b      	ldr	r3, [r3, #0]
 80050fa:	687a      	ldr	r2, [r7, #4]
 80050fc:	609a      	str	r2, [r3, #8]
    
    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 80050fe:	68fb      	ldr	r3, [r7, #12]
 8005100:	681b      	ldr	r3, [r3, #0]
 8005102:	68ba      	ldr	r2, [r7, #8]
 8005104:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;
    
    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8005106:	e007      	b.n	8005118 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8005108:	68fb      	ldr	r3, [r7, #12]
 800510a:	681b      	ldr	r3, [r3, #0]
 800510c:	68ba      	ldr	r2, [r7, #8]
 800510e:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8005110:	68fb      	ldr	r3, [r7, #12]
 8005112:	681b      	ldr	r3, [r3, #0]
 8005114:	687a      	ldr	r2, [r7, #4]
 8005116:	60da      	str	r2, [r3, #12]
}
 8005118:	46c0      	nop			; (mov r8, r8)
 800511a:	46bd      	mov	sp, r7
 800511c:	b004      	add	sp, #16
 800511e:	bd80      	pop	{r7, pc}

08005120 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval None
  */
static void DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8005120:	b580      	push	{r7, lr}
 8005122:	b082      	sub	sp, #8
 8005124:	af00      	add	r7, sp, #0
 8005126:	6078      	str	r0, [r7, #4]
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* calculation of the channel index */
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	681b      	ldr	r3, [r3, #0]
 800512c:	4a08      	ldr	r2, [pc, #32]	; (8005150 <DMA_CalcBaseAndBitshift+0x30>)
 800512e:	4694      	mov	ip, r2
 8005130:	4463      	add	r3, ip
 8005132:	2114      	movs	r1, #20
 8005134:	0018      	movs	r0, r3
 8005136:	f7fa ffe7 	bl	8000108 <__udivsi3>
 800513a:	0003      	movs	r3, r0
 800513c:	009a      	lsls	r2, r3, #2
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	4a03      	ldr	r2, [pc, #12]	; (8005154 <DMA_CalcBaseAndBitshift+0x34>)
 8005146:	63da      	str	r2, [r3, #60]	; 0x3c
#endif
}
 8005148:	46c0      	nop			; (mov r8, r8)
 800514a:	46bd      	mov	sp, r7
 800514c:	b002      	add	sp, #8
 800514e:	bd80      	pop	{r7, pc}
 8005150:	bffdfff8 	.word	0xbffdfff8
 8005154:	40020000 	.word	0x40020000

08005158 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{ 
 8005158:	b580      	push	{r7, lr}
 800515a:	b086      	sub	sp, #24
 800515c:	af00      	add	r7, sp, #0
 800515e:	6078      	str	r0, [r7, #4]
 8005160:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8005162:	2300      	movs	r3, #0
 8005164:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8005166:	e14f      	b.n	8005408 <HAL_GPIO_Init+0x2b0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8005168:	683b      	ldr	r3, [r7, #0]
 800516a:	681b      	ldr	r3, [r3, #0]
 800516c:	2101      	movs	r1, #1
 800516e:	697a      	ldr	r2, [r7, #20]
 8005170:	4091      	lsls	r1, r2
 8005172:	000a      	movs	r2, r1
 8005174:	4013      	ands	r3, r2
 8005176:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8005178:	68fb      	ldr	r3, [r7, #12]
 800517a:	2b00      	cmp	r3, #0
 800517c:	d100      	bne.n	8005180 <HAL_GPIO_Init+0x28>
 800517e:	e140      	b.n	8005402 <HAL_GPIO_Init+0x2aa>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8005180:	683b      	ldr	r3, [r7, #0]
 8005182:	685b      	ldr	r3, [r3, #4]
 8005184:	2b02      	cmp	r3, #2
 8005186:	d003      	beq.n	8005190 <HAL_GPIO_Init+0x38>
 8005188:	683b      	ldr	r3, [r7, #0]
 800518a:	685b      	ldr	r3, [r3, #4]
 800518c:	2b12      	cmp	r3, #18
 800518e:	d123      	bne.n	80051d8 <HAL_GPIO_Init+0x80>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8005190:	697b      	ldr	r3, [r7, #20]
 8005192:	08da      	lsrs	r2, r3, #3
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	3208      	adds	r2, #8
 8005198:	0092      	lsls	r2, r2, #2
 800519a:	58d3      	ldr	r3, [r2, r3]
 800519c:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800519e:	697b      	ldr	r3, [r7, #20]
 80051a0:	2207      	movs	r2, #7
 80051a2:	4013      	ands	r3, r2
 80051a4:	009b      	lsls	r3, r3, #2
 80051a6:	220f      	movs	r2, #15
 80051a8:	409a      	lsls	r2, r3
 80051aa:	0013      	movs	r3, r2
 80051ac:	43da      	mvns	r2, r3
 80051ae:	693b      	ldr	r3, [r7, #16]
 80051b0:	4013      	ands	r3, r2
 80051b2:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80051b4:	683b      	ldr	r3, [r7, #0]
 80051b6:	691a      	ldr	r2, [r3, #16]
 80051b8:	697b      	ldr	r3, [r7, #20]
 80051ba:	2107      	movs	r1, #7
 80051bc:	400b      	ands	r3, r1
 80051be:	009b      	lsls	r3, r3, #2
 80051c0:	409a      	lsls	r2, r3
 80051c2:	0013      	movs	r3, r2
 80051c4:	693a      	ldr	r2, [r7, #16]
 80051c6:	4313      	orrs	r3, r2
 80051c8:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80051ca:	697b      	ldr	r3, [r7, #20]
 80051cc:	08da      	lsrs	r2, r3, #3
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	3208      	adds	r2, #8
 80051d2:	0092      	lsls	r2, r2, #2
 80051d4:	6939      	ldr	r1, [r7, #16]
 80051d6:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	681b      	ldr	r3, [r3, #0]
 80051dc:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 80051de:	697b      	ldr	r3, [r7, #20]
 80051e0:	005b      	lsls	r3, r3, #1
 80051e2:	2203      	movs	r2, #3
 80051e4:	409a      	lsls	r2, r3
 80051e6:	0013      	movs	r3, r2
 80051e8:	43da      	mvns	r2, r3
 80051ea:	693b      	ldr	r3, [r7, #16]
 80051ec:	4013      	ands	r3, r2
 80051ee:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80051f0:	683b      	ldr	r3, [r7, #0]
 80051f2:	685b      	ldr	r3, [r3, #4]
 80051f4:	2203      	movs	r2, #3
 80051f6:	401a      	ands	r2, r3
 80051f8:	697b      	ldr	r3, [r7, #20]
 80051fa:	005b      	lsls	r3, r3, #1
 80051fc:	409a      	lsls	r2, r3
 80051fe:	0013      	movs	r3, r2
 8005200:	693a      	ldr	r2, [r7, #16]
 8005202:	4313      	orrs	r3, r2
 8005204:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	693a      	ldr	r2, [r7, #16]
 800520a:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800520c:	683b      	ldr	r3, [r7, #0]
 800520e:	685b      	ldr	r3, [r3, #4]
 8005210:	2b01      	cmp	r3, #1
 8005212:	d00b      	beq.n	800522c <HAL_GPIO_Init+0xd4>
 8005214:	683b      	ldr	r3, [r7, #0]
 8005216:	685b      	ldr	r3, [r3, #4]
 8005218:	2b02      	cmp	r3, #2
 800521a:	d007      	beq.n	800522c <HAL_GPIO_Init+0xd4>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800521c:	683b      	ldr	r3, [r7, #0]
 800521e:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8005220:	2b11      	cmp	r3, #17
 8005222:	d003      	beq.n	800522c <HAL_GPIO_Init+0xd4>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8005224:	683b      	ldr	r3, [r7, #0]
 8005226:	685b      	ldr	r3, [r3, #4]
 8005228:	2b12      	cmp	r3, #18
 800522a:	d130      	bne.n	800528e <HAL_GPIO_Init+0x136>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	689b      	ldr	r3, [r3, #8]
 8005230:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8005232:	697b      	ldr	r3, [r7, #20]
 8005234:	005b      	lsls	r3, r3, #1
 8005236:	2203      	movs	r2, #3
 8005238:	409a      	lsls	r2, r3
 800523a:	0013      	movs	r3, r2
 800523c:	43da      	mvns	r2, r3
 800523e:	693b      	ldr	r3, [r7, #16]
 8005240:	4013      	ands	r3, r2
 8005242:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8005244:	683b      	ldr	r3, [r7, #0]
 8005246:	68da      	ldr	r2, [r3, #12]
 8005248:	697b      	ldr	r3, [r7, #20]
 800524a:	005b      	lsls	r3, r3, #1
 800524c:	409a      	lsls	r2, r3
 800524e:	0013      	movs	r3, r2
 8005250:	693a      	ldr	r2, [r7, #16]
 8005252:	4313      	orrs	r3, r2
 8005254:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	693a      	ldr	r2, [r7, #16]
 800525a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	685b      	ldr	r3, [r3, #4]
 8005260:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8005262:	2201      	movs	r2, #1
 8005264:	697b      	ldr	r3, [r7, #20]
 8005266:	409a      	lsls	r2, r3
 8005268:	0013      	movs	r3, r2
 800526a:	43da      	mvns	r2, r3
 800526c:	693b      	ldr	r3, [r7, #16]
 800526e:	4013      	ands	r3, r2
 8005270:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8005272:	683b      	ldr	r3, [r7, #0]
 8005274:	685b      	ldr	r3, [r3, #4]
 8005276:	091b      	lsrs	r3, r3, #4
 8005278:	2201      	movs	r2, #1
 800527a:	401a      	ands	r2, r3
 800527c:	697b      	ldr	r3, [r7, #20]
 800527e:	409a      	lsls	r2, r3
 8005280:	0013      	movs	r3, r2
 8005282:	693a      	ldr	r2, [r7, #16]
 8005284:	4313      	orrs	r3, r2
 8005286:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	693a      	ldr	r2, [r7, #16]
 800528c:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	68db      	ldr	r3, [r3, #12]
 8005292:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8005294:	697b      	ldr	r3, [r7, #20]
 8005296:	005b      	lsls	r3, r3, #1
 8005298:	2203      	movs	r2, #3
 800529a:	409a      	lsls	r2, r3
 800529c:	0013      	movs	r3, r2
 800529e:	43da      	mvns	r2, r3
 80052a0:	693b      	ldr	r3, [r7, #16]
 80052a2:	4013      	ands	r3, r2
 80052a4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 80052a6:	683b      	ldr	r3, [r7, #0]
 80052a8:	689a      	ldr	r2, [r3, #8]
 80052aa:	697b      	ldr	r3, [r7, #20]
 80052ac:	005b      	lsls	r3, r3, #1
 80052ae:	409a      	lsls	r2, r3
 80052b0:	0013      	movs	r3, r2
 80052b2:	693a      	ldr	r2, [r7, #16]
 80052b4:	4313      	orrs	r3, r2
 80052b6:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	693a      	ldr	r2, [r7, #16]
 80052bc:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80052be:	683b      	ldr	r3, [r7, #0]
 80052c0:	685a      	ldr	r2, [r3, #4]
 80052c2:	2380      	movs	r3, #128	; 0x80
 80052c4:	055b      	lsls	r3, r3, #21
 80052c6:	4013      	ands	r3, r2
 80052c8:	d100      	bne.n	80052cc <HAL_GPIO_Init+0x174>
 80052ca:	e09a      	b.n	8005402 <HAL_GPIO_Init+0x2aa>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80052cc:	4b54      	ldr	r3, [pc, #336]	; (8005420 <HAL_GPIO_Init+0x2c8>)
 80052ce:	699a      	ldr	r2, [r3, #24]
 80052d0:	4b53      	ldr	r3, [pc, #332]	; (8005420 <HAL_GPIO_Init+0x2c8>)
 80052d2:	2101      	movs	r1, #1
 80052d4:	430a      	orrs	r2, r1
 80052d6:	619a      	str	r2, [r3, #24]
 80052d8:	4b51      	ldr	r3, [pc, #324]	; (8005420 <HAL_GPIO_Init+0x2c8>)
 80052da:	699b      	ldr	r3, [r3, #24]
 80052dc:	2201      	movs	r2, #1
 80052de:	4013      	ands	r3, r2
 80052e0:	60bb      	str	r3, [r7, #8]
 80052e2:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80052e4:	4a4f      	ldr	r2, [pc, #316]	; (8005424 <HAL_GPIO_Init+0x2cc>)
 80052e6:	697b      	ldr	r3, [r7, #20]
 80052e8:	089b      	lsrs	r3, r3, #2
 80052ea:	3302      	adds	r3, #2
 80052ec:	009b      	lsls	r3, r3, #2
 80052ee:	589b      	ldr	r3, [r3, r2]
 80052f0:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80052f2:	697b      	ldr	r3, [r7, #20]
 80052f4:	2203      	movs	r2, #3
 80052f6:	4013      	ands	r3, r2
 80052f8:	009b      	lsls	r3, r3, #2
 80052fa:	220f      	movs	r2, #15
 80052fc:	409a      	lsls	r2, r3
 80052fe:	0013      	movs	r3, r2
 8005300:	43da      	mvns	r2, r3
 8005302:	693b      	ldr	r3, [r7, #16]
 8005304:	4013      	ands	r3, r2
 8005306:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8005308:	687a      	ldr	r2, [r7, #4]
 800530a:	2390      	movs	r3, #144	; 0x90
 800530c:	05db      	lsls	r3, r3, #23
 800530e:	429a      	cmp	r2, r3
 8005310:	d013      	beq.n	800533a <HAL_GPIO_Init+0x1e2>
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	4a44      	ldr	r2, [pc, #272]	; (8005428 <HAL_GPIO_Init+0x2d0>)
 8005316:	4293      	cmp	r3, r2
 8005318:	d00d      	beq.n	8005336 <HAL_GPIO_Init+0x1de>
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	4a43      	ldr	r2, [pc, #268]	; (800542c <HAL_GPIO_Init+0x2d4>)
 800531e:	4293      	cmp	r3, r2
 8005320:	d007      	beq.n	8005332 <HAL_GPIO_Init+0x1da>
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	4a42      	ldr	r2, [pc, #264]	; (8005430 <HAL_GPIO_Init+0x2d8>)
 8005326:	4293      	cmp	r3, r2
 8005328:	d101      	bne.n	800532e <HAL_GPIO_Init+0x1d6>
 800532a:	2303      	movs	r3, #3
 800532c:	e006      	b.n	800533c <HAL_GPIO_Init+0x1e4>
 800532e:	2305      	movs	r3, #5
 8005330:	e004      	b.n	800533c <HAL_GPIO_Init+0x1e4>
 8005332:	2302      	movs	r3, #2
 8005334:	e002      	b.n	800533c <HAL_GPIO_Init+0x1e4>
 8005336:	2301      	movs	r3, #1
 8005338:	e000      	b.n	800533c <HAL_GPIO_Init+0x1e4>
 800533a:	2300      	movs	r3, #0
 800533c:	697a      	ldr	r2, [r7, #20]
 800533e:	2103      	movs	r1, #3
 8005340:	400a      	ands	r2, r1
 8005342:	0092      	lsls	r2, r2, #2
 8005344:	4093      	lsls	r3, r2
 8005346:	693a      	ldr	r2, [r7, #16]
 8005348:	4313      	orrs	r3, r2
 800534a:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800534c:	4935      	ldr	r1, [pc, #212]	; (8005424 <HAL_GPIO_Init+0x2cc>)
 800534e:	697b      	ldr	r3, [r7, #20]
 8005350:	089b      	lsrs	r3, r3, #2
 8005352:	3302      	adds	r3, #2
 8005354:	009b      	lsls	r3, r3, #2
 8005356:	693a      	ldr	r2, [r7, #16]
 8005358:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800535a:	4b36      	ldr	r3, [pc, #216]	; (8005434 <HAL_GPIO_Init+0x2dc>)
 800535c:	681b      	ldr	r3, [r3, #0]
 800535e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005360:	68fb      	ldr	r3, [r7, #12]
 8005362:	43da      	mvns	r2, r3
 8005364:	693b      	ldr	r3, [r7, #16]
 8005366:	4013      	ands	r3, r2
 8005368:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800536a:	683b      	ldr	r3, [r7, #0]
 800536c:	685a      	ldr	r2, [r3, #4]
 800536e:	2380      	movs	r3, #128	; 0x80
 8005370:	025b      	lsls	r3, r3, #9
 8005372:	4013      	ands	r3, r2
 8005374:	d003      	beq.n	800537e <HAL_GPIO_Init+0x226>
        {
          temp |= iocurrent;
 8005376:	693a      	ldr	r2, [r7, #16]
 8005378:	68fb      	ldr	r3, [r7, #12]
 800537a:	4313      	orrs	r3, r2
 800537c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 800537e:	4b2d      	ldr	r3, [pc, #180]	; (8005434 <HAL_GPIO_Init+0x2dc>)
 8005380:	693a      	ldr	r2, [r7, #16]
 8005382:	601a      	str	r2, [r3, #0]

        temp = EXTI->EMR;
 8005384:	4b2b      	ldr	r3, [pc, #172]	; (8005434 <HAL_GPIO_Init+0x2dc>)
 8005386:	685b      	ldr	r3, [r3, #4]
 8005388:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800538a:	68fb      	ldr	r3, [r7, #12]
 800538c:	43da      	mvns	r2, r3
 800538e:	693b      	ldr	r3, [r7, #16]
 8005390:	4013      	ands	r3, r2
 8005392:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8005394:	683b      	ldr	r3, [r7, #0]
 8005396:	685a      	ldr	r2, [r3, #4]
 8005398:	2380      	movs	r3, #128	; 0x80
 800539a:	029b      	lsls	r3, r3, #10
 800539c:	4013      	ands	r3, r2
 800539e:	d003      	beq.n	80053a8 <HAL_GPIO_Init+0x250>
        {
          temp |= iocurrent;
 80053a0:	693a      	ldr	r2, [r7, #16]
 80053a2:	68fb      	ldr	r3, [r7, #12]
 80053a4:	4313      	orrs	r3, r2
 80053a6:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 80053a8:	4b22      	ldr	r3, [pc, #136]	; (8005434 <HAL_GPIO_Init+0x2dc>)
 80053aa:	693a      	ldr	r2, [r7, #16]
 80053ac:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80053ae:	4b21      	ldr	r3, [pc, #132]	; (8005434 <HAL_GPIO_Init+0x2dc>)
 80053b0:	689b      	ldr	r3, [r3, #8]
 80053b2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80053b4:	68fb      	ldr	r3, [r7, #12]
 80053b6:	43da      	mvns	r2, r3
 80053b8:	693b      	ldr	r3, [r7, #16]
 80053ba:	4013      	ands	r3, r2
 80053bc:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80053be:	683b      	ldr	r3, [r7, #0]
 80053c0:	685a      	ldr	r2, [r3, #4]
 80053c2:	2380      	movs	r3, #128	; 0x80
 80053c4:	035b      	lsls	r3, r3, #13
 80053c6:	4013      	ands	r3, r2
 80053c8:	d003      	beq.n	80053d2 <HAL_GPIO_Init+0x27a>
        {
          temp |= iocurrent;
 80053ca:	693a      	ldr	r2, [r7, #16]
 80053cc:	68fb      	ldr	r3, [r7, #12]
 80053ce:	4313      	orrs	r3, r2
 80053d0:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 80053d2:	4b18      	ldr	r3, [pc, #96]	; (8005434 <HAL_GPIO_Init+0x2dc>)
 80053d4:	693a      	ldr	r2, [r7, #16]
 80053d6:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 80053d8:	4b16      	ldr	r3, [pc, #88]	; (8005434 <HAL_GPIO_Init+0x2dc>)
 80053da:	68db      	ldr	r3, [r3, #12]
 80053dc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80053de:	68fb      	ldr	r3, [r7, #12]
 80053e0:	43da      	mvns	r2, r3
 80053e2:	693b      	ldr	r3, [r7, #16]
 80053e4:	4013      	ands	r3, r2
 80053e6:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80053e8:	683b      	ldr	r3, [r7, #0]
 80053ea:	685a      	ldr	r2, [r3, #4]
 80053ec:	2380      	movs	r3, #128	; 0x80
 80053ee:	039b      	lsls	r3, r3, #14
 80053f0:	4013      	ands	r3, r2
 80053f2:	d003      	beq.n	80053fc <HAL_GPIO_Init+0x2a4>
        {
          temp |= iocurrent;
 80053f4:	693a      	ldr	r2, [r7, #16]
 80053f6:	68fb      	ldr	r3, [r7, #12]
 80053f8:	4313      	orrs	r3, r2
 80053fa:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 80053fc:	4b0d      	ldr	r3, [pc, #52]	; (8005434 <HAL_GPIO_Init+0x2dc>)
 80053fe:	693a      	ldr	r2, [r7, #16]
 8005400:	60da      	str	r2, [r3, #12]
      }
    }

    position++;
 8005402:	697b      	ldr	r3, [r7, #20]
 8005404:	3301      	adds	r3, #1
 8005406:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8005408:	683b      	ldr	r3, [r7, #0]
 800540a:	681a      	ldr	r2, [r3, #0]
 800540c:	697b      	ldr	r3, [r7, #20]
 800540e:	40da      	lsrs	r2, r3
 8005410:	1e13      	subs	r3, r2, #0
 8005412:	d000      	beq.n	8005416 <HAL_GPIO_Init+0x2be>
 8005414:	e6a8      	b.n	8005168 <HAL_GPIO_Init+0x10>
  } 
}
 8005416:	46c0      	nop			; (mov r8, r8)
 8005418:	46bd      	mov	sp, r7
 800541a:	b006      	add	sp, #24
 800541c:	bd80      	pop	{r7, pc}
 800541e:	46c0      	nop			; (mov r8, r8)
 8005420:	40021000 	.word	0x40021000
 8005424:	40010000 	.word	0x40010000
 8005428:	48000400 	.word	0x48000400
 800542c:	48000800 	.word	0x48000800
 8005430:	48000c00 	.word	0x48000c00
 8005434:	40010400 	.word	0x40010400

08005438 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8005438:	b580      	push	{r7, lr}
 800543a:	b084      	sub	sp, #16
 800543c:	af00      	add	r7, sp, #0
 800543e:	6078      	str	r0, [r7, #4]
 8005440:	000a      	movs	r2, r1
 8005442:	1cbb      	adds	r3, r7, #2
 8005444:	801a      	strh	r2, [r3, #0]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	691b      	ldr	r3, [r3, #16]
 800544a:	1cba      	adds	r2, r7, #2
 800544c:	8812      	ldrh	r2, [r2, #0]
 800544e:	4013      	ands	r3, r2
 8005450:	d004      	beq.n	800545c <HAL_GPIO_ReadPin+0x24>
  {
    bitstatus = GPIO_PIN_SET;
 8005452:	230f      	movs	r3, #15
 8005454:	18fb      	adds	r3, r7, r3
 8005456:	2201      	movs	r2, #1
 8005458:	701a      	strb	r2, [r3, #0]
 800545a:	e003      	b.n	8005464 <HAL_GPIO_ReadPin+0x2c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800545c:	230f      	movs	r3, #15
 800545e:	18fb      	adds	r3, r7, r3
 8005460:	2200      	movs	r2, #0
 8005462:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
 8005464:	230f      	movs	r3, #15
 8005466:	18fb      	adds	r3, r7, r3
 8005468:	781b      	ldrb	r3, [r3, #0]
  }
 800546a:	0018      	movs	r0, r3
 800546c:	46bd      	mov	sp, r7
 800546e:	b004      	add	sp, #16
 8005470:	bd80      	pop	{r7, pc}

08005472 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005472:	b580      	push	{r7, lr}
 8005474:	b082      	sub	sp, #8
 8005476:	af00      	add	r7, sp, #0
 8005478:	6078      	str	r0, [r7, #4]
 800547a:	0008      	movs	r0, r1
 800547c:	0011      	movs	r1, r2
 800547e:	1cbb      	adds	r3, r7, #2
 8005480:	1c02      	adds	r2, r0, #0
 8005482:	801a      	strh	r2, [r3, #0]
 8005484:	1c7b      	adds	r3, r7, #1
 8005486:	1c0a      	adds	r2, r1, #0
 8005488:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800548a:	1c7b      	adds	r3, r7, #1
 800548c:	781b      	ldrb	r3, [r3, #0]
 800548e:	2b00      	cmp	r3, #0
 8005490:	d004      	beq.n	800549c <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8005492:	1cbb      	adds	r3, r7, #2
 8005494:	881a      	ldrh	r2, [r3, #0]
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800549a:	e003      	b.n	80054a4 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800549c:	1cbb      	adds	r3, r7, #2
 800549e:	881a      	ldrh	r2, [r3, #0]
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	629a      	str	r2, [r3, #40]	; 0x28
}
 80054a4:	46c0      	nop			; (mov r8, r8)
 80054a6:	46bd      	mov	sp, r7
 80054a8:	b002      	add	sp, #8
 80054aa:	bd80      	pop	{r7, pc}

080054ac <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..F) to select the GPIO peripheral for STM32F0 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80054ac:	b580      	push	{r7, lr}
 80054ae:	b082      	sub	sp, #8
 80054b0:	af00      	add	r7, sp, #0
 80054b2:	6078      	str	r0, [r7, #4]
 80054b4:	000a      	movs	r2, r1
 80054b6:	1cbb      	adds	r3, r7, #2
 80054b8:	801a      	strh	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) != 0X00u)
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	695b      	ldr	r3, [r3, #20]
 80054be:	1cba      	adds	r2, r7, #2
 80054c0:	8812      	ldrh	r2, [r2, #0]
 80054c2:	4013      	ands	r3, r2
 80054c4:	d005      	beq.n	80054d2 <HAL_GPIO_TogglePin+0x26>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 80054c6:	1cbb      	adds	r3, r7, #2
 80054c8:	881b      	ldrh	r3, [r3, #0]
 80054ca:	041a      	lsls	r2, r3, #16
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
  }
}
 80054d0:	e003      	b.n	80054da <HAL_GPIO_TogglePin+0x2e>
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80054d2:	1cbb      	adds	r3, r7, #2
 80054d4:	881a      	ldrh	r2, [r3, #0]
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	619a      	str	r2, [r3, #24]
}
 80054da:	46c0      	nop			; (mov r8, r8)
 80054dc:	46bd      	mov	sp, r7
 80054de:	b002      	add	sp, #8
 80054e0:	bd80      	pop	{r7, pc}
	...

080054e4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80054e4:	b580      	push	{r7, lr}
 80054e6:	b082      	sub	sp, #8
 80054e8:	af00      	add	r7, sp, #0
 80054ea:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	2b00      	cmp	r3, #0
 80054f0:	d101      	bne.n	80054f6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80054f2:	2301      	movs	r3, #1
 80054f4:	e082      	b.n	80055fc <HAL_I2C_Init+0x118>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	2241      	movs	r2, #65	; 0x41
 80054fa:	5c9b      	ldrb	r3, [r3, r2]
 80054fc:	b2db      	uxtb	r3, r3
 80054fe:	2b00      	cmp	r3, #0
 8005500:	d107      	bne.n	8005512 <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	2240      	movs	r2, #64	; 0x40
 8005506:	2100      	movs	r1, #0
 8005508:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	0018      	movs	r0, r3
 800550e:	f7fe fd9b 	bl	8004048 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	2241      	movs	r2, #65	; 0x41
 8005516:	2124      	movs	r1, #36	; 0x24
 8005518:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	681b      	ldr	r3, [r3, #0]
 800551e:	681a      	ldr	r2, [r3, #0]
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	681b      	ldr	r3, [r3, #0]
 8005524:	2101      	movs	r1, #1
 8005526:	438a      	bics	r2, r1
 8005528:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	685a      	ldr	r2, [r3, #4]
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	681b      	ldr	r3, [r3, #0]
 8005532:	4934      	ldr	r1, [pc, #208]	; (8005604 <HAL_I2C_Init+0x120>)
 8005534:	400a      	ands	r2, r1
 8005536:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	681b      	ldr	r3, [r3, #0]
 800553c:	689a      	ldr	r2, [r3, #8]
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	681b      	ldr	r3, [r3, #0]
 8005542:	4931      	ldr	r1, [pc, #196]	; (8005608 <HAL_I2C_Init+0x124>)
 8005544:	400a      	ands	r2, r1
 8005546:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	68db      	ldr	r3, [r3, #12]
 800554c:	2b01      	cmp	r3, #1
 800554e:	d108      	bne.n	8005562 <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	689a      	ldr	r2, [r3, #8]
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	681b      	ldr	r3, [r3, #0]
 8005558:	2180      	movs	r1, #128	; 0x80
 800555a:	0209      	lsls	r1, r1, #8
 800555c:	430a      	orrs	r2, r1
 800555e:	609a      	str	r2, [r3, #8]
 8005560:	e007      	b.n	8005572 <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	689a      	ldr	r2, [r3, #8]
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	681b      	ldr	r3, [r3, #0]
 800556a:	2184      	movs	r1, #132	; 0x84
 800556c:	0209      	lsls	r1, r1, #8
 800556e:	430a      	orrs	r2, r1
 8005570:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	68db      	ldr	r3, [r3, #12]
 8005576:	2b02      	cmp	r3, #2
 8005578:	d104      	bne.n	8005584 <HAL_I2C_Init+0xa0>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	681b      	ldr	r3, [r3, #0]
 800557e:	2280      	movs	r2, #128	; 0x80
 8005580:	0112      	lsls	r2, r2, #4
 8005582:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	681b      	ldr	r3, [r3, #0]
 8005588:	685a      	ldr	r2, [r3, #4]
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	681b      	ldr	r3, [r3, #0]
 800558e:	491f      	ldr	r1, [pc, #124]	; (800560c <HAL_I2C_Init+0x128>)
 8005590:	430a      	orrs	r2, r1
 8005592:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	681b      	ldr	r3, [r3, #0]
 8005598:	68da      	ldr	r2, [r3, #12]
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	681b      	ldr	r3, [r3, #0]
 800559e:	491a      	ldr	r1, [pc, #104]	; (8005608 <HAL_I2C_Init+0x124>)
 80055a0:	400a      	ands	r2, r1
 80055a2:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	691a      	ldr	r2, [r3, #16]
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	695b      	ldr	r3, [r3, #20]
 80055ac:	431a      	orrs	r2, r3
 80055ae:	0011      	movs	r1, r2
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	699b      	ldr	r3, [r3, #24]
 80055b4:	021a      	lsls	r2, r3, #8
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	681b      	ldr	r3, [r3, #0]
 80055ba:	430a      	orrs	r2, r1
 80055bc:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	69d9      	ldr	r1, [r3, #28]
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	6a1a      	ldr	r2, [r3, #32]
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	681b      	ldr	r3, [r3, #0]
 80055ca:	430a      	orrs	r2, r1
 80055cc:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	681b      	ldr	r3, [r3, #0]
 80055d2:	681a      	ldr	r2, [r3, #0]
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	681b      	ldr	r3, [r3, #0]
 80055d8:	2101      	movs	r1, #1
 80055da:	430a      	orrs	r2, r1
 80055dc:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	2200      	movs	r2, #0
 80055e2:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	2241      	movs	r2, #65	; 0x41
 80055e8:	2120      	movs	r1, #32
 80055ea:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	2200      	movs	r2, #0
 80055f0:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	2242      	movs	r2, #66	; 0x42
 80055f6:	2100      	movs	r1, #0
 80055f8:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80055fa:	2300      	movs	r3, #0
}
 80055fc:	0018      	movs	r0, r3
 80055fe:	46bd      	mov	sp, r7
 8005600:	b002      	add	sp, #8
 8005602:	bd80      	pop	{r7, pc}
 8005604:	f0ffffff 	.word	0xf0ffffff
 8005608:	ffff7fff 	.word	0xffff7fff
 800560c:	02008000 	.word	0x02008000

08005610 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005610:	b590      	push	{r4, r7, lr}
 8005612:	b089      	sub	sp, #36	; 0x24
 8005614:	af02      	add	r7, sp, #8
 8005616:	60f8      	str	r0, [r7, #12]
 8005618:	0008      	movs	r0, r1
 800561a:	607a      	str	r2, [r7, #4]
 800561c:	0019      	movs	r1, r3
 800561e:	230a      	movs	r3, #10
 8005620:	18fb      	adds	r3, r7, r3
 8005622:	1c02      	adds	r2, r0, #0
 8005624:	801a      	strh	r2, [r3, #0]
 8005626:	2308      	movs	r3, #8
 8005628:	18fb      	adds	r3, r7, r3
 800562a:	1c0a      	adds	r2, r1, #0
 800562c:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800562e:	68fb      	ldr	r3, [r7, #12]
 8005630:	2241      	movs	r2, #65	; 0x41
 8005632:	5c9b      	ldrb	r3, [r3, r2]
 8005634:	b2db      	uxtb	r3, r3
 8005636:	2b20      	cmp	r3, #32
 8005638:	d000      	beq.n	800563c <HAL_I2C_Master_Transmit+0x2c>
 800563a:	e0e7      	b.n	800580c <HAL_I2C_Master_Transmit+0x1fc>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800563c:	68fb      	ldr	r3, [r7, #12]
 800563e:	2240      	movs	r2, #64	; 0x40
 8005640:	5c9b      	ldrb	r3, [r3, r2]
 8005642:	2b01      	cmp	r3, #1
 8005644:	d101      	bne.n	800564a <HAL_I2C_Master_Transmit+0x3a>
 8005646:	2302      	movs	r3, #2
 8005648:	e0e1      	b.n	800580e <HAL_I2C_Master_Transmit+0x1fe>
 800564a:	68fb      	ldr	r3, [r7, #12]
 800564c:	2240      	movs	r2, #64	; 0x40
 800564e:	2101      	movs	r1, #1
 8005650:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8005652:	f7fe fe79 	bl	8004348 <HAL_GetTick>
 8005656:	0003      	movs	r3, r0
 8005658:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800565a:	2380      	movs	r3, #128	; 0x80
 800565c:	0219      	lsls	r1, r3, #8
 800565e:	68f8      	ldr	r0, [r7, #12]
 8005660:	697b      	ldr	r3, [r7, #20]
 8005662:	9300      	str	r3, [sp, #0]
 8005664:	2319      	movs	r3, #25
 8005666:	2201      	movs	r2, #1
 8005668:	f000 fba8 	bl	8005dbc <I2C_WaitOnFlagUntilTimeout>
 800566c:	1e03      	subs	r3, r0, #0
 800566e:	d001      	beq.n	8005674 <HAL_I2C_Master_Transmit+0x64>
    {
      return HAL_ERROR;
 8005670:	2301      	movs	r3, #1
 8005672:	e0cc      	b.n	800580e <HAL_I2C_Master_Transmit+0x1fe>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8005674:	68fb      	ldr	r3, [r7, #12]
 8005676:	2241      	movs	r2, #65	; 0x41
 8005678:	2121      	movs	r1, #33	; 0x21
 800567a:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 800567c:	68fb      	ldr	r3, [r7, #12]
 800567e:	2242      	movs	r2, #66	; 0x42
 8005680:	2110      	movs	r1, #16
 8005682:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005684:	68fb      	ldr	r3, [r7, #12]
 8005686:	2200      	movs	r2, #0
 8005688:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800568a:	68fb      	ldr	r3, [r7, #12]
 800568c:	687a      	ldr	r2, [r7, #4]
 800568e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8005690:	68fb      	ldr	r3, [r7, #12]
 8005692:	2208      	movs	r2, #8
 8005694:	18ba      	adds	r2, r7, r2
 8005696:	8812      	ldrh	r2, [r2, #0]
 8005698:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800569a:	68fb      	ldr	r3, [r7, #12]
 800569c:	2200      	movs	r2, #0
 800569e:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80056a0:	68fb      	ldr	r3, [r7, #12]
 80056a2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80056a4:	b29b      	uxth	r3, r3
 80056a6:	2bff      	cmp	r3, #255	; 0xff
 80056a8:	d911      	bls.n	80056ce <HAL_I2C_Master_Transmit+0xbe>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80056aa:	68fb      	ldr	r3, [r7, #12]
 80056ac:	22ff      	movs	r2, #255	; 0xff
 80056ae:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 80056b0:	68fb      	ldr	r3, [r7, #12]
 80056b2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80056b4:	b2da      	uxtb	r2, r3
 80056b6:	2380      	movs	r3, #128	; 0x80
 80056b8:	045c      	lsls	r4, r3, #17
 80056ba:	230a      	movs	r3, #10
 80056bc:	18fb      	adds	r3, r7, r3
 80056be:	8819      	ldrh	r1, [r3, #0]
 80056c0:	68f8      	ldr	r0, [r7, #12]
 80056c2:	4b55      	ldr	r3, [pc, #340]	; (8005818 <HAL_I2C_Master_Transmit+0x208>)
 80056c4:	9300      	str	r3, [sp, #0]
 80056c6:	0023      	movs	r3, r4
 80056c8:	f000 fc98 	bl	8005ffc <I2C_TransferConfig>
 80056cc:	e075      	b.n	80057ba <HAL_I2C_Master_Transmit+0x1aa>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80056ce:	68fb      	ldr	r3, [r7, #12]
 80056d0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80056d2:	b29a      	uxth	r2, r3
 80056d4:	68fb      	ldr	r3, [r7, #12]
 80056d6:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_WRITE);
 80056d8:	68fb      	ldr	r3, [r7, #12]
 80056da:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80056dc:	b2da      	uxtb	r2, r3
 80056de:	2380      	movs	r3, #128	; 0x80
 80056e0:	049c      	lsls	r4, r3, #18
 80056e2:	230a      	movs	r3, #10
 80056e4:	18fb      	adds	r3, r7, r3
 80056e6:	8819      	ldrh	r1, [r3, #0]
 80056e8:	68f8      	ldr	r0, [r7, #12]
 80056ea:	4b4b      	ldr	r3, [pc, #300]	; (8005818 <HAL_I2C_Master_Transmit+0x208>)
 80056ec:	9300      	str	r3, [sp, #0]
 80056ee:	0023      	movs	r3, r4
 80056f0:	f000 fc84 	bl	8005ffc <I2C_TransferConfig>
    }

    while (hi2c->XferCount > 0U)
 80056f4:	e061      	b.n	80057ba <HAL_I2C_Master_Transmit+0x1aa>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80056f6:	697a      	ldr	r2, [r7, #20]
 80056f8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80056fa:	68fb      	ldr	r3, [r7, #12]
 80056fc:	0018      	movs	r0, r3
 80056fe:	f000 fb9c 	bl	8005e3a <I2C_WaitOnTXISFlagUntilTimeout>
 8005702:	1e03      	subs	r3, r0, #0
 8005704:	d001      	beq.n	800570a <HAL_I2C_Master_Transmit+0xfa>
      {
        return HAL_ERROR;
 8005706:	2301      	movs	r3, #1
 8005708:	e081      	b.n	800580e <HAL_I2C_Master_Transmit+0x1fe>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800570a:	68fb      	ldr	r3, [r7, #12]
 800570c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800570e:	781a      	ldrb	r2, [r3, #0]
 8005710:	68fb      	ldr	r3, [r7, #12]
 8005712:	681b      	ldr	r3, [r3, #0]
 8005714:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005716:	68fb      	ldr	r3, [r7, #12]
 8005718:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800571a:	1c5a      	adds	r2, r3, #1
 800571c:	68fb      	ldr	r3, [r7, #12]
 800571e:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8005720:	68fb      	ldr	r3, [r7, #12]
 8005722:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005724:	b29b      	uxth	r3, r3
 8005726:	3b01      	subs	r3, #1
 8005728:	b29a      	uxth	r2, r3
 800572a:	68fb      	ldr	r3, [r7, #12]
 800572c:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800572e:	68fb      	ldr	r3, [r7, #12]
 8005730:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005732:	3b01      	subs	r3, #1
 8005734:	b29a      	uxth	r2, r3
 8005736:	68fb      	ldr	r3, [r7, #12]
 8005738:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800573a:	68fb      	ldr	r3, [r7, #12]
 800573c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800573e:	b29b      	uxth	r3, r3
 8005740:	2b00      	cmp	r3, #0
 8005742:	d03a      	beq.n	80057ba <HAL_I2C_Master_Transmit+0x1aa>
 8005744:	68fb      	ldr	r3, [r7, #12]
 8005746:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005748:	2b00      	cmp	r3, #0
 800574a:	d136      	bne.n	80057ba <HAL_I2C_Master_Transmit+0x1aa>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800574c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800574e:	68f8      	ldr	r0, [r7, #12]
 8005750:	697b      	ldr	r3, [r7, #20]
 8005752:	9300      	str	r3, [sp, #0]
 8005754:	0013      	movs	r3, r2
 8005756:	2200      	movs	r2, #0
 8005758:	2180      	movs	r1, #128	; 0x80
 800575a:	f000 fb2f 	bl	8005dbc <I2C_WaitOnFlagUntilTimeout>
 800575e:	1e03      	subs	r3, r0, #0
 8005760:	d001      	beq.n	8005766 <HAL_I2C_Master_Transmit+0x156>
        {
          return HAL_ERROR;
 8005762:	2301      	movs	r3, #1
 8005764:	e053      	b.n	800580e <HAL_I2C_Master_Transmit+0x1fe>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005766:	68fb      	ldr	r3, [r7, #12]
 8005768:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800576a:	b29b      	uxth	r3, r3
 800576c:	2bff      	cmp	r3, #255	; 0xff
 800576e:	d911      	bls.n	8005794 <HAL_I2C_Master_Transmit+0x184>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8005770:	68fb      	ldr	r3, [r7, #12]
 8005772:	22ff      	movs	r2, #255	; 0xff
 8005774:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8005776:	68fb      	ldr	r3, [r7, #12]
 8005778:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800577a:	b2da      	uxtb	r2, r3
 800577c:	2380      	movs	r3, #128	; 0x80
 800577e:	045c      	lsls	r4, r3, #17
 8005780:	230a      	movs	r3, #10
 8005782:	18fb      	adds	r3, r7, r3
 8005784:	8819      	ldrh	r1, [r3, #0]
 8005786:	68f8      	ldr	r0, [r7, #12]
 8005788:	2300      	movs	r3, #0
 800578a:	9300      	str	r3, [sp, #0]
 800578c:	0023      	movs	r3, r4
 800578e:	f000 fc35 	bl	8005ffc <I2C_TransferConfig>
 8005792:	e012      	b.n	80057ba <HAL_I2C_Master_Transmit+0x1aa>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8005794:	68fb      	ldr	r3, [r7, #12]
 8005796:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005798:	b29a      	uxth	r2, r3
 800579a:	68fb      	ldr	r3, [r7, #12]
 800579c:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800579e:	68fb      	ldr	r3, [r7, #12]
 80057a0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80057a2:	b2da      	uxtb	r2, r3
 80057a4:	2380      	movs	r3, #128	; 0x80
 80057a6:	049c      	lsls	r4, r3, #18
 80057a8:	230a      	movs	r3, #10
 80057aa:	18fb      	adds	r3, r7, r3
 80057ac:	8819      	ldrh	r1, [r3, #0]
 80057ae:	68f8      	ldr	r0, [r7, #12]
 80057b0:	2300      	movs	r3, #0
 80057b2:	9300      	str	r3, [sp, #0]
 80057b4:	0023      	movs	r3, r4
 80057b6:	f000 fc21 	bl	8005ffc <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 80057ba:	68fb      	ldr	r3, [r7, #12]
 80057bc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80057be:	b29b      	uxth	r3, r3
 80057c0:	2b00      	cmp	r3, #0
 80057c2:	d198      	bne.n	80056f6 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80057c4:	697a      	ldr	r2, [r7, #20]
 80057c6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80057c8:	68fb      	ldr	r3, [r7, #12]
 80057ca:	0018      	movs	r0, r3
 80057cc:	f000 fb74 	bl	8005eb8 <I2C_WaitOnSTOPFlagUntilTimeout>
 80057d0:	1e03      	subs	r3, r0, #0
 80057d2:	d001      	beq.n	80057d8 <HAL_I2C_Master_Transmit+0x1c8>
    {
      return HAL_ERROR;
 80057d4:	2301      	movs	r3, #1
 80057d6:	e01a      	b.n	800580e <HAL_I2C_Master_Transmit+0x1fe>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80057d8:	68fb      	ldr	r3, [r7, #12]
 80057da:	681b      	ldr	r3, [r3, #0]
 80057dc:	2220      	movs	r2, #32
 80057de:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80057e0:	68fb      	ldr	r3, [r7, #12]
 80057e2:	681b      	ldr	r3, [r3, #0]
 80057e4:	685a      	ldr	r2, [r3, #4]
 80057e6:	68fb      	ldr	r3, [r7, #12]
 80057e8:	681b      	ldr	r3, [r3, #0]
 80057ea:	490c      	ldr	r1, [pc, #48]	; (800581c <HAL_I2C_Master_Transmit+0x20c>)
 80057ec:	400a      	ands	r2, r1
 80057ee:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80057f0:	68fb      	ldr	r3, [r7, #12]
 80057f2:	2241      	movs	r2, #65	; 0x41
 80057f4:	2120      	movs	r1, #32
 80057f6:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80057f8:	68fb      	ldr	r3, [r7, #12]
 80057fa:	2242      	movs	r2, #66	; 0x42
 80057fc:	2100      	movs	r1, #0
 80057fe:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005800:	68fb      	ldr	r3, [r7, #12]
 8005802:	2240      	movs	r2, #64	; 0x40
 8005804:	2100      	movs	r1, #0
 8005806:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8005808:	2300      	movs	r3, #0
 800580a:	e000      	b.n	800580e <HAL_I2C_Master_Transmit+0x1fe>
  }
  else
  {
    return HAL_BUSY;
 800580c:	2302      	movs	r3, #2
  }
}
 800580e:	0018      	movs	r0, r3
 8005810:	46bd      	mov	sp, r7
 8005812:	b007      	add	sp, #28
 8005814:	bd90      	pop	{r4, r7, pc}
 8005816:	46c0      	nop			; (mov r8, r8)
 8005818:	80002000 	.word	0x80002000
 800581c:	fe00e800 	.word	0xfe00e800

08005820 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005820:	b590      	push	{r4, r7, lr}
 8005822:	b089      	sub	sp, #36	; 0x24
 8005824:	af02      	add	r7, sp, #8
 8005826:	60f8      	str	r0, [r7, #12]
 8005828:	000c      	movs	r4, r1
 800582a:	0010      	movs	r0, r2
 800582c:	0019      	movs	r1, r3
 800582e:	230a      	movs	r3, #10
 8005830:	18fb      	adds	r3, r7, r3
 8005832:	1c22      	adds	r2, r4, #0
 8005834:	801a      	strh	r2, [r3, #0]
 8005836:	2308      	movs	r3, #8
 8005838:	18fb      	adds	r3, r7, r3
 800583a:	1c02      	adds	r2, r0, #0
 800583c:	801a      	strh	r2, [r3, #0]
 800583e:	1dbb      	adds	r3, r7, #6
 8005840:	1c0a      	adds	r2, r1, #0
 8005842:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005844:	68fb      	ldr	r3, [r7, #12]
 8005846:	2241      	movs	r2, #65	; 0x41
 8005848:	5c9b      	ldrb	r3, [r3, r2]
 800584a:	b2db      	uxtb	r3, r3
 800584c:	2b20      	cmp	r3, #32
 800584e:	d000      	beq.n	8005852 <HAL_I2C_Mem_Write+0x32>
 8005850:	e10c      	b.n	8005a6c <HAL_I2C_Mem_Write+0x24c>
  {
    if ((pData == NULL) || (Size == 0U))
 8005852:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005854:	2b00      	cmp	r3, #0
 8005856:	d004      	beq.n	8005862 <HAL_I2C_Mem_Write+0x42>
 8005858:	232c      	movs	r3, #44	; 0x2c
 800585a:	18fb      	adds	r3, r7, r3
 800585c:	881b      	ldrh	r3, [r3, #0]
 800585e:	2b00      	cmp	r3, #0
 8005860:	d105      	bne.n	800586e <HAL_I2C_Mem_Write+0x4e>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8005862:	68fb      	ldr	r3, [r7, #12]
 8005864:	2280      	movs	r2, #128	; 0x80
 8005866:	0092      	lsls	r2, r2, #2
 8005868:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 800586a:	2301      	movs	r3, #1
 800586c:	e0ff      	b.n	8005a6e <HAL_I2C_Mem_Write+0x24e>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800586e:	68fb      	ldr	r3, [r7, #12]
 8005870:	2240      	movs	r2, #64	; 0x40
 8005872:	5c9b      	ldrb	r3, [r3, r2]
 8005874:	2b01      	cmp	r3, #1
 8005876:	d101      	bne.n	800587c <HAL_I2C_Mem_Write+0x5c>
 8005878:	2302      	movs	r3, #2
 800587a:	e0f8      	b.n	8005a6e <HAL_I2C_Mem_Write+0x24e>
 800587c:	68fb      	ldr	r3, [r7, #12]
 800587e:	2240      	movs	r2, #64	; 0x40
 8005880:	2101      	movs	r1, #1
 8005882:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8005884:	f7fe fd60 	bl	8004348 <HAL_GetTick>
 8005888:	0003      	movs	r3, r0
 800588a:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800588c:	2380      	movs	r3, #128	; 0x80
 800588e:	0219      	lsls	r1, r3, #8
 8005890:	68f8      	ldr	r0, [r7, #12]
 8005892:	697b      	ldr	r3, [r7, #20]
 8005894:	9300      	str	r3, [sp, #0]
 8005896:	2319      	movs	r3, #25
 8005898:	2201      	movs	r2, #1
 800589a:	f000 fa8f 	bl	8005dbc <I2C_WaitOnFlagUntilTimeout>
 800589e:	1e03      	subs	r3, r0, #0
 80058a0:	d001      	beq.n	80058a6 <HAL_I2C_Mem_Write+0x86>
    {
      return HAL_ERROR;
 80058a2:	2301      	movs	r3, #1
 80058a4:	e0e3      	b.n	8005a6e <HAL_I2C_Mem_Write+0x24e>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80058a6:	68fb      	ldr	r3, [r7, #12]
 80058a8:	2241      	movs	r2, #65	; 0x41
 80058aa:	2121      	movs	r1, #33	; 0x21
 80058ac:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80058ae:	68fb      	ldr	r3, [r7, #12]
 80058b0:	2242      	movs	r2, #66	; 0x42
 80058b2:	2140      	movs	r1, #64	; 0x40
 80058b4:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80058b6:	68fb      	ldr	r3, [r7, #12]
 80058b8:	2200      	movs	r2, #0
 80058ba:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80058bc:	68fb      	ldr	r3, [r7, #12]
 80058be:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80058c0:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80058c2:	68fb      	ldr	r3, [r7, #12]
 80058c4:	222c      	movs	r2, #44	; 0x2c
 80058c6:	18ba      	adds	r2, r7, r2
 80058c8:	8812      	ldrh	r2, [r2, #0]
 80058ca:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80058cc:	68fb      	ldr	r3, [r7, #12]
 80058ce:	2200      	movs	r2, #0
 80058d0:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80058d2:	1dbb      	adds	r3, r7, #6
 80058d4:	881c      	ldrh	r4, [r3, #0]
 80058d6:	2308      	movs	r3, #8
 80058d8:	18fb      	adds	r3, r7, r3
 80058da:	881a      	ldrh	r2, [r3, #0]
 80058dc:	230a      	movs	r3, #10
 80058de:	18fb      	adds	r3, r7, r3
 80058e0:	8819      	ldrh	r1, [r3, #0]
 80058e2:	68f8      	ldr	r0, [r7, #12]
 80058e4:	697b      	ldr	r3, [r7, #20]
 80058e6:	9301      	str	r3, [sp, #4]
 80058e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80058ea:	9300      	str	r3, [sp, #0]
 80058ec:	0023      	movs	r3, r4
 80058ee:	f000 f9df 	bl	8005cb0 <I2C_RequestMemoryWrite>
 80058f2:	1e03      	subs	r3, r0, #0
 80058f4:	d005      	beq.n	8005902 <HAL_I2C_Mem_Write+0xe2>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80058f6:	68fb      	ldr	r3, [r7, #12]
 80058f8:	2240      	movs	r2, #64	; 0x40
 80058fa:	2100      	movs	r1, #0
 80058fc:	5499      	strb	r1, [r3, r2]
      return HAL_ERROR;
 80058fe:	2301      	movs	r3, #1
 8005900:	e0b5      	b.n	8005a6e <HAL_I2C_Mem_Write+0x24e>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005902:	68fb      	ldr	r3, [r7, #12]
 8005904:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005906:	b29b      	uxth	r3, r3
 8005908:	2bff      	cmp	r3, #255	; 0xff
 800590a:	d911      	bls.n	8005930 <HAL_I2C_Mem_Write+0x110>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800590c:	68fb      	ldr	r3, [r7, #12]
 800590e:	22ff      	movs	r2, #255	; 0xff
 8005910:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8005912:	68fb      	ldr	r3, [r7, #12]
 8005914:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005916:	b2da      	uxtb	r2, r3
 8005918:	2380      	movs	r3, #128	; 0x80
 800591a:	045c      	lsls	r4, r3, #17
 800591c:	230a      	movs	r3, #10
 800591e:	18fb      	adds	r3, r7, r3
 8005920:	8819      	ldrh	r1, [r3, #0]
 8005922:	68f8      	ldr	r0, [r7, #12]
 8005924:	2300      	movs	r3, #0
 8005926:	9300      	str	r3, [sp, #0]
 8005928:	0023      	movs	r3, r4
 800592a:	f000 fb67 	bl	8005ffc <I2C_TransferConfig>
 800592e:	e012      	b.n	8005956 <HAL_I2C_Mem_Write+0x136>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8005930:	68fb      	ldr	r3, [r7, #12]
 8005932:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005934:	b29a      	uxth	r2, r3
 8005936:	68fb      	ldr	r3, [r7, #12]
 8005938:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800593a:	68fb      	ldr	r3, [r7, #12]
 800593c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800593e:	b2da      	uxtb	r2, r3
 8005940:	2380      	movs	r3, #128	; 0x80
 8005942:	049c      	lsls	r4, r3, #18
 8005944:	230a      	movs	r3, #10
 8005946:	18fb      	adds	r3, r7, r3
 8005948:	8819      	ldrh	r1, [r3, #0]
 800594a:	68f8      	ldr	r0, [r7, #12]
 800594c:	2300      	movs	r3, #0
 800594e:	9300      	str	r3, [sp, #0]
 8005950:	0023      	movs	r3, r4
 8005952:	f000 fb53 	bl	8005ffc <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005956:	697a      	ldr	r2, [r7, #20]
 8005958:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800595a:	68fb      	ldr	r3, [r7, #12]
 800595c:	0018      	movs	r0, r3
 800595e:	f000 fa6c 	bl	8005e3a <I2C_WaitOnTXISFlagUntilTimeout>
 8005962:	1e03      	subs	r3, r0, #0
 8005964:	d001      	beq.n	800596a <HAL_I2C_Mem_Write+0x14a>
      {
        return HAL_ERROR;
 8005966:	2301      	movs	r3, #1
 8005968:	e081      	b.n	8005a6e <HAL_I2C_Mem_Write+0x24e>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800596a:	68fb      	ldr	r3, [r7, #12]
 800596c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800596e:	781a      	ldrb	r2, [r3, #0]
 8005970:	68fb      	ldr	r3, [r7, #12]
 8005972:	681b      	ldr	r3, [r3, #0]
 8005974:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005976:	68fb      	ldr	r3, [r7, #12]
 8005978:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800597a:	1c5a      	adds	r2, r3, #1
 800597c:	68fb      	ldr	r3, [r7, #12]
 800597e:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8005980:	68fb      	ldr	r3, [r7, #12]
 8005982:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005984:	b29b      	uxth	r3, r3
 8005986:	3b01      	subs	r3, #1
 8005988:	b29a      	uxth	r2, r3
 800598a:	68fb      	ldr	r3, [r7, #12]
 800598c:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800598e:	68fb      	ldr	r3, [r7, #12]
 8005990:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005992:	3b01      	subs	r3, #1
 8005994:	b29a      	uxth	r2, r3
 8005996:	68fb      	ldr	r3, [r7, #12]
 8005998:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800599a:	68fb      	ldr	r3, [r7, #12]
 800599c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800599e:	b29b      	uxth	r3, r3
 80059a0:	2b00      	cmp	r3, #0
 80059a2:	d03a      	beq.n	8005a1a <HAL_I2C_Mem_Write+0x1fa>
 80059a4:	68fb      	ldr	r3, [r7, #12]
 80059a6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80059a8:	2b00      	cmp	r3, #0
 80059aa:	d136      	bne.n	8005a1a <HAL_I2C_Mem_Write+0x1fa>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80059ac:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80059ae:	68f8      	ldr	r0, [r7, #12]
 80059b0:	697b      	ldr	r3, [r7, #20]
 80059b2:	9300      	str	r3, [sp, #0]
 80059b4:	0013      	movs	r3, r2
 80059b6:	2200      	movs	r2, #0
 80059b8:	2180      	movs	r1, #128	; 0x80
 80059ba:	f000 f9ff 	bl	8005dbc <I2C_WaitOnFlagUntilTimeout>
 80059be:	1e03      	subs	r3, r0, #0
 80059c0:	d001      	beq.n	80059c6 <HAL_I2C_Mem_Write+0x1a6>
        {
          return HAL_ERROR;
 80059c2:	2301      	movs	r3, #1
 80059c4:	e053      	b.n	8005a6e <HAL_I2C_Mem_Write+0x24e>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80059c6:	68fb      	ldr	r3, [r7, #12]
 80059c8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80059ca:	b29b      	uxth	r3, r3
 80059cc:	2bff      	cmp	r3, #255	; 0xff
 80059ce:	d911      	bls.n	80059f4 <HAL_I2C_Mem_Write+0x1d4>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80059d0:	68fb      	ldr	r3, [r7, #12]
 80059d2:	22ff      	movs	r2, #255	; 0xff
 80059d4:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80059d6:	68fb      	ldr	r3, [r7, #12]
 80059d8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80059da:	b2da      	uxtb	r2, r3
 80059dc:	2380      	movs	r3, #128	; 0x80
 80059de:	045c      	lsls	r4, r3, #17
 80059e0:	230a      	movs	r3, #10
 80059e2:	18fb      	adds	r3, r7, r3
 80059e4:	8819      	ldrh	r1, [r3, #0]
 80059e6:	68f8      	ldr	r0, [r7, #12]
 80059e8:	2300      	movs	r3, #0
 80059ea:	9300      	str	r3, [sp, #0]
 80059ec:	0023      	movs	r3, r4
 80059ee:	f000 fb05 	bl	8005ffc <I2C_TransferConfig>
 80059f2:	e012      	b.n	8005a1a <HAL_I2C_Mem_Write+0x1fa>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80059f4:	68fb      	ldr	r3, [r7, #12]
 80059f6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80059f8:	b29a      	uxth	r2, r3
 80059fa:	68fb      	ldr	r3, [r7, #12]
 80059fc:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80059fe:	68fb      	ldr	r3, [r7, #12]
 8005a00:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005a02:	b2da      	uxtb	r2, r3
 8005a04:	2380      	movs	r3, #128	; 0x80
 8005a06:	049c      	lsls	r4, r3, #18
 8005a08:	230a      	movs	r3, #10
 8005a0a:	18fb      	adds	r3, r7, r3
 8005a0c:	8819      	ldrh	r1, [r3, #0]
 8005a0e:	68f8      	ldr	r0, [r7, #12]
 8005a10:	2300      	movs	r3, #0
 8005a12:	9300      	str	r3, [sp, #0]
 8005a14:	0023      	movs	r3, r4
 8005a16:	f000 faf1 	bl	8005ffc <I2C_TransferConfig>
        }
      }

    }
    while (hi2c->XferCount > 0U);
 8005a1a:	68fb      	ldr	r3, [r7, #12]
 8005a1c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005a1e:	b29b      	uxth	r3, r3
 8005a20:	2b00      	cmp	r3, #0
 8005a22:	d198      	bne.n	8005956 <HAL_I2C_Mem_Write+0x136>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005a24:	697a      	ldr	r2, [r7, #20]
 8005a26:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005a28:	68fb      	ldr	r3, [r7, #12]
 8005a2a:	0018      	movs	r0, r3
 8005a2c:	f000 fa44 	bl	8005eb8 <I2C_WaitOnSTOPFlagUntilTimeout>
 8005a30:	1e03      	subs	r3, r0, #0
 8005a32:	d001      	beq.n	8005a38 <HAL_I2C_Mem_Write+0x218>
    {
      return HAL_ERROR;
 8005a34:	2301      	movs	r3, #1
 8005a36:	e01a      	b.n	8005a6e <HAL_I2C_Mem_Write+0x24e>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005a38:	68fb      	ldr	r3, [r7, #12]
 8005a3a:	681b      	ldr	r3, [r3, #0]
 8005a3c:	2220      	movs	r2, #32
 8005a3e:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8005a40:	68fb      	ldr	r3, [r7, #12]
 8005a42:	681b      	ldr	r3, [r3, #0]
 8005a44:	685a      	ldr	r2, [r3, #4]
 8005a46:	68fb      	ldr	r3, [r7, #12]
 8005a48:	681b      	ldr	r3, [r3, #0]
 8005a4a:	490b      	ldr	r1, [pc, #44]	; (8005a78 <HAL_I2C_Mem_Write+0x258>)
 8005a4c:	400a      	ands	r2, r1
 8005a4e:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8005a50:	68fb      	ldr	r3, [r7, #12]
 8005a52:	2241      	movs	r2, #65	; 0x41
 8005a54:	2120      	movs	r1, #32
 8005a56:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8005a58:	68fb      	ldr	r3, [r7, #12]
 8005a5a:	2242      	movs	r2, #66	; 0x42
 8005a5c:	2100      	movs	r1, #0
 8005a5e:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005a60:	68fb      	ldr	r3, [r7, #12]
 8005a62:	2240      	movs	r2, #64	; 0x40
 8005a64:	2100      	movs	r1, #0
 8005a66:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8005a68:	2300      	movs	r3, #0
 8005a6a:	e000      	b.n	8005a6e <HAL_I2C_Mem_Write+0x24e>
  }
  else
  {
    return HAL_BUSY;
 8005a6c:	2302      	movs	r3, #2
  }
}
 8005a6e:	0018      	movs	r0, r3
 8005a70:	46bd      	mov	sp, r7
 8005a72:	b007      	add	sp, #28
 8005a74:	bd90      	pop	{r4, r7, pc}
 8005a76:	46c0      	nop			; (mov r8, r8)
 8005a78:	fe00e800 	.word	0xfe00e800

08005a7c <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 8005a7c:	b580      	push	{r7, lr}
 8005a7e:	b08a      	sub	sp, #40	; 0x28
 8005a80:	af02      	add	r7, sp, #8
 8005a82:	60f8      	str	r0, [r7, #12]
 8005a84:	607a      	str	r2, [r7, #4]
 8005a86:	603b      	str	r3, [r7, #0]
 8005a88:	230a      	movs	r3, #10
 8005a8a:	18fb      	adds	r3, r7, r3
 8005a8c:	1c0a      	adds	r2, r1, #0
 8005a8e:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  __IO uint32_t I2C_Trials = 0UL;
 8005a90:	2300      	movs	r3, #0
 8005a92:	617b      	str	r3, [r7, #20]

  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005a94:	68fb      	ldr	r3, [r7, #12]
 8005a96:	2241      	movs	r2, #65	; 0x41
 8005a98:	5c9b      	ldrb	r3, [r3, r2]
 8005a9a:	b2db      	uxtb	r3, r3
 8005a9c:	2b20      	cmp	r3, #32
 8005a9e:	d000      	beq.n	8005aa2 <HAL_I2C_IsDeviceReady+0x26>
 8005aa0:	e0fe      	b.n	8005ca0 <HAL_I2C_IsDeviceReady+0x224>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 8005aa2:	68fb      	ldr	r3, [r7, #12]
 8005aa4:	681b      	ldr	r3, [r3, #0]
 8005aa6:	699a      	ldr	r2, [r3, #24]
 8005aa8:	2380      	movs	r3, #128	; 0x80
 8005aaa:	021b      	lsls	r3, r3, #8
 8005aac:	401a      	ands	r2, r3
 8005aae:	2380      	movs	r3, #128	; 0x80
 8005ab0:	021b      	lsls	r3, r3, #8
 8005ab2:	429a      	cmp	r2, r3
 8005ab4:	d101      	bne.n	8005aba <HAL_I2C_IsDeviceReady+0x3e>
    {
      return HAL_BUSY;
 8005ab6:	2302      	movs	r3, #2
 8005ab8:	e0f3      	b.n	8005ca2 <HAL_I2C_IsDeviceReady+0x226>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005aba:	68fb      	ldr	r3, [r7, #12]
 8005abc:	2240      	movs	r2, #64	; 0x40
 8005abe:	5c9b      	ldrb	r3, [r3, r2]
 8005ac0:	2b01      	cmp	r3, #1
 8005ac2:	d101      	bne.n	8005ac8 <HAL_I2C_IsDeviceReady+0x4c>
 8005ac4:	2302      	movs	r3, #2
 8005ac6:	e0ec      	b.n	8005ca2 <HAL_I2C_IsDeviceReady+0x226>
 8005ac8:	68fb      	ldr	r3, [r7, #12]
 8005aca:	2240      	movs	r2, #64	; 0x40
 8005acc:	2101      	movs	r1, #1
 8005ace:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8005ad0:	68fb      	ldr	r3, [r7, #12]
 8005ad2:	2241      	movs	r2, #65	; 0x41
 8005ad4:	2124      	movs	r1, #36	; 0x24
 8005ad6:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005ad8:	68fb      	ldr	r3, [r7, #12]
 8005ada:	2200      	movs	r2, #0
 8005adc:	645a      	str	r2, [r3, #68]	; 0x44

    do
    {
      /* Generate Start */
      hi2c->Instance->CR2 = I2C_GENERATE_START(hi2c->Init.AddressingMode, DevAddress);
 8005ade:	68fb      	ldr	r3, [r7, #12]
 8005ae0:	68db      	ldr	r3, [r3, #12]
 8005ae2:	2b01      	cmp	r3, #1
 8005ae4:	d107      	bne.n	8005af6 <HAL_I2C_IsDeviceReady+0x7a>
 8005ae6:	230a      	movs	r3, #10
 8005ae8:	18fb      	adds	r3, r7, r3
 8005aea:	881b      	ldrh	r3, [r3, #0]
 8005aec:	059b      	lsls	r3, r3, #22
 8005aee:	0d9b      	lsrs	r3, r3, #22
 8005af0:	4a6e      	ldr	r2, [pc, #440]	; (8005cac <HAL_I2C_IsDeviceReady+0x230>)
 8005af2:	431a      	orrs	r2, r3
 8005af4:	e007      	b.n	8005b06 <HAL_I2C_IsDeviceReady+0x8a>
 8005af6:	230a      	movs	r3, #10
 8005af8:	18fb      	adds	r3, r7, r3
 8005afa:	881b      	ldrh	r3, [r3, #0]
 8005afc:	059b      	lsls	r3, r3, #22
 8005afe:	0d9b      	lsrs	r3, r3, #22
 8005b00:	22a0      	movs	r2, #160	; 0xa0
 8005b02:	0192      	lsls	r2, r2, #6
 8005b04:	431a      	orrs	r2, r3
 8005b06:	68fb      	ldr	r3, [r7, #12]
 8005b08:	681b      	ldr	r3, [r3, #0]
 8005b0a:	605a      	str	r2, [r3, #4]

      /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
      /* Wait until STOPF flag is set or a NACK flag is set*/
      tickstart = HAL_GetTick();
 8005b0c:	f7fe fc1c 	bl	8004348 <HAL_GetTick>
 8005b10:	0003      	movs	r3, r0
 8005b12:	61bb      	str	r3, [r7, #24]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 8005b14:	68fb      	ldr	r3, [r7, #12]
 8005b16:	681b      	ldr	r3, [r3, #0]
 8005b18:	699b      	ldr	r3, [r3, #24]
 8005b1a:	2220      	movs	r2, #32
 8005b1c:	4013      	ands	r3, r2
 8005b1e:	3b20      	subs	r3, #32
 8005b20:	425a      	negs	r2, r3
 8005b22:	4153      	adcs	r3, r2
 8005b24:	b2da      	uxtb	r2, r3
 8005b26:	231f      	movs	r3, #31
 8005b28:	18fb      	adds	r3, r7, r3
 8005b2a:	701a      	strb	r2, [r3, #0]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8005b2c:	68fb      	ldr	r3, [r7, #12]
 8005b2e:	681b      	ldr	r3, [r3, #0]
 8005b30:	699b      	ldr	r3, [r3, #24]
 8005b32:	2210      	movs	r2, #16
 8005b34:	4013      	ands	r3, r2
 8005b36:	3b10      	subs	r3, #16
 8005b38:	425a      	negs	r2, r3
 8005b3a:	4153      	adcs	r3, r2
 8005b3c:	b2da      	uxtb	r2, r3
 8005b3e:	231e      	movs	r3, #30
 8005b40:	18fb      	adds	r3, r7, r3
 8005b42:	701a      	strb	r2, [r3, #0]

      while ((tmp1 == RESET) && (tmp2 == RESET))
 8005b44:	e035      	b.n	8005bb2 <HAL_I2C_IsDeviceReady+0x136>
      {
        if (Timeout != HAL_MAX_DELAY)
 8005b46:	683b      	ldr	r3, [r7, #0]
 8005b48:	3301      	adds	r3, #1
 8005b4a:	d01a      	beq.n	8005b82 <HAL_I2C_IsDeviceReady+0x106>
        {
          if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8005b4c:	f7fe fbfc 	bl	8004348 <HAL_GetTick>
 8005b50:	0002      	movs	r2, r0
 8005b52:	69bb      	ldr	r3, [r7, #24]
 8005b54:	1ad3      	subs	r3, r2, r3
 8005b56:	683a      	ldr	r2, [r7, #0]
 8005b58:	429a      	cmp	r2, r3
 8005b5a:	d302      	bcc.n	8005b62 <HAL_I2C_IsDeviceReady+0xe6>
 8005b5c:	683b      	ldr	r3, [r7, #0]
 8005b5e:	2b00      	cmp	r3, #0
 8005b60:	d10f      	bne.n	8005b82 <HAL_I2C_IsDeviceReady+0x106>
          {
            /* Update I2C state */
            hi2c->State = HAL_I2C_STATE_READY;
 8005b62:	68fb      	ldr	r3, [r7, #12]
 8005b64:	2241      	movs	r2, #65	; 0x41
 8005b66:	2120      	movs	r1, #32
 8005b68:	5499      	strb	r1, [r3, r2]

            /* Update I2C error code */
            hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005b6a:	68fb      	ldr	r3, [r7, #12]
 8005b6c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005b6e:	2220      	movs	r2, #32
 8005b70:	431a      	orrs	r2, r3
 8005b72:	68fb      	ldr	r3, [r7, #12]
 8005b74:	645a      	str	r2, [r3, #68]	; 0x44

            /* Process Unlocked */
            __HAL_UNLOCK(hi2c);
 8005b76:	68fb      	ldr	r3, [r7, #12]
 8005b78:	2240      	movs	r2, #64	; 0x40
 8005b7a:	2100      	movs	r1, #0
 8005b7c:	5499      	strb	r1, [r3, r2]

            return HAL_ERROR;
 8005b7e:	2301      	movs	r3, #1
 8005b80:	e08f      	b.n	8005ca2 <HAL_I2C_IsDeviceReady+0x226>
          }
        }

        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 8005b82:	68fb      	ldr	r3, [r7, #12]
 8005b84:	681b      	ldr	r3, [r3, #0]
 8005b86:	699b      	ldr	r3, [r3, #24]
 8005b88:	2220      	movs	r2, #32
 8005b8a:	4013      	ands	r3, r2
 8005b8c:	3b20      	subs	r3, #32
 8005b8e:	425a      	negs	r2, r3
 8005b90:	4153      	adcs	r3, r2
 8005b92:	b2da      	uxtb	r2, r3
 8005b94:	231f      	movs	r3, #31
 8005b96:	18fb      	adds	r3, r7, r3
 8005b98:	701a      	strb	r2, [r3, #0]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8005b9a:	68fb      	ldr	r3, [r7, #12]
 8005b9c:	681b      	ldr	r3, [r3, #0]
 8005b9e:	699b      	ldr	r3, [r3, #24]
 8005ba0:	2210      	movs	r2, #16
 8005ba2:	4013      	ands	r3, r2
 8005ba4:	3b10      	subs	r3, #16
 8005ba6:	425a      	negs	r2, r3
 8005ba8:	4153      	adcs	r3, r2
 8005baa:	b2da      	uxtb	r2, r3
 8005bac:	231e      	movs	r3, #30
 8005bae:	18fb      	adds	r3, r7, r3
 8005bb0:	701a      	strb	r2, [r3, #0]
      while ((tmp1 == RESET) && (tmp2 == RESET))
 8005bb2:	231f      	movs	r3, #31
 8005bb4:	18fb      	adds	r3, r7, r3
 8005bb6:	781b      	ldrb	r3, [r3, #0]
 8005bb8:	2b00      	cmp	r3, #0
 8005bba:	d104      	bne.n	8005bc6 <HAL_I2C_IsDeviceReady+0x14a>
 8005bbc:	231e      	movs	r3, #30
 8005bbe:	18fb      	adds	r3, r7, r3
 8005bc0:	781b      	ldrb	r3, [r3, #0]
 8005bc2:	2b00      	cmp	r3, #0
 8005bc4:	d0bf      	beq.n	8005b46 <HAL_I2C_IsDeviceReady+0xca>
      }

      /* Check if the NACKF flag has not been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == RESET)
 8005bc6:	68fb      	ldr	r3, [r7, #12]
 8005bc8:	681b      	ldr	r3, [r3, #0]
 8005bca:	699b      	ldr	r3, [r3, #24]
 8005bcc:	2210      	movs	r2, #16
 8005bce:	4013      	ands	r3, r2
 8005bd0:	2b10      	cmp	r3, #16
 8005bd2:	d01a      	beq.n	8005c0a <HAL_I2C_IsDeviceReady+0x18e>
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 8005bd4:	683a      	ldr	r2, [r7, #0]
 8005bd6:	68f8      	ldr	r0, [r7, #12]
 8005bd8:	69bb      	ldr	r3, [r7, #24]
 8005bda:	9300      	str	r3, [sp, #0]
 8005bdc:	0013      	movs	r3, r2
 8005bde:	2200      	movs	r2, #0
 8005be0:	2120      	movs	r1, #32
 8005be2:	f000 f8eb 	bl	8005dbc <I2C_WaitOnFlagUntilTimeout>
 8005be6:	1e03      	subs	r3, r0, #0
 8005be8:	d001      	beq.n	8005bee <HAL_I2C_IsDeviceReady+0x172>
        {
          return HAL_ERROR;
 8005bea:	2301      	movs	r3, #1
 8005bec:	e059      	b.n	8005ca2 <HAL_I2C_IsDeviceReady+0x226>
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005bee:	68fb      	ldr	r3, [r7, #12]
 8005bf0:	681b      	ldr	r3, [r3, #0]
 8005bf2:	2220      	movs	r2, #32
 8005bf4:	61da      	str	r2, [r3, #28]

        /* Device is ready */
        hi2c->State = HAL_I2C_STATE_READY;
 8005bf6:	68fb      	ldr	r3, [r7, #12]
 8005bf8:	2241      	movs	r2, #65	; 0x41
 8005bfa:	2120      	movs	r1, #32
 8005bfc:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005bfe:	68fb      	ldr	r3, [r7, #12]
 8005c00:	2240      	movs	r2, #64	; 0x40
 8005c02:	2100      	movs	r1, #0
 8005c04:	5499      	strb	r1, [r3, r2]

        return HAL_OK;
 8005c06:	2300      	movs	r3, #0
 8005c08:	e04b      	b.n	8005ca2 <HAL_I2C_IsDeviceReady+0x226>
      }
      else
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 8005c0a:	683a      	ldr	r2, [r7, #0]
 8005c0c:	68f8      	ldr	r0, [r7, #12]
 8005c0e:	69bb      	ldr	r3, [r7, #24]
 8005c10:	9300      	str	r3, [sp, #0]
 8005c12:	0013      	movs	r3, r2
 8005c14:	2200      	movs	r2, #0
 8005c16:	2120      	movs	r1, #32
 8005c18:	f000 f8d0 	bl	8005dbc <I2C_WaitOnFlagUntilTimeout>
 8005c1c:	1e03      	subs	r3, r0, #0
 8005c1e:	d001      	beq.n	8005c24 <HAL_I2C_IsDeviceReady+0x1a8>
        {
          return HAL_ERROR;
 8005c20:	2301      	movs	r3, #1
 8005c22:	e03e      	b.n	8005ca2 <HAL_I2C_IsDeviceReady+0x226>
        }

        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005c24:	68fb      	ldr	r3, [r7, #12]
 8005c26:	681b      	ldr	r3, [r3, #0]
 8005c28:	2210      	movs	r2, #16
 8005c2a:	61da      	str	r2, [r3, #28]

        /* Clear STOP Flag, auto generated with autoend*/
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005c2c:	68fb      	ldr	r3, [r7, #12]
 8005c2e:	681b      	ldr	r3, [r3, #0]
 8005c30:	2220      	movs	r2, #32
 8005c32:	61da      	str	r2, [r3, #28]
      }

      /* Check if the maximum allowed number of trials has been reached */
      if (I2C_Trials == Trials)
 8005c34:	697b      	ldr	r3, [r7, #20]
 8005c36:	687a      	ldr	r2, [r7, #4]
 8005c38:	429a      	cmp	r2, r3
 8005c3a:	d119      	bne.n	8005c70 <HAL_I2C_IsDeviceReady+0x1f4>
      {
        /* Generate Stop */
        hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8005c3c:	68fb      	ldr	r3, [r7, #12]
 8005c3e:	681b      	ldr	r3, [r3, #0]
 8005c40:	685a      	ldr	r2, [r3, #4]
 8005c42:	68fb      	ldr	r3, [r7, #12]
 8005c44:	681b      	ldr	r3, [r3, #0]
 8005c46:	2180      	movs	r1, #128	; 0x80
 8005c48:	01c9      	lsls	r1, r1, #7
 8005c4a:	430a      	orrs	r2, r1
 8005c4c:	605a      	str	r2, [r3, #4]

        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 8005c4e:	683a      	ldr	r2, [r7, #0]
 8005c50:	68f8      	ldr	r0, [r7, #12]
 8005c52:	69bb      	ldr	r3, [r7, #24]
 8005c54:	9300      	str	r3, [sp, #0]
 8005c56:	0013      	movs	r3, r2
 8005c58:	2200      	movs	r2, #0
 8005c5a:	2120      	movs	r1, #32
 8005c5c:	f000 f8ae 	bl	8005dbc <I2C_WaitOnFlagUntilTimeout>
 8005c60:	1e03      	subs	r3, r0, #0
 8005c62:	d001      	beq.n	8005c68 <HAL_I2C_IsDeviceReady+0x1ec>
        {
          return HAL_ERROR;
 8005c64:	2301      	movs	r3, #1
 8005c66:	e01c      	b.n	8005ca2 <HAL_I2C_IsDeviceReady+0x226>
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005c68:	68fb      	ldr	r3, [r7, #12]
 8005c6a:	681b      	ldr	r3, [r3, #0]
 8005c6c:	2220      	movs	r2, #32
 8005c6e:	61da      	str	r2, [r3, #28]
      }

      /* Increment Trials */
      I2C_Trials++;
 8005c70:	697b      	ldr	r3, [r7, #20]
 8005c72:	3301      	adds	r3, #1
 8005c74:	617b      	str	r3, [r7, #20]
    }
    while (I2C_Trials < Trials);
 8005c76:	697b      	ldr	r3, [r7, #20]
 8005c78:	687a      	ldr	r2, [r7, #4]
 8005c7a:	429a      	cmp	r2, r3
 8005c7c:	d900      	bls.n	8005c80 <HAL_I2C_IsDeviceReady+0x204>
 8005c7e:	e72e      	b.n	8005ade <HAL_I2C_IsDeviceReady+0x62>

    /* Update I2C state */
    hi2c->State = HAL_I2C_STATE_READY;
 8005c80:	68fb      	ldr	r3, [r7, #12]
 8005c82:	2241      	movs	r2, #65	; 0x41
 8005c84:	2120      	movs	r1, #32
 8005c86:	5499      	strb	r1, [r3, r2]

    /* Update I2C error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005c88:	68fb      	ldr	r3, [r7, #12]
 8005c8a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005c8c:	2220      	movs	r2, #32
 8005c8e:	431a      	orrs	r2, r3
 8005c90:	68fb      	ldr	r3, [r7, #12]
 8005c92:	645a      	str	r2, [r3, #68]	; 0x44

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005c94:	68fb      	ldr	r3, [r7, #12]
 8005c96:	2240      	movs	r2, #64	; 0x40
 8005c98:	2100      	movs	r1, #0
 8005c9a:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 8005c9c:	2301      	movs	r3, #1
 8005c9e:	e000      	b.n	8005ca2 <HAL_I2C_IsDeviceReady+0x226>
  }
  else
  {
    return HAL_BUSY;
 8005ca0:	2302      	movs	r3, #2
  }
}
 8005ca2:	0018      	movs	r0, r3
 8005ca4:	46bd      	mov	sp, r7
 8005ca6:	b008      	add	sp, #32
 8005ca8:	bd80      	pop	{r7, pc}
 8005caa:	46c0      	nop			; (mov r8, r8)
 8005cac:	02002000 	.word	0x02002000

08005cb0 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8005cb0:	b5b0      	push	{r4, r5, r7, lr}
 8005cb2:	b086      	sub	sp, #24
 8005cb4:	af02      	add	r7, sp, #8
 8005cb6:	60f8      	str	r0, [r7, #12]
 8005cb8:	000c      	movs	r4, r1
 8005cba:	0010      	movs	r0, r2
 8005cbc:	0019      	movs	r1, r3
 8005cbe:	250a      	movs	r5, #10
 8005cc0:	197b      	adds	r3, r7, r5
 8005cc2:	1c22      	adds	r2, r4, #0
 8005cc4:	801a      	strh	r2, [r3, #0]
 8005cc6:	2308      	movs	r3, #8
 8005cc8:	18fb      	adds	r3, r7, r3
 8005cca:	1c02      	adds	r2, r0, #0
 8005ccc:	801a      	strh	r2, [r3, #0]
 8005cce:	1dbb      	adds	r3, r7, #6
 8005cd0:	1c0a      	adds	r2, r1, #0
 8005cd2:	801a      	strh	r2, [r3, #0]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8005cd4:	1dbb      	adds	r3, r7, #6
 8005cd6:	881b      	ldrh	r3, [r3, #0]
 8005cd8:	b2da      	uxtb	r2, r3
 8005cda:	2380      	movs	r3, #128	; 0x80
 8005cdc:	045c      	lsls	r4, r3, #17
 8005cde:	197b      	adds	r3, r7, r5
 8005ce0:	8819      	ldrh	r1, [r3, #0]
 8005ce2:	68f8      	ldr	r0, [r7, #12]
 8005ce4:	4b23      	ldr	r3, [pc, #140]	; (8005d74 <I2C_RequestMemoryWrite+0xc4>)
 8005ce6:	9300      	str	r3, [sp, #0]
 8005ce8:	0023      	movs	r3, r4
 8005cea:	f000 f987 	bl	8005ffc <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005cee:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005cf0:	6a39      	ldr	r1, [r7, #32]
 8005cf2:	68fb      	ldr	r3, [r7, #12]
 8005cf4:	0018      	movs	r0, r3
 8005cf6:	f000 f8a0 	bl	8005e3a <I2C_WaitOnTXISFlagUntilTimeout>
 8005cfa:	1e03      	subs	r3, r0, #0
 8005cfc:	d001      	beq.n	8005d02 <I2C_RequestMemoryWrite+0x52>
  {
    return HAL_ERROR;
 8005cfe:	2301      	movs	r3, #1
 8005d00:	e033      	b.n	8005d6a <I2C_RequestMemoryWrite+0xba>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8005d02:	1dbb      	adds	r3, r7, #6
 8005d04:	881b      	ldrh	r3, [r3, #0]
 8005d06:	2b01      	cmp	r3, #1
 8005d08:	d107      	bne.n	8005d1a <I2C_RequestMemoryWrite+0x6a>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8005d0a:	2308      	movs	r3, #8
 8005d0c:	18fb      	adds	r3, r7, r3
 8005d0e:	881b      	ldrh	r3, [r3, #0]
 8005d10:	b2da      	uxtb	r2, r3
 8005d12:	68fb      	ldr	r3, [r7, #12]
 8005d14:	681b      	ldr	r3, [r3, #0]
 8005d16:	629a      	str	r2, [r3, #40]	; 0x28
 8005d18:	e019      	b.n	8005d4e <I2C_RequestMemoryWrite+0x9e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8005d1a:	2308      	movs	r3, #8
 8005d1c:	18fb      	adds	r3, r7, r3
 8005d1e:	881b      	ldrh	r3, [r3, #0]
 8005d20:	0a1b      	lsrs	r3, r3, #8
 8005d22:	b29b      	uxth	r3, r3
 8005d24:	b2da      	uxtb	r2, r3
 8005d26:	68fb      	ldr	r3, [r7, #12]
 8005d28:	681b      	ldr	r3, [r3, #0]
 8005d2a:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005d2c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005d2e:	6a39      	ldr	r1, [r7, #32]
 8005d30:	68fb      	ldr	r3, [r7, #12]
 8005d32:	0018      	movs	r0, r3
 8005d34:	f000 f881 	bl	8005e3a <I2C_WaitOnTXISFlagUntilTimeout>
 8005d38:	1e03      	subs	r3, r0, #0
 8005d3a:	d001      	beq.n	8005d40 <I2C_RequestMemoryWrite+0x90>
    {
      return HAL_ERROR;
 8005d3c:	2301      	movs	r3, #1
 8005d3e:	e014      	b.n	8005d6a <I2C_RequestMemoryWrite+0xba>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8005d40:	2308      	movs	r3, #8
 8005d42:	18fb      	adds	r3, r7, r3
 8005d44:	881b      	ldrh	r3, [r3, #0]
 8005d46:	b2da      	uxtb	r2, r3
 8005d48:	68fb      	ldr	r3, [r7, #12]
 8005d4a:	681b      	ldr	r3, [r3, #0]
 8005d4c:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8005d4e:	6a3a      	ldr	r2, [r7, #32]
 8005d50:	68f8      	ldr	r0, [r7, #12]
 8005d52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d54:	9300      	str	r3, [sp, #0]
 8005d56:	0013      	movs	r3, r2
 8005d58:	2200      	movs	r2, #0
 8005d5a:	2180      	movs	r1, #128	; 0x80
 8005d5c:	f000 f82e 	bl	8005dbc <I2C_WaitOnFlagUntilTimeout>
 8005d60:	1e03      	subs	r3, r0, #0
 8005d62:	d001      	beq.n	8005d68 <I2C_RequestMemoryWrite+0xb8>
  {
    return HAL_ERROR;
 8005d64:	2301      	movs	r3, #1
 8005d66:	e000      	b.n	8005d6a <I2C_RequestMemoryWrite+0xba>
  }

  return HAL_OK;
 8005d68:	2300      	movs	r3, #0
}
 8005d6a:	0018      	movs	r0, r3
 8005d6c:	46bd      	mov	sp, r7
 8005d6e:	b004      	add	sp, #16
 8005d70:	bdb0      	pop	{r4, r5, r7, pc}
 8005d72:	46c0      	nop			; (mov r8, r8)
 8005d74:	80002000 	.word	0x80002000

08005d78 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8005d78:	b580      	push	{r7, lr}
 8005d7a:	b082      	sub	sp, #8
 8005d7c:	af00      	add	r7, sp, #0
 8005d7e:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	681b      	ldr	r3, [r3, #0]
 8005d84:	699b      	ldr	r3, [r3, #24]
 8005d86:	2202      	movs	r2, #2
 8005d88:	4013      	ands	r3, r2
 8005d8a:	2b02      	cmp	r3, #2
 8005d8c:	d103      	bne.n	8005d96 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	681b      	ldr	r3, [r3, #0]
 8005d92:	2200      	movs	r2, #0
 8005d94:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	681b      	ldr	r3, [r3, #0]
 8005d9a:	699b      	ldr	r3, [r3, #24]
 8005d9c:	2201      	movs	r2, #1
 8005d9e:	4013      	ands	r3, r2
 8005da0:	2b01      	cmp	r3, #1
 8005da2:	d007      	beq.n	8005db4 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	681b      	ldr	r3, [r3, #0]
 8005da8:	699a      	ldr	r2, [r3, #24]
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	681b      	ldr	r3, [r3, #0]
 8005dae:	2101      	movs	r1, #1
 8005db0:	430a      	orrs	r2, r1
 8005db2:	619a      	str	r2, [r3, #24]
  }
}
 8005db4:	46c0      	nop			; (mov r8, r8)
 8005db6:	46bd      	mov	sp, r7
 8005db8:	b002      	add	sp, #8
 8005dba:	bd80      	pop	{r7, pc}

08005dbc <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8005dbc:	b580      	push	{r7, lr}
 8005dbe:	b084      	sub	sp, #16
 8005dc0:	af00      	add	r7, sp, #0
 8005dc2:	60f8      	str	r0, [r7, #12]
 8005dc4:	60b9      	str	r1, [r7, #8]
 8005dc6:	603b      	str	r3, [r7, #0]
 8005dc8:	1dfb      	adds	r3, r7, #7
 8005dca:	701a      	strb	r2, [r3, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005dcc:	e021      	b.n	8005e12 <I2C_WaitOnFlagUntilTimeout+0x56>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005dce:	683b      	ldr	r3, [r7, #0]
 8005dd0:	3301      	adds	r3, #1
 8005dd2:	d01e      	beq.n	8005e12 <I2C_WaitOnFlagUntilTimeout+0x56>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005dd4:	f7fe fab8 	bl	8004348 <HAL_GetTick>
 8005dd8:	0002      	movs	r2, r0
 8005dda:	69bb      	ldr	r3, [r7, #24]
 8005ddc:	1ad3      	subs	r3, r2, r3
 8005dde:	683a      	ldr	r2, [r7, #0]
 8005de0:	429a      	cmp	r2, r3
 8005de2:	d302      	bcc.n	8005dea <I2C_WaitOnFlagUntilTimeout+0x2e>
 8005de4:	683b      	ldr	r3, [r7, #0]
 8005de6:	2b00      	cmp	r3, #0
 8005de8:	d113      	bne.n	8005e12 <I2C_WaitOnFlagUntilTimeout+0x56>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005dea:	68fb      	ldr	r3, [r7, #12]
 8005dec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005dee:	2220      	movs	r2, #32
 8005df0:	431a      	orrs	r2, r3
 8005df2:	68fb      	ldr	r3, [r7, #12]
 8005df4:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8005df6:	68fb      	ldr	r3, [r7, #12]
 8005df8:	2241      	movs	r2, #65	; 0x41
 8005dfa:	2120      	movs	r1, #32
 8005dfc:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8005dfe:	68fb      	ldr	r3, [r7, #12]
 8005e00:	2242      	movs	r2, #66	; 0x42
 8005e02:	2100      	movs	r1, #0
 8005e04:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005e06:	68fb      	ldr	r3, [r7, #12]
 8005e08:	2240      	movs	r2, #64	; 0x40
 8005e0a:	2100      	movs	r1, #0
 8005e0c:	5499      	strb	r1, [r3, r2]
        return HAL_ERROR;
 8005e0e:	2301      	movs	r3, #1
 8005e10:	e00f      	b.n	8005e32 <I2C_WaitOnFlagUntilTimeout+0x76>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005e12:	68fb      	ldr	r3, [r7, #12]
 8005e14:	681b      	ldr	r3, [r3, #0]
 8005e16:	699b      	ldr	r3, [r3, #24]
 8005e18:	68ba      	ldr	r2, [r7, #8]
 8005e1a:	4013      	ands	r3, r2
 8005e1c:	68ba      	ldr	r2, [r7, #8]
 8005e1e:	1ad3      	subs	r3, r2, r3
 8005e20:	425a      	negs	r2, r3
 8005e22:	4153      	adcs	r3, r2
 8005e24:	b2db      	uxtb	r3, r3
 8005e26:	001a      	movs	r2, r3
 8005e28:	1dfb      	adds	r3, r7, #7
 8005e2a:	781b      	ldrb	r3, [r3, #0]
 8005e2c:	429a      	cmp	r2, r3
 8005e2e:	d0ce      	beq.n	8005dce <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8005e30:	2300      	movs	r3, #0
}
 8005e32:	0018      	movs	r0, r3
 8005e34:	46bd      	mov	sp, r7
 8005e36:	b004      	add	sp, #16
 8005e38:	bd80      	pop	{r7, pc}

08005e3a <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005e3a:	b580      	push	{r7, lr}
 8005e3c:	b084      	sub	sp, #16
 8005e3e:	af00      	add	r7, sp, #0
 8005e40:	60f8      	str	r0, [r7, #12]
 8005e42:	60b9      	str	r1, [r7, #8]
 8005e44:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8005e46:	e02b      	b.n	8005ea0 <I2C_WaitOnTXISFlagUntilTimeout+0x66>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8005e48:	687a      	ldr	r2, [r7, #4]
 8005e4a:	68b9      	ldr	r1, [r7, #8]
 8005e4c:	68fb      	ldr	r3, [r7, #12]
 8005e4e:	0018      	movs	r0, r3
 8005e50:	f000 f86e 	bl	8005f30 <I2C_IsAcknowledgeFailed>
 8005e54:	1e03      	subs	r3, r0, #0
 8005e56:	d001      	beq.n	8005e5c <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8005e58:	2301      	movs	r3, #1
 8005e5a:	e029      	b.n	8005eb0 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005e5c:	68bb      	ldr	r3, [r7, #8]
 8005e5e:	3301      	adds	r3, #1
 8005e60:	d01e      	beq.n	8005ea0 <I2C_WaitOnTXISFlagUntilTimeout+0x66>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005e62:	f7fe fa71 	bl	8004348 <HAL_GetTick>
 8005e66:	0002      	movs	r2, r0
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	1ad3      	subs	r3, r2, r3
 8005e6c:	68ba      	ldr	r2, [r7, #8]
 8005e6e:	429a      	cmp	r2, r3
 8005e70:	d302      	bcc.n	8005e78 <I2C_WaitOnTXISFlagUntilTimeout+0x3e>
 8005e72:	68bb      	ldr	r3, [r7, #8]
 8005e74:	2b00      	cmp	r3, #0
 8005e76:	d113      	bne.n	8005ea0 <I2C_WaitOnTXISFlagUntilTimeout+0x66>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005e78:	68fb      	ldr	r3, [r7, #12]
 8005e7a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005e7c:	2220      	movs	r2, #32
 8005e7e:	431a      	orrs	r2, r3
 8005e80:	68fb      	ldr	r3, [r7, #12]
 8005e82:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8005e84:	68fb      	ldr	r3, [r7, #12]
 8005e86:	2241      	movs	r2, #65	; 0x41
 8005e88:	2120      	movs	r1, #32
 8005e8a:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8005e8c:	68fb      	ldr	r3, [r7, #12]
 8005e8e:	2242      	movs	r2, #66	; 0x42
 8005e90:	2100      	movs	r1, #0
 8005e92:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005e94:	68fb      	ldr	r3, [r7, #12]
 8005e96:	2240      	movs	r2, #64	; 0x40
 8005e98:	2100      	movs	r1, #0
 8005e9a:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 8005e9c:	2301      	movs	r3, #1
 8005e9e:	e007      	b.n	8005eb0 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8005ea0:	68fb      	ldr	r3, [r7, #12]
 8005ea2:	681b      	ldr	r3, [r3, #0]
 8005ea4:	699b      	ldr	r3, [r3, #24]
 8005ea6:	2202      	movs	r2, #2
 8005ea8:	4013      	ands	r3, r2
 8005eaa:	2b02      	cmp	r3, #2
 8005eac:	d1cc      	bne.n	8005e48 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8005eae:	2300      	movs	r3, #0
}
 8005eb0:	0018      	movs	r0, r3
 8005eb2:	46bd      	mov	sp, r7
 8005eb4:	b004      	add	sp, #16
 8005eb6:	bd80      	pop	{r7, pc}

08005eb8 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005eb8:	b580      	push	{r7, lr}
 8005eba:	b084      	sub	sp, #16
 8005ebc:	af00      	add	r7, sp, #0
 8005ebe:	60f8      	str	r0, [r7, #12]
 8005ec0:	60b9      	str	r1, [r7, #8]
 8005ec2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005ec4:	e028      	b.n	8005f18 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8005ec6:	687a      	ldr	r2, [r7, #4]
 8005ec8:	68b9      	ldr	r1, [r7, #8]
 8005eca:	68fb      	ldr	r3, [r7, #12]
 8005ecc:	0018      	movs	r0, r3
 8005ece:	f000 f82f 	bl	8005f30 <I2C_IsAcknowledgeFailed>
 8005ed2:	1e03      	subs	r3, r0, #0
 8005ed4:	d001      	beq.n	8005eda <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8005ed6:	2301      	movs	r3, #1
 8005ed8:	e026      	b.n	8005f28 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005eda:	f7fe fa35 	bl	8004348 <HAL_GetTick>
 8005ede:	0002      	movs	r2, r0
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	1ad3      	subs	r3, r2, r3
 8005ee4:	68ba      	ldr	r2, [r7, #8]
 8005ee6:	429a      	cmp	r2, r3
 8005ee8:	d302      	bcc.n	8005ef0 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8005eea:	68bb      	ldr	r3, [r7, #8]
 8005eec:	2b00      	cmp	r3, #0
 8005eee:	d113      	bne.n	8005f18 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005ef0:	68fb      	ldr	r3, [r7, #12]
 8005ef2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005ef4:	2220      	movs	r2, #32
 8005ef6:	431a      	orrs	r2, r3
 8005ef8:	68fb      	ldr	r3, [r7, #12]
 8005efa:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8005efc:	68fb      	ldr	r3, [r7, #12]
 8005efe:	2241      	movs	r2, #65	; 0x41
 8005f00:	2120      	movs	r1, #32
 8005f02:	5499      	strb	r1, [r3, r2]
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8005f04:	68fb      	ldr	r3, [r7, #12]
 8005f06:	2242      	movs	r2, #66	; 0x42
 8005f08:	2100      	movs	r1, #0
 8005f0a:	5499      	strb	r1, [r3, r2]

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005f0c:	68fb      	ldr	r3, [r7, #12]
 8005f0e:	2240      	movs	r2, #64	; 0x40
 8005f10:	2100      	movs	r1, #0
 8005f12:	5499      	strb	r1, [r3, r2]

      return HAL_ERROR;
 8005f14:	2301      	movs	r3, #1
 8005f16:	e007      	b.n	8005f28 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005f18:	68fb      	ldr	r3, [r7, #12]
 8005f1a:	681b      	ldr	r3, [r3, #0]
 8005f1c:	699b      	ldr	r3, [r3, #24]
 8005f1e:	2220      	movs	r2, #32
 8005f20:	4013      	ands	r3, r2
 8005f22:	2b20      	cmp	r3, #32
 8005f24:	d1cf      	bne.n	8005ec6 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8005f26:	2300      	movs	r3, #0
}
 8005f28:	0018      	movs	r0, r3
 8005f2a:	46bd      	mov	sp, r7
 8005f2c:	b004      	add	sp, #16
 8005f2e:	bd80      	pop	{r7, pc}

08005f30 <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005f30:	b580      	push	{r7, lr}
 8005f32:	b084      	sub	sp, #16
 8005f34:	af00      	add	r7, sp, #0
 8005f36:	60f8      	str	r0, [r7, #12]
 8005f38:	60b9      	str	r1, [r7, #8]
 8005f3a:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005f3c:	68fb      	ldr	r3, [r7, #12]
 8005f3e:	681b      	ldr	r3, [r3, #0]
 8005f40:	699b      	ldr	r3, [r3, #24]
 8005f42:	2210      	movs	r2, #16
 8005f44:	4013      	ands	r3, r2
 8005f46:	2b10      	cmp	r3, #16
 8005f48:	d151      	bne.n	8005fee <I2C_IsAcknowledgeFailed+0xbe>
  {
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005f4a:	e021      	b.n	8005f90 <I2C_IsAcknowledgeFailed+0x60>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8005f4c:	68bb      	ldr	r3, [r7, #8]
 8005f4e:	3301      	adds	r3, #1
 8005f50:	d01e      	beq.n	8005f90 <I2C_IsAcknowledgeFailed+0x60>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005f52:	f7fe f9f9 	bl	8004348 <HAL_GetTick>
 8005f56:	0002      	movs	r2, r0
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	1ad3      	subs	r3, r2, r3
 8005f5c:	68ba      	ldr	r2, [r7, #8]
 8005f5e:	429a      	cmp	r2, r3
 8005f60:	d302      	bcc.n	8005f68 <I2C_IsAcknowledgeFailed+0x38>
 8005f62:	68bb      	ldr	r3, [r7, #8]
 8005f64:	2b00      	cmp	r3, #0
 8005f66:	d113      	bne.n	8005f90 <I2C_IsAcknowledgeFailed+0x60>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005f68:	68fb      	ldr	r3, [r7, #12]
 8005f6a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005f6c:	2220      	movs	r2, #32
 8005f6e:	431a      	orrs	r2, r3
 8005f70:	68fb      	ldr	r3, [r7, #12]
 8005f72:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8005f74:	68fb      	ldr	r3, [r7, #12]
 8005f76:	2241      	movs	r2, #65	; 0x41
 8005f78:	2120      	movs	r1, #32
 8005f7a:	5499      	strb	r1, [r3, r2]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8005f7c:	68fb      	ldr	r3, [r7, #12]
 8005f7e:	2242      	movs	r2, #66	; 0x42
 8005f80:	2100      	movs	r1, #0
 8005f82:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8005f84:	68fb      	ldr	r3, [r7, #12]
 8005f86:	2240      	movs	r2, #64	; 0x40
 8005f88:	2100      	movs	r1, #0
 8005f8a:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 8005f8c:	2301      	movs	r3, #1
 8005f8e:	e02f      	b.n	8005ff0 <I2C_IsAcknowledgeFailed+0xc0>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005f90:	68fb      	ldr	r3, [r7, #12]
 8005f92:	681b      	ldr	r3, [r3, #0]
 8005f94:	699b      	ldr	r3, [r3, #24]
 8005f96:	2220      	movs	r2, #32
 8005f98:	4013      	ands	r3, r2
 8005f9a:	2b20      	cmp	r3, #32
 8005f9c:	d1d6      	bne.n	8005f4c <I2C_IsAcknowledgeFailed+0x1c>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005f9e:	68fb      	ldr	r3, [r7, #12]
 8005fa0:	681b      	ldr	r3, [r3, #0]
 8005fa2:	2210      	movs	r2, #16
 8005fa4:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005fa6:	68fb      	ldr	r3, [r7, #12]
 8005fa8:	681b      	ldr	r3, [r3, #0]
 8005faa:	2220      	movs	r2, #32
 8005fac:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8005fae:	68fb      	ldr	r3, [r7, #12]
 8005fb0:	0018      	movs	r0, r3
 8005fb2:	f7ff fee1 	bl	8005d78 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8005fb6:	68fb      	ldr	r3, [r7, #12]
 8005fb8:	681b      	ldr	r3, [r3, #0]
 8005fba:	685a      	ldr	r2, [r3, #4]
 8005fbc:	68fb      	ldr	r3, [r7, #12]
 8005fbe:	681b      	ldr	r3, [r3, #0]
 8005fc0:	490d      	ldr	r1, [pc, #52]	; (8005ff8 <I2C_IsAcknowledgeFailed+0xc8>)
 8005fc2:	400a      	ands	r2, r1
 8005fc4:	605a      	str	r2, [r3, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8005fc6:	68fb      	ldr	r3, [r7, #12]
 8005fc8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005fca:	2204      	movs	r2, #4
 8005fcc:	431a      	orrs	r2, r3
 8005fce:	68fb      	ldr	r3, [r7, #12]
 8005fd0:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8005fd2:	68fb      	ldr	r3, [r7, #12]
 8005fd4:	2241      	movs	r2, #65	; 0x41
 8005fd6:	2120      	movs	r1, #32
 8005fd8:	5499      	strb	r1, [r3, r2]
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8005fda:	68fb      	ldr	r3, [r7, #12]
 8005fdc:	2242      	movs	r2, #66	; 0x42
 8005fde:	2100      	movs	r1, #0
 8005fe0:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005fe2:	68fb      	ldr	r3, [r7, #12]
 8005fe4:	2240      	movs	r2, #64	; 0x40
 8005fe6:	2100      	movs	r1, #0
 8005fe8:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 8005fea:	2301      	movs	r3, #1
 8005fec:	e000      	b.n	8005ff0 <I2C_IsAcknowledgeFailed+0xc0>
  }
  return HAL_OK;
 8005fee:	2300      	movs	r3, #0
}
 8005ff0:	0018      	movs	r0, r3
 8005ff2:	46bd      	mov	sp, r7
 8005ff4:	b004      	add	sp, #16
 8005ff6:	bd80      	pop	{r7, pc}
 8005ff8:	fe00e800 	.word	0xfe00e800

08005ffc <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_READ Generate Restart for read request.
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode, uint32_t Request)
{
 8005ffc:	b590      	push	{r4, r7, lr}
 8005ffe:	b085      	sub	sp, #20
 8006000:	af00      	add	r7, sp, #0
 8006002:	60f8      	str	r0, [r7, #12]
 8006004:	0008      	movs	r0, r1
 8006006:	0011      	movs	r1, r2
 8006008:	607b      	str	r3, [r7, #4]
 800600a:	240a      	movs	r4, #10
 800600c:	193b      	adds	r3, r7, r4
 800600e:	1c02      	adds	r2, r0, #0
 8006010:	801a      	strh	r2, [r3, #0]
 8006012:	2009      	movs	r0, #9
 8006014:	183b      	adds	r3, r7, r0
 8006016:	1c0a      	adds	r2, r1, #0
 8006018:	701a      	strb	r2, [r3, #0]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 800601a:	68fb      	ldr	r3, [r7, #12]
 800601c:	681b      	ldr	r3, [r3, #0]
 800601e:	685b      	ldr	r3, [r3, #4]
 8006020:	6a3a      	ldr	r2, [r7, #32]
 8006022:	0d51      	lsrs	r1, r2, #21
 8006024:	2280      	movs	r2, #128	; 0x80
 8006026:	00d2      	lsls	r2, r2, #3
 8006028:	400a      	ands	r2, r1
 800602a:	490e      	ldr	r1, [pc, #56]	; (8006064 <I2C_TransferConfig+0x68>)
 800602c:	430a      	orrs	r2, r1
 800602e:	43d2      	mvns	r2, r2
 8006030:	401a      	ands	r2, r3
 8006032:	0011      	movs	r1, r2
 8006034:	193b      	adds	r3, r7, r4
 8006036:	881b      	ldrh	r3, [r3, #0]
 8006038:	059b      	lsls	r3, r3, #22
 800603a:	0d9a      	lsrs	r2, r3, #22
 800603c:	183b      	adds	r3, r7, r0
 800603e:	781b      	ldrb	r3, [r3, #0]
 8006040:	0418      	lsls	r0, r3, #16
 8006042:	23ff      	movs	r3, #255	; 0xff
 8006044:	041b      	lsls	r3, r3, #16
 8006046:	4003      	ands	r3, r0
 8006048:	431a      	orrs	r2, r3
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	431a      	orrs	r2, r3
 800604e:	6a3b      	ldr	r3, [r7, #32]
 8006050:	431a      	orrs	r2, r3
 8006052:	68fb      	ldr	r3, [r7, #12]
 8006054:	681b      	ldr	r3, [r3, #0]
 8006056:	430a      	orrs	r2, r1
 8006058:	605a      	str	r2, [r3, #4]
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | (uint32_t)Mode | (uint32_t)Request));
}
 800605a:	46c0      	nop			; (mov r8, r8)
 800605c:	46bd      	mov	sp, r7
 800605e:	b005      	add	sp, #20
 8006060:	bd90      	pop	{r4, r7, pc}
 8006062:	46c0      	nop			; (mov r8, r8)
 8006064:	03ff63ff 	.word	0x03ff63ff

08006068 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8006068:	b580      	push	{r7, lr}
 800606a:	b082      	sub	sp, #8
 800606c:	af00      	add	r7, sp, #0
 800606e:	6078      	str	r0, [r7, #4]
 8006070:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	2241      	movs	r2, #65	; 0x41
 8006076:	5c9b      	ldrb	r3, [r3, r2]
 8006078:	b2db      	uxtb	r3, r3
 800607a:	2b20      	cmp	r3, #32
 800607c:	d138      	bne.n	80060f0 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	2240      	movs	r2, #64	; 0x40
 8006082:	5c9b      	ldrb	r3, [r3, r2]
 8006084:	2b01      	cmp	r3, #1
 8006086:	d101      	bne.n	800608c <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8006088:	2302      	movs	r3, #2
 800608a:	e032      	b.n	80060f2 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	2240      	movs	r2, #64	; 0x40
 8006090:	2101      	movs	r1, #1
 8006092:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	2241      	movs	r2, #65	; 0x41
 8006098:	2124      	movs	r1, #36	; 0x24
 800609a:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	681b      	ldr	r3, [r3, #0]
 80060a0:	681a      	ldr	r2, [r3, #0]
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	681b      	ldr	r3, [r3, #0]
 80060a6:	2101      	movs	r1, #1
 80060a8:	438a      	bics	r2, r1
 80060aa:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	681b      	ldr	r3, [r3, #0]
 80060b0:	681a      	ldr	r2, [r3, #0]
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	681b      	ldr	r3, [r3, #0]
 80060b6:	4911      	ldr	r1, [pc, #68]	; (80060fc <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 80060b8:	400a      	ands	r2, r1
 80060ba:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	681b      	ldr	r3, [r3, #0]
 80060c0:	6819      	ldr	r1, [r3, #0]
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	681b      	ldr	r3, [r3, #0]
 80060c6:	683a      	ldr	r2, [r7, #0]
 80060c8:	430a      	orrs	r2, r1
 80060ca:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	681b      	ldr	r3, [r3, #0]
 80060d0:	681a      	ldr	r2, [r3, #0]
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	681b      	ldr	r3, [r3, #0]
 80060d6:	2101      	movs	r1, #1
 80060d8:	430a      	orrs	r2, r1
 80060da:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	2241      	movs	r2, #65	; 0x41
 80060e0:	2120      	movs	r1, #32
 80060e2:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	2240      	movs	r2, #64	; 0x40
 80060e8:	2100      	movs	r1, #0
 80060ea:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 80060ec:	2300      	movs	r3, #0
 80060ee:	e000      	b.n	80060f2 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80060f0:	2302      	movs	r3, #2
  }
}
 80060f2:	0018      	movs	r0, r3
 80060f4:	46bd      	mov	sp, r7
 80060f6:	b002      	add	sp, #8
 80060f8:	bd80      	pop	{r7, pc}
 80060fa:	46c0      	nop			; (mov r8, r8)
 80060fc:	ffffefff 	.word	0xffffefff

08006100 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8006100:	b580      	push	{r7, lr}
 8006102:	b084      	sub	sp, #16
 8006104:	af00      	add	r7, sp, #0
 8006106:	6078      	str	r0, [r7, #4]
 8006108:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	2241      	movs	r2, #65	; 0x41
 800610e:	5c9b      	ldrb	r3, [r3, r2]
 8006110:	b2db      	uxtb	r3, r3
 8006112:	2b20      	cmp	r3, #32
 8006114:	d139      	bne.n	800618a <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006116:	687b      	ldr	r3, [r7, #4]
 8006118:	2240      	movs	r2, #64	; 0x40
 800611a:	5c9b      	ldrb	r3, [r3, r2]
 800611c:	2b01      	cmp	r3, #1
 800611e:	d101      	bne.n	8006124 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8006120:	2302      	movs	r3, #2
 8006122:	e033      	b.n	800618c <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	2240      	movs	r2, #64	; 0x40
 8006128:	2101      	movs	r1, #1
 800612a:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	2241      	movs	r2, #65	; 0x41
 8006130:	2124      	movs	r1, #36	; 0x24
 8006132:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	681b      	ldr	r3, [r3, #0]
 8006138:	681a      	ldr	r2, [r3, #0]
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	681b      	ldr	r3, [r3, #0]
 800613e:	2101      	movs	r1, #1
 8006140:	438a      	bics	r2, r1
 8006142:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	681b      	ldr	r3, [r3, #0]
 8006148:	681b      	ldr	r3, [r3, #0]
 800614a:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800614c:	68fb      	ldr	r3, [r7, #12]
 800614e:	4a11      	ldr	r2, [pc, #68]	; (8006194 <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 8006150:	4013      	ands	r3, r2
 8006152:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8006154:	683b      	ldr	r3, [r7, #0]
 8006156:	021b      	lsls	r3, r3, #8
 8006158:	68fa      	ldr	r2, [r7, #12]
 800615a:	4313      	orrs	r3, r2
 800615c:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	681b      	ldr	r3, [r3, #0]
 8006162:	68fa      	ldr	r2, [r7, #12]
 8006164:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	681b      	ldr	r3, [r3, #0]
 800616a:	681a      	ldr	r2, [r3, #0]
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	681b      	ldr	r3, [r3, #0]
 8006170:	2101      	movs	r1, #1
 8006172:	430a      	orrs	r2, r1
 8006174:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	2241      	movs	r2, #65	; 0x41
 800617a:	2120      	movs	r1, #32
 800617c:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	2240      	movs	r2, #64	; 0x40
 8006182:	2100      	movs	r1, #0
 8006184:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8006186:	2300      	movs	r3, #0
 8006188:	e000      	b.n	800618c <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800618a:	2302      	movs	r3, #2
  }
}
 800618c:	0018      	movs	r0, r3
 800618e:	46bd      	mov	sp, r7
 8006190:	b004      	add	sp, #16
 8006192:	bd80      	pop	{r7, pc}
 8006194:	fffff0ff 	.word	0xfffff0ff

08006198 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006198:	b580      	push	{r7, lr}
 800619a:	b088      	sub	sp, #32
 800619c:	af00      	add	r7, sp, #0
 800619e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	2b00      	cmp	r3, #0
 80061a4:	d101      	bne.n	80061aa <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80061a6:	2301      	movs	r3, #1
 80061a8:	e303      	b.n	80067b2 <HAL_RCC_OscConfig+0x61a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	681b      	ldr	r3, [r3, #0]
 80061ae:	2201      	movs	r2, #1
 80061b0:	4013      	ands	r3, r2
 80061b2:	d100      	bne.n	80061b6 <HAL_RCC_OscConfig+0x1e>
 80061b4:	e08d      	b.n	80062d2 <HAL_RCC_OscConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 80061b6:	4bc4      	ldr	r3, [pc, #784]	; (80064c8 <HAL_RCC_OscConfig+0x330>)
 80061b8:	685b      	ldr	r3, [r3, #4]
 80061ba:	220c      	movs	r2, #12
 80061bc:	4013      	ands	r3, r2
 80061be:	2b04      	cmp	r3, #4
 80061c0:	d00e      	beq.n	80061e0 <HAL_RCC_OscConfig+0x48>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80061c2:	4bc1      	ldr	r3, [pc, #772]	; (80064c8 <HAL_RCC_OscConfig+0x330>)
 80061c4:	685b      	ldr	r3, [r3, #4]
 80061c6:	220c      	movs	r2, #12
 80061c8:	4013      	ands	r3, r2
 80061ca:	2b08      	cmp	r3, #8
 80061cc:	d116      	bne.n	80061fc <HAL_RCC_OscConfig+0x64>
 80061ce:	4bbe      	ldr	r3, [pc, #760]	; (80064c8 <HAL_RCC_OscConfig+0x330>)
 80061d0:	685a      	ldr	r2, [r3, #4]
 80061d2:	2380      	movs	r3, #128	; 0x80
 80061d4:	025b      	lsls	r3, r3, #9
 80061d6:	401a      	ands	r2, r3
 80061d8:	2380      	movs	r3, #128	; 0x80
 80061da:	025b      	lsls	r3, r3, #9
 80061dc:	429a      	cmp	r2, r3
 80061de:	d10d      	bne.n	80061fc <HAL_RCC_OscConfig+0x64>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80061e0:	4bb9      	ldr	r3, [pc, #740]	; (80064c8 <HAL_RCC_OscConfig+0x330>)
 80061e2:	681a      	ldr	r2, [r3, #0]
 80061e4:	2380      	movs	r3, #128	; 0x80
 80061e6:	029b      	lsls	r3, r3, #10
 80061e8:	4013      	ands	r3, r2
 80061ea:	d100      	bne.n	80061ee <HAL_RCC_OscConfig+0x56>
 80061ec:	e070      	b.n	80062d0 <HAL_RCC_OscConfig+0x138>
 80061ee:	687b      	ldr	r3, [r7, #4]
 80061f0:	685b      	ldr	r3, [r3, #4]
 80061f2:	2b00      	cmp	r3, #0
 80061f4:	d000      	beq.n	80061f8 <HAL_RCC_OscConfig+0x60>
 80061f6:	e06b      	b.n	80062d0 <HAL_RCC_OscConfig+0x138>
      {
        return HAL_ERROR;
 80061f8:	2301      	movs	r3, #1
 80061fa:	e2da      	b.n	80067b2 <HAL_RCC_OscConfig+0x61a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	685b      	ldr	r3, [r3, #4]
 8006200:	2b01      	cmp	r3, #1
 8006202:	d107      	bne.n	8006214 <HAL_RCC_OscConfig+0x7c>
 8006204:	4bb0      	ldr	r3, [pc, #704]	; (80064c8 <HAL_RCC_OscConfig+0x330>)
 8006206:	681a      	ldr	r2, [r3, #0]
 8006208:	4baf      	ldr	r3, [pc, #700]	; (80064c8 <HAL_RCC_OscConfig+0x330>)
 800620a:	2180      	movs	r1, #128	; 0x80
 800620c:	0249      	lsls	r1, r1, #9
 800620e:	430a      	orrs	r2, r1
 8006210:	601a      	str	r2, [r3, #0]
 8006212:	e02f      	b.n	8006274 <HAL_RCC_OscConfig+0xdc>
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	685b      	ldr	r3, [r3, #4]
 8006218:	2b00      	cmp	r3, #0
 800621a:	d10c      	bne.n	8006236 <HAL_RCC_OscConfig+0x9e>
 800621c:	4baa      	ldr	r3, [pc, #680]	; (80064c8 <HAL_RCC_OscConfig+0x330>)
 800621e:	681a      	ldr	r2, [r3, #0]
 8006220:	4ba9      	ldr	r3, [pc, #676]	; (80064c8 <HAL_RCC_OscConfig+0x330>)
 8006222:	49aa      	ldr	r1, [pc, #680]	; (80064cc <HAL_RCC_OscConfig+0x334>)
 8006224:	400a      	ands	r2, r1
 8006226:	601a      	str	r2, [r3, #0]
 8006228:	4ba7      	ldr	r3, [pc, #668]	; (80064c8 <HAL_RCC_OscConfig+0x330>)
 800622a:	681a      	ldr	r2, [r3, #0]
 800622c:	4ba6      	ldr	r3, [pc, #664]	; (80064c8 <HAL_RCC_OscConfig+0x330>)
 800622e:	49a8      	ldr	r1, [pc, #672]	; (80064d0 <HAL_RCC_OscConfig+0x338>)
 8006230:	400a      	ands	r2, r1
 8006232:	601a      	str	r2, [r3, #0]
 8006234:	e01e      	b.n	8006274 <HAL_RCC_OscConfig+0xdc>
 8006236:	687b      	ldr	r3, [r7, #4]
 8006238:	685b      	ldr	r3, [r3, #4]
 800623a:	2b05      	cmp	r3, #5
 800623c:	d10e      	bne.n	800625c <HAL_RCC_OscConfig+0xc4>
 800623e:	4ba2      	ldr	r3, [pc, #648]	; (80064c8 <HAL_RCC_OscConfig+0x330>)
 8006240:	681a      	ldr	r2, [r3, #0]
 8006242:	4ba1      	ldr	r3, [pc, #644]	; (80064c8 <HAL_RCC_OscConfig+0x330>)
 8006244:	2180      	movs	r1, #128	; 0x80
 8006246:	02c9      	lsls	r1, r1, #11
 8006248:	430a      	orrs	r2, r1
 800624a:	601a      	str	r2, [r3, #0]
 800624c:	4b9e      	ldr	r3, [pc, #632]	; (80064c8 <HAL_RCC_OscConfig+0x330>)
 800624e:	681a      	ldr	r2, [r3, #0]
 8006250:	4b9d      	ldr	r3, [pc, #628]	; (80064c8 <HAL_RCC_OscConfig+0x330>)
 8006252:	2180      	movs	r1, #128	; 0x80
 8006254:	0249      	lsls	r1, r1, #9
 8006256:	430a      	orrs	r2, r1
 8006258:	601a      	str	r2, [r3, #0]
 800625a:	e00b      	b.n	8006274 <HAL_RCC_OscConfig+0xdc>
 800625c:	4b9a      	ldr	r3, [pc, #616]	; (80064c8 <HAL_RCC_OscConfig+0x330>)
 800625e:	681a      	ldr	r2, [r3, #0]
 8006260:	4b99      	ldr	r3, [pc, #612]	; (80064c8 <HAL_RCC_OscConfig+0x330>)
 8006262:	499a      	ldr	r1, [pc, #616]	; (80064cc <HAL_RCC_OscConfig+0x334>)
 8006264:	400a      	ands	r2, r1
 8006266:	601a      	str	r2, [r3, #0]
 8006268:	4b97      	ldr	r3, [pc, #604]	; (80064c8 <HAL_RCC_OscConfig+0x330>)
 800626a:	681a      	ldr	r2, [r3, #0]
 800626c:	4b96      	ldr	r3, [pc, #600]	; (80064c8 <HAL_RCC_OscConfig+0x330>)
 800626e:	4998      	ldr	r1, [pc, #608]	; (80064d0 <HAL_RCC_OscConfig+0x338>)
 8006270:	400a      	ands	r2, r1
 8006272:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	685b      	ldr	r3, [r3, #4]
 8006278:	2b00      	cmp	r3, #0
 800627a:	d014      	beq.n	80062a6 <HAL_RCC_OscConfig+0x10e>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800627c:	f7fe f864 	bl	8004348 <HAL_GetTick>
 8006280:	0003      	movs	r3, r0
 8006282:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006284:	e008      	b.n	8006298 <HAL_RCC_OscConfig+0x100>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006286:	f7fe f85f 	bl	8004348 <HAL_GetTick>
 800628a:	0002      	movs	r2, r0
 800628c:	69bb      	ldr	r3, [r7, #24]
 800628e:	1ad3      	subs	r3, r2, r3
 8006290:	2b64      	cmp	r3, #100	; 0x64
 8006292:	d901      	bls.n	8006298 <HAL_RCC_OscConfig+0x100>
          {
            return HAL_TIMEOUT;
 8006294:	2303      	movs	r3, #3
 8006296:	e28c      	b.n	80067b2 <HAL_RCC_OscConfig+0x61a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006298:	4b8b      	ldr	r3, [pc, #556]	; (80064c8 <HAL_RCC_OscConfig+0x330>)
 800629a:	681a      	ldr	r2, [r3, #0]
 800629c:	2380      	movs	r3, #128	; 0x80
 800629e:	029b      	lsls	r3, r3, #10
 80062a0:	4013      	ands	r3, r2
 80062a2:	d0f0      	beq.n	8006286 <HAL_RCC_OscConfig+0xee>
 80062a4:	e015      	b.n	80062d2 <HAL_RCC_OscConfig+0x13a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80062a6:	f7fe f84f 	bl	8004348 <HAL_GetTick>
 80062aa:	0003      	movs	r3, r0
 80062ac:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80062ae:	e008      	b.n	80062c2 <HAL_RCC_OscConfig+0x12a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80062b0:	f7fe f84a 	bl	8004348 <HAL_GetTick>
 80062b4:	0002      	movs	r2, r0
 80062b6:	69bb      	ldr	r3, [r7, #24]
 80062b8:	1ad3      	subs	r3, r2, r3
 80062ba:	2b64      	cmp	r3, #100	; 0x64
 80062bc:	d901      	bls.n	80062c2 <HAL_RCC_OscConfig+0x12a>
          {
            return HAL_TIMEOUT;
 80062be:	2303      	movs	r3, #3
 80062c0:	e277      	b.n	80067b2 <HAL_RCC_OscConfig+0x61a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80062c2:	4b81      	ldr	r3, [pc, #516]	; (80064c8 <HAL_RCC_OscConfig+0x330>)
 80062c4:	681a      	ldr	r2, [r3, #0]
 80062c6:	2380      	movs	r3, #128	; 0x80
 80062c8:	029b      	lsls	r3, r3, #10
 80062ca:	4013      	ands	r3, r2
 80062cc:	d1f0      	bne.n	80062b0 <HAL_RCC_OscConfig+0x118>
 80062ce:	e000      	b.n	80062d2 <HAL_RCC_OscConfig+0x13a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80062d0:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80062d2:	687b      	ldr	r3, [r7, #4]
 80062d4:	681b      	ldr	r3, [r3, #0]
 80062d6:	2202      	movs	r2, #2
 80062d8:	4013      	ands	r3, r2
 80062da:	d100      	bne.n	80062de <HAL_RCC_OscConfig+0x146>
 80062dc:	e069      	b.n	80063b2 <HAL_RCC_OscConfig+0x21a>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 80062de:	4b7a      	ldr	r3, [pc, #488]	; (80064c8 <HAL_RCC_OscConfig+0x330>)
 80062e0:	685b      	ldr	r3, [r3, #4]
 80062e2:	220c      	movs	r2, #12
 80062e4:	4013      	ands	r3, r2
 80062e6:	d00b      	beq.n	8006300 <HAL_RCC_OscConfig+0x168>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 80062e8:	4b77      	ldr	r3, [pc, #476]	; (80064c8 <HAL_RCC_OscConfig+0x330>)
 80062ea:	685b      	ldr	r3, [r3, #4]
 80062ec:	220c      	movs	r2, #12
 80062ee:	4013      	ands	r3, r2
 80062f0:	2b08      	cmp	r3, #8
 80062f2:	d11c      	bne.n	800632e <HAL_RCC_OscConfig+0x196>
 80062f4:	4b74      	ldr	r3, [pc, #464]	; (80064c8 <HAL_RCC_OscConfig+0x330>)
 80062f6:	685a      	ldr	r2, [r3, #4]
 80062f8:	2380      	movs	r3, #128	; 0x80
 80062fa:	025b      	lsls	r3, r3, #9
 80062fc:	4013      	ands	r3, r2
 80062fe:	d116      	bne.n	800632e <HAL_RCC_OscConfig+0x196>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006300:	4b71      	ldr	r3, [pc, #452]	; (80064c8 <HAL_RCC_OscConfig+0x330>)
 8006302:	681b      	ldr	r3, [r3, #0]
 8006304:	2202      	movs	r2, #2
 8006306:	4013      	ands	r3, r2
 8006308:	d005      	beq.n	8006316 <HAL_RCC_OscConfig+0x17e>
 800630a:	687b      	ldr	r3, [r7, #4]
 800630c:	68db      	ldr	r3, [r3, #12]
 800630e:	2b01      	cmp	r3, #1
 8006310:	d001      	beq.n	8006316 <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 8006312:	2301      	movs	r3, #1
 8006314:	e24d      	b.n	80067b2 <HAL_RCC_OscConfig+0x61a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006316:	4b6c      	ldr	r3, [pc, #432]	; (80064c8 <HAL_RCC_OscConfig+0x330>)
 8006318:	681b      	ldr	r3, [r3, #0]
 800631a:	22f8      	movs	r2, #248	; 0xf8
 800631c:	4393      	bics	r3, r2
 800631e:	0019      	movs	r1, r3
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	691b      	ldr	r3, [r3, #16]
 8006324:	00da      	lsls	r2, r3, #3
 8006326:	4b68      	ldr	r3, [pc, #416]	; (80064c8 <HAL_RCC_OscConfig+0x330>)
 8006328:	430a      	orrs	r2, r1
 800632a:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800632c:	e041      	b.n	80063b2 <HAL_RCC_OscConfig+0x21a>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	68db      	ldr	r3, [r3, #12]
 8006332:	2b00      	cmp	r3, #0
 8006334:	d024      	beq.n	8006380 <HAL_RCC_OscConfig+0x1e8>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8006336:	4b64      	ldr	r3, [pc, #400]	; (80064c8 <HAL_RCC_OscConfig+0x330>)
 8006338:	681a      	ldr	r2, [r3, #0]
 800633a:	4b63      	ldr	r3, [pc, #396]	; (80064c8 <HAL_RCC_OscConfig+0x330>)
 800633c:	2101      	movs	r1, #1
 800633e:	430a      	orrs	r2, r1
 8006340:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006342:	f7fe f801 	bl	8004348 <HAL_GetTick>
 8006346:	0003      	movs	r3, r0
 8006348:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800634a:	e008      	b.n	800635e <HAL_RCC_OscConfig+0x1c6>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800634c:	f7fd fffc 	bl	8004348 <HAL_GetTick>
 8006350:	0002      	movs	r2, r0
 8006352:	69bb      	ldr	r3, [r7, #24]
 8006354:	1ad3      	subs	r3, r2, r3
 8006356:	2b02      	cmp	r3, #2
 8006358:	d901      	bls.n	800635e <HAL_RCC_OscConfig+0x1c6>
          {
            return HAL_TIMEOUT;
 800635a:	2303      	movs	r3, #3
 800635c:	e229      	b.n	80067b2 <HAL_RCC_OscConfig+0x61a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800635e:	4b5a      	ldr	r3, [pc, #360]	; (80064c8 <HAL_RCC_OscConfig+0x330>)
 8006360:	681b      	ldr	r3, [r3, #0]
 8006362:	2202      	movs	r2, #2
 8006364:	4013      	ands	r3, r2
 8006366:	d0f1      	beq.n	800634c <HAL_RCC_OscConfig+0x1b4>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006368:	4b57      	ldr	r3, [pc, #348]	; (80064c8 <HAL_RCC_OscConfig+0x330>)
 800636a:	681b      	ldr	r3, [r3, #0]
 800636c:	22f8      	movs	r2, #248	; 0xf8
 800636e:	4393      	bics	r3, r2
 8006370:	0019      	movs	r1, r3
 8006372:	687b      	ldr	r3, [r7, #4]
 8006374:	691b      	ldr	r3, [r3, #16]
 8006376:	00da      	lsls	r2, r3, #3
 8006378:	4b53      	ldr	r3, [pc, #332]	; (80064c8 <HAL_RCC_OscConfig+0x330>)
 800637a:	430a      	orrs	r2, r1
 800637c:	601a      	str	r2, [r3, #0]
 800637e:	e018      	b.n	80063b2 <HAL_RCC_OscConfig+0x21a>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006380:	4b51      	ldr	r3, [pc, #324]	; (80064c8 <HAL_RCC_OscConfig+0x330>)
 8006382:	681a      	ldr	r2, [r3, #0]
 8006384:	4b50      	ldr	r3, [pc, #320]	; (80064c8 <HAL_RCC_OscConfig+0x330>)
 8006386:	2101      	movs	r1, #1
 8006388:	438a      	bics	r2, r1
 800638a:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800638c:	f7fd ffdc 	bl	8004348 <HAL_GetTick>
 8006390:	0003      	movs	r3, r0
 8006392:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006394:	e008      	b.n	80063a8 <HAL_RCC_OscConfig+0x210>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006396:	f7fd ffd7 	bl	8004348 <HAL_GetTick>
 800639a:	0002      	movs	r2, r0
 800639c:	69bb      	ldr	r3, [r7, #24]
 800639e:	1ad3      	subs	r3, r2, r3
 80063a0:	2b02      	cmp	r3, #2
 80063a2:	d901      	bls.n	80063a8 <HAL_RCC_OscConfig+0x210>
          {
            return HAL_TIMEOUT;
 80063a4:	2303      	movs	r3, #3
 80063a6:	e204      	b.n	80067b2 <HAL_RCC_OscConfig+0x61a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80063a8:	4b47      	ldr	r3, [pc, #284]	; (80064c8 <HAL_RCC_OscConfig+0x330>)
 80063aa:	681b      	ldr	r3, [r3, #0]
 80063ac:	2202      	movs	r2, #2
 80063ae:	4013      	ands	r3, r2
 80063b0:	d1f1      	bne.n	8006396 <HAL_RCC_OscConfig+0x1fe>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80063b2:	687b      	ldr	r3, [r7, #4]
 80063b4:	681b      	ldr	r3, [r3, #0]
 80063b6:	2208      	movs	r2, #8
 80063b8:	4013      	ands	r3, r2
 80063ba:	d036      	beq.n	800642a <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	69db      	ldr	r3, [r3, #28]
 80063c0:	2b00      	cmp	r3, #0
 80063c2:	d019      	beq.n	80063f8 <HAL_RCC_OscConfig+0x260>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80063c4:	4b40      	ldr	r3, [pc, #256]	; (80064c8 <HAL_RCC_OscConfig+0x330>)
 80063c6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80063c8:	4b3f      	ldr	r3, [pc, #252]	; (80064c8 <HAL_RCC_OscConfig+0x330>)
 80063ca:	2101      	movs	r1, #1
 80063cc:	430a      	orrs	r2, r1
 80063ce:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80063d0:	f7fd ffba 	bl	8004348 <HAL_GetTick>
 80063d4:	0003      	movs	r3, r0
 80063d6:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80063d8:	e008      	b.n	80063ec <HAL_RCC_OscConfig+0x254>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80063da:	f7fd ffb5 	bl	8004348 <HAL_GetTick>
 80063de:	0002      	movs	r2, r0
 80063e0:	69bb      	ldr	r3, [r7, #24]
 80063e2:	1ad3      	subs	r3, r2, r3
 80063e4:	2b02      	cmp	r3, #2
 80063e6:	d901      	bls.n	80063ec <HAL_RCC_OscConfig+0x254>
        {
          return HAL_TIMEOUT;
 80063e8:	2303      	movs	r3, #3
 80063ea:	e1e2      	b.n	80067b2 <HAL_RCC_OscConfig+0x61a>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80063ec:	4b36      	ldr	r3, [pc, #216]	; (80064c8 <HAL_RCC_OscConfig+0x330>)
 80063ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80063f0:	2202      	movs	r2, #2
 80063f2:	4013      	ands	r3, r2
 80063f4:	d0f1      	beq.n	80063da <HAL_RCC_OscConfig+0x242>
 80063f6:	e018      	b.n	800642a <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80063f8:	4b33      	ldr	r3, [pc, #204]	; (80064c8 <HAL_RCC_OscConfig+0x330>)
 80063fa:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80063fc:	4b32      	ldr	r3, [pc, #200]	; (80064c8 <HAL_RCC_OscConfig+0x330>)
 80063fe:	2101      	movs	r1, #1
 8006400:	438a      	bics	r2, r1
 8006402:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006404:	f7fd ffa0 	bl	8004348 <HAL_GetTick>
 8006408:	0003      	movs	r3, r0
 800640a:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800640c:	e008      	b.n	8006420 <HAL_RCC_OscConfig+0x288>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800640e:	f7fd ff9b 	bl	8004348 <HAL_GetTick>
 8006412:	0002      	movs	r2, r0
 8006414:	69bb      	ldr	r3, [r7, #24]
 8006416:	1ad3      	subs	r3, r2, r3
 8006418:	2b02      	cmp	r3, #2
 800641a:	d901      	bls.n	8006420 <HAL_RCC_OscConfig+0x288>
        {
          return HAL_TIMEOUT;
 800641c:	2303      	movs	r3, #3
 800641e:	e1c8      	b.n	80067b2 <HAL_RCC_OscConfig+0x61a>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006420:	4b29      	ldr	r3, [pc, #164]	; (80064c8 <HAL_RCC_OscConfig+0x330>)
 8006422:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006424:	2202      	movs	r2, #2
 8006426:	4013      	ands	r3, r2
 8006428:	d1f1      	bne.n	800640e <HAL_RCC_OscConfig+0x276>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	681b      	ldr	r3, [r3, #0]
 800642e:	2204      	movs	r2, #4
 8006430:	4013      	ands	r3, r2
 8006432:	d100      	bne.n	8006436 <HAL_RCC_OscConfig+0x29e>
 8006434:	e0b6      	b.n	80065a4 <HAL_RCC_OscConfig+0x40c>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006436:	231f      	movs	r3, #31
 8006438:	18fb      	adds	r3, r7, r3
 800643a:	2200      	movs	r2, #0
 800643c:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800643e:	4b22      	ldr	r3, [pc, #136]	; (80064c8 <HAL_RCC_OscConfig+0x330>)
 8006440:	69da      	ldr	r2, [r3, #28]
 8006442:	2380      	movs	r3, #128	; 0x80
 8006444:	055b      	lsls	r3, r3, #21
 8006446:	4013      	ands	r3, r2
 8006448:	d111      	bne.n	800646e <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800644a:	4b1f      	ldr	r3, [pc, #124]	; (80064c8 <HAL_RCC_OscConfig+0x330>)
 800644c:	69da      	ldr	r2, [r3, #28]
 800644e:	4b1e      	ldr	r3, [pc, #120]	; (80064c8 <HAL_RCC_OscConfig+0x330>)
 8006450:	2180      	movs	r1, #128	; 0x80
 8006452:	0549      	lsls	r1, r1, #21
 8006454:	430a      	orrs	r2, r1
 8006456:	61da      	str	r2, [r3, #28]
 8006458:	4b1b      	ldr	r3, [pc, #108]	; (80064c8 <HAL_RCC_OscConfig+0x330>)
 800645a:	69da      	ldr	r2, [r3, #28]
 800645c:	2380      	movs	r3, #128	; 0x80
 800645e:	055b      	lsls	r3, r3, #21
 8006460:	4013      	ands	r3, r2
 8006462:	60fb      	str	r3, [r7, #12]
 8006464:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8006466:	231f      	movs	r3, #31
 8006468:	18fb      	adds	r3, r7, r3
 800646a:	2201      	movs	r2, #1
 800646c:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800646e:	4b19      	ldr	r3, [pc, #100]	; (80064d4 <HAL_RCC_OscConfig+0x33c>)
 8006470:	681a      	ldr	r2, [r3, #0]
 8006472:	2380      	movs	r3, #128	; 0x80
 8006474:	005b      	lsls	r3, r3, #1
 8006476:	4013      	ands	r3, r2
 8006478:	d11a      	bne.n	80064b0 <HAL_RCC_OscConfig+0x318>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800647a:	4b16      	ldr	r3, [pc, #88]	; (80064d4 <HAL_RCC_OscConfig+0x33c>)
 800647c:	681a      	ldr	r2, [r3, #0]
 800647e:	4b15      	ldr	r3, [pc, #84]	; (80064d4 <HAL_RCC_OscConfig+0x33c>)
 8006480:	2180      	movs	r1, #128	; 0x80
 8006482:	0049      	lsls	r1, r1, #1
 8006484:	430a      	orrs	r2, r1
 8006486:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006488:	f7fd ff5e 	bl	8004348 <HAL_GetTick>
 800648c:	0003      	movs	r3, r0
 800648e:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006490:	e008      	b.n	80064a4 <HAL_RCC_OscConfig+0x30c>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006492:	f7fd ff59 	bl	8004348 <HAL_GetTick>
 8006496:	0002      	movs	r2, r0
 8006498:	69bb      	ldr	r3, [r7, #24]
 800649a:	1ad3      	subs	r3, r2, r3
 800649c:	2b64      	cmp	r3, #100	; 0x64
 800649e:	d901      	bls.n	80064a4 <HAL_RCC_OscConfig+0x30c>
        {
          return HAL_TIMEOUT;
 80064a0:	2303      	movs	r3, #3
 80064a2:	e186      	b.n	80067b2 <HAL_RCC_OscConfig+0x61a>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80064a4:	4b0b      	ldr	r3, [pc, #44]	; (80064d4 <HAL_RCC_OscConfig+0x33c>)
 80064a6:	681a      	ldr	r2, [r3, #0]
 80064a8:	2380      	movs	r3, #128	; 0x80
 80064aa:	005b      	lsls	r3, r3, #1
 80064ac:	4013      	ands	r3, r2
 80064ae:	d0f0      	beq.n	8006492 <HAL_RCC_OscConfig+0x2fa>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	689b      	ldr	r3, [r3, #8]
 80064b4:	2b01      	cmp	r3, #1
 80064b6:	d10f      	bne.n	80064d8 <HAL_RCC_OscConfig+0x340>
 80064b8:	4b03      	ldr	r3, [pc, #12]	; (80064c8 <HAL_RCC_OscConfig+0x330>)
 80064ba:	6a1a      	ldr	r2, [r3, #32]
 80064bc:	4b02      	ldr	r3, [pc, #8]	; (80064c8 <HAL_RCC_OscConfig+0x330>)
 80064be:	2101      	movs	r1, #1
 80064c0:	430a      	orrs	r2, r1
 80064c2:	621a      	str	r2, [r3, #32]
 80064c4:	e036      	b.n	8006534 <HAL_RCC_OscConfig+0x39c>
 80064c6:	46c0      	nop			; (mov r8, r8)
 80064c8:	40021000 	.word	0x40021000
 80064cc:	fffeffff 	.word	0xfffeffff
 80064d0:	fffbffff 	.word	0xfffbffff
 80064d4:	40007000 	.word	0x40007000
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	689b      	ldr	r3, [r3, #8]
 80064dc:	2b00      	cmp	r3, #0
 80064de:	d10c      	bne.n	80064fa <HAL_RCC_OscConfig+0x362>
 80064e0:	4bb6      	ldr	r3, [pc, #728]	; (80067bc <HAL_RCC_OscConfig+0x624>)
 80064e2:	6a1a      	ldr	r2, [r3, #32]
 80064e4:	4bb5      	ldr	r3, [pc, #724]	; (80067bc <HAL_RCC_OscConfig+0x624>)
 80064e6:	2101      	movs	r1, #1
 80064e8:	438a      	bics	r2, r1
 80064ea:	621a      	str	r2, [r3, #32]
 80064ec:	4bb3      	ldr	r3, [pc, #716]	; (80067bc <HAL_RCC_OscConfig+0x624>)
 80064ee:	6a1a      	ldr	r2, [r3, #32]
 80064f0:	4bb2      	ldr	r3, [pc, #712]	; (80067bc <HAL_RCC_OscConfig+0x624>)
 80064f2:	2104      	movs	r1, #4
 80064f4:	438a      	bics	r2, r1
 80064f6:	621a      	str	r2, [r3, #32]
 80064f8:	e01c      	b.n	8006534 <HAL_RCC_OscConfig+0x39c>
 80064fa:	687b      	ldr	r3, [r7, #4]
 80064fc:	689b      	ldr	r3, [r3, #8]
 80064fe:	2b05      	cmp	r3, #5
 8006500:	d10c      	bne.n	800651c <HAL_RCC_OscConfig+0x384>
 8006502:	4bae      	ldr	r3, [pc, #696]	; (80067bc <HAL_RCC_OscConfig+0x624>)
 8006504:	6a1a      	ldr	r2, [r3, #32]
 8006506:	4bad      	ldr	r3, [pc, #692]	; (80067bc <HAL_RCC_OscConfig+0x624>)
 8006508:	2104      	movs	r1, #4
 800650a:	430a      	orrs	r2, r1
 800650c:	621a      	str	r2, [r3, #32]
 800650e:	4bab      	ldr	r3, [pc, #684]	; (80067bc <HAL_RCC_OscConfig+0x624>)
 8006510:	6a1a      	ldr	r2, [r3, #32]
 8006512:	4baa      	ldr	r3, [pc, #680]	; (80067bc <HAL_RCC_OscConfig+0x624>)
 8006514:	2101      	movs	r1, #1
 8006516:	430a      	orrs	r2, r1
 8006518:	621a      	str	r2, [r3, #32]
 800651a:	e00b      	b.n	8006534 <HAL_RCC_OscConfig+0x39c>
 800651c:	4ba7      	ldr	r3, [pc, #668]	; (80067bc <HAL_RCC_OscConfig+0x624>)
 800651e:	6a1a      	ldr	r2, [r3, #32]
 8006520:	4ba6      	ldr	r3, [pc, #664]	; (80067bc <HAL_RCC_OscConfig+0x624>)
 8006522:	2101      	movs	r1, #1
 8006524:	438a      	bics	r2, r1
 8006526:	621a      	str	r2, [r3, #32]
 8006528:	4ba4      	ldr	r3, [pc, #656]	; (80067bc <HAL_RCC_OscConfig+0x624>)
 800652a:	6a1a      	ldr	r2, [r3, #32]
 800652c:	4ba3      	ldr	r3, [pc, #652]	; (80067bc <HAL_RCC_OscConfig+0x624>)
 800652e:	2104      	movs	r1, #4
 8006530:	438a      	bics	r2, r1
 8006532:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	689b      	ldr	r3, [r3, #8]
 8006538:	2b00      	cmp	r3, #0
 800653a:	d014      	beq.n	8006566 <HAL_RCC_OscConfig+0x3ce>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800653c:	f7fd ff04 	bl	8004348 <HAL_GetTick>
 8006540:	0003      	movs	r3, r0
 8006542:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006544:	e009      	b.n	800655a <HAL_RCC_OscConfig+0x3c2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006546:	f7fd feff 	bl	8004348 <HAL_GetTick>
 800654a:	0002      	movs	r2, r0
 800654c:	69bb      	ldr	r3, [r7, #24]
 800654e:	1ad3      	subs	r3, r2, r3
 8006550:	4a9b      	ldr	r2, [pc, #620]	; (80067c0 <HAL_RCC_OscConfig+0x628>)
 8006552:	4293      	cmp	r3, r2
 8006554:	d901      	bls.n	800655a <HAL_RCC_OscConfig+0x3c2>
        {
          return HAL_TIMEOUT;
 8006556:	2303      	movs	r3, #3
 8006558:	e12b      	b.n	80067b2 <HAL_RCC_OscConfig+0x61a>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800655a:	4b98      	ldr	r3, [pc, #608]	; (80067bc <HAL_RCC_OscConfig+0x624>)
 800655c:	6a1b      	ldr	r3, [r3, #32]
 800655e:	2202      	movs	r2, #2
 8006560:	4013      	ands	r3, r2
 8006562:	d0f0      	beq.n	8006546 <HAL_RCC_OscConfig+0x3ae>
 8006564:	e013      	b.n	800658e <HAL_RCC_OscConfig+0x3f6>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006566:	f7fd feef 	bl	8004348 <HAL_GetTick>
 800656a:	0003      	movs	r3, r0
 800656c:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800656e:	e009      	b.n	8006584 <HAL_RCC_OscConfig+0x3ec>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006570:	f7fd feea 	bl	8004348 <HAL_GetTick>
 8006574:	0002      	movs	r2, r0
 8006576:	69bb      	ldr	r3, [r7, #24]
 8006578:	1ad3      	subs	r3, r2, r3
 800657a:	4a91      	ldr	r2, [pc, #580]	; (80067c0 <HAL_RCC_OscConfig+0x628>)
 800657c:	4293      	cmp	r3, r2
 800657e:	d901      	bls.n	8006584 <HAL_RCC_OscConfig+0x3ec>
        {
          return HAL_TIMEOUT;
 8006580:	2303      	movs	r3, #3
 8006582:	e116      	b.n	80067b2 <HAL_RCC_OscConfig+0x61a>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006584:	4b8d      	ldr	r3, [pc, #564]	; (80067bc <HAL_RCC_OscConfig+0x624>)
 8006586:	6a1b      	ldr	r3, [r3, #32]
 8006588:	2202      	movs	r2, #2
 800658a:	4013      	ands	r3, r2
 800658c:	d1f0      	bne.n	8006570 <HAL_RCC_OscConfig+0x3d8>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800658e:	231f      	movs	r3, #31
 8006590:	18fb      	adds	r3, r7, r3
 8006592:	781b      	ldrb	r3, [r3, #0]
 8006594:	2b01      	cmp	r3, #1
 8006596:	d105      	bne.n	80065a4 <HAL_RCC_OscConfig+0x40c>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006598:	4b88      	ldr	r3, [pc, #544]	; (80067bc <HAL_RCC_OscConfig+0x624>)
 800659a:	69da      	ldr	r2, [r3, #28]
 800659c:	4b87      	ldr	r3, [pc, #540]	; (80067bc <HAL_RCC_OscConfig+0x624>)
 800659e:	4989      	ldr	r1, [pc, #548]	; (80067c4 <HAL_RCC_OscConfig+0x62c>)
 80065a0:	400a      	ands	r2, r1
 80065a2:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 80065a4:	687b      	ldr	r3, [r7, #4]
 80065a6:	681b      	ldr	r3, [r3, #0]
 80065a8:	2210      	movs	r2, #16
 80065aa:	4013      	ands	r3, r2
 80065ac:	d063      	beq.n	8006676 <HAL_RCC_OscConfig+0x4de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 80065ae:	687b      	ldr	r3, [r7, #4]
 80065b0:	695b      	ldr	r3, [r3, #20]
 80065b2:	2b01      	cmp	r3, #1
 80065b4:	d12a      	bne.n	800660c <HAL_RCC_OscConfig+0x474>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 80065b6:	4b81      	ldr	r3, [pc, #516]	; (80067bc <HAL_RCC_OscConfig+0x624>)
 80065b8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80065ba:	4b80      	ldr	r3, [pc, #512]	; (80067bc <HAL_RCC_OscConfig+0x624>)
 80065bc:	2104      	movs	r1, #4
 80065be:	430a      	orrs	r2, r1
 80065c0:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 80065c2:	4b7e      	ldr	r3, [pc, #504]	; (80067bc <HAL_RCC_OscConfig+0x624>)
 80065c4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80065c6:	4b7d      	ldr	r3, [pc, #500]	; (80067bc <HAL_RCC_OscConfig+0x624>)
 80065c8:	2101      	movs	r1, #1
 80065ca:	430a      	orrs	r2, r1
 80065cc:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80065ce:	f7fd febb 	bl	8004348 <HAL_GetTick>
 80065d2:	0003      	movs	r3, r0
 80065d4:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 80065d6:	e008      	b.n	80065ea <HAL_RCC_OscConfig+0x452>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 80065d8:	f7fd feb6 	bl	8004348 <HAL_GetTick>
 80065dc:	0002      	movs	r2, r0
 80065de:	69bb      	ldr	r3, [r7, #24]
 80065e0:	1ad3      	subs	r3, r2, r3
 80065e2:	2b02      	cmp	r3, #2
 80065e4:	d901      	bls.n	80065ea <HAL_RCC_OscConfig+0x452>
        {
          return HAL_TIMEOUT;
 80065e6:	2303      	movs	r3, #3
 80065e8:	e0e3      	b.n	80067b2 <HAL_RCC_OscConfig+0x61a>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 80065ea:	4b74      	ldr	r3, [pc, #464]	; (80067bc <HAL_RCC_OscConfig+0x624>)
 80065ec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80065ee:	2202      	movs	r2, #2
 80065f0:	4013      	ands	r3, r2
 80065f2:	d0f1      	beq.n	80065d8 <HAL_RCC_OscConfig+0x440>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 80065f4:	4b71      	ldr	r3, [pc, #452]	; (80067bc <HAL_RCC_OscConfig+0x624>)
 80065f6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80065f8:	22f8      	movs	r2, #248	; 0xf8
 80065fa:	4393      	bics	r3, r2
 80065fc:	0019      	movs	r1, r3
 80065fe:	687b      	ldr	r3, [r7, #4]
 8006600:	699b      	ldr	r3, [r3, #24]
 8006602:	00da      	lsls	r2, r3, #3
 8006604:	4b6d      	ldr	r3, [pc, #436]	; (80067bc <HAL_RCC_OscConfig+0x624>)
 8006606:	430a      	orrs	r2, r1
 8006608:	635a      	str	r2, [r3, #52]	; 0x34
 800660a:	e034      	b.n	8006676 <HAL_RCC_OscConfig+0x4de>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	695b      	ldr	r3, [r3, #20]
 8006610:	3305      	adds	r3, #5
 8006612:	d111      	bne.n	8006638 <HAL_RCC_OscConfig+0x4a0>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 8006614:	4b69      	ldr	r3, [pc, #420]	; (80067bc <HAL_RCC_OscConfig+0x624>)
 8006616:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006618:	4b68      	ldr	r3, [pc, #416]	; (80067bc <HAL_RCC_OscConfig+0x624>)
 800661a:	2104      	movs	r1, #4
 800661c:	438a      	bics	r2, r1
 800661e:	635a      	str	r2, [r3, #52]	; 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8006620:	4b66      	ldr	r3, [pc, #408]	; (80067bc <HAL_RCC_OscConfig+0x624>)
 8006622:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006624:	22f8      	movs	r2, #248	; 0xf8
 8006626:	4393      	bics	r3, r2
 8006628:	0019      	movs	r1, r3
 800662a:	687b      	ldr	r3, [r7, #4]
 800662c:	699b      	ldr	r3, [r3, #24]
 800662e:	00da      	lsls	r2, r3, #3
 8006630:	4b62      	ldr	r3, [pc, #392]	; (80067bc <HAL_RCC_OscConfig+0x624>)
 8006632:	430a      	orrs	r2, r1
 8006634:	635a      	str	r2, [r3, #52]	; 0x34
 8006636:	e01e      	b.n	8006676 <HAL_RCC_OscConfig+0x4de>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8006638:	4b60      	ldr	r3, [pc, #384]	; (80067bc <HAL_RCC_OscConfig+0x624>)
 800663a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800663c:	4b5f      	ldr	r3, [pc, #380]	; (80067bc <HAL_RCC_OscConfig+0x624>)
 800663e:	2104      	movs	r1, #4
 8006640:	430a      	orrs	r2, r1
 8006642:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 8006644:	4b5d      	ldr	r3, [pc, #372]	; (80067bc <HAL_RCC_OscConfig+0x624>)
 8006646:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006648:	4b5c      	ldr	r3, [pc, #368]	; (80067bc <HAL_RCC_OscConfig+0x624>)
 800664a:	2101      	movs	r1, #1
 800664c:	438a      	bics	r2, r1
 800664e:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006650:	f7fd fe7a 	bl	8004348 <HAL_GetTick>
 8006654:	0003      	movs	r3, r0
 8006656:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8006658:	e008      	b.n	800666c <HAL_RCC_OscConfig+0x4d4>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 800665a:	f7fd fe75 	bl	8004348 <HAL_GetTick>
 800665e:	0002      	movs	r2, r0
 8006660:	69bb      	ldr	r3, [r7, #24]
 8006662:	1ad3      	subs	r3, r2, r3
 8006664:	2b02      	cmp	r3, #2
 8006666:	d901      	bls.n	800666c <HAL_RCC_OscConfig+0x4d4>
        {
          return HAL_TIMEOUT;
 8006668:	2303      	movs	r3, #3
 800666a:	e0a2      	b.n	80067b2 <HAL_RCC_OscConfig+0x61a>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 800666c:	4b53      	ldr	r3, [pc, #332]	; (80067bc <HAL_RCC_OscConfig+0x624>)
 800666e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006670:	2202      	movs	r2, #2
 8006672:	4013      	ands	r3, r2
 8006674:	d1f1      	bne.n	800665a <HAL_RCC_OscConfig+0x4c2>
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8006676:	687b      	ldr	r3, [r7, #4]
 8006678:	6a1b      	ldr	r3, [r3, #32]
 800667a:	2b00      	cmp	r3, #0
 800667c:	d100      	bne.n	8006680 <HAL_RCC_OscConfig+0x4e8>
 800667e:	e097      	b.n	80067b0 <HAL_RCC_OscConfig+0x618>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8006680:	4b4e      	ldr	r3, [pc, #312]	; (80067bc <HAL_RCC_OscConfig+0x624>)
 8006682:	685b      	ldr	r3, [r3, #4]
 8006684:	220c      	movs	r2, #12
 8006686:	4013      	ands	r3, r2
 8006688:	2b08      	cmp	r3, #8
 800668a:	d100      	bne.n	800668e <HAL_RCC_OscConfig+0x4f6>
 800668c:	e06b      	b.n	8006766 <HAL_RCC_OscConfig+0x5ce>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800668e:	687b      	ldr	r3, [r7, #4]
 8006690:	6a1b      	ldr	r3, [r3, #32]
 8006692:	2b02      	cmp	r3, #2
 8006694:	d14c      	bne.n	8006730 <HAL_RCC_OscConfig+0x598>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006696:	4b49      	ldr	r3, [pc, #292]	; (80067bc <HAL_RCC_OscConfig+0x624>)
 8006698:	681a      	ldr	r2, [r3, #0]
 800669a:	4b48      	ldr	r3, [pc, #288]	; (80067bc <HAL_RCC_OscConfig+0x624>)
 800669c:	494a      	ldr	r1, [pc, #296]	; (80067c8 <HAL_RCC_OscConfig+0x630>)
 800669e:	400a      	ands	r2, r1
 80066a0:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80066a2:	f7fd fe51 	bl	8004348 <HAL_GetTick>
 80066a6:	0003      	movs	r3, r0
 80066a8:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80066aa:	e008      	b.n	80066be <HAL_RCC_OscConfig+0x526>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80066ac:	f7fd fe4c 	bl	8004348 <HAL_GetTick>
 80066b0:	0002      	movs	r2, r0
 80066b2:	69bb      	ldr	r3, [r7, #24]
 80066b4:	1ad3      	subs	r3, r2, r3
 80066b6:	2b02      	cmp	r3, #2
 80066b8:	d901      	bls.n	80066be <HAL_RCC_OscConfig+0x526>
          {
            return HAL_TIMEOUT;
 80066ba:	2303      	movs	r3, #3
 80066bc:	e079      	b.n	80067b2 <HAL_RCC_OscConfig+0x61a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80066be:	4b3f      	ldr	r3, [pc, #252]	; (80067bc <HAL_RCC_OscConfig+0x624>)
 80066c0:	681a      	ldr	r2, [r3, #0]
 80066c2:	2380      	movs	r3, #128	; 0x80
 80066c4:	049b      	lsls	r3, r3, #18
 80066c6:	4013      	ands	r3, r2
 80066c8:	d1f0      	bne.n	80066ac <HAL_RCC_OscConfig+0x514>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80066ca:	4b3c      	ldr	r3, [pc, #240]	; (80067bc <HAL_RCC_OscConfig+0x624>)
 80066cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80066ce:	220f      	movs	r2, #15
 80066d0:	4393      	bics	r3, r2
 80066d2:	0019      	movs	r1, r3
 80066d4:	687b      	ldr	r3, [r7, #4]
 80066d6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80066d8:	4b38      	ldr	r3, [pc, #224]	; (80067bc <HAL_RCC_OscConfig+0x624>)
 80066da:	430a      	orrs	r2, r1
 80066dc:	62da      	str	r2, [r3, #44]	; 0x2c
 80066de:	4b37      	ldr	r3, [pc, #220]	; (80067bc <HAL_RCC_OscConfig+0x624>)
 80066e0:	685b      	ldr	r3, [r3, #4]
 80066e2:	4a3a      	ldr	r2, [pc, #232]	; (80067cc <HAL_RCC_OscConfig+0x634>)
 80066e4:	4013      	ands	r3, r2
 80066e6:	0019      	movs	r1, r3
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80066f0:	431a      	orrs	r2, r3
 80066f2:	4b32      	ldr	r3, [pc, #200]	; (80067bc <HAL_RCC_OscConfig+0x624>)
 80066f4:	430a      	orrs	r2, r1
 80066f6:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80066f8:	4b30      	ldr	r3, [pc, #192]	; (80067bc <HAL_RCC_OscConfig+0x624>)
 80066fa:	681a      	ldr	r2, [r3, #0]
 80066fc:	4b2f      	ldr	r3, [pc, #188]	; (80067bc <HAL_RCC_OscConfig+0x624>)
 80066fe:	2180      	movs	r1, #128	; 0x80
 8006700:	0449      	lsls	r1, r1, #17
 8006702:	430a      	orrs	r2, r1
 8006704:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006706:	f7fd fe1f 	bl	8004348 <HAL_GetTick>
 800670a:	0003      	movs	r3, r0
 800670c:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800670e:	e008      	b.n	8006722 <HAL_RCC_OscConfig+0x58a>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006710:	f7fd fe1a 	bl	8004348 <HAL_GetTick>
 8006714:	0002      	movs	r2, r0
 8006716:	69bb      	ldr	r3, [r7, #24]
 8006718:	1ad3      	subs	r3, r2, r3
 800671a:	2b02      	cmp	r3, #2
 800671c:	d901      	bls.n	8006722 <HAL_RCC_OscConfig+0x58a>
          {
            return HAL_TIMEOUT;
 800671e:	2303      	movs	r3, #3
 8006720:	e047      	b.n	80067b2 <HAL_RCC_OscConfig+0x61a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8006722:	4b26      	ldr	r3, [pc, #152]	; (80067bc <HAL_RCC_OscConfig+0x624>)
 8006724:	681a      	ldr	r2, [r3, #0]
 8006726:	2380      	movs	r3, #128	; 0x80
 8006728:	049b      	lsls	r3, r3, #18
 800672a:	4013      	ands	r3, r2
 800672c:	d0f0      	beq.n	8006710 <HAL_RCC_OscConfig+0x578>
 800672e:	e03f      	b.n	80067b0 <HAL_RCC_OscConfig+0x618>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006730:	4b22      	ldr	r3, [pc, #136]	; (80067bc <HAL_RCC_OscConfig+0x624>)
 8006732:	681a      	ldr	r2, [r3, #0]
 8006734:	4b21      	ldr	r3, [pc, #132]	; (80067bc <HAL_RCC_OscConfig+0x624>)
 8006736:	4924      	ldr	r1, [pc, #144]	; (80067c8 <HAL_RCC_OscConfig+0x630>)
 8006738:	400a      	ands	r2, r1
 800673a:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800673c:	f7fd fe04 	bl	8004348 <HAL_GetTick>
 8006740:	0003      	movs	r3, r0
 8006742:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8006744:	e008      	b.n	8006758 <HAL_RCC_OscConfig+0x5c0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006746:	f7fd fdff 	bl	8004348 <HAL_GetTick>
 800674a:	0002      	movs	r2, r0
 800674c:	69bb      	ldr	r3, [r7, #24]
 800674e:	1ad3      	subs	r3, r2, r3
 8006750:	2b02      	cmp	r3, #2
 8006752:	d901      	bls.n	8006758 <HAL_RCC_OscConfig+0x5c0>
          {
            return HAL_TIMEOUT;
 8006754:	2303      	movs	r3, #3
 8006756:	e02c      	b.n	80067b2 <HAL_RCC_OscConfig+0x61a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8006758:	4b18      	ldr	r3, [pc, #96]	; (80067bc <HAL_RCC_OscConfig+0x624>)
 800675a:	681a      	ldr	r2, [r3, #0]
 800675c:	2380      	movs	r3, #128	; 0x80
 800675e:	049b      	lsls	r3, r3, #18
 8006760:	4013      	ands	r3, r2
 8006762:	d1f0      	bne.n	8006746 <HAL_RCC_OscConfig+0x5ae>
 8006764:	e024      	b.n	80067b0 <HAL_RCC_OscConfig+0x618>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8006766:	687b      	ldr	r3, [r7, #4]
 8006768:	6a1b      	ldr	r3, [r3, #32]
 800676a:	2b01      	cmp	r3, #1
 800676c:	d101      	bne.n	8006772 <HAL_RCC_OscConfig+0x5da>
      {
        return HAL_ERROR;
 800676e:	2301      	movs	r3, #1
 8006770:	e01f      	b.n	80067b2 <HAL_RCC_OscConfig+0x61a>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 8006772:	4b12      	ldr	r3, [pc, #72]	; (80067bc <HAL_RCC_OscConfig+0x624>)
 8006774:	685b      	ldr	r3, [r3, #4]
 8006776:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 8006778:	4b10      	ldr	r3, [pc, #64]	; (80067bc <HAL_RCC_OscConfig+0x624>)
 800677a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800677c:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800677e:	697a      	ldr	r2, [r7, #20]
 8006780:	2380      	movs	r3, #128	; 0x80
 8006782:	025b      	lsls	r3, r3, #9
 8006784:	401a      	ands	r2, r3
 8006786:	687b      	ldr	r3, [r7, #4]
 8006788:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800678a:	429a      	cmp	r2, r3
 800678c:	d10e      	bne.n	80067ac <HAL_RCC_OscConfig+0x614>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 800678e:	693b      	ldr	r3, [r7, #16]
 8006790:	220f      	movs	r2, #15
 8006792:	401a      	ands	r2, r3
 8006794:	687b      	ldr	r3, [r7, #4]
 8006796:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8006798:	429a      	cmp	r2, r3
 800679a:	d107      	bne.n	80067ac <HAL_RCC_OscConfig+0x614>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 800679c:	697a      	ldr	r2, [r7, #20]
 800679e:	23f0      	movs	r3, #240	; 0xf0
 80067a0:	039b      	lsls	r3, r3, #14
 80067a2:	401a      	ands	r2, r3
 80067a4:	687b      	ldr	r3, [r7, #4]
 80067a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 80067a8:	429a      	cmp	r2, r3
 80067aa:	d001      	beq.n	80067b0 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_ERROR;
 80067ac:	2301      	movs	r3, #1
 80067ae:	e000      	b.n	80067b2 <HAL_RCC_OscConfig+0x61a>
        }
      }
    }
  }

  return HAL_OK;
 80067b0:	2300      	movs	r3, #0
}
 80067b2:	0018      	movs	r0, r3
 80067b4:	46bd      	mov	sp, r7
 80067b6:	b008      	add	sp, #32
 80067b8:	bd80      	pop	{r7, pc}
 80067ba:	46c0      	nop			; (mov r8, r8)
 80067bc:	40021000 	.word	0x40021000
 80067c0:	00001388 	.word	0x00001388
 80067c4:	efffffff 	.word	0xefffffff
 80067c8:	feffffff 	.word	0xfeffffff
 80067cc:	ffc2ffff 	.word	0xffc2ffff

080067d0 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80067d0:	b580      	push	{r7, lr}
 80067d2:	b084      	sub	sp, #16
 80067d4:	af00      	add	r7, sp, #0
 80067d6:	6078      	str	r0, [r7, #4]
 80067d8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80067da:	687b      	ldr	r3, [r7, #4]
 80067dc:	2b00      	cmp	r3, #0
 80067de:	d101      	bne.n	80067e4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80067e0:	2301      	movs	r3, #1
 80067e2:	e0b3      	b.n	800694c <HAL_RCC_ClockConfig+0x17c>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80067e4:	4b5b      	ldr	r3, [pc, #364]	; (8006954 <HAL_RCC_ClockConfig+0x184>)
 80067e6:	681b      	ldr	r3, [r3, #0]
 80067e8:	2201      	movs	r2, #1
 80067ea:	4013      	ands	r3, r2
 80067ec:	683a      	ldr	r2, [r7, #0]
 80067ee:	429a      	cmp	r2, r3
 80067f0:	d911      	bls.n	8006816 <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80067f2:	4b58      	ldr	r3, [pc, #352]	; (8006954 <HAL_RCC_ClockConfig+0x184>)
 80067f4:	681b      	ldr	r3, [r3, #0]
 80067f6:	2201      	movs	r2, #1
 80067f8:	4393      	bics	r3, r2
 80067fa:	0019      	movs	r1, r3
 80067fc:	4b55      	ldr	r3, [pc, #340]	; (8006954 <HAL_RCC_ClockConfig+0x184>)
 80067fe:	683a      	ldr	r2, [r7, #0]
 8006800:	430a      	orrs	r2, r1
 8006802:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006804:	4b53      	ldr	r3, [pc, #332]	; (8006954 <HAL_RCC_ClockConfig+0x184>)
 8006806:	681b      	ldr	r3, [r3, #0]
 8006808:	2201      	movs	r2, #1
 800680a:	4013      	ands	r3, r2
 800680c:	683a      	ldr	r2, [r7, #0]
 800680e:	429a      	cmp	r2, r3
 8006810:	d001      	beq.n	8006816 <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 8006812:	2301      	movs	r3, #1
 8006814:	e09a      	b.n	800694c <HAL_RCC_ClockConfig+0x17c>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006816:	687b      	ldr	r3, [r7, #4]
 8006818:	681b      	ldr	r3, [r3, #0]
 800681a:	2202      	movs	r2, #2
 800681c:	4013      	ands	r3, r2
 800681e:	d015      	beq.n	800684c <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006820:	687b      	ldr	r3, [r7, #4]
 8006822:	681b      	ldr	r3, [r3, #0]
 8006824:	2204      	movs	r2, #4
 8006826:	4013      	ands	r3, r2
 8006828:	d006      	beq.n	8006838 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 800682a:	4b4b      	ldr	r3, [pc, #300]	; (8006958 <HAL_RCC_ClockConfig+0x188>)
 800682c:	685a      	ldr	r2, [r3, #4]
 800682e:	4b4a      	ldr	r3, [pc, #296]	; (8006958 <HAL_RCC_ClockConfig+0x188>)
 8006830:	21e0      	movs	r1, #224	; 0xe0
 8006832:	00c9      	lsls	r1, r1, #3
 8006834:	430a      	orrs	r2, r1
 8006836:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006838:	4b47      	ldr	r3, [pc, #284]	; (8006958 <HAL_RCC_ClockConfig+0x188>)
 800683a:	685b      	ldr	r3, [r3, #4]
 800683c:	22f0      	movs	r2, #240	; 0xf0
 800683e:	4393      	bics	r3, r2
 8006840:	0019      	movs	r1, r3
 8006842:	687b      	ldr	r3, [r7, #4]
 8006844:	689a      	ldr	r2, [r3, #8]
 8006846:	4b44      	ldr	r3, [pc, #272]	; (8006958 <HAL_RCC_ClockConfig+0x188>)
 8006848:	430a      	orrs	r2, r1
 800684a:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800684c:	687b      	ldr	r3, [r7, #4]
 800684e:	681b      	ldr	r3, [r3, #0]
 8006850:	2201      	movs	r2, #1
 8006852:	4013      	ands	r3, r2
 8006854:	d040      	beq.n	80068d8 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006856:	687b      	ldr	r3, [r7, #4]
 8006858:	685b      	ldr	r3, [r3, #4]
 800685a:	2b01      	cmp	r3, #1
 800685c:	d107      	bne.n	800686e <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800685e:	4b3e      	ldr	r3, [pc, #248]	; (8006958 <HAL_RCC_ClockConfig+0x188>)
 8006860:	681a      	ldr	r2, [r3, #0]
 8006862:	2380      	movs	r3, #128	; 0x80
 8006864:	029b      	lsls	r3, r3, #10
 8006866:	4013      	ands	r3, r2
 8006868:	d114      	bne.n	8006894 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 800686a:	2301      	movs	r3, #1
 800686c:	e06e      	b.n	800694c <HAL_RCC_ClockConfig+0x17c>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800686e:	687b      	ldr	r3, [r7, #4]
 8006870:	685b      	ldr	r3, [r3, #4]
 8006872:	2b02      	cmp	r3, #2
 8006874:	d107      	bne.n	8006886 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006876:	4b38      	ldr	r3, [pc, #224]	; (8006958 <HAL_RCC_ClockConfig+0x188>)
 8006878:	681a      	ldr	r2, [r3, #0]
 800687a:	2380      	movs	r3, #128	; 0x80
 800687c:	049b      	lsls	r3, r3, #18
 800687e:	4013      	ands	r3, r2
 8006880:	d108      	bne.n	8006894 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8006882:	2301      	movs	r3, #1
 8006884:	e062      	b.n	800694c <HAL_RCC_ClockConfig+0x17c>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006886:	4b34      	ldr	r3, [pc, #208]	; (8006958 <HAL_RCC_ClockConfig+0x188>)
 8006888:	681b      	ldr	r3, [r3, #0]
 800688a:	2202      	movs	r2, #2
 800688c:	4013      	ands	r3, r2
 800688e:	d101      	bne.n	8006894 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8006890:	2301      	movs	r3, #1
 8006892:	e05b      	b.n	800694c <HAL_RCC_ClockConfig+0x17c>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8006894:	4b30      	ldr	r3, [pc, #192]	; (8006958 <HAL_RCC_ClockConfig+0x188>)
 8006896:	685b      	ldr	r3, [r3, #4]
 8006898:	2203      	movs	r2, #3
 800689a:	4393      	bics	r3, r2
 800689c:	0019      	movs	r1, r3
 800689e:	687b      	ldr	r3, [r7, #4]
 80068a0:	685a      	ldr	r2, [r3, #4]
 80068a2:	4b2d      	ldr	r3, [pc, #180]	; (8006958 <HAL_RCC_ClockConfig+0x188>)
 80068a4:	430a      	orrs	r2, r1
 80068a6:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80068a8:	f7fd fd4e 	bl	8004348 <HAL_GetTick>
 80068ac:	0003      	movs	r3, r0
 80068ae:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80068b0:	e009      	b.n	80068c6 <HAL_RCC_ClockConfig+0xf6>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80068b2:	f7fd fd49 	bl	8004348 <HAL_GetTick>
 80068b6:	0002      	movs	r2, r0
 80068b8:	68fb      	ldr	r3, [r7, #12]
 80068ba:	1ad3      	subs	r3, r2, r3
 80068bc:	4a27      	ldr	r2, [pc, #156]	; (800695c <HAL_RCC_ClockConfig+0x18c>)
 80068be:	4293      	cmp	r3, r2
 80068c0:	d901      	bls.n	80068c6 <HAL_RCC_ClockConfig+0xf6>
      {
        return HAL_TIMEOUT;
 80068c2:	2303      	movs	r3, #3
 80068c4:	e042      	b.n	800694c <HAL_RCC_ClockConfig+0x17c>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80068c6:	4b24      	ldr	r3, [pc, #144]	; (8006958 <HAL_RCC_ClockConfig+0x188>)
 80068c8:	685b      	ldr	r3, [r3, #4]
 80068ca:	220c      	movs	r2, #12
 80068cc:	401a      	ands	r2, r3
 80068ce:	687b      	ldr	r3, [r7, #4]
 80068d0:	685b      	ldr	r3, [r3, #4]
 80068d2:	009b      	lsls	r3, r3, #2
 80068d4:	429a      	cmp	r2, r3
 80068d6:	d1ec      	bne.n	80068b2 <HAL_RCC_ClockConfig+0xe2>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80068d8:	4b1e      	ldr	r3, [pc, #120]	; (8006954 <HAL_RCC_ClockConfig+0x184>)
 80068da:	681b      	ldr	r3, [r3, #0]
 80068dc:	2201      	movs	r2, #1
 80068de:	4013      	ands	r3, r2
 80068e0:	683a      	ldr	r2, [r7, #0]
 80068e2:	429a      	cmp	r2, r3
 80068e4:	d211      	bcs.n	800690a <HAL_RCC_ClockConfig+0x13a>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80068e6:	4b1b      	ldr	r3, [pc, #108]	; (8006954 <HAL_RCC_ClockConfig+0x184>)
 80068e8:	681b      	ldr	r3, [r3, #0]
 80068ea:	2201      	movs	r2, #1
 80068ec:	4393      	bics	r3, r2
 80068ee:	0019      	movs	r1, r3
 80068f0:	4b18      	ldr	r3, [pc, #96]	; (8006954 <HAL_RCC_ClockConfig+0x184>)
 80068f2:	683a      	ldr	r2, [r7, #0]
 80068f4:	430a      	orrs	r2, r1
 80068f6:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80068f8:	4b16      	ldr	r3, [pc, #88]	; (8006954 <HAL_RCC_ClockConfig+0x184>)
 80068fa:	681b      	ldr	r3, [r3, #0]
 80068fc:	2201      	movs	r2, #1
 80068fe:	4013      	ands	r3, r2
 8006900:	683a      	ldr	r2, [r7, #0]
 8006902:	429a      	cmp	r2, r3
 8006904:	d001      	beq.n	800690a <HAL_RCC_ClockConfig+0x13a>
    {
      return HAL_ERROR;
 8006906:	2301      	movs	r3, #1
 8006908:	e020      	b.n	800694c <HAL_RCC_ClockConfig+0x17c>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800690a:	687b      	ldr	r3, [r7, #4]
 800690c:	681b      	ldr	r3, [r3, #0]
 800690e:	2204      	movs	r2, #4
 8006910:	4013      	ands	r3, r2
 8006912:	d009      	beq.n	8006928 <HAL_RCC_ClockConfig+0x158>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8006914:	4b10      	ldr	r3, [pc, #64]	; (8006958 <HAL_RCC_ClockConfig+0x188>)
 8006916:	685b      	ldr	r3, [r3, #4]
 8006918:	4a11      	ldr	r2, [pc, #68]	; (8006960 <HAL_RCC_ClockConfig+0x190>)
 800691a:	4013      	ands	r3, r2
 800691c:	0019      	movs	r1, r3
 800691e:	687b      	ldr	r3, [r7, #4]
 8006920:	68da      	ldr	r2, [r3, #12]
 8006922:	4b0d      	ldr	r3, [pc, #52]	; (8006958 <HAL_RCC_ClockConfig+0x188>)
 8006924:	430a      	orrs	r2, r1
 8006926:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8006928:	f000 f820 	bl	800696c <HAL_RCC_GetSysClockFreq>
 800692c:	0001      	movs	r1, r0
 800692e:	4b0a      	ldr	r3, [pc, #40]	; (8006958 <HAL_RCC_ClockConfig+0x188>)
 8006930:	685b      	ldr	r3, [r3, #4]
 8006932:	091b      	lsrs	r3, r3, #4
 8006934:	220f      	movs	r2, #15
 8006936:	4013      	ands	r3, r2
 8006938:	4a0a      	ldr	r2, [pc, #40]	; (8006964 <HAL_RCC_ClockConfig+0x194>)
 800693a:	5cd3      	ldrb	r3, [r2, r3]
 800693c:	000a      	movs	r2, r1
 800693e:	40da      	lsrs	r2, r3
 8006940:	4b09      	ldr	r3, [pc, #36]	; (8006968 <HAL_RCC_ClockConfig+0x198>)
 8006942:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8006944:	2000      	movs	r0, #0
 8006946:	f7fd fcb9 	bl	80042bc <HAL_InitTick>
  
  return HAL_OK;
 800694a:	2300      	movs	r3, #0
}
 800694c:	0018      	movs	r0, r3
 800694e:	46bd      	mov	sp, r7
 8006950:	b004      	add	sp, #16
 8006952:	bd80      	pop	{r7, pc}
 8006954:	40022000 	.word	0x40022000
 8006958:	40021000 	.word	0x40021000
 800695c:	00001388 	.word	0x00001388
 8006960:	fffff8ff 	.word	0xfffff8ff
 8006964:	08007f74 	.word	0x08007f74
 8006968:	20000010 	.word	0x20000010

0800696c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800696c:	b590      	push	{r4, r7, lr}
 800696e:	b08f      	sub	sp, #60	; 0x3c
 8006970:	af00      	add	r7, sp, #0
  const uint8_t aPLLMULFactorTable[16] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
 8006972:	2314      	movs	r3, #20
 8006974:	18fb      	adds	r3, r7, r3
 8006976:	4a2b      	ldr	r2, [pc, #172]	; (8006a24 <HAL_RCC_GetSysClockFreq+0xb8>)
 8006978:	ca13      	ldmia	r2!, {r0, r1, r4}
 800697a:	c313      	stmia	r3!, {r0, r1, r4}
 800697c:	6812      	ldr	r2, [r2, #0]
 800697e:	601a      	str	r2, [r3, #0]
                                         10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  const uint8_t aPredivFactorTable[16] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
 8006980:	1d3b      	adds	r3, r7, #4
 8006982:	4a29      	ldr	r2, [pc, #164]	; (8006a28 <HAL_RCC_GetSysClockFreq+0xbc>)
 8006984:	ca13      	ldmia	r2!, {r0, r1, r4}
 8006986:	c313      	stmia	r3!, {r0, r1, r4}
 8006988:	6812      	ldr	r2, [r2, #0]
 800698a:	601a      	str	r2, [r3, #0]
                                           9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800698c:	2300      	movs	r3, #0
 800698e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006990:	2300      	movs	r3, #0
 8006992:	62bb      	str	r3, [r7, #40]	; 0x28
 8006994:	2300      	movs	r3, #0
 8006996:	637b      	str	r3, [r7, #52]	; 0x34
 8006998:	2300      	movs	r3, #0
 800699a:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t sysclockfreq = 0U;
 800699c:	2300      	movs	r3, #0
 800699e:	633b      	str	r3, [r7, #48]	; 0x30
  
  tmpreg = RCC->CFGR;
 80069a0:	4b22      	ldr	r3, [pc, #136]	; (8006a2c <HAL_RCC_GetSysClockFreq+0xc0>)
 80069a2:	685b      	ldr	r3, [r3, #4]
 80069a4:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80069a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80069a8:	220c      	movs	r2, #12
 80069aa:	4013      	ands	r3, r2
 80069ac:	2b04      	cmp	r3, #4
 80069ae:	d002      	beq.n	80069b6 <HAL_RCC_GetSysClockFreq+0x4a>
 80069b0:	2b08      	cmp	r3, #8
 80069b2:	d003      	beq.n	80069bc <HAL_RCC_GetSysClockFreq+0x50>
 80069b4:	e02d      	b.n	8006a12 <HAL_RCC_GetSysClockFreq+0xa6>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80069b6:	4b1e      	ldr	r3, [pc, #120]	; (8006a30 <HAL_RCC_GetSysClockFreq+0xc4>)
 80069b8:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 80069ba:	e02d      	b.n	8006a18 <HAL_RCC_GetSysClockFreq+0xac>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 80069bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80069be:	0c9b      	lsrs	r3, r3, #18
 80069c0:	220f      	movs	r2, #15
 80069c2:	4013      	ands	r3, r2
 80069c4:	2214      	movs	r2, #20
 80069c6:	18ba      	adds	r2, r7, r2
 80069c8:	5cd3      	ldrb	r3, [r2, r3]
 80069ca:	627b      	str	r3, [r7, #36]	; 0x24
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 80069cc:	4b17      	ldr	r3, [pc, #92]	; (8006a2c <HAL_RCC_GetSysClockFreq+0xc0>)
 80069ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80069d0:	220f      	movs	r2, #15
 80069d2:	4013      	ands	r3, r2
 80069d4:	1d3a      	adds	r2, r7, #4
 80069d6:	5cd3      	ldrb	r3, [r2, r3]
 80069d8:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 80069da:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80069dc:	2380      	movs	r3, #128	; 0x80
 80069de:	025b      	lsls	r3, r3, #9
 80069e0:	4013      	ands	r3, r2
 80069e2:	d009      	beq.n	80069f8 <HAL_RCC_GetSysClockFreq+0x8c>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80069e4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80069e6:	4812      	ldr	r0, [pc, #72]	; (8006a30 <HAL_RCC_GetSysClockFreq+0xc4>)
 80069e8:	f7f9 fb8e 	bl	8000108 <__udivsi3>
 80069ec:	0003      	movs	r3, r0
 80069ee:	001a      	movs	r2, r3
 80069f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80069f2:	4353      	muls	r3, r2
 80069f4:	637b      	str	r3, [r7, #52]	; 0x34
 80069f6:	e009      	b.n	8006a0c <HAL_RCC_GetSysClockFreq+0xa0>
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 80069f8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80069fa:	000a      	movs	r2, r1
 80069fc:	0152      	lsls	r2, r2, #5
 80069fe:	1a52      	subs	r2, r2, r1
 8006a00:	0193      	lsls	r3, r2, #6
 8006a02:	1a9b      	subs	r3, r3, r2
 8006a04:	00db      	lsls	r3, r3, #3
 8006a06:	185b      	adds	r3, r3, r1
 8006a08:	021b      	lsls	r3, r3, #8
 8006a0a:	637b      	str	r3, [r7, #52]	; 0x34
#endif
      }
      sysclockfreq = pllclk;
 8006a0c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006a0e:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8006a10:	e002      	b.n	8006a18 <HAL_RCC_GetSysClockFreq+0xac>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8006a12:	4b07      	ldr	r3, [pc, #28]	; (8006a30 <HAL_RCC_GetSysClockFreq+0xc4>)
 8006a14:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8006a16:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 8006a18:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 8006a1a:	0018      	movs	r0, r3
 8006a1c:	46bd      	mov	sp, r7
 8006a1e:	b00f      	add	sp, #60	; 0x3c
 8006a20:	bd90      	pop	{r4, r7, pc}
 8006a22:	46c0      	nop			; (mov r8, r8)
 8006a24:	080078e4 	.word	0x080078e4
 8006a28:	080078f4 	.word	0x080078f4
 8006a2c:	40021000 	.word	0x40021000
 8006a30:	007a1200 	.word	0x007a1200

08006a34 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006a34:	b580      	push	{r7, lr}
 8006a36:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006a38:	4b02      	ldr	r3, [pc, #8]	; (8006a44 <HAL_RCC_GetHCLKFreq+0x10>)
 8006a3a:	681b      	ldr	r3, [r3, #0]
}
 8006a3c:	0018      	movs	r0, r3
 8006a3e:	46bd      	mov	sp, r7
 8006a40:	bd80      	pop	{r7, pc}
 8006a42:	46c0      	nop			; (mov r8, r8)
 8006a44:	20000010 	.word	0x20000010

08006a48 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006a48:	b580      	push	{r7, lr}
 8006a4a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_BITNUMBER]);
 8006a4c:	f7ff fff2 	bl	8006a34 <HAL_RCC_GetHCLKFreq>
 8006a50:	0001      	movs	r1, r0
 8006a52:	4b06      	ldr	r3, [pc, #24]	; (8006a6c <HAL_RCC_GetPCLK1Freq+0x24>)
 8006a54:	685b      	ldr	r3, [r3, #4]
 8006a56:	0a1b      	lsrs	r3, r3, #8
 8006a58:	2207      	movs	r2, #7
 8006a5a:	4013      	ands	r3, r2
 8006a5c:	4a04      	ldr	r2, [pc, #16]	; (8006a70 <HAL_RCC_GetPCLK1Freq+0x28>)
 8006a5e:	5cd3      	ldrb	r3, [r2, r3]
 8006a60:	40d9      	lsrs	r1, r3
 8006a62:	000b      	movs	r3, r1
}    
 8006a64:	0018      	movs	r0, r3
 8006a66:	46bd      	mov	sp, r7
 8006a68:	bd80      	pop	{r7, pc}
 8006a6a:	46c0      	nop			; (mov r8, r8)
 8006a6c:	40021000 	.word	0x40021000
 8006a70:	08007f84 	.word	0x08007f84

08006a74 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006a74:	b580      	push	{r7, lr}
 8006a76:	b086      	sub	sp, #24
 8006a78:	af00      	add	r7, sp, #0
 8006a7a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8006a7c:	2300      	movs	r3, #0
 8006a7e:	613b      	str	r3, [r7, #16]
  uint32_t temp_reg = 0U;
 8006a80:	2300      	movs	r3, #0
 8006a82:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8006a84:	687b      	ldr	r3, [r7, #4]
 8006a86:	681a      	ldr	r2, [r3, #0]
 8006a88:	2380      	movs	r3, #128	; 0x80
 8006a8a:	025b      	lsls	r3, r3, #9
 8006a8c:	4013      	ands	r3, r2
 8006a8e:	d100      	bne.n	8006a92 <HAL_RCCEx_PeriphCLKConfig+0x1e>
 8006a90:	e08f      	b.n	8006bb2 <HAL_RCCEx_PeriphCLKConfig+0x13e>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
    
    FlagStatus       pwrclkchanged = RESET;
 8006a92:	2317      	movs	r3, #23
 8006a94:	18fb      	adds	r3, r7, r3
 8006a96:	2200      	movs	r2, #0
 8006a98:	701a      	strb	r2, [r3, #0]

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006a9a:	4b57      	ldr	r3, [pc, #348]	; (8006bf8 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8006a9c:	69da      	ldr	r2, [r3, #28]
 8006a9e:	2380      	movs	r3, #128	; 0x80
 8006aa0:	055b      	lsls	r3, r3, #21
 8006aa2:	4013      	ands	r3, r2
 8006aa4:	d111      	bne.n	8006aca <HAL_RCCEx_PeriphCLKConfig+0x56>
    {
    __HAL_RCC_PWR_CLK_ENABLE();
 8006aa6:	4b54      	ldr	r3, [pc, #336]	; (8006bf8 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8006aa8:	69da      	ldr	r2, [r3, #28]
 8006aaa:	4b53      	ldr	r3, [pc, #332]	; (8006bf8 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8006aac:	2180      	movs	r1, #128	; 0x80
 8006aae:	0549      	lsls	r1, r1, #21
 8006ab0:	430a      	orrs	r2, r1
 8006ab2:	61da      	str	r2, [r3, #28]
 8006ab4:	4b50      	ldr	r3, [pc, #320]	; (8006bf8 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8006ab6:	69da      	ldr	r2, [r3, #28]
 8006ab8:	2380      	movs	r3, #128	; 0x80
 8006aba:	055b      	lsls	r3, r3, #21
 8006abc:	4013      	ands	r3, r2
 8006abe:	60bb      	str	r3, [r7, #8]
 8006ac0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006ac2:	2317      	movs	r3, #23
 8006ac4:	18fb      	adds	r3, r7, r3
 8006ac6:	2201      	movs	r2, #1
 8006ac8:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006aca:	4b4c      	ldr	r3, [pc, #304]	; (8006bfc <HAL_RCCEx_PeriphCLKConfig+0x188>)
 8006acc:	681a      	ldr	r2, [r3, #0]
 8006ace:	2380      	movs	r3, #128	; 0x80
 8006ad0:	005b      	lsls	r3, r3, #1
 8006ad2:	4013      	ands	r3, r2
 8006ad4:	d11a      	bne.n	8006b0c <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8006ad6:	4b49      	ldr	r3, [pc, #292]	; (8006bfc <HAL_RCCEx_PeriphCLKConfig+0x188>)
 8006ad8:	681a      	ldr	r2, [r3, #0]
 8006ada:	4b48      	ldr	r3, [pc, #288]	; (8006bfc <HAL_RCCEx_PeriphCLKConfig+0x188>)
 8006adc:	2180      	movs	r1, #128	; 0x80
 8006ade:	0049      	lsls	r1, r1, #1
 8006ae0:	430a      	orrs	r2, r1
 8006ae2:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006ae4:	f7fd fc30 	bl	8004348 <HAL_GetTick>
 8006ae8:	0003      	movs	r3, r0
 8006aea:	613b      	str	r3, [r7, #16]
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006aec:	e008      	b.n	8006b00 <HAL_RCCEx_PeriphCLKConfig+0x8c>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006aee:	f7fd fc2b 	bl	8004348 <HAL_GetTick>
 8006af2:	0002      	movs	r2, r0
 8006af4:	693b      	ldr	r3, [r7, #16]
 8006af6:	1ad3      	subs	r3, r2, r3
 8006af8:	2b64      	cmp	r3, #100	; 0x64
 8006afa:	d901      	bls.n	8006b00 <HAL_RCCEx_PeriphCLKConfig+0x8c>
        {
          return HAL_TIMEOUT;
 8006afc:	2303      	movs	r3, #3
 8006afe:	e077      	b.n	8006bf0 <HAL_RCCEx_PeriphCLKConfig+0x17c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006b00:	4b3e      	ldr	r3, [pc, #248]	; (8006bfc <HAL_RCCEx_PeriphCLKConfig+0x188>)
 8006b02:	681a      	ldr	r2, [r3, #0]
 8006b04:	2380      	movs	r3, #128	; 0x80
 8006b06:	005b      	lsls	r3, r3, #1
 8006b08:	4013      	ands	r3, r2
 8006b0a:	d0f0      	beq.n	8006aee <HAL_RCCEx_PeriphCLKConfig+0x7a>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8006b0c:	4b3a      	ldr	r3, [pc, #232]	; (8006bf8 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8006b0e:	6a1a      	ldr	r2, [r3, #32]
 8006b10:	23c0      	movs	r3, #192	; 0xc0
 8006b12:	009b      	lsls	r3, r3, #2
 8006b14:	4013      	ands	r3, r2
 8006b16:	60fb      	str	r3, [r7, #12]
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8006b18:	68fb      	ldr	r3, [r7, #12]
 8006b1a:	2b00      	cmp	r3, #0
 8006b1c:	d034      	beq.n	8006b88 <HAL_RCCEx_PeriphCLKConfig+0x114>
 8006b1e:	687b      	ldr	r3, [r7, #4]
 8006b20:	685a      	ldr	r2, [r3, #4]
 8006b22:	23c0      	movs	r3, #192	; 0xc0
 8006b24:	009b      	lsls	r3, r3, #2
 8006b26:	4013      	ands	r3, r2
 8006b28:	68fa      	ldr	r2, [r7, #12]
 8006b2a:	429a      	cmp	r2, r3
 8006b2c:	d02c      	beq.n	8006b88 <HAL_RCCEx_PeriphCLKConfig+0x114>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8006b2e:	4b32      	ldr	r3, [pc, #200]	; (8006bf8 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8006b30:	6a1b      	ldr	r3, [r3, #32]
 8006b32:	4a33      	ldr	r2, [pc, #204]	; (8006c00 <HAL_RCCEx_PeriphCLKConfig+0x18c>)
 8006b34:	4013      	ands	r3, r2
 8006b36:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8006b38:	4b2f      	ldr	r3, [pc, #188]	; (8006bf8 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8006b3a:	6a1a      	ldr	r2, [r3, #32]
 8006b3c:	4b2e      	ldr	r3, [pc, #184]	; (8006bf8 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8006b3e:	2180      	movs	r1, #128	; 0x80
 8006b40:	0249      	lsls	r1, r1, #9
 8006b42:	430a      	orrs	r2, r1
 8006b44:	621a      	str	r2, [r3, #32]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8006b46:	4b2c      	ldr	r3, [pc, #176]	; (8006bf8 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8006b48:	6a1a      	ldr	r2, [r3, #32]
 8006b4a:	4b2b      	ldr	r3, [pc, #172]	; (8006bf8 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8006b4c:	492d      	ldr	r1, [pc, #180]	; (8006c04 <HAL_RCCEx_PeriphCLKConfig+0x190>)
 8006b4e:	400a      	ands	r2, r1
 8006b50:	621a      	str	r2, [r3, #32]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8006b52:	4b29      	ldr	r3, [pc, #164]	; (8006bf8 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8006b54:	68fa      	ldr	r2, [r7, #12]
 8006b56:	621a      	str	r2, [r3, #32]
      
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8006b58:	68fb      	ldr	r3, [r7, #12]
 8006b5a:	2201      	movs	r2, #1
 8006b5c:	4013      	ands	r3, r2
 8006b5e:	d013      	beq.n	8006b88 <HAL_RCCEx_PeriphCLKConfig+0x114>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006b60:	f7fd fbf2 	bl	8004348 <HAL_GetTick>
 8006b64:	0003      	movs	r3, r0
 8006b66:	613b      	str	r3, [r7, #16]
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006b68:	e009      	b.n	8006b7e <HAL_RCCEx_PeriphCLKConfig+0x10a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006b6a:	f7fd fbed 	bl	8004348 <HAL_GetTick>
 8006b6e:	0002      	movs	r2, r0
 8006b70:	693b      	ldr	r3, [r7, #16]
 8006b72:	1ad3      	subs	r3, r2, r3
 8006b74:	4a24      	ldr	r2, [pc, #144]	; (8006c08 <HAL_RCCEx_PeriphCLKConfig+0x194>)
 8006b76:	4293      	cmp	r3, r2
 8006b78:	d901      	bls.n	8006b7e <HAL_RCCEx_PeriphCLKConfig+0x10a>
          {
            return HAL_TIMEOUT;
 8006b7a:	2303      	movs	r3, #3
 8006b7c:	e038      	b.n	8006bf0 <HAL_RCCEx_PeriphCLKConfig+0x17c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006b7e:	4b1e      	ldr	r3, [pc, #120]	; (8006bf8 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8006b80:	6a1b      	ldr	r3, [r3, #32]
 8006b82:	2202      	movs	r2, #2
 8006b84:	4013      	ands	r3, r2
 8006b86:	d0f0      	beq.n	8006b6a <HAL_RCCEx_PeriphCLKConfig+0xf6>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8006b88:	4b1b      	ldr	r3, [pc, #108]	; (8006bf8 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8006b8a:	6a1b      	ldr	r3, [r3, #32]
 8006b8c:	4a1c      	ldr	r2, [pc, #112]	; (8006c00 <HAL_RCCEx_PeriphCLKConfig+0x18c>)
 8006b8e:	4013      	ands	r3, r2
 8006b90:	0019      	movs	r1, r3
 8006b92:	687b      	ldr	r3, [r7, #4]
 8006b94:	685a      	ldr	r2, [r3, #4]
 8006b96:	4b18      	ldr	r3, [pc, #96]	; (8006bf8 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8006b98:	430a      	orrs	r2, r1
 8006b9a:	621a      	str	r2, [r3, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8006b9c:	2317      	movs	r3, #23
 8006b9e:	18fb      	adds	r3, r7, r3
 8006ba0:	781b      	ldrb	r3, [r3, #0]
 8006ba2:	2b01      	cmp	r3, #1
 8006ba4:	d105      	bne.n	8006bb2 <HAL_RCCEx_PeriphCLKConfig+0x13e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006ba6:	4b14      	ldr	r3, [pc, #80]	; (8006bf8 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8006ba8:	69da      	ldr	r2, [r3, #28]
 8006baa:	4b13      	ldr	r3, [pc, #76]	; (8006bf8 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8006bac:	4917      	ldr	r1, [pc, #92]	; (8006c0c <HAL_RCCEx_PeriphCLKConfig+0x198>)
 8006bae:	400a      	ands	r2, r1
 8006bb0:	61da      	str	r2, [r3, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8006bb2:	687b      	ldr	r3, [r7, #4]
 8006bb4:	681b      	ldr	r3, [r3, #0]
 8006bb6:	2201      	movs	r2, #1
 8006bb8:	4013      	ands	r3, r2
 8006bba:	d009      	beq.n	8006bd0 <HAL_RCCEx_PeriphCLKConfig+0x15c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8006bbc:	4b0e      	ldr	r3, [pc, #56]	; (8006bf8 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8006bbe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006bc0:	2203      	movs	r2, #3
 8006bc2:	4393      	bics	r3, r2
 8006bc4:	0019      	movs	r1, r3
 8006bc6:	687b      	ldr	r3, [r7, #4]
 8006bc8:	689a      	ldr	r2, [r3, #8]
 8006bca:	4b0b      	ldr	r3, [pc, #44]	; (8006bf8 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8006bcc:	430a      	orrs	r2, r1
 8006bce:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* STM32F091xC || STM32F098xx */  

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8006bd0:	687b      	ldr	r3, [r7, #4]
 8006bd2:	681b      	ldr	r3, [r3, #0]
 8006bd4:	2220      	movs	r2, #32
 8006bd6:	4013      	ands	r3, r2
 8006bd8:	d009      	beq.n	8006bee <HAL_RCCEx_PeriphCLKConfig+0x17a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8006bda:	4b07      	ldr	r3, [pc, #28]	; (8006bf8 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8006bdc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006bde:	2210      	movs	r2, #16
 8006be0:	4393      	bics	r3, r2
 8006be2:	0019      	movs	r1, r3
 8006be4:	687b      	ldr	r3, [r7, #4]
 8006be6:	68da      	ldr	r2, [r3, #12]
 8006be8:	4b03      	ldr	r3, [pc, #12]	; (8006bf8 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8006bea:	430a      	orrs	r2, r1
 8006bec:	631a      	str	r2, [r3, #48]	; 0x30
#endif /* STM32F042x6 || STM32F048xx ||                */
       /* STM32F051x8 || STM32F058xx ||                */
       /* STM32F071xB || STM32F072xB || STM32F078xx || */
       /* STM32F091xC || STM32F098xx */
  
  return HAL_OK;
 8006bee:	2300      	movs	r3, #0
}
 8006bf0:	0018      	movs	r0, r3
 8006bf2:	46bd      	mov	sp, r7
 8006bf4:	b006      	add	sp, #24
 8006bf6:	bd80      	pop	{r7, pc}
 8006bf8:	40021000 	.word	0x40021000
 8006bfc:	40007000 	.word	0x40007000
 8006c00:	fffffcff 	.word	0xfffffcff
 8006c04:	fffeffff 	.word	0xfffeffff
 8006c08:	00001388 	.word	0x00001388
 8006c0c:	efffffff 	.word	0xefffffff

08006c10 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006c10:	b580      	push	{r7, lr}
 8006c12:	b082      	sub	sp, #8
 8006c14:	af00      	add	r7, sp, #0
 8006c16:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006c18:	687b      	ldr	r3, [r7, #4]
 8006c1a:	2b00      	cmp	r3, #0
 8006c1c:	d101      	bne.n	8006c22 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006c1e:	2301      	movs	r3, #1
 8006c20:	e01e      	b.n	8006c60 <HAL_TIM_Base_Init+0x50>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006c22:	687b      	ldr	r3, [r7, #4]
 8006c24:	223d      	movs	r2, #61	; 0x3d
 8006c26:	5c9b      	ldrb	r3, [r3, r2]
 8006c28:	b2db      	uxtb	r3, r3
 8006c2a:	2b00      	cmp	r3, #0
 8006c2c:	d107      	bne.n	8006c3e <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006c2e:	687b      	ldr	r3, [r7, #4]
 8006c30:	223c      	movs	r2, #60	; 0x3c
 8006c32:	2100      	movs	r1, #0
 8006c34:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8006c36:	687b      	ldr	r3, [r7, #4]
 8006c38:	0018      	movs	r0, r3
 8006c3a:	f7fd fa53 	bl	80040e4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006c3e:	687b      	ldr	r3, [r7, #4]
 8006c40:	223d      	movs	r2, #61	; 0x3d
 8006c42:	2102      	movs	r1, #2
 8006c44:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006c46:	687b      	ldr	r3, [r7, #4]
 8006c48:	681a      	ldr	r2, [r3, #0]
 8006c4a:	687b      	ldr	r3, [r7, #4]
 8006c4c:	3304      	adds	r3, #4
 8006c4e:	0019      	movs	r1, r3
 8006c50:	0010      	movs	r0, r2
 8006c52:	f000 f8e9 	bl	8006e28 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006c56:	687b      	ldr	r3, [r7, #4]
 8006c58:	223d      	movs	r2, #61	; 0x3d
 8006c5a:	2101      	movs	r1, #1
 8006c5c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8006c5e:	2300      	movs	r3, #0
}
 8006c60:	0018      	movs	r0, r3
 8006c62:	46bd      	mov	sp, r7
 8006c64:	b002      	add	sp, #8
 8006c66:	bd80      	pop	{r7, pc}

08006c68 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8006c68:	b580      	push	{r7, lr}
 8006c6a:	b084      	sub	sp, #16
 8006c6c:	af00      	add	r7, sp, #0
 8006c6e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006c70:	687b      	ldr	r3, [r7, #4]
 8006c72:	223d      	movs	r2, #61	; 0x3d
 8006c74:	2102      	movs	r1, #2
 8006c76:	5499      	strb	r1, [r3, r2]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006c78:	687b      	ldr	r3, [r7, #4]
 8006c7a:	681b      	ldr	r3, [r3, #0]
 8006c7c:	689b      	ldr	r3, [r3, #8]
 8006c7e:	2207      	movs	r2, #7
 8006c80:	4013      	ands	r3, r2
 8006c82:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006c84:	68fb      	ldr	r3, [r7, #12]
 8006c86:	2b06      	cmp	r3, #6
 8006c88:	d007      	beq.n	8006c9a <HAL_TIM_Base_Start+0x32>
  {
    __HAL_TIM_ENABLE(htim);
 8006c8a:	687b      	ldr	r3, [r7, #4]
 8006c8c:	681b      	ldr	r3, [r3, #0]
 8006c8e:	681a      	ldr	r2, [r3, #0]
 8006c90:	687b      	ldr	r3, [r7, #4]
 8006c92:	681b      	ldr	r3, [r3, #0]
 8006c94:	2101      	movs	r1, #1
 8006c96:	430a      	orrs	r2, r1
 8006c98:	601a      	str	r2, [r3, #0]
  }

  /* Change the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006c9a:	687b      	ldr	r3, [r7, #4]
 8006c9c:	223d      	movs	r2, #61	; 0x3d
 8006c9e:	2101      	movs	r1, #1
 8006ca0:	5499      	strb	r1, [r3, r2]

  /* Return function status */
  return HAL_OK;
 8006ca2:	2300      	movs	r3, #0
}
 8006ca4:	0018      	movs	r0, r3
 8006ca6:	46bd      	mov	sp, r7
 8006ca8:	b004      	add	sp, #16
 8006caa:	bd80      	pop	{r7, pc}

08006cac <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8006cac:	b580      	push	{r7, lr}
 8006cae:	b084      	sub	sp, #16
 8006cb0:	af00      	add	r7, sp, #0
 8006cb2:	6078      	str	r0, [r7, #4]
 8006cb4:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8006cb6:	687b      	ldr	r3, [r7, #4]
 8006cb8:	223c      	movs	r2, #60	; 0x3c
 8006cba:	5c9b      	ldrb	r3, [r3, r2]
 8006cbc:	2b01      	cmp	r3, #1
 8006cbe:	d101      	bne.n	8006cc4 <HAL_TIM_ConfigClockSource+0x18>
 8006cc0:	2302      	movs	r3, #2
 8006cc2:	e0ab      	b.n	8006e1c <HAL_TIM_ConfigClockSource+0x170>
 8006cc4:	687b      	ldr	r3, [r7, #4]
 8006cc6:	223c      	movs	r2, #60	; 0x3c
 8006cc8:	2101      	movs	r1, #1
 8006cca:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 8006ccc:	687b      	ldr	r3, [r7, #4]
 8006cce:	223d      	movs	r2, #61	; 0x3d
 8006cd0:	2102      	movs	r1, #2
 8006cd2:	5499      	strb	r1, [r3, r2]

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8006cd4:	687b      	ldr	r3, [r7, #4]
 8006cd6:	681b      	ldr	r3, [r3, #0]
 8006cd8:	689b      	ldr	r3, [r3, #8]
 8006cda:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8006cdc:	68fb      	ldr	r3, [r7, #12]
 8006cde:	2277      	movs	r2, #119	; 0x77
 8006ce0:	4393      	bics	r3, r2
 8006ce2:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006ce4:	68fb      	ldr	r3, [r7, #12]
 8006ce6:	4a4f      	ldr	r2, [pc, #316]	; (8006e24 <HAL_TIM_ConfigClockSource+0x178>)
 8006ce8:	4013      	ands	r3, r2
 8006cea:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8006cec:	687b      	ldr	r3, [r7, #4]
 8006cee:	681b      	ldr	r3, [r3, #0]
 8006cf0:	68fa      	ldr	r2, [r7, #12]
 8006cf2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8006cf4:	683b      	ldr	r3, [r7, #0]
 8006cf6:	681b      	ldr	r3, [r3, #0]
 8006cf8:	2b40      	cmp	r3, #64	; 0x40
 8006cfa:	d100      	bne.n	8006cfe <HAL_TIM_ConfigClockSource+0x52>
 8006cfc:	e06b      	b.n	8006dd6 <HAL_TIM_ConfigClockSource+0x12a>
 8006cfe:	d80e      	bhi.n	8006d1e <HAL_TIM_ConfigClockSource+0x72>
 8006d00:	2b10      	cmp	r3, #16
 8006d02:	d100      	bne.n	8006d06 <HAL_TIM_ConfigClockSource+0x5a>
 8006d04:	e077      	b.n	8006df6 <HAL_TIM_ConfigClockSource+0x14a>
 8006d06:	d803      	bhi.n	8006d10 <HAL_TIM_ConfigClockSource+0x64>
 8006d08:	2b00      	cmp	r3, #0
 8006d0a:	d100      	bne.n	8006d0e <HAL_TIM_ConfigClockSource+0x62>
 8006d0c:	e073      	b.n	8006df6 <HAL_TIM_ConfigClockSource+0x14a>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 8006d0e:	e07c      	b.n	8006e0a <HAL_TIM_ConfigClockSource+0x15e>
  switch (sClockSourceConfig->ClockSource)
 8006d10:	2b20      	cmp	r3, #32
 8006d12:	d100      	bne.n	8006d16 <HAL_TIM_ConfigClockSource+0x6a>
 8006d14:	e06f      	b.n	8006df6 <HAL_TIM_ConfigClockSource+0x14a>
 8006d16:	2b30      	cmp	r3, #48	; 0x30
 8006d18:	d100      	bne.n	8006d1c <HAL_TIM_ConfigClockSource+0x70>
 8006d1a:	e06c      	b.n	8006df6 <HAL_TIM_ConfigClockSource+0x14a>
      break;
 8006d1c:	e075      	b.n	8006e0a <HAL_TIM_ConfigClockSource+0x15e>
  switch (sClockSourceConfig->ClockSource)
 8006d1e:	2b70      	cmp	r3, #112	; 0x70
 8006d20:	d00e      	beq.n	8006d40 <HAL_TIM_ConfigClockSource+0x94>
 8006d22:	d804      	bhi.n	8006d2e <HAL_TIM_ConfigClockSource+0x82>
 8006d24:	2b50      	cmp	r3, #80	; 0x50
 8006d26:	d036      	beq.n	8006d96 <HAL_TIM_ConfigClockSource+0xea>
 8006d28:	2b60      	cmp	r3, #96	; 0x60
 8006d2a:	d044      	beq.n	8006db6 <HAL_TIM_ConfigClockSource+0x10a>
      break;
 8006d2c:	e06d      	b.n	8006e0a <HAL_TIM_ConfigClockSource+0x15e>
  switch (sClockSourceConfig->ClockSource)
 8006d2e:	2280      	movs	r2, #128	; 0x80
 8006d30:	0152      	lsls	r2, r2, #5
 8006d32:	4293      	cmp	r3, r2
 8006d34:	d068      	beq.n	8006e08 <HAL_TIM_ConfigClockSource+0x15c>
 8006d36:	2280      	movs	r2, #128	; 0x80
 8006d38:	0192      	lsls	r2, r2, #6
 8006d3a:	4293      	cmp	r3, r2
 8006d3c:	d017      	beq.n	8006d6e <HAL_TIM_ConfigClockSource+0xc2>
      break;
 8006d3e:	e064      	b.n	8006e0a <HAL_TIM_ConfigClockSource+0x15e>
      TIM_ETR_SetConfig(htim->Instance,
 8006d40:	687b      	ldr	r3, [r7, #4]
 8006d42:	6818      	ldr	r0, [r3, #0]
 8006d44:	683b      	ldr	r3, [r7, #0]
 8006d46:	6899      	ldr	r1, [r3, #8]
 8006d48:	683b      	ldr	r3, [r7, #0]
 8006d4a:	685a      	ldr	r2, [r3, #4]
 8006d4c:	683b      	ldr	r3, [r7, #0]
 8006d4e:	68db      	ldr	r3, [r3, #12]
 8006d50:	f000 f950 	bl	8006ff4 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8006d54:	687b      	ldr	r3, [r7, #4]
 8006d56:	681b      	ldr	r3, [r3, #0]
 8006d58:	689b      	ldr	r3, [r3, #8]
 8006d5a:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8006d5c:	68fb      	ldr	r3, [r7, #12]
 8006d5e:	2277      	movs	r2, #119	; 0x77
 8006d60:	4313      	orrs	r3, r2
 8006d62:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8006d64:	687b      	ldr	r3, [r7, #4]
 8006d66:	681b      	ldr	r3, [r3, #0]
 8006d68:	68fa      	ldr	r2, [r7, #12]
 8006d6a:	609a      	str	r2, [r3, #8]
      break;
 8006d6c:	e04d      	b.n	8006e0a <HAL_TIM_ConfigClockSource+0x15e>
      TIM_ETR_SetConfig(htim->Instance,
 8006d6e:	687b      	ldr	r3, [r7, #4]
 8006d70:	6818      	ldr	r0, [r3, #0]
 8006d72:	683b      	ldr	r3, [r7, #0]
 8006d74:	6899      	ldr	r1, [r3, #8]
 8006d76:	683b      	ldr	r3, [r7, #0]
 8006d78:	685a      	ldr	r2, [r3, #4]
 8006d7a:	683b      	ldr	r3, [r7, #0]
 8006d7c:	68db      	ldr	r3, [r3, #12]
 8006d7e:	f000 f939 	bl	8006ff4 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8006d82:	687b      	ldr	r3, [r7, #4]
 8006d84:	681b      	ldr	r3, [r3, #0]
 8006d86:	689a      	ldr	r2, [r3, #8]
 8006d88:	687b      	ldr	r3, [r7, #4]
 8006d8a:	681b      	ldr	r3, [r3, #0]
 8006d8c:	2180      	movs	r1, #128	; 0x80
 8006d8e:	01c9      	lsls	r1, r1, #7
 8006d90:	430a      	orrs	r2, r1
 8006d92:	609a      	str	r2, [r3, #8]
      break;
 8006d94:	e039      	b.n	8006e0a <HAL_TIM_ConfigClockSource+0x15e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006d96:	687b      	ldr	r3, [r7, #4]
 8006d98:	6818      	ldr	r0, [r3, #0]
 8006d9a:	683b      	ldr	r3, [r7, #0]
 8006d9c:	6859      	ldr	r1, [r3, #4]
 8006d9e:	683b      	ldr	r3, [r7, #0]
 8006da0:	68db      	ldr	r3, [r3, #12]
 8006da2:	001a      	movs	r2, r3
 8006da4:	f000 f8ac 	bl	8006f00 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8006da8:	687b      	ldr	r3, [r7, #4]
 8006daa:	681b      	ldr	r3, [r3, #0]
 8006dac:	2150      	movs	r1, #80	; 0x50
 8006dae:	0018      	movs	r0, r3
 8006db0:	f000 f906 	bl	8006fc0 <TIM_ITRx_SetConfig>
      break;
 8006db4:	e029      	b.n	8006e0a <HAL_TIM_ConfigClockSource+0x15e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8006db6:	687b      	ldr	r3, [r7, #4]
 8006db8:	6818      	ldr	r0, [r3, #0]
 8006dba:	683b      	ldr	r3, [r7, #0]
 8006dbc:	6859      	ldr	r1, [r3, #4]
 8006dbe:	683b      	ldr	r3, [r7, #0]
 8006dc0:	68db      	ldr	r3, [r3, #12]
 8006dc2:	001a      	movs	r2, r3
 8006dc4:	f000 f8ca 	bl	8006f5c <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8006dc8:	687b      	ldr	r3, [r7, #4]
 8006dca:	681b      	ldr	r3, [r3, #0]
 8006dcc:	2160      	movs	r1, #96	; 0x60
 8006dce:	0018      	movs	r0, r3
 8006dd0:	f000 f8f6 	bl	8006fc0 <TIM_ITRx_SetConfig>
      break;
 8006dd4:	e019      	b.n	8006e0a <HAL_TIM_ConfigClockSource+0x15e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006dd6:	687b      	ldr	r3, [r7, #4]
 8006dd8:	6818      	ldr	r0, [r3, #0]
 8006dda:	683b      	ldr	r3, [r7, #0]
 8006ddc:	6859      	ldr	r1, [r3, #4]
 8006dde:	683b      	ldr	r3, [r7, #0]
 8006de0:	68db      	ldr	r3, [r3, #12]
 8006de2:	001a      	movs	r2, r3
 8006de4:	f000 f88c 	bl	8006f00 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8006de8:	687b      	ldr	r3, [r7, #4]
 8006dea:	681b      	ldr	r3, [r3, #0]
 8006dec:	2140      	movs	r1, #64	; 0x40
 8006dee:	0018      	movs	r0, r3
 8006df0:	f000 f8e6 	bl	8006fc0 <TIM_ITRx_SetConfig>
      break;
 8006df4:	e009      	b.n	8006e0a <HAL_TIM_ConfigClockSource+0x15e>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8006df6:	687b      	ldr	r3, [r7, #4]
 8006df8:	681a      	ldr	r2, [r3, #0]
 8006dfa:	683b      	ldr	r3, [r7, #0]
 8006dfc:	681b      	ldr	r3, [r3, #0]
 8006dfe:	0019      	movs	r1, r3
 8006e00:	0010      	movs	r0, r2
 8006e02:	f000 f8dd 	bl	8006fc0 <TIM_ITRx_SetConfig>
      break;
 8006e06:	e000      	b.n	8006e0a <HAL_TIM_ConfigClockSource+0x15e>
      break;
 8006e08:	46c0      	nop			; (mov r8, r8)
  }
  htim->State = HAL_TIM_STATE_READY;
 8006e0a:	687b      	ldr	r3, [r7, #4]
 8006e0c:	223d      	movs	r2, #61	; 0x3d
 8006e0e:	2101      	movs	r1, #1
 8006e10:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8006e12:	687b      	ldr	r3, [r7, #4]
 8006e14:	223c      	movs	r2, #60	; 0x3c
 8006e16:	2100      	movs	r1, #0
 8006e18:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8006e1a:	2300      	movs	r3, #0
}
 8006e1c:	0018      	movs	r0, r3
 8006e1e:	46bd      	mov	sp, r7
 8006e20:	b004      	add	sp, #16
 8006e22:	bd80      	pop	{r7, pc}
 8006e24:	ffff00ff 	.word	0xffff00ff

08006e28 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8006e28:	b580      	push	{r7, lr}
 8006e2a:	b084      	sub	sp, #16
 8006e2c:	af00      	add	r7, sp, #0
 8006e2e:	6078      	str	r0, [r7, #4]
 8006e30:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006e32:	687b      	ldr	r3, [r7, #4]
 8006e34:	681b      	ldr	r3, [r3, #0]
 8006e36:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006e38:	687b      	ldr	r3, [r7, #4]
 8006e3a:	4a2b      	ldr	r2, [pc, #172]	; (8006ee8 <TIM_Base_SetConfig+0xc0>)
 8006e3c:	4293      	cmp	r3, r2
 8006e3e:	d003      	beq.n	8006e48 <TIM_Base_SetConfig+0x20>
 8006e40:	687b      	ldr	r3, [r7, #4]
 8006e42:	4a2a      	ldr	r2, [pc, #168]	; (8006eec <TIM_Base_SetConfig+0xc4>)
 8006e44:	4293      	cmp	r3, r2
 8006e46:	d108      	bne.n	8006e5a <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006e48:	68fb      	ldr	r3, [r7, #12]
 8006e4a:	2270      	movs	r2, #112	; 0x70
 8006e4c:	4393      	bics	r3, r2
 8006e4e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006e50:	683b      	ldr	r3, [r7, #0]
 8006e52:	685b      	ldr	r3, [r3, #4]
 8006e54:	68fa      	ldr	r2, [r7, #12]
 8006e56:	4313      	orrs	r3, r2
 8006e58:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006e5a:	687b      	ldr	r3, [r7, #4]
 8006e5c:	4a22      	ldr	r2, [pc, #136]	; (8006ee8 <TIM_Base_SetConfig+0xc0>)
 8006e5e:	4293      	cmp	r3, r2
 8006e60:	d00f      	beq.n	8006e82 <TIM_Base_SetConfig+0x5a>
 8006e62:	687b      	ldr	r3, [r7, #4]
 8006e64:	4a21      	ldr	r2, [pc, #132]	; (8006eec <TIM_Base_SetConfig+0xc4>)
 8006e66:	4293      	cmp	r3, r2
 8006e68:	d00b      	beq.n	8006e82 <TIM_Base_SetConfig+0x5a>
 8006e6a:	687b      	ldr	r3, [r7, #4]
 8006e6c:	4a20      	ldr	r2, [pc, #128]	; (8006ef0 <TIM_Base_SetConfig+0xc8>)
 8006e6e:	4293      	cmp	r3, r2
 8006e70:	d007      	beq.n	8006e82 <TIM_Base_SetConfig+0x5a>
 8006e72:	687b      	ldr	r3, [r7, #4]
 8006e74:	4a1f      	ldr	r2, [pc, #124]	; (8006ef4 <TIM_Base_SetConfig+0xcc>)
 8006e76:	4293      	cmp	r3, r2
 8006e78:	d003      	beq.n	8006e82 <TIM_Base_SetConfig+0x5a>
 8006e7a:	687b      	ldr	r3, [r7, #4]
 8006e7c:	4a1e      	ldr	r2, [pc, #120]	; (8006ef8 <TIM_Base_SetConfig+0xd0>)
 8006e7e:	4293      	cmp	r3, r2
 8006e80:	d108      	bne.n	8006e94 <TIM_Base_SetConfig+0x6c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006e82:	68fb      	ldr	r3, [r7, #12]
 8006e84:	4a1d      	ldr	r2, [pc, #116]	; (8006efc <TIM_Base_SetConfig+0xd4>)
 8006e86:	4013      	ands	r3, r2
 8006e88:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006e8a:	683b      	ldr	r3, [r7, #0]
 8006e8c:	68db      	ldr	r3, [r3, #12]
 8006e8e:	68fa      	ldr	r2, [r7, #12]
 8006e90:	4313      	orrs	r3, r2
 8006e92:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006e94:	68fb      	ldr	r3, [r7, #12]
 8006e96:	2280      	movs	r2, #128	; 0x80
 8006e98:	4393      	bics	r3, r2
 8006e9a:	001a      	movs	r2, r3
 8006e9c:	683b      	ldr	r3, [r7, #0]
 8006e9e:	695b      	ldr	r3, [r3, #20]
 8006ea0:	4313      	orrs	r3, r2
 8006ea2:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006ea4:	687b      	ldr	r3, [r7, #4]
 8006ea6:	68fa      	ldr	r2, [r7, #12]
 8006ea8:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006eaa:	683b      	ldr	r3, [r7, #0]
 8006eac:	689a      	ldr	r2, [r3, #8]
 8006eae:	687b      	ldr	r3, [r7, #4]
 8006eb0:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006eb2:	683b      	ldr	r3, [r7, #0]
 8006eb4:	681a      	ldr	r2, [r3, #0]
 8006eb6:	687b      	ldr	r3, [r7, #4]
 8006eb8:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006eba:	687b      	ldr	r3, [r7, #4]
 8006ebc:	4a0a      	ldr	r2, [pc, #40]	; (8006ee8 <TIM_Base_SetConfig+0xc0>)
 8006ebe:	4293      	cmp	r3, r2
 8006ec0:	d007      	beq.n	8006ed2 <TIM_Base_SetConfig+0xaa>
 8006ec2:	687b      	ldr	r3, [r7, #4]
 8006ec4:	4a0b      	ldr	r2, [pc, #44]	; (8006ef4 <TIM_Base_SetConfig+0xcc>)
 8006ec6:	4293      	cmp	r3, r2
 8006ec8:	d003      	beq.n	8006ed2 <TIM_Base_SetConfig+0xaa>
 8006eca:	687b      	ldr	r3, [r7, #4]
 8006ecc:	4a0a      	ldr	r2, [pc, #40]	; (8006ef8 <TIM_Base_SetConfig+0xd0>)
 8006ece:	4293      	cmp	r3, r2
 8006ed0:	d103      	bne.n	8006eda <TIM_Base_SetConfig+0xb2>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006ed2:	683b      	ldr	r3, [r7, #0]
 8006ed4:	691a      	ldr	r2, [r3, #16]
 8006ed6:	687b      	ldr	r3, [r7, #4]
 8006ed8:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006eda:	687b      	ldr	r3, [r7, #4]
 8006edc:	2201      	movs	r2, #1
 8006ede:	615a      	str	r2, [r3, #20]
}
 8006ee0:	46c0      	nop			; (mov r8, r8)
 8006ee2:	46bd      	mov	sp, r7
 8006ee4:	b004      	add	sp, #16
 8006ee6:	bd80      	pop	{r7, pc}
 8006ee8:	40012c00 	.word	0x40012c00
 8006eec:	40000400 	.word	0x40000400
 8006ef0:	40002000 	.word	0x40002000
 8006ef4:	40014400 	.word	0x40014400
 8006ef8:	40014800 	.word	0x40014800
 8006efc:	fffffcff 	.word	0xfffffcff

08006f00 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006f00:	b580      	push	{r7, lr}
 8006f02:	b086      	sub	sp, #24
 8006f04:	af00      	add	r7, sp, #0
 8006f06:	60f8      	str	r0, [r7, #12]
 8006f08:	60b9      	str	r1, [r7, #8]
 8006f0a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006f0c:	68fb      	ldr	r3, [r7, #12]
 8006f0e:	6a1b      	ldr	r3, [r3, #32]
 8006f10:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006f12:	68fb      	ldr	r3, [r7, #12]
 8006f14:	6a1b      	ldr	r3, [r3, #32]
 8006f16:	2201      	movs	r2, #1
 8006f18:	4393      	bics	r3, r2
 8006f1a:	001a      	movs	r2, r3
 8006f1c:	68fb      	ldr	r3, [r7, #12]
 8006f1e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006f20:	68fb      	ldr	r3, [r7, #12]
 8006f22:	699b      	ldr	r3, [r3, #24]
 8006f24:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006f26:	693b      	ldr	r3, [r7, #16]
 8006f28:	22f0      	movs	r2, #240	; 0xf0
 8006f2a:	4393      	bics	r3, r2
 8006f2c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006f2e:	687b      	ldr	r3, [r7, #4]
 8006f30:	011b      	lsls	r3, r3, #4
 8006f32:	693a      	ldr	r2, [r7, #16]
 8006f34:	4313      	orrs	r3, r2
 8006f36:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006f38:	697b      	ldr	r3, [r7, #20]
 8006f3a:	220a      	movs	r2, #10
 8006f3c:	4393      	bics	r3, r2
 8006f3e:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8006f40:	697a      	ldr	r2, [r7, #20]
 8006f42:	68bb      	ldr	r3, [r7, #8]
 8006f44:	4313      	orrs	r3, r2
 8006f46:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006f48:	68fb      	ldr	r3, [r7, #12]
 8006f4a:	693a      	ldr	r2, [r7, #16]
 8006f4c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006f4e:	68fb      	ldr	r3, [r7, #12]
 8006f50:	697a      	ldr	r2, [r7, #20]
 8006f52:	621a      	str	r2, [r3, #32]
}
 8006f54:	46c0      	nop			; (mov r8, r8)
 8006f56:	46bd      	mov	sp, r7
 8006f58:	b006      	add	sp, #24
 8006f5a:	bd80      	pop	{r7, pc}

08006f5c <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006f5c:	b580      	push	{r7, lr}
 8006f5e:	b086      	sub	sp, #24
 8006f60:	af00      	add	r7, sp, #0
 8006f62:	60f8      	str	r0, [r7, #12]
 8006f64:	60b9      	str	r1, [r7, #8]
 8006f66:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006f68:	68fb      	ldr	r3, [r7, #12]
 8006f6a:	6a1b      	ldr	r3, [r3, #32]
 8006f6c:	2210      	movs	r2, #16
 8006f6e:	4393      	bics	r3, r2
 8006f70:	001a      	movs	r2, r3
 8006f72:	68fb      	ldr	r3, [r7, #12]
 8006f74:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006f76:	68fb      	ldr	r3, [r7, #12]
 8006f78:	699b      	ldr	r3, [r3, #24]
 8006f7a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006f7c:	68fb      	ldr	r3, [r7, #12]
 8006f7e:	6a1b      	ldr	r3, [r3, #32]
 8006f80:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006f82:	697b      	ldr	r3, [r7, #20]
 8006f84:	4a0d      	ldr	r2, [pc, #52]	; (8006fbc <TIM_TI2_ConfigInputStage+0x60>)
 8006f86:	4013      	ands	r3, r2
 8006f88:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006f8a:	687b      	ldr	r3, [r7, #4]
 8006f8c:	031b      	lsls	r3, r3, #12
 8006f8e:	697a      	ldr	r2, [r7, #20]
 8006f90:	4313      	orrs	r3, r2
 8006f92:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006f94:	693b      	ldr	r3, [r7, #16]
 8006f96:	22a0      	movs	r2, #160	; 0xa0
 8006f98:	4393      	bics	r3, r2
 8006f9a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006f9c:	68bb      	ldr	r3, [r7, #8]
 8006f9e:	011b      	lsls	r3, r3, #4
 8006fa0:	693a      	ldr	r2, [r7, #16]
 8006fa2:	4313      	orrs	r3, r2
 8006fa4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006fa6:	68fb      	ldr	r3, [r7, #12]
 8006fa8:	697a      	ldr	r2, [r7, #20]
 8006faa:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006fac:	68fb      	ldr	r3, [r7, #12]
 8006fae:	693a      	ldr	r2, [r7, #16]
 8006fb0:	621a      	str	r2, [r3, #32]
}
 8006fb2:	46c0      	nop			; (mov r8, r8)
 8006fb4:	46bd      	mov	sp, r7
 8006fb6:	b006      	add	sp, #24
 8006fb8:	bd80      	pop	{r7, pc}
 8006fba:	46c0      	nop			; (mov r8, r8)
 8006fbc:	ffff0fff 	.word	0xffff0fff

08006fc0 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8006fc0:	b580      	push	{r7, lr}
 8006fc2:	b084      	sub	sp, #16
 8006fc4:	af00      	add	r7, sp, #0
 8006fc6:	6078      	str	r0, [r7, #4]
 8006fc8:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006fca:	687b      	ldr	r3, [r7, #4]
 8006fcc:	689b      	ldr	r3, [r3, #8]
 8006fce:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006fd0:	68fb      	ldr	r3, [r7, #12]
 8006fd2:	2270      	movs	r2, #112	; 0x70
 8006fd4:	4393      	bics	r3, r2
 8006fd6:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006fd8:	683a      	ldr	r2, [r7, #0]
 8006fda:	68fb      	ldr	r3, [r7, #12]
 8006fdc:	4313      	orrs	r3, r2
 8006fde:	2207      	movs	r2, #7
 8006fe0:	4313      	orrs	r3, r2
 8006fe2:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006fe4:	687b      	ldr	r3, [r7, #4]
 8006fe6:	68fa      	ldr	r2, [r7, #12]
 8006fe8:	609a      	str	r2, [r3, #8]
}
 8006fea:	46c0      	nop			; (mov r8, r8)
 8006fec:	46bd      	mov	sp, r7
 8006fee:	b004      	add	sp, #16
 8006ff0:	bd80      	pop	{r7, pc}
	...

08006ff4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006ff4:	b580      	push	{r7, lr}
 8006ff6:	b086      	sub	sp, #24
 8006ff8:	af00      	add	r7, sp, #0
 8006ffa:	60f8      	str	r0, [r7, #12]
 8006ffc:	60b9      	str	r1, [r7, #8]
 8006ffe:	607a      	str	r2, [r7, #4]
 8007000:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8007002:	68fb      	ldr	r3, [r7, #12]
 8007004:	689b      	ldr	r3, [r3, #8]
 8007006:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007008:	697b      	ldr	r3, [r7, #20]
 800700a:	4a09      	ldr	r2, [pc, #36]	; (8007030 <TIM_ETR_SetConfig+0x3c>)
 800700c:	4013      	ands	r3, r2
 800700e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8007010:	683b      	ldr	r3, [r7, #0]
 8007012:	021a      	lsls	r2, r3, #8
 8007014:	687b      	ldr	r3, [r7, #4]
 8007016:	431a      	orrs	r2, r3
 8007018:	68bb      	ldr	r3, [r7, #8]
 800701a:	4313      	orrs	r3, r2
 800701c:	697a      	ldr	r2, [r7, #20]
 800701e:	4313      	orrs	r3, r2
 8007020:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007022:	68fb      	ldr	r3, [r7, #12]
 8007024:	697a      	ldr	r2, [r7, #20]
 8007026:	609a      	str	r2, [r3, #8]
}
 8007028:	46c0      	nop			; (mov r8, r8)
 800702a:	46bd      	mov	sp, r7
 800702c:	b006      	add	sp, #24
 800702e:	bd80      	pop	{r7, pc}
 8007030:	ffff00ff 	.word	0xffff00ff

08007034 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8007034:	b580      	push	{r7, lr}
 8007036:	b084      	sub	sp, #16
 8007038:	af00      	add	r7, sp, #0
 800703a:	6078      	str	r0, [r7, #4]
 800703c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800703e:	687b      	ldr	r3, [r7, #4]
 8007040:	223c      	movs	r2, #60	; 0x3c
 8007042:	5c9b      	ldrb	r3, [r3, r2]
 8007044:	2b01      	cmp	r3, #1
 8007046:	d101      	bne.n	800704c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8007048:	2302      	movs	r3, #2
 800704a:	e03c      	b.n	80070c6 <HAL_TIMEx_MasterConfigSynchronization+0x92>
 800704c:	687b      	ldr	r3, [r7, #4]
 800704e:	223c      	movs	r2, #60	; 0x3c
 8007050:	2101      	movs	r1, #1
 8007052:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007054:	687b      	ldr	r3, [r7, #4]
 8007056:	223d      	movs	r2, #61	; 0x3d
 8007058:	2102      	movs	r1, #2
 800705a:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800705c:	687b      	ldr	r3, [r7, #4]
 800705e:	681b      	ldr	r3, [r3, #0]
 8007060:	685b      	ldr	r3, [r3, #4]
 8007062:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007064:	687b      	ldr	r3, [r7, #4]
 8007066:	681b      	ldr	r3, [r3, #0]
 8007068:	689b      	ldr	r3, [r3, #8]
 800706a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800706c:	68fb      	ldr	r3, [r7, #12]
 800706e:	2270      	movs	r2, #112	; 0x70
 8007070:	4393      	bics	r3, r2
 8007072:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007074:	683b      	ldr	r3, [r7, #0]
 8007076:	681b      	ldr	r3, [r3, #0]
 8007078:	68fa      	ldr	r2, [r7, #12]
 800707a:	4313      	orrs	r3, r2
 800707c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800707e:	687b      	ldr	r3, [r7, #4]
 8007080:	681b      	ldr	r3, [r3, #0]
 8007082:	68fa      	ldr	r2, [r7, #12]
 8007084:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007086:	687b      	ldr	r3, [r7, #4]
 8007088:	681b      	ldr	r3, [r3, #0]
 800708a:	4a11      	ldr	r2, [pc, #68]	; (80070d0 <HAL_TIMEx_MasterConfigSynchronization+0x9c>)
 800708c:	4293      	cmp	r3, r2
 800708e:	d004      	beq.n	800709a <HAL_TIMEx_MasterConfigSynchronization+0x66>
 8007090:	687b      	ldr	r3, [r7, #4]
 8007092:	681b      	ldr	r3, [r3, #0]
 8007094:	4a0f      	ldr	r2, [pc, #60]	; (80070d4 <HAL_TIMEx_MasterConfigSynchronization+0xa0>)
 8007096:	4293      	cmp	r3, r2
 8007098:	d10c      	bne.n	80070b4 <HAL_TIMEx_MasterConfigSynchronization+0x80>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800709a:	68bb      	ldr	r3, [r7, #8]
 800709c:	2280      	movs	r2, #128	; 0x80
 800709e:	4393      	bics	r3, r2
 80070a0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80070a2:	683b      	ldr	r3, [r7, #0]
 80070a4:	685b      	ldr	r3, [r3, #4]
 80070a6:	68ba      	ldr	r2, [r7, #8]
 80070a8:	4313      	orrs	r3, r2
 80070aa:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80070ac:	687b      	ldr	r3, [r7, #4]
 80070ae:	681b      	ldr	r3, [r3, #0]
 80070b0:	68ba      	ldr	r2, [r7, #8]
 80070b2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80070b4:	687b      	ldr	r3, [r7, #4]
 80070b6:	223d      	movs	r2, #61	; 0x3d
 80070b8:	2101      	movs	r1, #1
 80070ba:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 80070bc:	687b      	ldr	r3, [r7, #4]
 80070be:	223c      	movs	r2, #60	; 0x3c
 80070c0:	2100      	movs	r1, #0
 80070c2:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80070c4:	2300      	movs	r3, #0
}
 80070c6:	0018      	movs	r0, r3
 80070c8:	46bd      	mov	sp, r7
 80070ca:	b004      	add	sp, #16
 80070cc:	bd80      	pop	{r7, pc}
 80070ce:	46c0      	nop			; (mov r8, r8)
 80070d0:	40012c00 	.word	0x40012c00
 80070d4:	40000400 	.word	0x40000400

080070d8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80070d8:	b580      	push	{r7, lr}
 80070da:	b082      	sub	sp, #8
 80070dc:	af00      	add	r7, sp, #0
 80070de:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80070e0:	687b      	ldr	r3, [r7, #4]
 80070e2:	2b00      	cmp	r3, #0
 80070e4:	d101      	bne.n	80070ea <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80070e6:	2301      	movs	r3, #1
 80070e8:	e044      	b.n	8007174 <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80070ea:	687b      	ldr	r3, [r7, #4]
 80070ec:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80070ee:	2b00      	cmp	r3, #0
 80070f0:	d107      	bne.n	8007102 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80070f2:	687b      	ldr	r3, [r7, #4]
 80070f4:	2270      	movs	r2, #112	; 0x70
 80070f6:	2100      	movs	r1, #0
 80070f8:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80070fa:	687b      	ldr	r3, [r7, #4]
 80070fc:	0018      	movs	r0, r3
 80070fe:	f7fd f825 	bl	800414c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007102:	687b      	ldr	r3, [r7, #4]
 8007104:	2224      	movs	r2, #36	; 0x24
 8007106:	675a      	str	r2, [r3, #116]	; 0x74

  __HAL_UART_DISABLE(huart);
 8007108:	687b      	ldr	r3, [r7, #4]
 800710a:	681b      	ldr	r3, [r3, #0]
 800710c:	681a      	ldr	r2, [r3, #0]
 800710e:	687b      	ldr	r3, [r7, #4]
 8007110:	681b      	ldr	r3, [r3, #0]
 8007112:	2101      	movs	r1, #1
 8007114:	438a      	bics	r2, r1
 8007116:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8007118:	687b      	ldr	r3, [r7, #4]
 800711a:	0018      	movs	r0, r3
 800711c:	f000 f830 	bl	8007180 <UART_SetConfig>
 8007120:	0003      	movs	r3, r0
 8007122:	2b01      	cmp	r3, #1
 8007124:	d101      	bne.n	800712a <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8007126:	2301      	movs	r3, #1
 8007128:	e024      	b.n	8007174 <HAL_UART_Init+0x9c>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800712a:	687b      	ldr	r3, [r7, #4]
 800712c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800712e:	2b00      	cmp	r3, #0
 8007130:	d003      	beq.n	800713a <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 8007132:	687b      	ldr	r3, [r7, #4]
 8007134:	0018      	movs	r0, r3
 8007136:	f000 f991 	bl	800745c <UART_AdvFeatureConfig>
  - LINEN (if LIN is supported) and CLKEN bits in the USART_CR2 register,
  - SCEN (if Smartcard is supported), HDSEL and IREN (if IrDA is supported)  bits in the USART_CR3 register.*/
#if defined (USART_CR2_LINEN)
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
#else
  CLEAR_BIT(huart->Instance->CR2, USART_CR2_CLKEN);
 800713a:	687b      	ldr	r3, [r7, #4]
 800713c:	681b      	ldr	r3, [r3, #0]
 800713e:	685a      	ldr	r2, [r3, #4]
 8007140:	687b      	ldr	r3, [r7, #4]
 8007142:	681b      	ldr	r3, [r3, #0]
 8007144:	490d      	ldr	r1, [pc, #52]	; (800717c <HAL_UART_Init+0xa4>)
 8007146:	400a      	ands	r2, r1
 8007148:	605a      	str	r2, [r3, #4]
#endif /* USART_CR3_IREN */
#else
#if defined (USART_CR3_IREN)
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_HDSEL | USART_CR3_IREN));
#else
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
 800714a:	687b      	ldr	r3, [r7, #4]
 800714c:	681b      	ldr	r3, [r3, #0]
 800714e:	689a      	ldr	r2, [r3, #8]
 8007150:	687b      	ldr	r3, [r7, #4]
 8007152:	681b      	ldr	r3, [r3, #0]
 8007154:	2108      	movs	r1, #8
 8007156:	438a      	bics	r2, r1
 8007158:	609a      	str	r2, [r3, #8]
#endif /* USART_CR3_IREN*/
#endif /* USART_CR3_SCEN */

  __HAL_UART_ENABLE(huart);
 800715a:	687b      	ldr	r3, [r7, #4]
 800715c:	681b      	ldr	r3, [r3, #0]
 800715e:	681a      	ldr	r2, [r3, #0]
 8007160:	687b      	ldr	r3, [r7, #4]
 8007162:	681b      	ldr	r3, [r3, #0]
 8007164:	2101      	movs	r1, #1
 8007166:	430a      	orrs	r2, r1
 8007168:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800716a:	687b      	ldr	r3, [r7, #4]
 800716c:	0018      	movs	r0, r3
 800716e:	f000 fa29 	bl	80075c4 <UART_CheckIdleState>
 8007172:	0003      	movs	r3, r0
}
 8007174:	0018      	movs	r0, r3
 8007176:	46bd      	mov	sp, r7
 8007178:	b002      	add	sp, #8
 800717a:	bd80      	pop	{r7, pc}
 800717c:	fffff7ff 	.word	0xfffff7ff

08007180 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007180:	b580      	push	{r7, lr}
 8007182:	b088      	sub	sp, #32
 8007184:	af00      	add	r7, sp, #0
 8007186:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv                   = 0x00000000U;
 8007188:	2300      	movs	r3, #0
 800718a:	61bb      	str	r3, [r7, #24]
  HAL_StatusTypeDef ret               = HAL_OK;
 800718c:	2317      	movs	r3, #23
 800718e:	18fb      	adds	r3, r7, r3
 8007190:	2200      	movs	r2, #0
 8007192:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8007194:	687b      	ldr	r3, [r7, #4]
 8007196:	689a      	ldr	r2, [r3, #8]
 8007198:	687b      	ldr	r3, [r7, #4]
 800719a:	691b      	ldr	r3, [r3, #16]
 800719c:	431a      	orrs	r2, r3
 800719e:	687b      	ldr	r3, [r7, #4]
 80071a0:	695b      	ldr	r3, [r3, #20]
 80071a2:	431a      	orrs	r2, r3
 80071a4:	687b      	ldr	r3, [r7, #4]
 80071a6:	69db      	ldr	r3, [r3, #28]
 80071a8:	4313      	orrs	r3, r2
 80071aa:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80071ac:	687b      	ldr	r3, [r7, #4]
 80071ae:	681b      	ldr	r3, [r3, #0]
 80071b0:	681b      	ldr	r3, [r3, #0]
 80071b2:	4aa3      	ldr	r2, [pc, #652]	; (8007440 <UART_SetConfig+0x2c0>)
 80071b4:	4013      	ands	r3, r2
 80071b6:	0019      	movs	r1, r3
 80071b8:	687b      	ldr	r3, [r7, #4]
 80071ba:	681b      	ldr	r3, [r3, #0]
 80071bc:	693a      	ldr	r2, [r7, #16]
 80071be:	430a      	orrs	r2, r1
 80071c0:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80071c2:	687b      	ldr	r3, [r7, #4]
 80071c4:	681b      	ldr	r3, [r3, #0]
 80071c6:	685b      	ldr	r3, [r3, #4]
 80071c8:	4a9e      	ldr	r2, [pc, #632]	; (8007444 <UART_SetConfig+0x2c4>)
 80071ca:	4013      	ands	r3, r2
 80071cc:	0019      	movs	r1, r3
 80071ce:	687b      	ldr	r3, [r7, #4]
 80071d0:	68da      	ldr	r2, [r3, #12]
 80071d2:	687b      	ldr	r3, [r7, #4]
 80071d4:	681b      	ldr	r3, [r3, #0]
 80071d6:	430a      	orrs	r2, r1
 80071d8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80071da:	687b      	ldr	r3, [r7, #4]
 80071dc:	699b      	ldr	r3, [r3, #24]
 80071de:	613b      	str	r3, [r7, #16]

  tmpreg |= huart->Init.OneBitSampling;
 80071e0:	687b      	ldr	r3, [r7, #4]
 80071e2:	6a1b      	ldr	r3, [r3, #32]
 80071e4:	693a      	ldr	r2, [r7, #16]
 80071e6:	4313      	orrs	r3, r2
 80071e8:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80071ea:	687b      	ldr	r3, [r7, #4]
 80071ec:	681b      	ldr	r3, [r3, #0]
 80071ee:	689b      	ldr	r3, [r3, #8]
 80071f0:	4a95      	ldr	r2, [pc, #596]	; (8007448 <UART_SetConfig+0x2c8>)
 80071f2:	4013      	ands	r3, r2
 80071f4:	0019      	movs	r1, r3
 80071f6:	687b      	ldr	r3, [r7, #4]
 80071f8:	681b      	ldr	r3, [r3, #0]
 80071fa:	693a      	ldr	r2, [r7, #16]
 80071fc:	430a      	orrs	r2, r1
 80071fe:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8007200:	4b92      	ldr	r3, [pc, #584]	; (800744c <UART_SetConfig+0x2cc>)
 8007202:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007204:	2203      	movs	r2, #3
 8007206:	4013      	ands	r3, r2
 8007208:	2b01      	cmp	r3, #1
 800720a:	d00f      	beq.n	800722c <UART_SetConfig+0xac>
 800720c:	d304      	bcc.n	8007218 <UART_SetConfig+0x98>
 800720e:	2b02      	cmp	r3, #2
 8007210:	d011      	beq.n	8007236 <UART_SetConfig+0xb6>
 8007212:	2b03      	cmp	r3, #3
 8007214:	d005      	beq.n	8007222 <UART_SetConfig+0xa2>
 8007216:	e013      	b.n	8007240 <UART_SetConfig+0xc0>
 8007218:	231f      	movs	r3, #31
 800721a:	18fb      	adds	r3, r7, r3
 800721c:	2200      	movs	r2, #0
 800721e:	701a      	strb	r2, [r3, #0]
 8007220:	e012      	b.n	8007248 <UART_SetConfig+0xc8>
 8007222:	231f      	movs	r3, #31
 8007224:	18fb      	adds	r3, r7, r3
 8007226:	2202      	movs	r2, #2
 8007228:	701a      	strb	r2, [r3, #0]
 800722a:	e00d      	b.n	8007248 <UART_SetConfig+0xc8>
 800722c:	231f      	movs	r3, #31
 800722e:	18fb      	adds	r3, r7, r3
 8007230:	2204      	movs	r2, #4
 8007232:	701a      	strb	r2, [r3, #0]
 8007234:	e008      	b.n	8007248 <UART_SetConfig+0xc8>
 8007236:	231f      	movs	r3, #31
 8007238:	18fb      	adds	r3, r7, r3
 800723a:	2208      	movs	r2, #8
 800723c:	701a      	strb	r2, [r3, #0]
 800723e:	e003      	b.n	8007248 <UART_SetConfig+0xc8>
 8007240:	231f      	movs	r3, #31
 8007242:	18fb      	adds	r3, r7, r3
 8007244:	2210      	movs	r2, #16
 8007246:	701a      	strb	r2, [r3, #0]
 8007248:	46c0      	nop			; (mov r8, r8)

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800724a:	687b      	ldr	r3, [r7, #4]
 800724c:	69da      	ldr	r2, [r3, #28]
 800724e:	2380      	movs	r3, #128	; 0x80
 8007250:	021b      	lsls	r3, r3, #8
 8007252:	429a      	cmp	r2, r3
 8007254:	d000      	beq.n	8007258 <UART_SetConfig+0xd8>
 8007256:	e07d      	b.n	8007354 <UART_SetConfig+0x1d4>
  {
    switch (clocksource)
 8007258:	231f      	movs	r3, #31
 800725a:	18fb      	adds	r3, r7, r3
 800725c:	781b      	ldrb	r3, [r3, #0]
 800725e:	2b02      	cmp	r3, #2
 8007260:	d01c      	beq.n	800729c <UART_SetConfig+0x11c>
 8007262:	dc02      	bgt.n	800726a <UART_SetConfig+0xea>
 8007264:	2b00      	cmp	r3, #0
 8007266:	d005      	beq.n	8007274 <UART_SetConfig+0xf4>
 8007268:	e04b      	b.n	8007302 <UART_SetConfig+0x182>
 800726a:	2b04      	cmp	r3, #4
 800726c:	d025      	beq.n	80072ba <UART_SetConfig+0x13a>
 800726e:	2b08      	cmp	r3, #8
 8007270:	d037      	beq.n	80072e2 <UART_SetConfig+0x162>
 8007272:	e046      	b.n	8007302 <UART_SetConfig+0x182>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007274:	f7ff fbe8 	bl	8006a48 <HAL_RCC_GetPCLK1Freq>
 8007278:	0003      	movs	r3, r0
 800727a:	60fb      	str	r3, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800727c:	68fb      	ldr	r3, [r7, #12]
 800727e:	005a      	lsls	r2, r3, #1
 8007280:	687b      	ldr	r3, [r7, #4]
 8007282:	685b      	ldr	r3, [r3, #4]
 8007284:	085b      	lsrs	r3, r3, #1
 8007286:	18d2      	adds	r2, r2, r3
 8007288:	687b      	ldr	r3, [r7, #4]
 800728a:	685b      	ldr	r3, [r3, #4]
 800728c:	0019      	movs	r1, r3
 800728e:	0010      	movs	r0, r2
 8007290:	f7f8 ff3a 	bl	8000108 <__udivsi3>
 8007294:	0003      	movs	r3, r0
 8007296:	b29b      	uxth	r3, r3
 8007298:	61bb      	str	r3, [r7, #24]
        break;
 800729a:	e037      	b.n	800730c <UART_SetConfig+0x18c>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 800729c:	687b      	ldr	r3, [r7, #4]
 800729e:	685b      	ldr	r3, [r3, #4]
 80072a0:	085b      	lsrs	r3, r3, #1
 80072a2:	4a6b      	ldr	r2, [pc, #428]	; (8007450 <UART_SetConfig+0x2d0>)
 80072a4:	189a      	adds	r2, r3, r2
 80072a6:	687b      	ldr	r3, [r7, #4]
 80072a8:	685b      	ldr	r3, [r3, #4]
 80072aa:	0019      	movs	r1, r3
 80072ac:	0010      	movs	r0, r2
 80072ae:	f7f8 ff2b 	bl	8000108 <__udivsi3>
 80072b2:	0003      	movs	r3, r0
 80072b4:	b29b      	uxth	r3, r3
 80072b6:	61bb      	str	r3, [r7, #24]
        break;
 80072b8:	e028      	b.n	800730c <UART_SetConfig+0x18c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80072ba:	f7ff fb57 	bl	800696c <HAL_RCC_GetSysClockFreq>
 80072be:	0003      	movs	r3, r0
 80072c0:	60fb      	str	r3, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80072c2:	68fb      	ldr	r3, [r7, #12]
 80072c4:	005a      	lsls	r2, r3, #1
 80072c6:	687b      	ldr	r3, [r7, #4]
 80072c8:	685b      	ldr	r3, [r3, #4]
 80072ca:	085b      	lsrs	r3, r3, #1
 80072cc:	18d2      	adds	r2, r2, r3
 80072ce:	687b      	ldr	r3, [r7, #4]
 80072d0:	685b      	ldr	r3, [r3, #4]
 80072d2:	0019      	movs	r1, r3
 80072d4:	0010      	movs	r0, r2
 80072d6:	f7f8 ff17 	bl	8000108 <__udivsi3>
 80072da:	0003      	movs	r3, r0
 80072dc:	b29b      	uxth	r3, r3
 80072de:	61bb      	str	r3, [r7, #24]
        break;
 80072e0:	e014      	b.n	800730c <UART_SetConfig+0x18c>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 80072e2:	687b      	ldr	r3, [r7, #4]
 80072e4:	685b      	ldr	r3, [r3, #4]
 80072e6:	085b      	lsrs	r3, r3, #1
 80072e8:	2280      	movs	r2, #128	; 0x80
 80072ea:	0252      	lsls	r2, r2, #9
 80072ec:	189a      	adds	r2, r3, r2
 80072ee:	687b      	ldr	r3, [r7, #4]
 80072f0:	685b      	ldr	r3, [r3, #4]
 80072f2:	0019      	movs	r1, r3
 80072f4:	0010      	movs	r0, r2
 80072f6:	f7f8 ff07 	bl	8000108 <__udivsi3>
 80072fa:	0003      	movs	r3, r0
 80072fc:	b29b      	uxth	r3, r3
 80072fe:	61bb      	str	r3, [r7, #24]
        break;
 8007300:	e004      	b.n	800730c <UART_SetConfig+0x18c>
      default:
        ret = HAL_ERROR;
 8007302:	2317      	movs	r3, #23
 8007304:	18fb      	adds	r3, r7, r3
 8007306:	2201      	movs	r2, #1
 8007308:	701a      	strb	r2, [r3, #0]
        break;
 800730a:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800730c:	69bb      	ldr	r3, [r7, #24]
 800730e:	2b0f      	cmp	r3, #15
 8007310:	d91b      	bls.n	800734a <UART_SetConfig+0x1ca>
 8007312:	69bb      	ldr	r3, [r7, #24]
 8007314:	4a4f      	ldr	r2, [pc, #316]	; (8007454 <UART_SetConfig+0x2d4>)
 8007316:	4293      	cmp	r3, r2
 8007318:	d817      	bhi.n	800734a <UART_SetConfig+0x1ca>
    {
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800731a:	69bb      	ldr	r3, [r7, #24]
 800731c:	b29a      	uxth	r2, r3
 800731e:	200a      	movs	r0, #10
 8007320:	183b      	adds	r3, r7, r0
 8007322:	210f      	movs	r1, #15
 8007324:	438a      	bics	r2, r1
 8007326:	801a      	strh	r2, [r3, #0]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8007328:	69bb      	ldr	r3, [r7, #24]
 800732a:	085b      	lsrs	r3, r3, #1
 800732c:	b29b      	uxth	r3, r3
 800732e:	2207      	movs	r2, #7
 8007330:	4013      	ands	r3, r2
 8007332:	b299      	uxth	r1, r3
 8007334:	183b      	adds	r3, r7, r0
 8007336:	183a      	adds	r2, r7, r0
 8007338:	8812      	ldrh	r2, [r2, #0]
 800733a:	430a      	orrs	r2, r1
 800733c:	801a      	strh	r2, [r3, #0]
      huart->Instance->BRR = brrtemp;
 800733e:	687b      	ldr	r3, [r7, #4]
 8007340:	681b      	ldr	r3, [r3, #0]
 8007342:	183a      	adds	r2, r7, r0
 8007344:	8812      	ldrh	r2, [r2, #0]
 8007346:	60da      	str	r2, [r3, #12]
 8007348:	e06c      	b.n	8007424 <UART_SetConfig+0x2a4>
    }
    else
    {
      ret = HAL_ERROR;
 800734a:	2317      	movs	r3, #23
 800734c:	18fb      	adds	r3, r7, r3
 800734e:	2201      	movs	r2, #1
 8007350:	701a      	strb	r2, [r3, #0]
 8007352:	e067      	b.n	8007424 <UART_SetConfig+0x2a4>
    }
  }
  else
  {
    switch (clocksource)
 8007354:	231f      	movs	r3, #31
 8007356:	18fb      	adds	r3, r7, r3
 8007358:	781b      	ldrb	r3, [r3, #0]
 800735a:	2b02      	cmp	r3, #2
 800735c:	d01b      	beq.n	8007396 <UART_SetConfig+0x216>
 800735e:	dc02      	bgt.n	8007366 <UART_SetConfig+0x1e6>
 8007360:	2b00      	cmp	r3, #0
 8007362:	d005      	beq.n	8007370 <UART_SetConfig+0x1f0>
 8007364:	e049      	b.n	80073fa <UART_SetConfig+0x27a>
 8007366:	2b04      	cmp	r3, #4
 8007368:	d024      	beq.n	80073b4 <UART_SetConfig+0x234>
 800736a:	2b08      	cmp	r3, #8
 800736c:	d035      	beq.n	80073da <UART_SetConfig+0x25a>
 800736e:	e044      	b.n	80073fa <UART_SetConfig+0x27a>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007370:	f7ff fb6a 	bl	8006a48 <HAL_RCC_GetPCLK1Freq>
 8007374:	0003      	movs	r3, r0
 8007376:	60fb      	str	r3, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8007378:	687b      	ldr	r3, [r7, #4]
 800737a:	685b      	ldr	r3, [r3, #4]
 800737c:	085a      	lsrs	r2, r3, #1
 800737e:	68fb      	ldr	r3, [r7, #12]
 8007380:	18d2      	adds	r2, r2, r3
 8007382:	687b      	ldr	r3, [r7, #4]
 8007384:	685b      	ldr	r3, [r3, #4]
 8007386:	0019      	movs	r1, r3
 8007388:	0010      	movs	r0, r2
 800738a:	f7f8 febd 	bl	8000108 <__udivsi3>
 800738e:	0003      	movs	r3, r0
 8007390:	b29b      	uxth	r3, r3
 8007392:	61bb      	str	r3, [r7, #24]
        break;
 8007394:	e036      	b.n	8007404 <UART_SetConfig+0x284>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 8007396:	687b      	ldr	r3, [r7, #4]
 8007398:	685b      	ldr	r3, [r3, #4]
 800739a:	085b      	lsrs	r3, r3, #1
 800739c:	4a2e      	ldr	r2, [pc, #184]	; (8007458 <UART_SetConfig+0x2d8>)
 800739e:	189a      	adds	r2, r3, r2
 80073a0:	687b      	ldr	r3, [r7, #4]
 80073a2:	685b      	ldr	r3, [r3, #4]
 80073a4:	0019      	movs	r1, r3
 80073a6:	0010      	movs	r0, r2
 80073a8:	f7f8 feae 	bl	8000108 <__udivsi3>
 80073ac:	0003      	movs	r3, r0
 80073ae:	b29b      	uxth	r3, r3
 80073b0:	61bb      	str	r3, [r7, #24]
        break;
 80073b2:	e027      	b.n	8007404 <UART_SetConfig+0x284>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80073b4:	f7ff fada 	bl	800696c <HAL_RCC_GetSysClockFreq>
 80073b8:	0003      	movs	r3, r0
 80073ba:	60fb      	str	r3, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80073bc:	687b      	ldr	r3, [r7, #4]
 80073be:	685b      	ldr	r3, [r3, #4]
 80073c0:	085a      	lsrs	r2, r3, #1
 80073c2:	68fb      	ldr	r3, [r7, #12]
 80073c4:	18d2      	adds	r2, r2, r3
 80073c6:	687b      	ldr	r3, [r7, #4]
 80073c8:	685b      	ldr	r3, [r3, #4]
 80073ca:	0019      	movs	r1, r3
 80073cc:	0010      	movs	r0, r2
 80073ce:	f7f8 fe9b 	bl	8000108 <__udivsi3>
 80073d2:	0003      	movs	r3, r0
 80073d4:	b29b      	uxth	r3, r3
 80073d6:	61bb      	str	r3, [r7, #24]
        break;
 80073d8:	e014      	b.n	8007404 <UART_SetConfig+0x284>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 80073da:	687b      	ldr	r3, [r7, #4]
 80073dc:	685b      	ldr	r3, [r3, #4]
 80073de:	085b      	lsrs	r3, r3, #1
 80073e0:	2280      	movs	r2, #128	; 0x80
 80073e2:	0212      	lsls	r2, r2, #8
 80073e4:	189a      	adds	r2, r3, r2
 80073e6:	687b      	ldr	r3, [r7, #4]
 80073e8:	685b      	ldr	r3, [r3, #4]
 80073ea:	0019      	movs	r1, r3
 80073ec:	0010      	movs	r0, r2
 80073ee:	f7f8 fe8b 	bl	8000108 <__udivsi3>
 80073f2:	0003      	movs	r3, r0
 80073f4:	b29b      	uxth	r3, r3
 80073f6:	61bb      	str	r3, [r7, #24]
        break;
 80073f8:	e004      	b.n	8007404 <UART_SetConfig+0x284>
      default:
        ret = HAL_ERROR;
 80073fa:	2317      	movs	r3, #23
 80073fc:	18fb      	adds	r3, r7, r3
 80073fe:	2201      	movs	r2, #1
 8007400:	701a      	strb	r2, [r3, #0]
        break;
 8007402:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007404:	69bb      	ldr	r3, [r7, #24]
 8007406:	2b0f      	cmp	r3, #15
 8007408:	d908      	bls.n	800741c <UART_SetConfig+0x29c>
 800740a:	69bb      	ldr	r3, [r7, #24]
 800740c:	4a11      	ldr	r2, [pc, #68]	; (8007454 <UART_SetConfig+0x2d4>)
 800740e:	4293      	cmp	r3, r2
 8007410:	d804      	bhi.n	800741c <UART_SetConfig+0x29c>
    {
      huart->Instance->BRR = usartdiv;
 8007412:	687b      	ldr	r3, [r7, #4]
 8007414:	681b      	ldr	r3, [r3, #0]
 8007416:	69ba      	ldr	r2, [r7, #24]
 8007418:	60da      	str	r2, [r3, #12]
 800741a:	e003      	b.n	8007424 <UART_SetConfig+0x2a4>
    }
    else
    {
      ret = HAL_ERROR;
 800741c:	2317      	movs	r3, #23
 800741e:	18fb      	adds	r3, r7, r3
 8007420:	2201      	movs	r2, #1
 8007422:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8007424:	687b      	ldr	r3, [r7, #4]
 8007426:	2200      	movs	r2, #0
 8007428:	661a      	str	r2, [r3, #96]	; 0x60
  huart->TxISR = NULL;
 800742a:	687b      	ldr	r3, [r7, #4]
 800742c:	2200      	movs	r2, #0
 800742e:	665a      	str	r2, [r3, #100]	; 0x64

  return ret;
 8007430:	2317      	movs	r3, #23
 8007432:	18fb      	adds	r3, r7, r3
 8007434:	781b      	ldrb	r3, [r3, #0]
}
 8007436:	0018      	movs	r0, r3
 8007438:	46bd      	mov	sp, r7
 800743a:	b008      	add	sp, #32
 800743c:	bd80      	pop	{r7, pc}
 800743e:	46c0      	nop			; (mov r8, r8)
 8007440:	ffff69f3 	.word	0xffff69f3
 8007444:	ffffcfff 	.word	0xffffcfff
 8007448:	fffff4ff 	.word	0xfffff4ff
 800744c:	40021000 	.word	0x40021000
 8007450:	00f42400 	.word	0x00f42400
 8007454:	0000ffff 	.word	0x0000ffff
 8007458:	007a1200 	.word	0x007a1200

0800745c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800745c:	b580      	push	{r7, lr}
 800745e:	b082      	sub	sp, #8
 8007460:	af00      	add	r7, sp, #0
 8007462:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8007464:	687b      	ldr	r3, [r7, #4]
 8007466:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007468:	2201      	movs	r2, #1
 800746a:	4013      	ands	r3, r2
 800746c:	d00b      	beq.n	8007486 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800746e:	687b      	ldr	r3, [r7, #4]
 8007470:	681b      	ldr	r3, [r3, #0]
 8007472:	685b      	ldr	r3, [r3, #4]
 8007474:	4a4a      	ldr	r2, [pc, #296]	; (80075a0 <UART_AdvFeatureConfig+0x144>)
 8007476:	4013      	ands	r3, r2
 8007478:	0019      	movs	r1, r3
 800747a:	687b      	ldr	r3, [r7, #4]
 800747c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800747e:	687b      	ldr	r3, [r7, #4]
 8007480:	681b      	ldr	r3, [r3, #0]
 8007482:	430a      	orrs	r2, r1
 8007484:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8007486:	687b      	ldr	r3, [r7, #4]
 8007488:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800748a:	2202      	movs	r2, #2
 800748c:	4013      	ands	r3, r2
 800748e:	d00b      	beq.n	80074a8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8007490:	687b      	ldr	r3, [r7, #4]
 8007492:	681b      	ldr	r3, [r3, #0]
 8007494:	685b      	ldr	r3, [r3, #4]
 8007496:	4a43      	ldr	r2, [pc, #268]	; (80075a4 <UART_AdvFeatureConfig+0x148>)
 8007498:	4013      	ands	r3, r2
 800749a:	0019      	movs	r1, r3
 800749c:	687b      	ldr	r3, [r7, #4]
 800749e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80074a0:	687b      	ldr	r3, [r7, #4]
 80074a2:	681b      	ldr	r3, [r3, #0]
 80074a4:	430a      	orrs	r2, r1
 80074a6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80074a8:	687b      	ldr	r3, [r7, #4]
 80074aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80074ac:	2204      	movs	r2, #4
 80074ae:	4013      	ands	r3, r2
 80074b0:	d00b      	beq.n	80074ca <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80074b2:	687b      	ldr	r3, [r7, #4]
 80074b4:	681b      	ldr	r3, [r3, #0]
 80074b6:	685b      	ldr	r3, [r3, #4]
 80074b8:	4a3b      	ldr	r2, [pc, #236]	; (80075a8 <UART_AdvFeatureConfig+0x14c>)
 80074ba:	4013      	ands	r3, r2
 80074bc:	0019      	movs	r1, r3
 80074be:	687b      	ldr	r3, [r7, #4]
 80074c0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80074c2:	687b      	ldr	r3, [r7, #4]
 80074c4:	681b      	ldr	r3, [r3, #0]
 80074c6:	430a      	orrs	r2, r1
 80074c8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80074ca:	687b      	ldr	r3, [r7, #4]
 80074cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80074ce:	2208      	movs	r2, #8
 80074d0:	4013      	ands	r3, r2
 80074d2:	d00b      	beq.n	80074ec <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80074d4:	687b      	ldr	r3, [r7, #4]
 80074d6:	681b      	ldr	r3, [r3, #0]
 80074d8:	685b      	ldr	r3, [r3, #4]
 80074da:	4a34      	ldr	r2, [pc, #208]	; (80075ac <UART_AdvFeatureConfig+0x150>)
 80074dc:	4013      	ands	r3, r2
 80074de:	0019      	movs	r1, r3
 80074e0:	687b      	ldr	r3, [r7, #4]
 80074e2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80074e4:	687b      	ldr	r3, [r7, #4]
 80074e6:	681b      	ldr	r3, [r3, #0]
 80074e8:	430a      	orrs	r2, r1
 80074ea:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80074ec:	687b      	ldr	r3, [r7, #4]
 80074ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80074f0:	2210      	movs	r2, #16
 80074f2:	4013      	ands	r3, r2
 80074f4:	d00b      	beq.n	800750e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80074f6:	687b      	ldr	r3, [r7, #4]
 80074f8:	681b      	ldr	r3, [r3, #0]
 80074fa:	689b      	ldr	r3, [r3, #8]
 80074fc:	4a2c      	ldr	r2, [pc, #176]	; (80075b0 <UART_AdvFeatureConfig+0x154>)
 80074fe:	4013      	ands	r3, r2
 8007500:	0019      	movs	r1, r3
 8007502:	687b      	ldr	r3, [r7, #4]
 8007504:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007506:	687b      	ldr	r3, [r7, #4]
 8007508:	681b      	ldr	r3, [r3, #0]
 800750a:	430a      	orrs	r2, r1
 800750c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800750e:	687b      	ldr	r3, [r7, #4]
 8007510:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007512:	2220      	movs	r2, #32
 8007514:	4013      	ands	r3, r2
 8007516:	d00b      	beq.n	8007530 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8007518:	687b      	ldr	r3, [r7, #4]
 800751a:	681b      	ldr	r3, [r3, #0]
 800751c:	689b      	ldr	r3, [r3, #8]
 800751e:	4a25      	ldr	r2, [pc, #148]	; (80075b4 <UART_AdvFeatureConfig+0x158>)
 8007520:	4013      	ands	r3, r2
 8007522:	0019      	movs	r1, r3
 8007524:	687b      	ldr	r3, [r7, #4]
 8007526:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007528:	687b      	ldr	r3, [r7, #4]
 800752a:	681b      	ldr	r3, [r3, #0]
 800752c:	430a      	orrs	r2, r1
 800752e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8007530:	687b      	ldr	r3, [r7, #4]
 8007532:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007534:	2240      	movs	r2, #64	; 0x40
 8007536:	4013      	ands	r3, r2
 8007538:	d01d      	beq.n	8007576 <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800753a:	687b      	ldr	r3, [r7, #4]
 800753c:	681b      	ldr	r3, [r3, #0]
 800753e:	685b      	ldr	r3, [r3, #4]
 8007540:	4a1d      	ldr	r2, [pc, #116]	; (80075b8 <UART_AdvFeatureConfig+0x15c>)
 8007542:	4013      	ands	r3, r2
 8007544:	0019      	movs	r1, r3
 8007546:	687b      	ldr	r3, [r7, #4]
 8007548:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800754a:	687b      	ldr	r3, [r7, #4]
 800754c:	681b      	ldr	r3, [r3, #0]
 800754e:	430a      	orrs	r2, r1
 8007550:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8007552:	687b      	ldr	r3, [r7, #4]
 8007554:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007556:	2380      	movs	r3, #128	; 0x80
 8007558:	035b      	lsls	r3, r3, #13
 800755a:	429a      	cmp	r2, r3
 800755c:	d10b      	bne.n	8007576 <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800755e:	687b      	ldr	r3, [r7, #4]
 8007560:	681b      	ldr	r3, [r3, #0]
 8007562:	685b      	ldr	r3, [r3, #4]
 8007564:	4a15      	ldr	r2, [pc, #84]	; (80075bc <UART_AdvFeatureConfig+0x160>)
 8007566:	4013      	ands	r3, r2
 8007568:	0019      	movs	r1, r3
 800756a:	687b      	ldr	r3, [r7, #4]
 800756c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800756e:	687b      	ldr	r3, [r7, #4]
 8007570:	681b      	ldr	r3, [r3, #0]
 8007572:	430a      	orrs	r2, r1
 8007574:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8007576:	687b      	ldr	r3, [r7, #4]
 8007578:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800757a:	2280      	movs	r2, #128	; 0x80
 800757c:	4013      	ands	r3, r2
 800757e:	d00b      	beq.n	8007598 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8007580:	687b      	ldr	r3, [r7, #4]
 8007582:	681b      	ldr	r3, [r3, #0]
 8007584:	685b      	ldr	r3, [r3, #4]
 8007586:	4a0e      	ldr	r2, [pc, #56]	; (80075c0 <UART_AdvFeatureConfig+0x164>)
 8007588:	4013      	ands	r3, r2
 800758a:	0019      	movs	r1, r3
 800758c:	687b      	ldr	r3, [r7, #4]
 800758e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8007590:	687b      	ldr	r3, [r7, #4]
 8007592:	681b      	ldr	r3, [r3, #0]
 8007594:	430a      	orrs	r2, r1
 8007596:	605a      	str	r2, [r3, #4]
  }
}
 8007598:	46c0      	nop			; (mov r8, r8)
 800759a:	46bd      	mov	sp, r7
 800759c:	b002      	add	sp, #8
 800759e:	bd80      	pop	{r7, pc}
 80075a0:	fffdffff 	.word	0xfffdffff
 80075a4:	fffeffff 	.word	0xfffeffff
 80075a8:	fffbffff 	.word	0xfffbffff
 80075ac:	ffff7fff 	.word	0xffff7fff
 80075b0:	ffffefff 	.word	0xffffefff
 80075b4:	ffffdfff 	.word	0xffffdfff
 80075b8:	ffefffff 	.word	0xffefffff
 80075bc:	ff9fffff 	.word	0xff9fffff
 80075c0:	fff7ffff 	.word	0xfff7ffff

080075c4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80075c4:	b580      	push	{r7, lr}
 80075c6:	b086      	sub	sp, #24
 80075c8:	af02      	add	r7, sp, #8
 80075ca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80075cc:	687b      	ldr	r3, [r7, #4]
 80075ce:	2200      	movs	r2, #0
 80075d0:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 80075d2:	f7fc feb9 	bl	8004348 <HAL_GetTick>
 80075d6:	0003      	movs	r3, r0
 80075d8:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80075da:	687b      	ldr	r3, [r7, #4]
 80075dc:	681b      	ldr	r3, [r3, #0]
 80075de:	681b      	ldr	r3, [r3, #0]
 80075e0:	2208      	movs	r2, #8
 80075e2:	4013      	ands	r3, r2
 80075e4:	2b08      	cmp	r3, #8
 80075e6:	d10d      	bne.n	8007604 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80075e8:	68fa      	ldr	r2, [r7, #12]
 80075ea:	2380      	movs	r3, #128	; 0x80
 80075ec:	0399      	lsls	r1, r3, #14
 80075ee:	6878      	ldr	r0, [r7, #4]
 80075f0:	4b16      	ldr	r3, [pc, #88]	; (800764c <UART_CheckIdleState+0x88>)
 80075f2:	9300      	str	r3, [sp, #0]
 80075f4:	0013      	movs	r3, r2
 80075f6:	2200      	movs	r2, #0
 80075f8:	f000 f82a 	bl	8007650 <UART_WaitOnFlagUntilTimeout>
 80075fc:	1e03      	subs	r3, r0, #0
 80075fe:	d001      	beq.n	8007604 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007600:	2303      	movs	r3, #3
 8007602:	e01f      	b.n	8007644 <UART_CheckIdleState+0x80>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8007604:	687b      	ldr	r3, [r7, #4]
 8007606:	681b      	ldr	r3, [r3, #0]
 8007608:	681b      	ldr	r3, [r3, #0]
 800760a:	2204      	movs	r2, #4
 800760c:	4013      	ands	r3, r2
 800760e:	2b04      	cmp	r3, #4
 8007610:	d10d      	bne.n	800762e <UART_CheckIdleState+0x6a>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007612:	68fa      	ldr	r2, [r7, #12]
 8007614:	2380      	movs	r3, #128	; 0x80
 8007616:	03d9      	lsls	r1, r3, #15
 8007618:	6878      	ldr	r0, [r7, #4]
 800761a:	4b0c      	ldr	r3, [pc, #48]	; (800764c <UART_CheckIdleState+0x88>)
 800761c:	9300      	str	r3, [sp, #0]
 800761e:	0013      	movs	r3, r2
 8007620:	2200      	movs	r2, #0
 8007622:	f000 f815 	bl	8007650 <UART_WaitOnFlagUntilTimeout>
 8007626:	1e03      	subs	r3, r0, #0
 8007628:	d001      	beq.n	800762e <UART_CheckIdleState+0x6a>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800762a:	2303      	movs	r3, #3
 800762c:	e00a      	b.n	8007644 <UART_CheckIdleState+0x80>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800762e:	687b      	ldr	r3, [r7, #4]
 8007630:	2220      	movs	r2, #32
 8007632:	675a      	str	r2, [r3, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 8007634:	687b      	ldr	r3, [r7, #4]
 8007636:	2220      	movs	r2, #32
 8007638:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UNLOCK(huart);
 800763a:	687b      	ldr	r3, [r7, #4]
 800763c:	2270      	movs	r2, #112	; 0x70
 800763e:	2100      	movs	r1, #0
 8007640:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8007642:	2300      	movs	r3, #0
}
 8007644:	0018      	movs	r0, r3
 8007646:	46bd      	mov	sp, r7
 8007648:	b004      	add	sp, #16
 800764a:	bd80      	pop	{r7, pc}
 800764c:	01ffffff 	.word	0x01ffffff

08007650 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8007650:	b580      	push	{r7, lr}
 8007652:	b084      	sub	sp, #16
 8007654:	af00      	add	r7, sp, #0
 8007656:	60f8      	str	r0, [r7, #12]
 8007658:	60b9      	str	r1, [r7, #8]
 800765a:	603b      	str	r3, [r7, #0]
 800765c:	1dfb      	adds	r3, r7, #7
 800765e:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007660:	e05d      	b.n	800771e <UART_WaitOnFlagUntilTimeout+0xce>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007662:	69bb      	ldr	r3, [r7, #24]
 8007664:	3301      	adds	r3, #1
 8007666:	d05a      	beq.n	800771e <UART_WaitOnFlagUntilTimeout+0xce>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007668:	f7fc fe6e 	bl	8004348 <HAL_GetTick>
 800766c:	0002      	movs	r2, r0
 800766e:	683b      	ldr	r3, [r7, #0]
 8007670:	1ad3      	subs	r3, r2, r3
 8007672:	69ba      	ldr	r2, [r7, #24]
 8007674:	429a      	cmp	r2, r3
 8007676:	d302      	bcc.n	800767e <UART_WaitOnFlagUntilTimeout+0x2e>
 8007678:	69bb      	ldr	r3, [r7, #24]
 800767a:	2b00      	cmp	r3, #0
 800767c:	d11b      	bne.n	80076b6 <UART_WaitOnFlagUntilTimeout+0x66>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800767e:	68fb      	ldr	r3, [r7, #12]
 8007680:	681b      	ldr	r3, [r3, #0]
 8007682:	681a      	ldr	r2, [r3, #0]
 8007684:	68fb      	ldr	r3, [r7, #12]
 8007686:	681b      	ldr	r3, [r3, #0]
 8007688:	492f      	ldr	r1, [pc, #188]	; (8007748 <UART_WaitOnFlagUntilTimeout+0xf8>)
 800768a:	400a      	ands	r2, r1
 800768c:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800768e:	68fb      	ldr	r3, [r7, #12]
 8007690:	681b      	ldr	r3, [r3, #0]
 8007692:	689a      	ldr	r2, [r3, #8]
 8007694:	68fb      	ldr	r3, [r7, #12]
 8007696:	681b      	ldr	r3, [r3, #0]
 8007698:	2101      	movs	r1, #1
 800769a:	438a      	bics	r2, r1
 800769c:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 800769e:	68fb      	ldr	r3, [r7, #12]
 80076a0:	2220      	movs	r2, #32
 80076a2:	675a      	str	r2, [r3, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 80076a4:	68fb      	ldr	r3, [r7, #12]
 80076a6:	2220      	movs	r2, #32
 80076a8:	679a      	str	r2, [r3, #120]	; 0x78

        __HAL_UNLOCK(huart);
 80076aa:	68fb      	ldr	r3, [r7, #12]
 80076ac:	2270      	movs	r2, #112	; 0x70
 80076ae:	2100      	movs	r1, #0
 80076b0:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 80076b2:	2303      	movs	r3, #3
 80076b4:	e043      	b.n	800773e <UART_WaitOnFlagUntilTimeout+0xee>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80076b6:	68fb      	ldr	r3, [r7, #12]
 80076b8:	681b      	ldr	r3, [r3, #0]
 80076ba:	681b      	ldr	r3, [r3, #0]
 80076bc:	2204      	movs	r2, #4
 80076be:	4013      	ands	r3, r2
 80076c0:	d02d      	beq.n	800771e <UART_WaitOnFlagUntilTimeout+0xce>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80076c2:	68fb      	ldr	r3, [r7, #12]
 80076c4:	681b      	ldr	r3, [r3, #0]
 80076c6:	69da      	ldr	r2, [r3, #28]
 80076c8:	2380      	movs	r3, #128	; 0x80
 80076ca:	011b      	lsls	r3, r3, #4
 80076cc:	401a      	ands	r2, r3
 80076ce:	2380      	movs	r3, #128	; 0x80
 80076d0:	011b      	lsls	r3, r3, #4
 80076d2:	429a      	cmp	r2, r3
 80076d4:	d123      	bne.n	800771e <UART_WaitOnFlagUntilTimeout+0xce>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80076d6:	68fb      	ldr	r3, [r7, #12]
 80076d8:	681b      	ldr	r3, [r3, #0]
 80076da:	2280      	movs	r2, #128	; 0x80
 80076dc:	0112      	lsls	r2, r2, #4
 80076de:	621a      	str	r2, [r3, #32]
          
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80076e0:	68fb      	ldr	r3, [r7, #12]
 80076e2:	681b      	ldr	r3, [r3, #0]
 80076e4:	681a      	ldr	r2, [r3, #0]
 80076e6:	68fb      	ldr	r3, [r7, #12]
 80076e8:	681b      	ldr	r3, [r3, #0]
 80076ea:	4917      	ldr	r1, [pc, #92]	; (8007748 <UART_WaitOnFlagUntilTimeout+0xf8>)
 80076ec:	400a      	ands	r2, r1
 80076ee:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80076f0:	68fb      	ldr	r3, [r7, #12]
 80076f2:	681b      	ldr	r3, [r3, #0]
 80076f4:	689a      	ldr	r2, [r3, #8]
 80076f6:	68fb      	ldr	r3, [r7, #12]
 80076f8:	681b      	ldr	r3, [r3, #0]
 80076fa:	2101      	movs	r1, #1
 80076fc:	438a      	bics	r2, r1
 80076fe:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8007700:	68fb      	ldr	r3, [r7, #12]
 8007702:	2220      	movs	r2, #32
 8007704:	675a      	str	r2, [r3, #116]	; 0x74
          huart->RxState = HAL_UART_STATE_READY;
 8007706:	68fb      	ldr	r3, [r7, #12]
 8007708:	2220      	movs	r2, #32
 800770a:	679a      	str	r2, [r3, #120]	; 0x78
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800770c:	68fb      	ldr	r3, [r7, #12]
 800770e:	2220      	movs	r2, #32
 8007710:	67da      	str	r2, [r3, #124]	; 0x7c
          
          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007712:	68fb      	ldr	r3, [r7, #12]
 8007714:	2270      	movs	r2, #112	; 0x70
 8007716:	2100      	movs	r1, #0
 8007718:	5499      	strb	r1, [r3, r2]
          
          return HAL_TIMEOUT;
 800771a:	2303      	movs	r3, #3
 800771c:	e00f      	b.n	800773e <UART_WaitOnFlagUntilTimeout+0xee>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800771e:	68fb      	ldr	r3, [r7, #12]
 8007720:	681b      	ldr	r3, [r3, #0]
 8007722:	69db      	ldr	r3, [r3, #28]
 8007724:	68ba      	ldr	r2, [r7, #8]
 8007726:	4013      	ands	r3, r2
 8007728:	68ba      	ldr	r2, [r7, #8]
 800772a:	1ad3      	subs	r3, r2, r3
 800772c:	425a      	negs	r2, r3
 800772e:	4153      	adcs	r3, r2
 8007730:	b2db      	uxtb	r3, r3
 8007732:	001a      	movs	r2, r3
 8007734:	1dfb      	adds	r3, r7, #7
 8007736:	781b      	ldrb	r3, [r3, #0]
 8007738:	429a      	cmp	r2, r3
 800773a:	d092      	beq.n	8007662 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800773c:	2300      	movs	r3, #0
}
 800773e:	0018      	movs	r0, r3
 8007740:	46bd      	mov	sp, r7
 8007742:	b004      	add	sp, #16
 8007744:	bd80      	pop	{r7, pc}
 8007746:	46c0      	nop			; (mov r8, r8)
 8007748:	fffffe5f 	.word	0xfffffe5f

0800774c <__libc_init_array>:
 800774c:	b570      	push	{r4, r5, r6, lr}
 800774e:	2600      	movs	r6, #0
 8007750:	4d0c      	ldr	r5, [pc, #48]	; (8007784 <__libc_init_array+0x38>)
 8007752:	4c0d      	ldr	r4, [pc, #52]	; (8007788 <__libc_init_array+0x3c>)
 8007754:	1b64      	subs	r4, r4, r5
 8007756:	10a4      	asrs	r4, r4, #2
 8007758:	42a6      	cmp	r6, r4
 800775a:	d109      	bne.n	8007770 <__libc_init_array+0x24>
 800775c:	2600      	movs	r6, #0
 800775e:	f000 f879 	bl	8007854 <_init>
 8007762:	4d0a      	ldr	r5, [pc, #40]	; (800778c <__libc_init_array+0x40>)
 8007764:	4c0a      	ldr	r4, [pc, #40]	; (8007790 <__libc_init_array+0x44>)
 8007766:	1b64      	subs	r4, r4, r5
 8007768:	10a4      	asrs	r4, r4, #2
 800776a:	42a6      	cmp	r6, r4
 800776c:	d105      	bne.n	800777a <__libc_init_array+0x2e>
 800776e:	bd70      	pop	{r4, r5, r6, pc}
 8007770:	00b3      	lsls	r3, r6, #2
 8007772:	58eb      	ldr	r3, [r5, r3]
 8007774:	4798      	blx	r3
 8007776:	3601      	adds	r6, #1
 8007778:	e7ee      	b.n	8007758 <__libc_init_array+0xc>
 800777a:	00b3      	lsls	r3, r6, #2
 800777c:	58eb      	ldr	r3, [r5, r3]
 800777e:	4798      	blx	r3
 8007780:	3601      	adds	r6, #1
 8007782:	e7f2      	b.n	800776a <__libc_init_array+0x1e>
 8007784:	08007fb4 	.word	0x08007fb4
 8007788:	08007fb4 	.word	0x08007fb4
 800778c:	08007fb4 	.word	0x08007fb4
 8007790:	08007fb8 	.word	0x08007fb8

08007794 <__itoa>:
 8007794:	1e93      	subs	r3, r2, #2
 8007796:	b510      	push	{r4, lr}
 8007798:	000c      	movs	r4, r1
 800779a:	2b22      	cmp	r3, #34	; 0x22
 800779c:	d904      	bls.n	80077a8 <__itoa+0x14>
 800779e:	2300      	movs	r3, #0
 80077a0:	001c      	movs	r4, r3
 80077a2:	700b      	strb	r3, [r1, #0]
 80077a4:	0020      	movs	r0, r4
 80077a6:	bd10      	pop	{r4, pc}
 80077a8:	2a0a      	cmp	r2, #10
 80077aa:	d109      	bne.n	80077c0 <__itoa+0x2c>
 80077ac:	2800      	cmp	r0, #0
 80077ae:	da07      	bge.n	80077c0 <__itoa+0x2c>
 80077b0:	232d      	movs	r3, #45	; 0x2d
 80077b2:	700b      	strb	r3, [r1, #0]
 80077b4:	2101      	movs	r1, #1
 80077b6:	4240      	negs	r0, r0
 80077b8:	1861      	adds	r1, r4, r1
 80077ba:	f000 f819 	bl	80077f0 <__utoa>
 80077be:	e7f1      	b.n	80077a4 <__itoa+0x10>
 80077c0:	2100      	movs	r1, #0
 80077c2:	e7f9      	b.n	80077b8 <__itoa+0x24>

080077c4 <itoa>:
 80077c4:	b510      	push	{r4, lr}
 80077c6:	f7ff ffe5 	bl	8007794 <__itoa>
 80077ca:	bd10      	pop	{r4, pc}

080077cc <memcpy>:
 80077cc:	2300      	movs	r3, #0
 80077ce:	b510      	push	{r4, lr}
 80077d0:	429a      	cmp	r2, r3
 80077d2:	d100      	bne.n	80077d6 <memcpy+0xa>
 80077d4:	bd10      	pop	{r4, pc}
 80077d6:	5ccc      	ldrb	r4, [r1, r3]
 80077d8:	54c4      	strb	r4, [r0, r3]
 80077da:	3301      	adds	r3, #1
 80077dc:	e7f8      	b.n	80077d0 <memcpy+0x4>

080077de <memset>:
 80077de:	0003      	movs	r3, r0
 80077e0:	1812      	adds	r2, r2, r0
 80077e2:	4293      	cmp	r3, r2
 80077e4:	d100      	bne.n	80077e8 <memset+0xa>
 80077e6:	4770      	bx	lr
 80077e8:	7019      	strb	r1, [r3, #0]
 80077ea:	3301      	adds	r3, #1
 80077ec:	e7f9      	b.n	80077e2 <memset+0x4>
	...

080077f0 <__utoa>:
 80077f0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80077f2:	0017      	movs	r7, r2
 80077f4:	b08d      	sub	sp, #52	; 0x34
 80077f6:	2225      	movs	r2, #37	; 0x25
 80077f8:	0006      	movs	r6, r0
 80077fa:	000d      	movs	r5, r1
 80077fc:	a802      	add	r0, sp, #8
 80077fe:	4914      	ldr	r1, [pc, #80]	; (8007850 <__utoa+0x60>)
 8007800:	f7ff ffe4 	bl	80077cc <memcpy>
 8007804:	aa02      	add	r2, sp, #8
 8007806:	1ebb      	subs	r3, r7, #2
 8007808:	2400      	movs	r4, #0
 800780a:	9201      	str	r2, [sp, #4]
 800780c:	2b22      	cmp	r3, #34	; 0x22
 800780e:	d905      	bls.n	800781c <__utoa+0x2c>
 8007810:	702c      	strb	r4, [r5, #0]
 8007812:	0025      	movs	r5, r4
 8007814:	0028      	movs	r0, r5
 8007816:	b00d      	add	sp, #52	; 0x34
 8007818:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800781a:	0014      	movs	r4, r2
 800781c:	0030      	movs	r0, r6
 800781e:	0039      	movs	r1, r7
 8007820:	f7f8 fcf8 	bl	8000214 <__aeabi_uidivmod>
 8007824:	4684      	mov	ip, r0
 8007826:	9801      	ldr	r0, [sp, #4]
 8007828:	1c62      	adds	r2, r4, #1
 800782a:	18ab      	adds	r3, r5, r2
 800782c:	5c41      	ldrb	r1, [r0, r1]
 800782e:	1e5e      	subs	r6, r3, #1
 8007830:	7031      	strb	r1, [r6, #0]
 8007832:	4666      	mov	r6, ip
 8007834:	2e00      	cmp	r6, #0
 8007836:	d1f0      	bne.n	800781a <__utoa+0x2a>
 8007838:	701e      	strb	r6, [r3, #0]
 800783a:	002b      	movs	r3, r5
 800783c:	1b5a      	subs	r2, r3, r5
 800783e:	4294      	cmp	r4, r2
 8007840:	dde8      	ble.n	8007814 <__utoa+0x24>
 8007842:	781a      	ldrb	r2, [r3, #0]
 8007844:	5d29      	ldrb	r1, [r5, r4]
 8007846:	7019      	strb	r1, [r3, #0]
 8007848:	552a      	strb	r2, [r5, r4]
 800784a:	3301      	adds	r3, #1
 800784c:	3c01      	subs	r4, #1
 800784e:	e7f5      	b.n	800783c <__utoa+0x4c>
 8007850:	08007f8c 	.word	0x08007f8c

08007854 <_init>:
 8007854:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007856:	46c0      	nop			; (mov r8, r8)
 8007858:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800785a:	bc08      	pop	{r3}
 800785c:	469e      	mov	lr, r3
 800785e:	4770      	bx	lr

08007860 <_fini>:
 8007860:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007862:	46c0      	nop			; (mov r8, r8)
 8007864:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007866:	bc08      	pop	{r3}
 8007868:	469e      	mov	lr, r3
 800786a:	4770      	bx	lr
